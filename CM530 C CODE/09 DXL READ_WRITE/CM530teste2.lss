
CM530teste2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a54  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000006c  20000000  08008b88  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000204  2000006c  08008bf4  0001006c  2**2
                  ALLOC
  4 ._usrstack    00000100  20000270  08008df8  0001006c  2**0
                  ALLOC
  5 .comment      000002c0  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  00010330  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00002437  00000000  00000000  00010620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00009441  00000000  00000000  00012a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e97  00000000  00000000  0001be98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001f7b  00000000  00000000  0001dd2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b2c  00000000  00000000  0001fcac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000034ef  00000000  00000000  000217d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002f0c  00000000  00000000  00024cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000031  00000000  00000000  00027bd3  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000248  00000000  00000000  00027c08  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	.word	0x20010000
 8003004:	08008b21 	.word	0x08008b21
 8003008:	0800634d 	.word	0x0800634d
 800300c:	08006351 	.word	0x08006351
 8003010:	08006355 	.word	0x08006355
 8003014:	08006359 	.word	0x08006359
 8003018:	0800635d 	.word	0x0800635d
	...
 800302c:	08006365 	.word	0x08006365
 8003030:	08006361 	.word	0x08006361
 8003034:	00000000 	.word	0x00000000
 8003038:	08006369 	.word	0x08006369
 800303c:	0800646d 	.word	0x0800646d
 8003040:	0800636d 	.word	0x0800636d
 8003044:	08006371 	.word	0x08006371
 8003048:	08006375 	.word	0x08006375
 800304c:	08006379 	.word	0x08006379
 8003050:	0800637d 	.word	0x0800637d
 8003054:	08006381 	.word	0x08006381
 8003058:	08006385 	.word	0x08006385
 800305c:	08006389 	.word	0x08006389
 8003060:	0800638d 	.word	0x0800638d
 8003064:	08006391 	.word	0x08006391
 8003068:	08006395 	.word	0x08006395
	...
 8003088:	080063b5 	.word	0x080063b5
 800308c:	080063b9 	.word	0x080063b9
 8003090:	080063bd 	.word	0x080063bd
 8003094:	080063c1 	.word	0x080063c1
 8003098:	080063c5 	.word	0x080063c5
 800309c:	080063c9 	.word	0x080063c9
 80030a0:	080063cd 	.word	0x080063cd
 80030a4:	080063d1 	.word	0x080063d1
 80030a8:	080063d5 	.word	0x080063d5
 80030ac:	080063d9 	.word	0x080063d9
 80030b0:	08006461 	.word	0x08006461
 80030b4:	080063dd 	.word	0x080063dd
 80030b8:	080063e1 	.word	0x080063e1
 80030bc:	080063e5 	.word	0x080063e5
 80030c0:	080063e9 	.word	0x080063e9
 80030c4:	080063ed 	.word	0x080063ed
 80030c8:	080063f1 	.word	0x080063f1
 80030cc:	080063f5 	.word	0x080063f5
 80030d0:	080063f9 	.word	0x080063f9
 80030d4:	08006455 	.word	0x08006455
 80030d8:	080063fd 	.word	0x080063fd
 80030dc:	08006401 	.word	0x08006401
 80030e0:	08006405 	.word	0x08006405
 80030e4:	08006409 	.word	0x08006409
 80030e8:	0800640d 	.word	0x0800640d
 80030ec:	08006411 	.word	0x08006411
 80030f0:	08006415 	.word	0x08006415
 80030f4:	08006419 	.word	0x08006419
 80030f8:	0800641d 	.word	0x0800641d
 80030fc:	08006421 	.word	0x08006421
 8003100:	08006425 	.word	0x08006425
 8003104:	08006429 	.word	0x08006429
 8003108:	0800642d 	.word	0x0800642d
 800310c:	08006431 	.word	0x08006431
 8003110:	08006435 	.word	0x08006435
 8003114:	08006439 	.word	0x08006439
 8003118:	0800643d 	.word	0x0800643d
 800311c:	08006441 	.word	0x08006441
 8003120:	08006445 	.word	0x08006445
 8003124:	08006449 	.word	0x08006449
 8003128:	0800644d 	.word	0x0800644d
 800312c:	08006451 	.word	0x08006451
 8003130:	0000f85f 	.word	0x0000f85f

Disassembly of section .text:

08003134 <ClearBuffer256>:
	USART_Cmd(USART1, DISABLE);
}

void ClearBuffer256(void)
{
	gbRxBufferReadPointer = gbRxBufferWritePointer = 0;
 8003134:	4a03      	ldr	r2, [pc, #12]	(8003144 <ClearBuffer256+0x10>)
 8003136:	2300      	movs	r3, #0
 8003138:	7013      	strb	r3, [r2, #0]
 800313a:	7813      	ldrb	r3, [r2, #0]
 800313c:	4a02      	ldr	r2, [pc, #8]	(8003148 <ClearBuffer256+0x14>)
 800313e:	7013      	strb	r3, [r2, #0]
}
 8003140:	4770      	bx	lr
 8003142:	46c0      	nop			(mov r8, r8)
 8003144:	20000170 	.word	0x20000170
 8003148:	20000171 	.word	0x20000171

0800314c <CheckNewArrive>:

byte CheckNewArrive(void)
{
	if(gbRxBufferReadPointer != gbRxBufferWritePointer)
 800314c:	4b03      	ldr	r3, [pc, #12]	(800315c <CheckNewArrive+0x10>)
 800314e:	7818      	ldrb	r0, [r3, #0]
 8003150:	4b03      	ldr	r3, [pc, #12]	(8003160 <CheckNewArrive+0x14>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	bf18      	it	ne
 8003158:	2001      	movne	r0, #1
		return 1;
	else
		return 0;
}
 800315a:	4770      	bx	lr
 800315c:	20000171 	.word	0x20000171
 8003160:	20000170 	.word	0x20000170

08003164 <RxDByte_DXL>:
{
	byte bTemp;

	while(1)
	{
		if(gbRxBufferReadPointer != gbRxBufferWritePointer) break;
 8003164:	f8df c020 	ldr.w	ip, [pc, #32]	; 8003188 <RxDByte_DXL+0x24>
 8003168:	4808      	ldr	r0, [pc, #32]	(800318c <RxDByte_DXL+0x28>)
 800316a:	f89c 2000 	ldrb.w	r2, [ip]
 800316e:	7803      	ldrb	r3, [r0, #0]
 8003170:	4905      	ldr	r1, [pc, #20]	(8003188 <RxDByte_DXL+0x24>)
 8003172:	429a      	cmp	r2, r3
 8003174:	d0f9      	beq.n	800316a <RxDByte_DXL+0x6>
	}

	bTemp = gbpRxInterruptBuffer[gbRxBufferReadPointer];
 8003176:	780b      	ldrb	r3, [r1, #0]
 8003178:	4a05      	ldr	r2, [pc, #20]	(8003190 <RxDByte_DXL+0x2c>)
 800317a:	5cd0      	ldrb	r0, [r2, r3]
	gbRxBufferReadPointer++;
 800317c:	780b      	ldrb	r3, [r1, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	700b      	strb	r3, [r1, #0]

	return bTemp;
}
 8003184:	4770      	bx	lr
 8003186:	46c0      	nop			(mov r8, r8)
 8003188:	20000171 	.word	0x20000171
 800318c:	20000170 	.word	0x20000170
 8003190:	20000070 	.word	0x20000070

08003194 <__ISR_DELAY>:
	  SysTick_ITConfig(ENABLE);
}

void __ISR_DELAY(void)
{
	if (gwTimingDelay != 0x00)
 8003194:	4a03      	ldr	r2, [pc, #12]	(80031a4 <__ISR_DELAY+0x10>)
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	b113      	cbz	r3, 80031a0 <__ISR_DELAY+0xc>
		gwTimingDelay--;
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	4770      	bx	lr
 80031a2:	46c0      	nop			(mov r8, r8)
 80031a4:	20000174 	.word	0x20000174

080031a8 <StartDiscount>:
	SysTick_CounterCmd(SysTick_Counter_Clear);
}

void StartDiscount(s32 StartTime)
{
	gw1msCounter = StartTime;
 80031a8:	4b01      	ldr	r3, [pc, #4]	(80031b0 <StartDiscount+0x8>)
 80031aa:	6018      	str	r0, [r3, #0]
}
 80031ac:	4770      	bx	lr
 80031ae:	46c0      	nop			(mov r8, r8)
 80031b0:	20000178 	.word	0x20000178

080031b4 <CheckTimeOut>:
u8 CheckTimeOut(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	if(gw1msCounter == 0)
 80031b4:	4b03      	ldr	r3, [pc, #12]	(80031c4 <CheckTimeOut+0x10>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	f1d0 0001 	rsbs	r0, r0, #1	; 0x1
 80031bc:	bf38      	it	cc
 80031be:	2000      	movcc	r0, #0
		return 1;
	else
		return 0;
}
 80031c0:	4770      	bx	lr
 80031c2:	46c0      	nop			(mov r8, r8)
 80031c4:	20000178 	.word	0x20000178

080031c8 <mDelay>:
	if (gwTimingDelay != 0x00)
		gwTimingDelay--;
}

void mDelay(u32 nTime)
{
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4604      	mov	r4, r0
	/* Enable the SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Enable);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f004 fb8f 	bl	80078f0 <SysTick_CounterCmd>

	gwTimingDelay = nTime;
 80031d2:	4b07      	ldr	r3, [pc, #28]	(80031f0 <mDelay+0x28>)
 80031d4:	601c      	str	r4, [r3, #0]

	while(gwTimingDelay != 0);
 80031d6:	461a      	mov	r2, r3
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1fc      	bne.n	80031d8 <mDelay+0x10>

	/* Disable SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Disable);
 80031de:	f06f 0001 	mvn.w	r0, #1	; 0x1
 80031e2:	f004 fb85 	bl	80078f0 <SysTick_CounterCmd>
	/* Clear SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Clear);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f004 fb82 	bl	80078f0 <SysTick_CounterCmd>
}
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	46c0      	nop			(mov r8, r8)
 80031f0:	20000174 	.word	0x20000174

080031f4 <SysTick_Configuration>:
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
		gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
}

void SysTick_Configuration(void)
{
 80031f4:	b500      	push	{lr}
	  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	  SysTick_SetReload(9000);
 80031f6:	f242 3028 	movw	r0, #9000	; 0x2328
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
		gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
}

void SysTick_Configuration(void)
{
 80031fa:	b081      	sub	sp, #4
	  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	  SysTick_SetReload(9000);
 80031fc:	f004 fb72 	bl	80078e4 <SysTick_SetReload>

	  /* Enable SysTick interrupt */
	  SysTick_ITConfig(ENABLE);
 8003200:	2001      	movs	r0, #1
 8003202:	f004 fb8b 	bl	800791c <SysTick_ITConfig>
}
 8003206:	b001      	add	sp, #4
 8003208:	bd00      	pop	{pc}
 800320a:	46c0      	nop			(mov r8, r8)

0800320c <RxD0Interrupt>:
	}
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 800320c:	b530      	push	{r4, r5, lr}
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 800320e:	480a      	ldr	r0, [pc, #40]	(8003238 <RxD0Interrupt+0x2c>)
	}
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 8003210:	b081      	sub	sp, #4
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003212:	f240 5125 	movw	r1, #1317	; 0x525
 8003216:	f005 fb85 	bl	8008924 <USART_GetITStatus>
 800321a:	b150      	cbz	r0, 8003232 <RxD0Interrupt+0x26>
		gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
 800321c:	4d07      	ldr	r5, [pc, #28]	(800323c <RxD0Interrupt+0x30>)
 800321e:	4806      	ldr	r0, [pc, #24]	(8003238 <RxD0Interrupt+0x2c>)
 8003220:	782c      	ldrb	r4, [r5, #0]
 8003222:	f005 fb11 	bl	8008848 <USART_ReceiveData>
 8003226:	4b06      	ldr	r3, [pc, #24]	(8003240 <RxD0Interrupt+0x34>)
 8003228:	b2c0      	uxtb	r0, r0
 800322a:	5518      	strb	r0, [r3, r4]
 800322c:	3401      	adds	r4, #1
 800322e:	b2e4      	uxtb	r4, r4
 8003230:	702c      	strb	r4, [r5, #0]
}
 8003232:	b001      	add	sp, #4
 8003234:	bd30      	pop	{r4, r5, pc}
 8003236:	46c0      	nop			(mov r8, r8)
 8003238:	40013800 	.word	0x40013800
 800323c:	20000170 	.word	0x20000170
 8003240:	20000070 	.word	0x20000070

08003244 <TimerInterrupt_1ms>:
	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
}

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 8003244:	b500      	push	{lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 8003246:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
}

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 800324a:	b081      	sub	sp, #4
	if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 800324c:	2102      	movs	r1, #2
 800324e:	f005 f9d9 	bl	8008604 <TIM_GetITStatus>
 8003252:	b1c8      	cbz	r0, 8003288 <TimerInterrupt_1ms+0x44>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 8003254:	2102      	movs	r1, #2
 8003256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800325a:	f005 f9df 	bl	800861c <TIM_ClearITPendingBit>

		capture = TIM_GetCapture1(TIM2);
 800325e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003262:	f005 f9ab 	bl	80085bc <TIM_GetCapture1>
 8003266:	4b09      	ldr	r3, [pc, #36]	(800328c <TimerInterrupt_1ms+0x48>)
 8003268:	6018      	str	r0, [r3, #0]
		TIM_SetCompare1(TIM2, capture + CCR1_Val);
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	4b08      	ldr	r3, [pc, #32]	(8003290 <TimerInterrupt_1ms+0x4c>)
 800326e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	18c9      	adds	r1, r1, r3
 8003276:	b289      	uxth	r1, r1
 8003278:	f005 f95a 	bl	8008530 <TIM_SetCompare1>

		if(gw1msCounter > 0)
 800327c:	4a05      	ldr	r2, [pc, #20]	(8003294 <TimerInterrupt_1ms+0x50>)
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	b113      	cbz	r3, 8003288 <TimerInterrupt_1ms+0x44>
			gw1msCounter--;
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	6013      	str	r3, [r2, #0]
	}
}
 8003288:	b001      	add	sp, #4
 800328a:	bd00      	pop	{pc}
 800328c:	2000006c 	.word	0x2000006c
 8003290:	20000008 	.word	0x20000008
 8003294:	20000178 	.word	0x20000178

08003298 <Timer_Configuration>:
	USART_SendData(USART3,bTxdData);
	while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}

void Timer_Configuration(void)
{
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	b088      	sub	sp, #32
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800329c:	f10d 0516 	add.w	r5, sp, #22	; 0x16
 80032a0:	4628      	mov	r0, r5
	TIM_OCStructInit(&TIM_OCInitStructure);
 80032a2:	f10d 0606 	add.w	r6, sp, #6	; 0x6

	TIM_DeInit(TIM2);
 80032a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
void Timer_Configuration(void)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80032aa:	f004 fe57 	bl	8007f5c <TIM_TimeBaseStructInit>
	TIM_OCStructInit(&TIM_OCInitStructure);
 80032ae:	4630      	mov	r0, r6
 80032b0:	f004 fe60 	bl	8007f74 <TIM_OCStructInit>

	TIM_DeInit(TIM2);
 80032b4:	4620      	mov	r0, r4
 80032b6:	f005 f9b7 	bl	8008628 <TIM_DeInit>

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032be:	f8ad 301a 	strh.w	r3, [sp, #26]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80032c2:	4620      	mov	r0, r4

	TIM_DeInit(TIM2);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80032c4:	f04f 0300 	mov.w	r3, #0	; 0x0
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80032c8:	4629      	mov	r1, r5

	TIM_DeInit(TIM2);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80032ca:	f8ad 3016 	strh.w	r3, [sp, #22]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80032ce:	f8ad 301c 	strh.w	r3, [sp, #28]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80032d2:	f8ad 3018 	strh.w	r3, [sp, #24]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80032d6:	f004 fb49 	bl	800796c <TIM_TimeBaseInit>

	/* Prescaler configuration */
	TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);
 80032da:	2201      	movs	r2, #1
 80032dc:	4620      	mov	r0, r4
 80032de:	f240 21d2 	movw	r1, #722	; 0x2d2
 80032e2:	f004 ff35 	bl	8008150 <TIM_PrescalerConfig>

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 80032e6:	f04f 0300 	mov.w	r3, #0	; 0x0
 80032ea:	f8ad 3006 	strh.w	r3, [sp, #6]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
 80032ee:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80032f2:	f8ad 300e 	strh.w	r3, [sp, #14]
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	(8003324 <Timer_Configuration+0x8c>)

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80032f8:	4620      	mov	r0, r4

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80032fa:	881b      	ldrh	r3, [r3, #0]

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80032fc:	4631      	mov	r1, r6

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80032fe:	f8ad 300c 	strh.w	r3, [sp, #12]

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003302:	f004 fb5d 	bl	80079c0 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);
 8003306:	4620      	mov	r0, r4
 8003308:	2100      	movs	r1, #0
 800330a:	f004 ffb5 	bl	8008278 <TIM_OC1PreloadConfig>

	/* TIM IT enable */
	TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 800330e:	4620      	mov	r0, r4
 8003310:	2102      	movs	r1, #2
 8003312:	2201      	movs	r2, #1
 8003314:	f004 fe6c 	bl	8007ff0 <TIM_ITConfig>

	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8003318:	4620      	mov	r0, r4
 800331a:	2101      	movs	r1, #1
 800331c:	f004 fe4c 	bl	8007fb8 <TIM_Cmd>
}
 8003320:	b008      	add	sp, #32
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	20000008 	.word	0x20000008

08003328 <TxDByte_PC>:
		bTmp += 7;
	TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 8003328:	b500      	push	{lr}
	USART_SendData(USART3,bTxdData);
 800332a:	b281      	uxth	r1, r0
		bTmp += 7;
	TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 800332c:	b081      	sub	sp, #4
	USART_SendData(USART3,bTxdData);
 800332e:	4805      	ldr	r0, [pc, #20]	(8003344 <TxDByte_PC+0x1c>)
 8003330:	f005 fa86 	bl	8008840 <USART_SendData>
	while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
 8003334:	4803      	ldr	r0, [pc, #12]	(8003344 <TxDByte_PC+0x1c>)
 8003336:	2140      	movs	r1, #64
 8003338:	f005 fae8 	bl	800890c <USART_GetFlagStatus>
 800333c:	2800      	cmp	r0, #0
 800333e:	d0f9      	beq.n	8003334 <TxDByte_PC+0xc>
}
 8003340:	b001      	add	sp, #4
 8003342:	bd00      	pop	{pc}
 8003344:	40004800 	.word	0x40004800

08003348 <TxDByte16>:

void TxDByte16(byte bSentData)
{
	byte bTmp;

	bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 8003348:	0903      	lsrs	r3, r0, #4
	TxDByte16((wSentData >> 8) & 0xff);
	TxDByte16(wSentData & 0xff);
}

void TxDByte16(byte bSentData)
{
 800334a:	b510      	push	{r4, lr}
 800334c:	4604      	mov	r4, r0
	byte bTmp;

	bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 800334e:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (bTmp > '9')
 8003352:	2839      	cmp	r0, #57
		bTmp += 7;
 8003354:	bf88      	it	hi
 8003356:	3007      	addhi	r0, #7
	TxDByte_PC(bTmp);
 8003358:	f7ff ffe6 	bl	8003328 <TxDByte_PC>
	bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 800335c:	f004 030f 	and.w	r3, r4, #15	; 0xf
 8003360:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (bTmp > '9')
 8003364:	2839      	cmp	r0, #57
		bTmp += 7;
 8003366:	bf88      	it	hi
 8003368:	3007      	addhi	r0, #7
	TxDByte_PC(bTmp);
 800336a:	f7ff ffdd 	bl	8003328 <TxDByte_PC>
}
 800336e:	bd10      	pop	{r4, pc}

08003370 <TxDWord16>:
	while (*bData)
		TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
 8003370:	b510      	push	{r4, lr}
 8003372:	4604      	mov	r4, r0
	TxDByte16((wSentData >> 8) & 0xff);
	TxDByte16(wSentData & 0xff);
 8003374:	b2e4      	uxtb	r4, r4
		TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
	TxDByte16((wSentData >> 8) & 0xff);
 8003376:	0a00      	lsrs	r0, r0, #8
 8003378:	f7ff ffe6 	bl	8003348 <TxDByte16>
	TxDByte16(wSentData & 0xff);
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff ffe3 	bl	8003348 <TxDByte16>
}
 8003382:	bd10      	pop	{r4, pc}

08003384 <TxDString>:

	return bTemp;
}

void TxDString(byte *bData)
{
 8003384:	b530      	push	{r4, r5, lr}
 8003386:	4605      	mov	r5, r0
 8003388:	b081      	sub	sp, #4
 800338a:	2400      	movs	r4, #0
 800338c:	e001      	b.n	8003392 <TxDString+0xe>
	while (*bData)
		TxDByte_PC(*bData++);
 800338e:	f7ff ffcb 	bl	8003328 <TxDByte_PC>
	return bTemp;
}

void TxDString(byte *bData)
{
	while (*bData)
 8003392:	5d28      	ldrb	r0, [r5, r4]
 8003394:	3401      	adds	r4, #1
 8003396:	2800      	cmp	r0, #0
 8003398:	d1f9      	bne.n	800338e <TxDString+0xa>
		TxDByte_PC(*bData++);
}
 800339a:	b001      	add	sp, #4
 800339c:	bd30      	pop	{r4, r5, pc}
 800339e:	46c0      	nop			(mov r8, r8)

080033a0 <TxDByte_DXL>:
	else
		return 0;
}

void TxDByte_DXL(byte bTxdData)
{
 80033a0:	b510      	push	{r4, lr}
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80033a2:	2120      	movs	r1, #32
	else
		return 0;
}

void TxDByte_DXL(byte bTxdData)
{
 80033a4:	4604      	mov	r4, r0
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 80033a6:	480d      	ldr	r0, [pc, #52]	(80033dc <TxDByte_DXL+0x3c>)
 80033a8:	f003 fdb8 	bl	8006f1c <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable

	USART_SendData(USART1,bTxdData);
 80033ac:	b2a4      	uxth	r4, r4
}

void TxDByte_DXL(byte bTxdData)
{
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
	GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable
 80033ae:	480b      	ldr	r0, [pc, #44]	(80033dc <TxDByte_DXL+0x3c>)
 80033b0:	2110      	movs	r1, #16
 80033b2:	f003 fdb1 	bl	8006f18 <GPIO_SetBits>

	USART_SendData(USART1,bTxdData);
 80033b6:	480a      	ldr	r0, [pc, #40]	(80033e0 <TxDByte_DXL+0x40>)
 80033b8:	4621      	mov	r1, r4
 80033ba:	f005 fa41 	bl	8008840 <USART_SendData>
	while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 80033be:	4808      	ldr	r0, [pc, #32]	(80033e0 <TxDByte_DXL+0x40>)
 80033c0:	2140      	movs	r1, #64
 80033c2:	f005 faa3 	bl	800890c <USART_GetFlagStatus>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d0f9      	beq.n	80033be <TxDByte_DXL+0x1e>

	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80033ca:	2110      	movs	r1, #16
 80033cc:	4803      	ldr	r0, [pc, #12]	(80033dc <TxDByte_DXL+0x3c>)
 80033ce:	f003 fda5 	bl	8006f1c <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80033d2:	4802      	ldr	r0, [pc, #8]	(80033dc <TxDByte_DXL+0x3c>)
 80033d4:	2120      	movs	r1, #32
 80033d6:	f003 fd9f 	bl	8006f18 <GPIO_SetBits>
}
 80033da:	bd10      	pop	{r4, pc}
 80033dc:	40010c00 	.word	0x40010c00
 80033e0:	40013800 	.word	0x40013800

080033e4 <DisableUSART1>:
		/* Enable the USART3 */
		USART_Cmd(USART3, ENABLE);
	}
}
void DisableUSART1(void)
{
 80033e4:	b500      	push	{lr}
	USART_Cmd(USART1, DISABLE);
 80033e6:	4803      	ldr	r0, [pc, #12]	(80033f4 <DisableUSART1+0x10>)
		/* Enable the USART3 */
		USART_Cmd(USART3, ENABLE);
	}
}
void DisableUSART1(void)
{
 80033e8:	b081      	sub	sp, #4
	USART_Cmd(USART1, DISABLE);
 80033ea:	2100      	movs	r1, #0
 80033ec:	f005 f9ae 	bl	800874c <USART_Cmd>
}
 80033f0:	b001      	add	sp, #4
 80033f2:	bd00      	pop	{pc}
 80033f4:	40013800 	.word	0x40013800

080033f8 <USART_Configuration>:
{
	USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	4605      	mov	r5, r0

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 80033fe:	4668      	mov	r0, sp
{
	USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 8003400:	460c      	mov	r4, r1

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 8003402:	f005 f977 	bl	80086f4 <USART_StructInit>


	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003406:	f04f 0300 	mov.w	r3, #0	; 0x0
 800340a:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800340e:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003412:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003416:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800341a:	f04f 030c 	mov.w	r3, #12	; 0xc
void USART_Configuration(u8 PORT, u32 baudrate)
{

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 800341e:	466e      	mov	r6, sp


	USART_InitStructure.USART_BaudRate = baudrate;
 8003420:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003422:	f8ad 300a 	strh.w	r3, [sp, #10]


	if( PORT == USART_DXL )
 8003426:	b98d      	cbnz	r5, 800344c <USART_Configuration+0x54>
	{
		USART_DeInit(USART1);
 8003428:	4811      	ldr	r0, [pc, #68]	(8003470 <USART_Configuration+0x78>)
 800342a:	f005 faf7 	bl	8008a1c <USART_DeInit>
		mDelay(10);
 800342e:	200a      	movs	r0, #10
 8003430:	f7ff feca 	bl	80031c8 <mDelay>
		/* Configure the USART1 */
		USART_Init(USART1, &USART_InitStructure);
 8003434:	480e      	ldr	r0, [pc, #56]	(8003470 <USART_Configuration+0x78>)
 8003436:	4669      	mov	r1, sp
 8003438:	f005 faa2 	bl	8008980 <USART_Init>

		/* Enable USART1 Receive and Transmit interrupts */
		USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800343c:	480c      	ldr	r0, [pc, #48]	(8003470 <USART_Configuration+0x78>)
 800343e:	f240 5125 	movw	r1, #1317	; 0x525
 8003442:	2201      	movs	r2, #1
 8003444:	f005 f990 	bl	8008768 <USART_ITConfig>
		//USART_ITConfig(USART1, USART_IT_TC, ENABLE);

		/* Enable the USART1 */
		USART_Cmd(USART1, ENABLE);
 8003448:	4809      	ldr	r0, [pc, #36]	(8003470 <USART_Configuration+0x78>)
 800344a:	e00c      	b.n	8003466 <USART_Configuration+0x6e>
	}

	else if( PORT == USART_PC )
 800344c:	2d02      	cmp	r5, #2
 800344e:	d10d      	bne.n	800346c <USART_Configuration+0x74>
	{
		USART_DeInit(USART3);
 8003450:	4808      	ldr	r0, [pc, #32]	(8003474 <USART_Configuration+0x7c>)
 8003452:	f005 fae3 	bl	8008a1c <USART_DeInit>
		mDelay(10);
 8003456:	200a      	movs	r0, #10
 8003458:	f7ff feb6 	bl	80031c8 <mDelay>
		/* Configure the USART3 */
		USART_Init(USART3, &USART_InitStructure);
 800345c:	4805      	ldr	r0, [pc, #20]	(8003474 <USART_Configuration+0x7c>)
 800345e:	4669      	mov	r1, sp
 8003460:	f005 fa8e 	bl	8008980 <USART_Init>
		/* Enable USART3 Receive and Transmit interrupts */
		//USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
		//USART_ITConfig(USART3, USART_IT_TC, ENABLE);

		/* Enable the USART3 */
		USART_Cmd(USART3, ENABLE);
 8003464:	4803      	ldr	r0, [pc, #12]	(8003474 <USART_Configuration+0x7c>)
 8003466:	2101      	movs	r1, #1
 8003468:	f005 f970 	bl	800874c <USART_Cmd>
	}
}
 800346c:	b004      	add	sp, #16
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	40013800 	.word	0x40013800
 8003474:	40004800 	.word	0x40004800

08003478 <USART1_Configuration>:
	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}

void USART1_Configuration(u32 baudrate)
{
 8003478:	b500      	push	{lr}
 800347a:	4601      	mov	r1, r0
 800347c:	b081      	sub	sp, #4
	USART_Configuration(USART_DXL, baudrate);
 800347e:	2000      	movs	r0, #0
 8003480:	f7ff ffba 	bl	80033f8 <USART_Configuration>
}
 8003484:	b001      	add	sp, #4
 8003486:	bd00      	pop	{pc}

08003488 <GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	b082      	sub	sp, #8
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 800348c:	ad01      	add	r5, sp, #4

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800348e:	4c1e      	ldr	r4, [pc, #120]	(8003508 <GPIO_Configuration+0x80>)
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8003490:	4628      	mov	r0, r5
 8003492:	f003 fd25 	bl	8006ee0 <GPIO_StructInit>

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8003496:	f04f 0330 	mov.w	r3, #48	; 0x30
 800349a:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800349e:	2603      	movs	r6, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80034a0:	2310      	movs	r3, #16
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034a2:	4620      	mov	r0, r4
 80034a4:	4629      	mov	r1, r5
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80034a6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80034aa:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034ae:	f003 fcc3 	bl	8006e38 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 80034b2:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80034b6:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034ba:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80034bc:	2304      	movs	r3, #4
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034be:	4629      	mov	r1, r5
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80034c0:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034c4:	f003 fcb8 	bl	8006e38 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 80034c8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80034cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034d0:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80034d2:	2318      	movs	r3, #24
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034d4:	4629      	mov	r1, r5
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80034d6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80034da:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034de:	f003 fcab 	bl	8006e38 <GPIO_Init>

	GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 80034e2:	2004      	movs	r0, #4
 80034e4:	2101      	movs	r1, #1
 80034e6:	f003 fd41 	bl	8006f6c <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 80034ea:	2101      	movs	r1, #1
 80034ec:	4807      	ldr	r0, [pc, #28]	(800350c <GPIO_Configuration+0x84>)
 80034ee:	f003 fd3d 	bl	8006f6c <GPIO_PinRemapConfig>

	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80034f2:	4620      	mov	r0, r4
 80034f4:	2110      	movs	r1, #16
 80034f6:	f003 fd11 	bl	8006f1c <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80034fa:	4620      	mov	r0, r4
 80034fc:	2120      	movs	r1, #32
 80034fe:	f003 fd0b 	bl	8006f18 <GPIO_SetBits>
}
 8003502:	b002      	add	sp, #8
 8003504:	bd70      	pop	{r4, r5, r6, pc}
 8003506:	46c0      	nop			(mov r8, r8)
 8003508:	40010c00 	.word	0x40010c00
 800350c:	00300400 	.word	0x00300400

08003510 <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 8003510:	b570      	push	{r4, r5, r6, lr}
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8003512:	f44f 5140 	mov.w	r1, #12288	; 0x3000
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 8003516:	b082      	sub	sp, #8
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8003518:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800351c:	f003 fea0 	bl	8007260 <NVIC_SetVectorTable>
	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8003520:	ae01      	add	r6, sp, #4
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
	#endif

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8003522:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003526:	f003 fdfd 	bl	8007124 <NVIC_PriorityGroupConfig>

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800352a:	2500      	movs	r5, #0

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 800352c:	2325      	movs	r3, #37
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800352e:	2401      	movs	r4, #1
	NVIC_Init(&NVIC_InitStructure);
 8003530:	4630      	mov	r0, r6

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8003532:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003536:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800353a:	f88d 5006 	strb.w	r5, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800353e:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8003542:	f003 fdf9 	bl	8007138 <NVIC_Init>

	// Enable the TIM2 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 8003546:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8003548:	4630      	mov	r0, r6
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	// Enable the TIM2 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 800354a:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800354e:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003552:	f88d 5006 	strb.w	r5, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003556:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800355a:	f003 fded 	bl	8007138 <NVIC_Init>
}
 800355e:	b002      	add	sp, #8
 8003560:	bd70      	pop	{r4, r5, r6, pc}
 8003562:	46c0      	nop			(mov r8, r8)

08003564 <RCC_Configuration>:
	}

}

void RCC_Configuration(void)
{
 8003564:	b500      	push	{lr}
 8003566:	b081      	sub	sp, #4
	ErrorStatus HSEStartUpStatus;
	/* RCC system reset(for debug purpose) */
	RCC_DeInit();
 8003568:	f003 ffdc 	bl	8007524 <RCC_DeInit>

	/* Enable HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 800356c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003570:	f003 fff8 	bl	8007564 <RCC_HSEConfig>

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8003574:	f004 f810 	bl	8007598 <RCC_WaitForHSEStartUp>

	if(HSEStartUpStatus == SUCCESS)
 8003578:	2801      	cmp	r0, #1
 800357a:	d124      	bne.n	80035c6 <RCC_Configuration+0x62>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 800357c:	2010      	movs	r0, #16
 800357e:	f003 f9df 	bl	8006940 <FLASH_PrefetchBufferCmd>

		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 8003582:	2002      	movs	r0, #2
 8003584:	f003 f9c4 	bl	8006910 <FLASH_SetLatency>

		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8003588:	2000      	movs	r0, #0
 800358a:	f004 f84f 	bl	800762c <RCC_HCLKConfig>

		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 800358e:	2000      	movs	r0, #0
 8003590:	f004 f860 	bl	8007654 <RCC_PCLK2Config>

		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8003594:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003598:	f004 f852 	bl	8007640 <RCC_PCLK1Config>

		/* PLLCLK = 8MHz * 9 = 72 MHz */
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 800359c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80035a0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80035a4:	f004 f820 	bl	80075e8 <RCC_PLLConfig>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f004 f827 	bl	80075fc <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	2039      	movs	r0, #57
 80035b0:	f004 f950 	bl	8007854 <RCC_GetFlagStatus>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d0fa      	beq.n	80035ae <RCC_Configuration+0x4a>
		{
		}

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80035b8:	2002      	movs	r0, #2
 80035ba:	f004 f825 	bl	8007608 <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while(RCC_GetSYSCLKSource() != 0x08)
 80035be:	f004 f82d 	bl	800761c <RCC_GetSYSCLKSource>
 80035c2:	2808      	cmp	r0, #8
 80035c4:	d1fb      	bne.n	80035be <RCC_Configuration+0x5a>
	}

	/* Enable peripheral clocks --------------------------------------------------*/

	/* Enable USART1 and GPIOB clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);
 80035c6:	2101      	movs	r1, #1
 80035c8:	f244 0008 	movw	r0, #16392	; 0x4008
 80035cc:	f004 f8f8 	bl	80077c0 <RCC_APB2PeriphClockCmd>

	/* Enable USART3 clocks */
	RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);
 80035d0:	4804      	ldr	r0, [pc, #16]	(80035e4 <RCC_Configuration+0x80>)
 80035d2:	2101      	movs	r1, #1
 80035d4:	f004 f902 	bl	80077dc <RCC_APB1PeriphClockCmd>

	PWR_BackupAccessCmd(ENABLE);
 80035d8:	2001      	movs	r0, #1
 80035da:	f003 ff33 	bl	8007444 <PWR_BackupAccessCmd>
}
 80035de:	b001      	add	sp, #4
 80035e0:	bd00      	pop	{pc}
 80035e2:	46c0      	nop			(mov r8, r8)
 80035e4:	00040001 	.word	0x00040001

080035e8 <Posicao>:
* Description    : Configures the different system clocks.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void Posicao(int t){
 80035e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	word a = 10;
	word b = 20;

	if(t<7){
 80035ea:	2806      	cmp	r0, #6
* Description    : Configures the different system clocks.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void Posicao(int t){
 80035ec:	b081      	sub	sp, #4
 80035ee:	4606      	mov	r6, r0
 80035f0:	4b4b      	ldr	r3, [pc, #300]	(8003720 <Posicao+0x138>)
 80035f2:	4a4c      	ldr	r2, [pc, #304]	(8003724 <Posicao+0x13c>)
 80035f4:	4c4c      	ldr	r4, [pc, #304]	(8003728 <Posicao+0x140>)
 80035f6:	4d4d      	ldr	r5, [pc, #308]	(800372c <Posicao+0x144>)
 80035f8:	4f4d      	ldr	r7, [pc, #308]	(8003730 <Posicao+0x148>)
	word a = 10;
	word b = 20;

	if(t<7){
 80035fa:	dc43      	bgt.n	8003684 <Posicao+0x9c>
	dxl_write_word( id9, P_GOAL_POSITION_L, GoalPos9);
 80035fc:	7818      	ldrb	r0, [r3, #0]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	211e      	movs	r1, #30
 8003602:	f003 f8e3 	bl	80067cc <dxl_write_word>
	dxl_write_word( id10, P_GOAL_POSITION_L, GoalPos10);
 8003606:	7820      	ldrb	r0, [r4, #0]
 8003608:	682a      	ldr	r2, [r5, #0]
 800360a:	211e      	movs	r1, #30
 800360c:	f003 f8de 	bl	80067cc <dxl_write_word>

	dxl_write_word( id11, P_GOAL_POSITION_L, GoalPos11 - b);
 8003610:	4b48      	ldr	r3, [pc, #288]	(8003734 <Posicao+0x14c>)
 8003612:	7838      	ldrb	r0, [r7, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	211e      	movs	r1, #30
 8003618:	3a14      	subs	r2, #20
 800361a:	f003 f8d7 	bl	80067cc <dxl_write_word>
	dxl_write_word( id12, P_GOAL_POSITION_L, GoalPos12 + b);
 800361e:	4b46      	ldr	r3, [pc, #280]	(8003738 <Posicao+0x150>)
 8003620:	211e      	movs	r1, #30
 8003622:	7818      	ldrb	r0, [r3, #0]
 8003624:	4b45      	ldr	r3, [pc, #276]	(800373c <Posicao+0x154>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	3214      	adds	r2, #20
 800362a:	f003 f8cf 	bl	80067cc <dxl_write_word>

	dxl_write_word( id13, P_GOAL_POSITION_L, GoalPos13 + a);
 800362e:	4b44      	ldr	r3, [pc, #272]	(8003740 <Posicao+0x158>)
 8003630:	211e      	movs	r1, #30
 8003632:	7818      	ldrb	r0, [r3, #0]
 8003634:	4b43      	ldr	r3, [pc, #268]	(8003744 <Posicao+0x15c>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	320a      	adds	r2, #10
 800363a:	f003 f8c7 	bl	80067cc <dxl_write_word>
	dxl_write_word( id14, P_GOAL_POSITION_L, GoalPos14 - a);
 800363e:	4b42      	ldr	r3, [pc, #264]	(8003748 <Posicao+0x160>)
 8003640:	211e      	movs	r1, #30
 8003642:	7818      	ldrb	r0, [r3, #0]
 8003644:	4b41      	ldr	r3, [pc, #260]	(800374c <Posicao+0x164>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	3a0a      	subs	r2, #10
 800364a:	f003 f8bf 	bl	80067cc <dxl_write_word>

	dxl_write_word( id15, P_GOAL_POSITION_L, GoalPos15);
 800364e:	4b40      	ldr	r3, [pc, #256]	(8003750 <Posicao+0x168>)
 8003650:	211e      	movs	r1, #30
 8003652:	7818      	ldrb	r0, [r3, #0]
 8003654:	4b3f      	ldr	r3, [pc, #252]	(8003754 <Posicao+0x16c>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	f003 f8b8 	bl	80067cc <dxl_write_word>
	dxl_write_word( id16, P_GOAL_POSITION_L, GoalPos16 - b);
 800365c:	4b3e      	ldr	r3, [pc, #248]	(8003758 <Posicao+0x170>)
 800365e:	211e      	movs	r1, #30
 8003660:	7818      	ldrb	r0, [r3, #0]
 8003662:	4b3e      	ldr	r3, [pc, #248]	(800375c <Posicao+0x174>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	3a14      	subs	r2, #20
 8003668:	f003 f8b0 	bl	80067cc <dxl_write_word>

	dxl_write_word( id17, P_GOAL_POSITION_L, GoalPos17);
 800366c:	4b3c      	ldr	r3, [pc, #240]	(8003760 <Posicao+0x178>)
 800366e:	211e      	movs	r1, #30
 8003670:	7818      	ldrb	r0, [r3, #0]
 8003672:	4b3c      	ldr	r3, [pc, #240]	(8003764 <Posicao+0x17c>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f003 f8a9 	bl	80067cc <dxl_write_word>
	dxl_write_word( id18, P_GOAL_POSITION_L, GoalPos18);
 800367a:	4b3b      	ldr	r3, [pc, #236]	(8003768 <Posicao+0x180>)
 800367c:	7818      	ldrb	r0, [r3, #0]
 800367e:	4b3b      	ldr	r3, [pc, #236]	(800376c <Posicao+0x184>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	e048      	b.n	8003716 <Posicao+0x12e>
	}
	else{
	dxl_write_word( id9, P_GOAL_POSITION_L, GoalPos9);
 8003684:	7818      	ldrb	r0, [r3, #0]
 8003686:	211e      	movs	r1, #30
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	f003 f89f 	bl	80067cc <dxl_write_word>
	dxl_write_word( id10, P_GOAL_POSITION_L, GoalPos10);
 800368e:	211e      	movs	r1, #30
 8003690:	7820      	ldrb	r0, [r4, #0]
 8003692:	682a      	ldr	r2, [r5, #0]
 8003694:	f003 f89a 	bl	80067cc <dxl_write_word>

	dxl_write_word( id11, P_GOAL_POSITION_L, GoalPos11 - 40);
 8003698:	4b26      	ldr	r3, [pc, #152]	(8003734 <Posicao+0x14c>)
 800369a:	211e      	movs	r1, #30
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	7838      	ldrb	r0, [r7, #0]
 80036a0:	3a28      	subs	r2, #40
 80036a2:	f003 f893 	bl	80067cc <dxl_write_word>
	dxl_write_word( id12, P_GOAL_POSITION_L, GoalPos12 + 10);
 80036a6:	4b24      	ldr	r3, [pc, #144]	(8003738 <Posicao+0x150>)
 80036a8:	211e      	movs	r1, #30
 80036aa:	7818      	ldrb	r0, [r3, #0]
 80036ac:	4b23      	ldr	r3, [pc, #140]	(800373c <Posicao+0x154>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	320a      	adds	r2, #10
 80036b2:	f003 f88b 	bl	80067cc <dxl_write_word>

	dxl_write_word( id13, P_GOAL_POSITION_L, GoalPos13 + b);
 80036b6:	4b22      	ldr	r3, [pc, #136]	(8003740 <Posicao+0x158>)
 80036b8:	211e      	movs	r1, #30
 80036ba:	7818      	ldrb	r0, [r3, #0]
 80036bc:	4b21      	ldr	r3, [pc, #132]	(8003744 <Posicao+0x15c>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	3214      	adds	r2, #20
 80036c2:	f003 f883 	bl	80067cc <dxl_write_word>
	dxl_write_word( id14, P_GOAL_POSITION_L, GoalPos14 - 30);
 80036c6:	4b20      	ldr	r3, [pc, #128]	(8003748 <Posicao+0x160>)
 80036c8:	211e      	movs	r1, #30
 80036ca:	7818      	ldrb	r0, [r3, #0]
 80036cc:	4b1f      	ldr	r3, [pc, #124]	(800374c <Posicao+0x164>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	3a1e      	subs	r2, #30
 80036d2:	f003 f87b 	bl	80067cc <dxl_write_word>

	dxl_write_word( id15, P_GOAL_POSITION_L, GoalPos15);
 80036d6:	4b1e      	ldr	r3, [pc, #120]	(8003750 <Posicao+0x168>)
 80036d8:	211e      	movs	r1, #30
 80036da:	7818      	ldrb	r0, [r3, #0]
 80036dc:	4b1d      	ldr	r3, [pc, #116]	(8003754 <Posicao+0x16c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	f003 f874 	bl	80067cc <dxl_write_word>

	dxl_write_word( id17, P_GOAL_POSITION_L, GoalPos17);
 80036e4:	4b1e      	ldr	r3, [pc, #120]	(8003760 <Posicao+0x178>)
 80036e6:	211e      	movs	r1, #30
 80036e8:	7818      	ldrb	r0, [r3, #0]
 80036ea:	4b1e      	ldr	r3, [pc, #120]	(8003764 <Posicao+0x17c>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f003 f86d 	bl	80067cc <dxl_write_word>
	dxl_write_word( id18, P_GOAL_POSITION_L, GoalPos18);
 80036f2:	4b1d      	ldr	r3, [pc, #116]	(8003768 <Posicao+0x180>)
 80036f4:	211e      	movs	r1, #30
 80036f6:	7818      	ldrb	r0, [r3, #0]
 80036f8:	4b1c      	ldr	r3, [pc, #112]	(800376c <Posicao+0x184>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f003 f866 	bl	80067cc <dxl_write_word>

	if(t>8 && t<10)
 8003700:	2e09      	cmp	r6, #9
 8003702:	4b15      	ldr	r3, [pc, #84]	(8003758 <Posicao+0x170>)
 8003704:	4a15      	ldr	r2, [pc, #84]	(800375c <Posicao+0x174>)
 8003706:	d103      	bne.n	8003710 <Posicao+0x128>
		dxl_write_word( id16, P_GOAL_POSITION_L, GoalPos16-15);
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	7818      	ldrb	r0, [r3, #0]
 800370c:	3a0f      	subs	r2, #15
 800370e:	e002      	b.n	8003716 <Posicao+0x12e>
	else
		dxl_write_word( id16, P_GOAL_POSITION_L, GoalPos16+5);
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	7818      	ldrb	r0, [r3, #0]
 8003714:	3205      	adds	r2, #5
 8003716:	211e      	movs	r1, #30
 8003718:	f003 f858 	bl	80067cc <dxl_write_word>

	}

}
 800371c:	b001      	add	sp, #4
 800371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003720:	2000005c 	.word	0x2000005c
 8003724:	2000002c 	.word	0x2000002c
 8003728:	2000005d 	.word	0x2000005d
 800372c:	20000030 	.word	0x20000030
 8003730:	2000005e 	.word	0x2000005e
 8003734:	20000034 	.word	0x20000034
 8003738:	2000005f 	.word	0x2000005f
 800373c:	20000038 	.word	0x20000038
 8003740:	20000060 	.word	0x20000060
 8003744:	2000003c 	.word	0x2000003c
 8003748:	20000061 	.word	0x20000061
 800374c:	20000040 	.word	0x20000040
 8003750:	20000062 	.word	0x20000062
 8003754:	20000044 	.word	0x20000044
 8003758:	20000063 	.word	0x20000063
 800375c:	20000048 	.word	0x20000048
 8003760:	20000064 	.word	0x20000064
 8003764:	2000004c 	.word	0x2000004c
 8003768:	20000065 	.word	0x20000065
 800376c:	20000050 	.word	0x20000050

08003770 <main>:
* Output         : None
* Return         : None
*******************************************************************************/

int main(void)
{
 8003770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003772:	b081      	sub	sp, #4
	/* System Clocks Configuration */
	RCC_Configuration();
 8003774:	f7ff fef6 	bl	8003564 <RCC_Configuration>

	/* NVIC configuration */
	NVIC_Configuration();
 8003778:	f7ff feca 	bl	8003510 <NVIC_Configuration>

	/* GPIO configuration */
	GPIO_Configuration();
 800377c:	f7ff fe84 	bl	8003488 <GPIO_Configuration>

	SysTick_Configuration();
 8003780:	f7ff fd38 	bl	80031f4 <SysTick_Configuration>

	Timer_Configuration();
 8003784:	f7ff fd88 	bl	8003298 <Timer_Configuration>

	dxl_initialize( 0, 1 );
 8003788:	2101      	movs	r1, #1
 800378a:	2000      	movs	r0, #0
 800378c:	f003 f8a6 	bl	80068dc <dxl_initialize>
	USART_Configuration(USART_PC, Baudrate_PC);
 8003790:	f8df 3c7c 	ldr.w	r3, [pc, #3196]	; 8004410 <main+0xca0>
 8003794:	2002      	movs	r0, #2
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	f7ff fe2e 	bl	80033f8 <USART_Configuration>

	dxl_write_word( id1, P_GOAL_POSITION_L, GoalPos1 );
 800379c:	f8df 3c74 	ldr.w	r3, [pc, #3188]	; 8004414 <main+0xca4>
 80037a0:	f8df 2c74 	ldr.w	r2, [pc, #3188]	; 8004418 <main+0xca8>
 80037a4:	211e      	movs	r1, #30
 80037a6:	7810      	ldrb	r0, [r2, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f003 f80f 	bl	80067cc <dxl_write_word>
	dxl_write_word( id2, P_GOAL_POSITION_L, GoalPos2 );
 80037ae:	f8df 3c6c 	ldr.w	r3, [pc, #3180]	; 800441c <main+0xcac>
 80037b2:	211e      	movs	r1, #30
 80037b4:	7818      	ldrb	r0, [r3, #0]
 80037b6:	f8df 3c68 	ldr.w	r3, [pc, #3176]	; 8004420 <main+0xcb0>

	double t = 1.0;
	Posicao((int)t);
	u32 x = 80;

	t=	1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80037ba:	f8df 4c68 	ldr.w	r4, [pc, #3176]	; 8004424 <main+0xcb4>

	dxl_initialize( 0, 1 );
	USART_Configuration(USART_PC, Baudrate_PC);

	dxl_write_word( id1, P_GOAL_POSITION_L, GoalPos1 );
	dxl_write_word( id2, P_GOAL_POSITION_L, GoalPos2 );
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	f003 f804 	bl	80067cc <dxl_write_word>
	dxl_write_word( id3, P_GOAL_POSITION_L, GoalPos3 );
 80037c4:	f8df 3c60 	ldr.w	r3, [pc, #3168]	; 8004428 <main+0xcb8>
 80037c8:	211e      	movs	r1, #30
 80037ca:	7818      	ldrb	r0, [r3, #0]
 80037cc:	f8df 3c5c 	ldr.w	r3, [pc, #3164]	; 800442c <main+0xcbc>

	double t = 1.0;
	Posicao((int)t);
	u32 x = 80;

	t=	1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80037d0:	f8df 7c5c 	ldr.w	r7, [pc, #3164]	; 8004430 <main+0xcc0>
	dxl_initialize( 0, 1 );
	USART_Configuration(USART_PC, Baudrate_PC);

	dxl_write_word( id1, P_GOAL_POSITION_L, GoalPos1 );
	dxl_write_word( id2, P_GOAL_POSITION_L, GoalPos2 );
	dxl_write_word( id3, P_GOAL_POSITION_L, GoalPos3 );
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	f002 fff9 	bl	80067cc <dxl_write_word>
	dxl_write_word( id4, P_GOAL_POSITION_L, GoalPos4 );
 80037da:	f8df 3c58 	ldr.w	r3, [pc, #3160]	; 8004434 <main+0xcc4>
 80037de:	211e      	movs	r1, #30
 80037e0:	7818      	ldrb	r0, [r3, #0]
 80037e2:	f8df 3c54 	ldr.w	r3, [pc, #3156]	; 8004438 <main+0xcc8>

	double t = 1.0;
	Posicao((int)t);
	u32 x = 80;

	t=	1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80037e6:	f8df 6c54 	ldr.w	r6, [pc, #3156]	; 800443c <main+0xccc>
	USART_Configuration(USART_PC, Baudrate_PC);

	dxl_write_word( id1, P_GOAL_POSITION_L, GoalPos1 );
	dxl_write_word( id2, P_GOAL_POSITION_L, GoalPos2 );
	dxl_write_word( id3, P_GOAL_POSITION_L, GoalPos3 );
	dxl_write_word( id4, P_GOAL_POSITION_L, GoalPos4 );
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f002 ffee 	bl	80067cc <dxl_write_word>
	dxl_write_word( id5, P_GOAL_POSITION_L, GoalPos5 );
 80037f0:	f8df 3c4c 	ldr.w	r3, [pc, #3148]	; 8004440 <main+0xcd0>
 80037f4:	211e      	movs	r1, #30
 80037f6:	7818      	ldrb	r0, [r3, #0]
 80037f8:	f8df 3c48 	ldr.w	r3, [pc, #3144]	; 8004444 <main+0xcd4>

	double t = 1.0;
	Posicao((int)t);
	u32 x = 80;

	t=	1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80037fc:	f8df 5c48 	ldr.w	r5, [pc, #3144]	; 8004448 <main+0xcd8>

	dxl_write_word( id1, P_GOAL_POSITION_L, GoalPos1 );
	dxl_write_word( id2, P_GOAL_POSITION_L, GoalPos2 );
	dxl_write_word( id3, P_GOAL_POSITION_L, GoalPos3 );
	dxl_write_word( id4, P_GOAL_POSITION_L, GoalPos4 );
	dxl_write_word( id5, P_GOAL_POSITION_L, GoalPos5 );
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	f002 ffe3 	bl	80067cc <dxl_write_word>
	dxl_write_word( id6, P_GOAL_POSITION_L, GoalPos6 );
 8003806:	f8df 3c44 	ldr.w	r3, [pc, #3140]	; 800444c <main+0xcdc>
 800380a:	211e      	movs	r1, #30
 800380c:	7818      	ldrb	r0, [r3, #0]
 800380e:	f8df 3c40 	ldr.w	r3, [pc, #3136]	; 8004450 <main+0xce0>
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	f002 ffda 	bl	80067cc <dxl_write_word>
	dxl_write_word( id7, P_GOAL_POSITION_L, GoalPos7 );
 8003818:	f8df 3c38 	ldr.w	r3, [pc, #3128]	; 8004454 <main+0xce4>
 800381c:	211e      	movs	r1, #30
 800381e:	7818      	ldrb	r0, [r3, #0]
 8003820:	f8df 3c34 	ldr.w	r3, [pc, #3124]	; 8004458 <main+0xce8>
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f002 ffd1 	bl	80067cc <dxl_write_word>
	dxl_write_word( id8, P_GOAL_POSITION_L, GoalPos8 );
 800382a:	f8df 3c30 	ldr.w	r3, [pc, #3120]	; 800445c <main+0xcec>
 800382e:	211e      	movs	r1, #30
 8003830:	7818      	ldrb	r0, [r3, #0]
 8003832:	f8df 3c2c 	ldr.w	r3, [pc, #3116]	; 8004460 <main+0xcf0>
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f002 ffc8 	bl	80067cc <dxl_write_word>

	double t = 1.0;
	Posicao((int)t);
 800383c:	2001      	movs	r0, #1
 800383e:	f7ff fed3 	bl	80035e8 <Posicao>
	u32 x = 80;

	t=	1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003842:	f240 13e1 	movw	r3, #481	; 0x1e1
 8003846:	f8df 2c1c 	ldr.w	r2, [pc, #3100]	; 8004464 <main+0xcf4>
 800384a:	6023      	str	r3, [r4, #0]
 800384c:	332f      	adds	r3, #47
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	f8df 2c14 	ldr.w	r2, [pc, #3092]	; 8004468 <main+0xcf8>
 8003854:	3b84      	subs	r3, #132
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	f8df 3c10 	ldr.w	r3, [pc, #3088]	; 800446c <main+0xcfc>
 800385c:	f240 2271 	movw	r2, #625	; 0x271
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f8df 2c0c 	ldr.w	r2, [pc, #3084]	; 8004470 <main+0xd00>
 8003866:	f240 1303 	movw	r3, #259	; 0x103
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	f8df 2c04 	ldr.w	r2, [pc, #3076]	; 8004474 <main+0xd04>
 8003870:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	f8df 2c00 	ldr.w	r2, [pc, #3072]	; 8004478 <main+0xd08>
 800387a:	3b7b      	subs	r3, #123
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	3bc3      	subs	r3, #195
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	3344      	adds	r3, #68
 8003884:	6033      	str	r3, [r6, #0]
 8003886:	3330      	adds	r3, #48
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	2001      	movs	r0, #1
 800388c:	f7ff feac 	bl	80035e8 <Posicao>
 8003890:	2050      	movs	r0, #80
 8003892:	f7ff fc99 	bl	80031c8 <mDelay>
	t=	1.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003896:	f240 13df 	movw	r3, #479	; 0x1df
 800389a:	f8df 2bc8 	ldr.w	r2, [pc, #3016]	; 8004464 <main+0xcf4>
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	332c      	adds	r3, #44
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	f8df 2bc0 	ldr.w	r2, [pc, #3008]	; 8004468 <main+0xcf8>
 80038a8:	3b84      	subs	r3, #132
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	f8df 3bbc 	ldr.w	r3, [pc, #3004]	; 800446c <main+0xcfc>
 80038b0:	f240 2271 	movw	r2, #625	; 0x271
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f8df 2bb8 	ldr.w	r2, [pc, #3000]	; 8004470 <main+0xd00>
 80038ba:	f240 1311 	movw	r3, #273	; 0x111
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	f8df 2bb0 	ldr.w	r2, [pc, #2992]	; 8004474 <main+0xd04>
 80038c4:	f44f 733a 	mov.w	r3, #744	; 0x2e8
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	f8df 2bac 	ldr.w	r2, [pc, #2988]	; 8004478 <main+0xd08>
 80038ce:	3b85      	subs	r3, #133
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	3bd1      	subs	r3, #209
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	3348      	adds	r3, #72
 80038d8:	6033      	str	r3, [r6, #0]
 80038da:	332c      	adds	r3, #44
 80038dc:	2001      	movs	r0, #1
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	f7ff fe82 	bl	80035e8 <Posicao>
 80038e4:	2050      	movs	r0, #80
 80038e6:	f7ff fc6f 	bl	80031c8 <mDelay>


	while(1){
			bMoving = dxl_read_byte( id1, P_MOVING );
 80038ea:	f8df 3b2c 	ldr.w	r3, [pc, #2860]	; 8004418 <main+0xca8>
 80038ee:	212e      	movs	r1, #46
 80038f0:	7818      	ldrb	r0, [r3, #0]
 80038f2:	f002 ffbd 	bl	8006870 <dxl_read_byte>
 80038f6:	f8df 2b84 	ldr.w	r2, [pc, #2948]	; 800447c <main+0xd0c>
 80038fa:	7010      	strb	r0, [r2, #0]
			CommStatus = dxl_get_result();
 80038fc:	f002 fe02 	bl	8006504 <dxl_get_result>
 8003900:	f8df 3b7c 	ldr.w	r3, [pc, #2940]	; 8004480 <main+0xd10>
 8003904:	b2c0      	uxtb	r0, r0
			if( CommStatus == COMM_RXSUCCESS )
 8003906:	2801      	cmp	r0, #1
	t=	1.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);


	while(1){
			bMoving = dxl_read_byte( id1, P_MOVING );
			CommStatus = dxl_get_result();
 8003908:	7018      	strb	r0, [r3, #0]
			if( CommStatus == COMM_RXSUCCESS )
 800390a:	d1ee      	bne.n	80038ea <main+0x17a>
			{
				if( bMoving == 0 )
 800390c:	f8df 2b6c 	ldr.w	r2, [pc, #2924]	; 800447c <main+0xd0c>
 8003910:	7813      	ldrb	r3, [r2, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e9      	bne.n	80038ea <main+0x17a>
				{
					t=	1.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003916:	f8df 3b0c 	ldr.w	r3, [pc, #2828]	; 8004424 <main+0xcb4>
 800391a:	f240 12dd 	movw	r2, #477	; 0x1dd
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f8df 3b40 	ldr.w	r3, [pc, #2880]	; 8004464 <main+0xcf4>
 8003924:	3229      	adds	r2, #41
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f8df 3b3c 	ldr.w	r3, [pc, #2876]	; 8004468 <main+0xcf8>
 800392c:	3a7d      	subs	r2, #125
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f8df 3b38 	ldr.w	r3, [pc, #2872]	; 800446c <main+0xcfc>
 8003934:	32ea      	adds	r2, #234
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f8df 2b34 	ldr.w	r2, [pc, #2868]	; 8004470 <main+0xd00>
 800393c:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	f8df 3b30 	ldr.w	r3, [pc, #2864]	; 8004474 <main+0xd04>
 8003946:	f8df 7b30 	ldr.w	r7, [pc, #2864]	; 8004478 <main+0xd08>
 800394a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800394e:	f8df 6ae0 	ldr.w	r6, [pc, #2784]	; 8004430 <main+0xcc0>
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f44f 731a 	mov.w	r3, #616	; 0x268
 8003958:	f8df 5ae0 	ldr.w	r5, [pc, #2784]	; 800443c <main+0xccc>
 800395c:	f8df 4ae8 	ldr.w	r4, [pc, #2792]	; 8004448 <main+0xcd8>
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	3bdb      	subs	r3, #219
 8003964:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8003968:	6033      	str	r3, [r6, #0]
 800396a:	3372      	adds	r3, #114
 800396c:	602a      	str	r2, [r5, #0]
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	f7ff fe3a 	bl	80035e8 <Posicao>
 8003974:	2050      	movs	r0, #80
 8003976:	f7ff fc27 	bl	80031c8 <mDelay>
					t=	1.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800397a:	f8df 2aa8 	ldr.w	r2, [pc, #2728]	; 8004424 <main+0xcb4>
 800397e:	f240 13db 	movw	r3, #475	; 0x1db
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	f8df 2adc 	ldr.w	r2, [pc, #2780]	; 8004464 <main+0xcf4>
 8003988:	3326      	adds	r3, #38
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	f8df 2ad8 	ldr.w	r2, [pc, #2776]	; 8004468 <main+0xcf8>
 8003990:	3b72      	subs	r3, #114
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	f8df 2ad4 	ldr.w	r2, [pc, #2772]	; 800446c <main+0xcfc>
 8003998:	33e8      	adds	r3, #232
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	f8df 2ad0 	ldr.w	r2, [pc, #2768]	; 8004470 <main+0xd00>
 80039a0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	f8df 2acc 	ldr.w	r2, [pc, #2764]	; 8004474 <main+0xd04>
 80039aa:	f503 73ef 	add.w	r3, r3, #478	; 0x1de
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	3b94      	subs	r3, #148
 80039b2:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	6032      	str	r2, [r6, #0]
 80039ba:	3b96      	subs	r3, #150
 80039bc:	326f      	adds	r2, #111
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	6022      	str	r2, [r4, #0]
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7ff fe10 	bl	80035e8 <Posicao>
 80039c8:	2050      	movs	r0, #80
 80039ca:	f7ff fbfd 	bl	80031c8 <mDelay>
					t=	1.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80039ce:	f8df 3a54 	ldr.w	r3, [pc, #2644]	; 8004424 <main+0xcb4>
 80039d2:	f240 12d9 	movw	r2, #473	; 0x1d9
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f8df 3a88 	ldr.w	r3, [pc, #2696]	; 8004464 <main+0xcf4>
 80039dc:	3224      	adds	r2, #36
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f8df 2a84 	ldr.w	r2, [pc, #2692]	; 8004468 <main+0xcf8>
 80039e4:	f44f 73cb 	mov.w	r3, #406	; 0x196
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	f8df 3a80 	ldr.w	r3, [pc, #2688]	; 800446c <main+0xcfc>
 80039ee:	f240 227a 	movw	r2, #634	; 0x27a
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f8df 3a78 	ldr.w	r3, [pc, #2680]	; 8004470 <main+0xd00>
 80039f8:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80039fc:	3a03      	subs	r2, #3
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f8df 2a70 	ldr.w	r2, [pc, #2672]	; 8004474 <main+0xd04>
 8003a04:	f240 3305 	movw	r3, #773	; 0x305
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	3b9a      	subs	r3, #154
 8003a0c:	f240 1289 	movw	r2, #393	; 0x189
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	6032      	str	r2, [r6, #0]
 8003a14:	3b9b      	subs	r3, #155
 8003a16:	3269      	adds	r2, #105
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	6022      	str	r2, [r4, #0]
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f7ff fde3 	bl	80035e8 <Posicao>
 8003a22:	2050      	movs	r0, #80
 8003a24:	f7ff fbd0 	bl	80031c8 <mDelay>
					t=	1.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003a28:	f8df 39f8 	ldr.w	r3, [pc, #2552]	; 8004424 <main+0xcb4>
 8003a2c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f8df 3a30 	ldr.w	r3, [pc, #2608]	; 8004464 <main+0xcf4>
 8003a36:	3222      	adds	r2, #34
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f8df 3a2c 	ldr.w	r3, [pc, #2604]	; 8004468 <main+0xcf8>
 8003a3e:	3a5d      	subs	r2, #93
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f8df 3a28 	ldr.w	r3, [pc, #2600]	; 800446c <main+0xcfc>
 8003a46:	32e1      	adds	r2, #225
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f8df 3a24 	ldr.w	r3, [pc, #2596]	; 8004470 <main+0xd00>
 8003a4e:	f44f 7292 	mov.w	r2, #292	; 0x124
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f8df 2a1c 	ldr.w	r2, [pc, #2588]	; 8004474 <main+0xd04>
 8003a58:	f240 3309 	movw	r3, #777	; 0x309
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	3ba0      	subs	r3, #160
 8003a60:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	6032      	str	r2, [r6, #0]
 8003a68:	3b9c      	subs	r3, #156
 8003a6a:	3265      	adds	r2, #101
 8003a6c:	602b      	str	r3, [r5, #0]
 8003a6e:	2001      	movs	r0, #1
 8003a70:	6022      	str	r2, [r4, #0]
 8003a72:	f7ff fdb9 	bl	80035e8 <Posicao>
 8003a76:	2050      	movs	r0, #80
 8003a78:	f7ff fba6 	bl	80031c8 <mDelay>
					t=	1.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003a7c:	f8df 39a4 	ldr.w	r3, [pc, #2468]	; 8004424 <main+0xcb4>
 8003a80:	f240 12d5 	movw	r2, #469	; 0x1d5
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f8df 39dc 	ldr.w	r3, [pc, #2524]	; 8004464 <main+0xcf4>
 8003a8a:	3220      	adds	r2, #32
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f8df 39d8 	ldr.w	r3, [pc, #2520]	; 8004468 <main+0xcf8>
 8003a92:	3a56      	subs	r2, #86
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	f8df 39d4 	ldr.w	r3, [pc, #2516]	; 800446c <main+0xcfc>
 8003a9a:	32e0      	adds	r2, #224
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f8df 39d0 	ldr.w	r3, [pc, #2512]	; 8004470 <main+0xd00>
 8003aa2:	f5a2 72ad 	sub.w	r2, r2, #346	; 0x15a
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f8df 39c8 	ldr.w	r3, [pc, #2504]	; 8004474 <main+0xd04>
 8003aac:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f240 2366 	movw	r3, #614	; 0x266
 8003ab6:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	6032      	str	r2, [r6, #0]
 8003abe:	3b9c      	subs	r3, #156
 8003ac0:	325f      	adds	r2, #95
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	6022      	str	r2, [r4, #0]
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7ff fd8e 	bl	80035e8 <Posicao>
 8003acc:	2050      	movs	r0, #80
 8003ace:	f7ff fb7b 	bl	80031c8 <mDelay>
					t=	1.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003ad2:	f8df 3950 	ldr.w	r3, [pc, #2384]	; 8004424 <main+0xcb4>
 8003ad6:	f240 12d3 	movw	r2, #467	; 0x1d3
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f8df 3984 	ldr.w	r3, [pc, #2436]	; 8004464 <main+0xcf4>
 8003ae0:	321e      	adds	r2, #30
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f8df 3980 	ldr.w	r3, [pc, #2432]	; 8004468 <main+0xcf8>
 8003ae8:	3a52      	subs	r2, #82
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f8df 397c 	ldr.w	r3, [pc, #2428]	; 800446c <main+0xcfc>
 8003af0:	32e1      	adds	r2, #225
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f8df 3978 	ldr.w	r3, [pc, #2424]	; 8004470 <main+0xd00>
 8003af8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003afc:	3a03      	subs	r2, #3
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f8df 3970 	ldr.w	r3, [pc, #2416]	; 8004474 <main+0xd04>
 8003b04:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f44f 7318 	mov.w	r3, #608	; 0x260
 8003b0e:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	6032      	str	r2, [r6, #0]
 8003b16:	3b99      	subs	r3, #153
 8003b18:	325a      	adds	r2, #90
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f7ff fd62 	bl	80035e8 <Posicao>
 8003b24:	2050      	movs	r0, #80
 8003b26:	f7ff fb4f 	bl	80031c8 <mDelay>
					t=	1.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003b2a:	f8df 38f8 	ldr.w	r3, [pc, #2296]	; 8004424 <main+0xcb4>
 8003b2e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f8df 392c 	ldr.w	r3, [pc, #2348]	; 8004464 <main+0xcf4>
 8003b38:	321c      	adds	r2, #28
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f8df 3928 	ldr.w	r3, [pc, #2344]	; 8004468 <main+0xcf8>
 8003b40:	3a51      	subs	r2, #81
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f8df 3924 	ldr.w	r3, [pc, #2340]	; 800446c <main+0xcfc>
 8003b48:	32e3      	adds	r2, #227
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f8df 3920 	ldr.w	r3, [pc, #2336]	; 8004470 <main+0xd00>
 8003b50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b54:	3a03      	subs	r2, #3
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f8df 3918 	ldr.w	r3, [pc, #2328]	; 8004474 <main+0xd04>
 8003b5c:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003b66:	f5a2 72c3 	sub.w	r2, r2, #390	; 0x186
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	6032      	str	r2, [r6, #0]
 8003b6e:	3b95      	subs	r3, #149
 8003b70:	3256      	adds	r2, #86
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	6022      	str	r2, [r4, #0]
 8003b76:	2001      	movs	r0, #1
 8003b78:	f7ff fd36 	bl	80035e8 <Posicao>
 8003b7c:	2050      	movs	r0, #80
 8003b7e:	f7ff fb23 	bl	80031c8 <mDelay>
					t=	1.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003b82:	f8df 38a0 	ldr.w	r3, [pc, #2208]	; 8004424 <main+0xcb4>
 8003b86:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f8df 38d4 	ldr.w	r3, [pc, #2260]	; 8004464 <main+0xcf4>
 8003b90:	321a      	adds	r2, #26
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f8df 38d0 	ldr.w	r3, [pc, #2256]	; 8004468 <main+0xcf8>
 8003b98:	3a53      	subs	r2, #83
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f8df 38cc 	ldr.w	r3, [pc, #2252]	; 800446c <main+0xcfc>
 8003ba0:	32ea      	adds	r2, #234
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f8df 38c8 	ldr.w	r3, [pc, #2248]	; 8004470 <main+0xd00>
 8003ba8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	f8df 38c4 	ldr.w	r3, [pc, #2244]	; 8004474 <main+0xd04>
 8003bb2:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f240 234f 	movw	r3, #591	; 0x24f
 8003bbc:	f5a2 72c3 	sub.w	r2, r2, #390	; 0x186
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	6032      	str	r2, [r6, #0]
 8003bc4:	3b8f      	subs	r3, #143
 8003bc6:	3252      	adds	r2, #82
 8003bc8:	602b      	str	r3, [r5, #0]
 8003bca:	6022      	str	r2, [r4, #0]
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f7ff fd0b 	bl	80035e8 <Posicao>
 8003bd2:	2050      	movs	r0, #80
 8003bd4:	f7ff faf8 	bl	80031c8 <mDelay>
					t=	2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003bd8:	f8df 3848 	ldr.w	r3, [pc, #2120]	; 8004424 <main+0xcb4>
 8003bdc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f8df 3880 	ldr.w	r3, [pc, #2176]	; 8004464 <main+0xcf4>
 8003be6:	3219      	adds	r2, #25
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f8df 387c 	ldr.w	r3, [pc, #2172]	; 8004468 <main+0xcf8>
 8003bee:	3a58      	subs	r2, #88
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f8df 3878 	ldr.w	r3, [pc, #2168]	; 800446c <main+0xcfc>
 8003bf6:	32f2      	adds	r2, #242
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f8df 2874 	ldr.w	r2, [pc, #2164]	; 8004470 <main+0xd00>
 8003bfe:	f44f 7393 	mov.w	r3, #294	; 0x126
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	f8df 386c 	ldr.w	r3, [pc, #2156]	; 8004474 <main+0xd04>
 8003c08:	f240 320d 	movw	r2, #781	; 0x30d
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f240 2345 	movw	r3, #581	; 0x245
 8003c12:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	6032      	str	r2, [r6, #0]
 8003c1a:	3b88      	subs	r3, #136
 8003c1c:	324f      	adds	r2, #79
 8003c1e:	602b      	str	r3, [r5, #0]
 8003c20:	6022      	str	r2, [r4, #0]
 8003c22:	2002      	movs	r0, #2
 8003c24:	f7ff fce0 	bl	80035e8 <Posicao>
 8003c28:	2050      	movs	r0, #80
 8003c2a:	f7ff facd 	bl	80031c8 <mDelay>
					t=	2.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003c2e:	f8df 37f4 	ldr.w	r3, [pc, #2036]	; 8004424 <main+0xcb4>
 8003c32:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f8df 3828 	ldr.w	r3, [pc, #2088]	; 8004464 <main+0xcf4>
 8003c3c:	3219      	adds	r2, #25
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f8df 3824 	ldr.w	r3, [pc, #2084]	; 8004468 <main+0xcf8>
 8003c44:	3a60      	subs	r2, #96
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f8df 3820 	ldr.w	r3, [pc, #2080]	; 800446c <main+0xcfc>
 8003c4c:	32fc      	adds	r2, #252
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f8df 381c 	ldr.w	r3, [pc, #2076]	; 8004470 <main+0xd00>
 8003c54:	f5a2 72ad 	sub.w	r2, r2, #346	; 0x15a
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	f8df 3818 	ldr.w	r3, [pc, #2072]	; 8004474 <main+0xd04>
 8003c5e:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f240 233a 	movw	r3, #570	; 0x23a
 8003c68:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	6032      	str	r2, [r6, #0]
 8003c70:	3b7f      	subs	r3, #127
 8003c72:	324b      	adds	r2, #75
 8003c74:	602b      	str	r3, [r5, #0]
 8003c76:	6022      	str	r2, [r4, #0]
 8003c78:	2002      	movs	r0, #2
 8003c7a:	f7ff fcb5 	bl	80035e8 <Posicao>
 8003c7e:	2050      	movs	r0, #80
 8003c80:	f7ff faa2 	bl	80031c8 <mDelay>
					t=	2.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003c84:	f8df 379c 	ldr.w	r3, [pc, #1948]	; 8004424 <main+0xcb4>
 8003c88:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f8df 37d4 	ldr.w	r3, [pc, #2004]	; 8004464 <main+0xcf4>
 8003c92:	3218      	adds	r2, #24
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f8df 37d0 	ldr.w	r3, [pc, #2000]	; 8004468 <main+0xcf8>
 8003c9a:	3a68      	subs	r2, #104
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f8df 37cc 	ldr.w	r3, [pc, #1996]	; 800446c <main+0xcfc>
 8003ca2:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	f8df 37c4 	ldr.w	r3, [pc, #1988]	; 8004470 <main+0xd00>
 8003cac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f8df 37bc 	ldr.w	r3, [pc, #1980]	; 8004474 <main+0xd04>
 8003cb8:	f502 72f1 	add.w	r2, r2, #482	; 0x1e2
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f240 232e 	movw	r3, #558	; 0x22e
 8003cc2:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	6032      	str	r2, [r6, #0]
 8003cca:	3b76      	subs	r3, #118
 8003ccc:	324a      	adds	r2, #74
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	6022      	str	r2, [r4, #0]
 8003cd2:	2002      	movs	r0, #2
 8003cd4:	f7ff fc88 	bl	80035e8 <Posicao>
 8003cd8:	2050      	movs	r0, #80
 8003cda:	f7ff fa75 	bl	80031c8 <mDelay>
					t=	2.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003cde:	f8df 3744 	ldr.w	r3, [pc, #1860]	; 8004424 <main+0xcb4>
 8003ce2:	f240 12c9 	movw	r2, #457	; 0x1c9
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f8df 3778 	ldr.w	r3, [pc, #1912]	; 8004464 <main+0xcf4>
 8003cec:	3217      	adds	r2, #23
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f8df 3774 	ldr.w	r3, [pc, #1908]	; 8004468 <main+0xcf8>
 8003cf4:	3a73      	subs	r2, #115
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f8df 3770 	ldr.w	r3, [pc, #1904]	; 800446c <main+0xcfc>
 8003cfc:	f502 728b 	add.w	r2, r2, #278	; 0x116
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f8df 376c 	ldr.w	r3, [pc, #1900]	; 8004470 <main+0xd00>
 8003d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f8df 3764 	ldr.w	r3, [pc, #1892]	; 8004474 <main+0xd04>
 8003d10:	f502 72ee 	add.w	r2, r2, #476	; 0x1dc
 8003d14:	3203      	adds	r2, #3
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f240 2321 	movw	r3, #545	; 0x221
 8003d1c:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	6032      	str	r2, [r6, #0]
 8003d24:	3b6c      	subs	r3, #108
 8003d26:	3248      	adds	r2, #72
 8003d28:	602b      	str	r3, [r5, #0]
 8003d2a:	6022      	str	r2, [r4, #0]
 8003d2c:	2002      	movs	r0, #2
 8003d2e:	f7ff fc5b 	bl	80035e8 <Posicao>
 8003d32:	2050      	movs	r0, #80
 8003d34:	f7ff fa48 	bl	80031c8 <mDelay>
					t=	2.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003d38:	f8df 36e8 	ldr.w	r3, [pc, #1768]	; 8004424 <main+0xcb4>
 8003d3c:	f240 12c7 	movw	r2, #455	; 0x1c7
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f8df 3720 	ldr.w	r3, [pc, #1824]	; 8004464 <main+0xcf4>
 8003d46:	3217      	adds	r2, #23
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	f8df 271c 	ldr.w	r2, [pc, #1820]	; 8004468 <main+0xcf8>
 8003d4e:	f240 1361 	movw	r3, #353	; 0x161
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	f8df 3714 	ldr.w	r3, [pc, #1812]	; 800446c <main+0xcfc>
 8003d58:	f44f 7221 	mov.w	r2, #644	; 0x284
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f8df 3710 	ldr.w	r3, [pc, #1808]	; 8004470 <main+0xd00>
 8003d62:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8003d66:	3a01      	subs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f8df 3708 	ldr.w	r3, [pc, #1800]	; 8004474 <main+0xd04>
 8003d6e:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 8003d72:	3203      	adds	r2, #3
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f44f 7305 	mov.w	r3, #532	; 0x214
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	3b61      	subs	r3, #97
 8003d7e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	3315      	adds	r3, #21
 8003d86:	6032      	str	r2, [r6, #0]
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f7ff fc2c 	bl	80035e8 <Posicao>
 8003d90:	2050      	movs	r0, #80
 8003d92:	f7ff fa19 	bl	80031c8 <mDelay>
					t=	2.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003d96:	f8df 268c 	ldr.w	r2, [pc, #1676]	; 8004424 <main+0xcb4>
 8003d9a:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	f8df 26c0 	ldr.w	r2, [pc, #1728]	; 8004464 <main+0xcf4>
 8003da4:	3317      	adds	r3, #23
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	f8df 26bc 	ldr.w	r2, [pc, #1724]	; 8004468 <main+0xcf8>
 8003dac:	3b88      	subs	r3, #136
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	f8df 36b8 	ldr.w	r3, [pc, #1720]	; 800446c <main+0xcfc>
 8003db4:	f240 2285 	movw	r2, #645	; 0x285
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f8df 26b4 	ldr.w	r2, [pc, #1716]	; 8004470 <main+0xd00>
 8003dbe:	f240 1333 	movw	r3, #307	; 0x133
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	f8df 36ac 	ldr.w	r3, [pc, #1708]	; 8004474 <main+0xd04>
 8003dc8:	f240 320a 	movw	r2, #778	; 0x30a
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8003dd2:	3a01      	subs	r2, #1
 8003dd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	6032      	str	r2, [r6, #0]
 8003ddc:	3b57      	subs	r3, #87
 8003dde:	3245      	adds	r2, #69
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	6022      	str	r2, [r4, #0]
 8003de4:	2002      	movs	r0, #2
 8003de6:	f7ff fbff 	bl	80035e8 <Posicao>
 8003dea:	2050      	movs	r0, #80
 8003dec:	f7ff f9ec 	bl	80031c8 <mDelay>
					t=	2.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003df0:	f8df 3630 	ldr.w	r3, [pc, #1584]	; 8004424 <main+0xcb4>
 8003df4:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f8df 3668 	ldr.w	r3, [pc, #1640]	; 8004464 <main+0xcf4>
 8003dfe:	3217      	adds	r2, #23
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f8df 3664 	ldr.w	r3, [pc, #1636]	; 8004468 <main+0xcf8>
 8003e06:	3a92      	subs	r2, #146
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f8df 3660 	ldr.w	r3, [pc, #1632]	; 800446c <main+0xcfc>
 8003e0e:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 8003e12:	3201      	adds	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f8df 2658 	ldr.w	r2, [pc, #1624]	; 8004470 <main+0xd00>
 8003e1a:	f240 1337 	movw	r3, #311	; 0x137
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	f8df 3650 	ldr.w	r3, [pc, #1616]	; 8004474 <main+0xd04>
 8003e24:	f240 320a 	movw	r2, #778	; 0x30a
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8003e2e:	3a03      	subs	r2, #3
 8003e30:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	6032      	str	r2, [r6, #0]
 8003e38:	3b4e      	subs	r3, #78
 8003e3a:	3245      	adds	r2, #69
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	6022      	str	r2, [r4, #0]
 8003e40:	2002      	movs	r0, #2
 8003e42:	f7ff fbd1 	bl	80035e8 <Posicao>
 8003e46:	2050      	movs	r0, #80
 8003e48:	f7ff f9be 	bl	80031c8 <mDelay>
					t=	2.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003e4c:	f8df 35d4 	ldr.w	r3, [pc, #1492]	; 8004424 <main+0xcb4>
 8003e50:	f240 12c3 	movw	r2, #451	; 0x1c3
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f8df 360c 	ldr.w	r3, [pc, #1548]	; 8004464 <main+0xcf4>
 8003e5a:	3217      	adds	r2, #23
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f8df 2608 	ldr.w	r2, [pc, #1544]	; 8004468 <main+0xcf8>
 8003e62:	f240 133f 	movw	r3, #319	; 0x13f
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	f8df 3600 	ldr.w	r3, [pc, #1536]	; 800446c <main+0xcfc>
 8003e6c:	f240 2287 	movw	r2, #647	; 0x287
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f8df 25fc 	ldr.w	r2, [pc, #1532]	; 8004470 <main+0xd00>
 8003e76:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	f8df 35f4 	ldr.w	r3, [pc, #1524]	; 8004474 <main+0xd04>
 8003e80:	f240 320a 	movw	r2, #778	; 0x30a
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8003e8a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	6032      	str	r2, [r6, #0]
 8003e92:	3b43      	subs	r3, #67
 8003e94:	3244      	adds	r2, #68
 8003e96:	602b      	str	r3, [r5, #0]
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	f7ff fba4 	bl	80035e8 <Posicao>
 8003ea0:	2050      	movs	r0, #80
 8003ea2:	f7ff f991 	bl	80031c8 <mDelay>
					t=	2.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003ea6:	f8df 357c 	ldr.w	r3, [pc, #1404]	; 8004424 <main+0xcb4>
 8003eaa:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f8df 35b0 	ldr.w	r3, [pc, #1456]	; 8004464 <main+0xcf4>
 8003eb4:	3217      	adds	r2, #23
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f8df 35ac 	ldr.w	r3, [pc, #1452]	; 8004468 <main+0xcf8>
 8003ebc:	3aa3      	subs	r2, #163
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f8df 35a8 	ldr.w	r3, [pc, #1448]	; 800446c <main+0xcfc>
 8003ec4:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 8003ec8:	3201      	adds	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	f8df 35a0 	ldr.w	r3, [pc, #1440]	; 8004470 <main+0xd00>
 8003ed0:	f5a2 72a3 	sub.w	r2, r2, #326	; 0x146
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f8df 359c 	ldr.w	r3, [pc, #1436]	; 8004474 <main+0xd04>
 8003eda:	f502 72e5 	add.w	r2, r2, #458	; 0x1ca
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f240 13e5 	movw	r3, #485	; 0x1e5
 8003ee4:	f5a2 72c7 	sub.w	r2, r2, #398	; 0x18e
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	6032      	str	r2, [r6, #0]
 8003eec:	3b3a      	subs	r3, #58
 8003eee:	3244      	adds	r2, #68
 8003ef0:	602b      	str	r3, [r5, #0]
 8003ef2:	6022      	str	r2, [r4, #0]
 8003ef4:	2002      	movs	r0, #2
 8003ef6:	f7ff fb77 	bl	80035e8 <Posicao>
 8003efa:	2050      	movs	r0, #80
 8003efc:	f7ff f964 	bl	80031c8 <mDelay>
					t=	2.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003f00:	f8df 3520 	ldr.w	r3, [pc, #1312]	; 8004424 <main+0xcb4>
 8003f04:	f240 12c1 	movw	r2, #449	; 0x1c1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f8df 3558 	ldr.w	r3, [pc, #1368]	; 8004464 <main+0xcf4>
 8003f0e:	3217      	adds	r2, #23
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f8df 3554 	ldr.w	r3, [pc, #1364]	; 8004468 <main+0xcf8>
 8003f16:	3aa9      	subs	r2, #169
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f8df 3550 	ldr.w	r3, [pc, #1360]	; 800446c <main+0xcfc>
 8003f1e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f8df 3548 	ldr.w	r3, [pc, #1352]	; 8004470 <main+0xd00>
 8003f28:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f8df 3544 	ldr.w	r3, [pc, #1348]	; 8004474 <main+0xd04>
 8003f32:	f502 72e2 	add.w	r2, r2, #452	; 0x1c4
 8003f36:	3201      	adds	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 8003f3e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	6032      	str	r2, [r6, #0]
 8003f46:	3b31      	subs	r3, #49
 8003f48:	3244      	adds	r2, #68
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	2002      	movs	r0, #2
 8003f50:	f7ff fb4a 	bl	80035e8 <Posicao>
 8003f54:	2050      	movs	r0, #80
 8003f56:	f7ff f937 	bl	80031c8 <mDelay>
					t=	3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003f5a:	f8df 34c8 	ldr.w	r3, [pc, #1224]	; 8004424 <main+0xcb4>
 8003f5e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f8df 34fc 	ldr.w	r3, [pc, #1276]	; 8004464 <main+0xcf4>
 8003f68:	3217      	adds	r2, #23
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f8df 34f8 	ldr.w	r3, [pc, #1272]	; 8004468 <main+0xcf8>
 8003f70:	3aae      	subs	r2, #174
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f8df 34f4 	ldr.w	r3, [pc, #1268]	; 800446c <main+0xcfc>
 8003f78:	f44f 7222 	mov.w	r2, #648	; 0x288
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f8df 34f0 	ldr.w	r3, [pc, #1264]	; 8004470 <main+0xd00>
 8003f82:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	f8df 34e8 	ldr.w	r3, [pc, #1256]	; 8004474 <main+0xd04>
 8003f8c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f240 13d1 	movw	r3, #465	; 0x1d1
 8003f96:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	6032      	str	r2, [r6, #0]
 8003f9e:	3b29      	subs	r3, #41
 8003fa0:	3243      	adds	r2, #67
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	6022      	str	r2, [r4, #0]
 8003fa6:	2003      	movs	r0, #3
 8003fa8:	f7ff fb1e 	bl	80035e8 <Posicao>
 8003fac:	2050      	movs	r0, #80
 8003fae:	f7ff f90b 	bl	80031c8 <mDelay>
					t=	3.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8003fb2:	f8df 3470 	ldr.w	r3, [pc, #1136]	; 8004424 <main+0xcb4>
 8003fb6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	f8df 34a4 	ldr.w	r3, [pc, #1188]	; 8004464 <main+0xcf4>
 8003fc0:	3217      	adds	r2, #23
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f8df 34a0 	ldr.w	r3, [pc, #1184]	; 8004468 <main+0xcf8>
 8003fc8:	3ab2      	subs	r2, #178
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f8df 349c 	ldr.w	r3, [pc, #1180]	; 800446c <main+0xcfc>
 8003fd0:	f44f 7222 	mov.w	r2, #648	; 0x288
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8004470 <main+0xd00>
 8003fda:	f240 1351 	movw	r3, #337	; 0x151
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	f8df 2490 	ldr.w	r2, [pc, #1168]	; 8004474 <main+0xd04>
 8003fe4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fe8:	3301      	adds	r3, #1
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 8003ff0:	f240 127b 	movw	r2, #379	; 0x17b
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	6032      	str	r2, [r6, #0]
 8003ff8:	3b21      	subs	r3, #33
 8003ffa:	3243      	adds	r2, #67
 8003ffc:	602b      	str	r3, [r5, #0]
 8003ffe:	6022      	str	r2, [r4, #0]
 8004000:	2003      	movs	r0, #3
 8004002:	f7ff faf1 	bl	80035e8 <Posicao>
 8004006:	2050      	movs	r0, #80
 8004008:	f7ff f8de 	bl	80031c8 <mDelay>
					t=	3.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800400c:	f8df 3414 	ldr.w	r3, [pc, #1044]	; 8004424 <main+0xcb4>
 8004010:	f240 12bf 	movw	r2, #447	; 0x1bf
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f8df 344c 	ldr.w	r3, [pc, #1100]	; 8004464 <main+0xcf4>
 800401a:	3218      	adds	r2, #24
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f8df 3448 	ldr.w	r3, [pc, #1096]	; 8004468 <main+0xcf8>
 8004022:	3ab4      	subs	r2, #180
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f8df 3444 	ldr.w	r3, [pc, #1092]	; 800446c <main+0xcfc>
 800402a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f8df 243c 	ldr.w	r2, [pc, #1084]	; 8004470 <main+0xd00>
 8004034:	f240 1357 	movw	r3, #343	; 0x157
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	f8df 3438 	ldr.w	r3, [pc, #1080]	; 8004474 <main+0xd04>
 800403e:	f240 320f 	movw	r2, #783	; 0x30f
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004048:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	6032      	str	r2, [r6, #0]
 8004050:	3b1a      	subs	r3, #26
 8004052:	3243      	adds	r2, #67
 8004054:	602b      	str	r3, [r5, #0]
 8004056:	6022      	str	r2, [r4, #0]
 8004058:	2003      	movs	r0, #3
 800405a:	f7ff fac5 	bl	80035e8 <Posicao>
 800405e:	2050      	movs	r0, #80
 8004060:	f7ff f8b2 	bl	80031c8 <mDelay>
					t=	3.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004064:	4bef      	ldr	r3, [pc, #956]	(8004424 <main+0xcb4>)
 8004066:	f240 12bf 	movw	r2, #447	; 0x1bf
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	4bfd      	ldr	r3, [pc, #1012]	(8004464 <main+0xcf4>)
 800406e:	3218      	adds	r2, #24
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	4bfd      	ldr	r3, [pc, #1012]	(8004468 <main+0xcf8>)
 8004074:	3ab4      	subs	r2, #180
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	4bfc      	ldr	r3, [pc, #1008]	(800446c <main+0xcfc>)
 800407a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	4afb      	ldr	r2, [pc, #1004]	(8004470 <main+0xd00>)
 8004082:	f240 135d 	movw	r3, #349	; 0x15d
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4afa      	ldr	r2, [pc, #1000]	(8004474 <main+0xd04>)
 800408a:	f44f 7344 	mov.w	r3, #784	; 0x310
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8004094:	f240 127b 	movw	r2, #379	; 0x17b
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	6032      	str	r2, [r6, #0]
 800409c:	3b15      	subs	r3, #21
 800409e:	3243      	adds	r2, #67
 80040a0:	602b      	str	r3, [r5, #0]
 80040a2:	6022      	str	r2, [r4, #0]
 80040a4:	2003      	movs	r0, #3
 80040a6:	f7ff fa9f 	bl	80035e8 <Posicao>
 80040aa:	2050      	movs	r0, #80
 80040ac:	f7ff f88c 	bl	80031c8 <mDelay>
					t=	3.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80040b0:	4bdc      	ldr	r3, [pc, #880]	(8004424 <main+0xcb4>)
 80040b2:	f240 12bf 	movw	r2, #447	; 0x1bf
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4bea      	ldr	r3, [pc, #936]	(8004464 <main+0xcf4>)
 80040ba:	3218      	adds	r2, #24
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	4bea      	ldr	r3, [pc, #936]	(8004468 <main+0xcf8>)
 80040c0:	3ab3      	subs	r2, #179
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	4be9      	ldr	r3, [pc, #932]	(800446c <main+0xcfc>)
 80040c6:	f502 72b1 	add.w	r2, r2, #354	; 0x162
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	4be8      	ldr	r3, [pc, #928]	(8004470 <main+0xd00>)
 80040ce:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	4be7      	ldr	r3, [pc, #924]	(8004474 <main+0xd04>)
 80040d6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80040e0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	6032      	str	r2, [r6, #0]
 80040e8:	3b0f      	subs	r3, #15
 80040ea:	3242      	adds	r2, #66
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	6022      	str	r2, [r4, #0]
 80040f0:	2003      	movs	r0, #3
 80040f2:	f7ff fa79 	bl	80035e8 <Posicao>
 80040f6:	2050      	movs	r0, #80
 80040f8:	f7ff f866 	bl	80031c8 <mDelay>
					t=	3.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80040fc:	4bc9      	ldr	r3, [pc, #804]	(8004424 <main+0xcb4>)
 80040fe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	4bd7      	ldr	r3, [pc, #860]	(8004464 <main+0xcf4>)
 8004106:	3219      	adds	r2, #25
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	4bd7      	ldr	r3, [pc, #860]	(8004468 <main+0xcf8>)
 800410c:	3ab0      	subs	r2, #176
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	4bd6      	ldr	r3, [pc, #856]	(800446c <main+0xcfc>)
 8004112:	f502 72af 	add.w	r2, r2, #350	; 0x15e
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	4ad5      	ldr	r2, [pc, #852]	(8004470 <main+0xd00>)
 800411a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4ad4      	ldr	r2, [pc, #848]	(8004474 <main+0xd04>)
 8004122:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004126:	3303      	adds	r3, #3
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800412e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	6032      	str	r2, [r6, #0]
 8004136:	3b0b      	subs	r3, #11
 8004138:	3242      	adds	r2, #66
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	2003      	movs	r0, #3
 8004140:	f7ff fa52 	bl	80035e8 <Posicao>
 8004144:	2050      	movs	r0, #80
 8004146:	f7ff f83f 	bl	80031c8 <mDelay>
					t=	3.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800414a:	4bb6      	ldr	r3, [pc, #728]	(8004424 <main+0xcb4>)
 800414c:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	4bc4      	ldr	r3, [pc, #784]	(8004464 <main+0xcf4>)
 8004154:	321a      	adds	r2, #26
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	4ac3      	ldr	r2, [pc, #780]	(8004468 <main+0xcf8>)
 800415a:	f240 132b 	movw	r3, #299	; 0x12b
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	4bc2      	ldr	r3, [pc, #776]	(800446c <main+0xcfc>)
 8004162:	f240 2283 	movw	r2, #643	; 0x283
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	4bc1      	ldr	r3, [pc, #772]	(8004470 <main+0xd00>)
 800416a:	f5a2 728b 	sub.w	r2, r2, #278	; 0x116
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	4bc0      	ldr	r3, [pc, #768]	(8004474 <main+0xd04>)
 8004172:	f44f 7245 	mov.w	r2, #788	; 0x314
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	f240 13ad 	movw	r3, #429	; 0x1ad
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8004182:	3b09      	subs	r3, #9
 8004184:	3a03      	subs	r2, #3
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	331b      	adds	r3, #27
 800418a:	6032      	str	r2, [r6, #0]
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	2003      	movs	r0, #3
 8004190:	f7ff fa2a 	bl	80035e8 <Posicao>
 8004194:	2050      	movs	r0, #80
 8004196:	f7ff f817 	bl	80031c8 <mDelay>
					t=	3.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800419a:	4aa2      	ldr	r2, [pc, #648]	(8004424 <main+0xcb4>)
 800419c:	f240 13bf 	movw	r3, #447	; 0x1bf
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4ab0      	ldr	r2, [pc, #704]	(8004464 <main+0xcf4>)
 80041a4:	3319      	adds	r3, #25
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4aaf      	ldr	r2, [pc, #700]	(8004468 <main+0xcf8>)
 80041aa:	3ba8      	subs	r3, #168
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4baf      	ldr	r3, [pc, #700]	(800446c <main+0xcfc>)
 80041b0:	f240 2282 	movw	r2, #642	; 0x282
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	4bae      	ldr	r3, [pc, #696]	(8004470 <main+0xd00>)
 80041b8:	f44f 72b9 	mov.w	r2, #370	; 0x172
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	4aad      	ldr	r2, [pc, #692]	(8004474 <main+0xd04>)
 80041c0:	f240 3316 	movw	r3, #790	; 0x316
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80041ca:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	6032      	str	r2, [r6, #0]
 80041d2:	3b05      	subs	r3, #5
 80041d4:	3242      	adds	r2, #66
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	2003      	movs	r0, #3
 80041dc:	f7ff fa04 	bl	80035e8 <Posicao>
 80041e0:	2050      	movs	r0, #80
 80041e2:	f7fe fff1 	bl	80031c8 <mDelay>
					t=	3.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80041e6:	4b8f      	ldr	r3, [pc, #572]	(8004424 <main+0xcb4>)
 80041e8:	f240 12bf 	movw	r2, #447	; 0x1bf
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	4b9d      	ldr	r3, [pc, #628]	(8004464 <main+0xcf4>)
 80041f0:	321a      	adds	r2, #26
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	4b9c      	ldr	r3, [pc, #624]	(8004468 <main+0xcf8>)
 80041f6:	3aa3      	subs	r2, #163
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	4b9c      	ldr	r3, [pc, #624]	(800446c <main+0xcfc>)
 80041fc:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 8004200:	3203      	adds	r2, #3
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4a9a      	ldr	r2, [pc, #616]	(8004470 <main+0xd00>)
 8004206:	f240 1377 	movw	r3, #375	; 0x177
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b99      	ldr	r3, [pc, #612]	(8004474 <main+0xd04>)
 800420e:	f240 3217 	movw	r2, #791	; 0x317
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f240 13a9 	movw	r3, #425	; 0x1a9
 8004218:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	6032      	str	r2, [r6, #0]
 8004220:	3b04      	subs	r3, #4
 8004222:	3242      	adds	r2, #66
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	6022      	str	r2, [r4, #0]
 8004228:	2003      	movs	r0, #3
 800422a:	f7ff f9dd 	bl	80035e8 <Posicao>
 800422e:	2050      	movs	r0, #80
 8004230:	f7fe ffca 	bl	80031c8 <mDelay>
					t=	3.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004234:	4b7b      	ldr	r3, [pc, #492]	(8004424 <main+0xcb4>)
 8004236:	f240 12bf 	movw	r2, #447	; 0x1bf
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	4b89      	ldr	r3, [pc, #548]	(8004464 <main+0xcf4>)
 800423e:	321b      	adds	r2, #27
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	4b89      	ldr	r3, [pc, #548]	(8004468 <main+0xcf8>)
 8004244:	3a9d      	subs	r2, #157
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	4b88      	ldr	r3, [pc, #544]	(800446c <main+0xcfc>)
 800424a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	4b87      	ldr	r3, [pc, #540]	(8004470 <main+0xd00>)
 8004252:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8004256:	3a01      	subs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	4b86      	ldr	r3, [pc, #536]	(8004474 <main+0xd04>)
 800425c:	f44f 7246 	mov.w	r2, #792	; 0x318
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 8004266:	3a03      	subs	r2, #3
 8004268:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	6032      	str	r2, [r6, #0]
 8004270:	3b02      	subs	r3, #2
 8004272:	3241      	adds	r2, #65
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	6022      	str	r2, [r4, #0]
 8004278:	2003      	movs	r0, #3
 800427a:	f7ff f9b5 	bl	80035e8 <Posicao>
 800427e:	2050      	movs	r0, #80
 8004280:	f7fe ffa2 	bl	80031c8 <mDelay>
					t=	4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004284:	4b67      	ldr	r3, [pc, #412]	(8004424 <main+0xcb4>)
 8004286:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	4b75      	ldr	r3, [pc, #468]	(8004464 <main+0xcf4>)
 800428e:	321b      	adds	r2, #27
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	4a75      	ldr	r2, [pc, #468]	(8004468 <main+0xcf8>)
 8004294:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b74      	ldr	r3, [pc, #464]	(800446c <main+0xcfc>)
 800429c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	4b73      	ldr	r3, [pc, #460]	(8004470 <main+0xd00>)
 80042a4:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80042a8:	3a01      	subs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	4b71      	ldr	r3, [pc, #452]	(8004474 <main+0xd04>)
 80042ae:	f502 72cd 	add.w	r2, r2, #410	; 0x19a
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80042b8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	6032      	str	r2, [r6, #0]
 80042c0:	3b03      	subs	r3, #3
 80042c2:	3241      	adds	r2, #65
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	6022      	str	r2, [r4, #0]
 80042c8:	2004      	movs	r0, #4
 80042ca:	f7ff f98d 	bl	80035e8 <Posicao>
 80042ce:	2050      	movs	r0, #80
 80042d0:	f7fe ff7a 	bl	80031c8 <mDelay>
					t=	4.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80042d4:	4b53      	ldr	r3, [pc, #332]	(8004424 <main+0xcb4>)
 80042d6:	f240 12c1 	movw	r2, #449	; 0x1c1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	4b61      	ldr	r3, [pc, #388]	(8004464 <main+0xcf4>)
 80042de:	321c      	adds	r2, #28
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	4b61      	ldr	r3, [pc, #388]	(8004468 <main+0xcf8>)
 80042e4:	3a91      	subs	r2, #145
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	4b60      	ldr	r3, [pc, #384]	(800446c <main+0xcfc>)
 80042ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	4b5f      	ldr	r3, [pc, #380]	(8004470 <main+0xd00>)
 80042f2:	3afd      	subs	r2, #253
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	4b5f      	ldr	r3, [pc, #380]	(8004474 <main+0xd04>)
 80042f8:	f502 72cb 	add.w	r2, r2, #406	; 0x196
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004302:	f5a2 72cb 	sub.w	r2, r2, #406	; 0x196
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	6032      	str	r2, [r6, #0]
 800430a:	3b02      	subs	r3, #2
 800430c:	3242      	adds	r2, #66
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	2004      	movs	r0, #4
 8004314:	f7ff f968 	bl	80035e8 <Posicao>
 8004318:	2050      	movs	r0, #80
 800431a:	f7fe ff55 	bl	80031c8 <mDelay>
					t=	4.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800431e:	4b41      	ldr	r3, [pc, #260]	(8004424 <main+0xcb4>)
 8004320:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	4b4f      	ldr	r3, [pc, #316]	(8004464 <main+0xcf4>)
 8004328:	321c      	adds	r2, #28
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	4a4e      	ldr	r2, [pc, #312]	(8004468 <main+0xcf8>)
 800432e:	f240 1353 	movw	r3, #339	; 0x153
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b4d      	ldr	r3, [pc, #308]	(800446c <main+0xcfc>)
 8004336:	f44f 7220 	mov.w	r2, #640	; 0x280
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	4b4c      	ldr	r3, [pc, #304]	(8004470 <main+0xd00>)
 800433e:	3af9      	subs	r2, #249
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	4b4c      	ldr	r3, [pc, #304]	(8004474 <main+0xd04>)
 8004344:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8004348:	3203      	adds	r2, #3
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f240 13ab 	movw	r3, #427	; 0x1ab
 8004350:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	6032      	str	r2, [r6, #0]
 8004358:	3b02      	subs	r3, #2
 800435a:	3243      	adds	r2, #67
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	6022      	str	r2, [r4, #0]
 8004360:	2004      	movs	r0, #4
 8004362:	f7ff f941 	bl	80035e8 <Posicao>
 8004366:	2050      	movs	r0, #80
 8004368:	f7fe ff2e 	bl	80031c8 <mDelay>
					t=	4.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800436c:	4b2d      	ldr	r3, [pc, #180]	(8004424 <main+0xcb4>)
 800436e:	f240 12c3 	movw	r2, #451	; 0x1c3
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	4a3b      	ldr	r2, [pc, #236]	(8004464 <main+0xcf4>)
 8004376:	f240 13df 	movw	r3, #479	; 0x1df
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4a3a      	ldr	r2, [pc, #232]	(8004468 <main+0xcf8>)
 800437e:	3b84      	subs	r3, #132
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	4b3a      	ldr	r3, [pc, #232]	(800446c <main+0xcfc>)
 8004384:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	4b39      	ldr	r3, [pc, #228]	(8004470 <main+0xd00>)
 800438c:	3af6      	subs	r2, #246
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	4b38      	ldr	r3, [pc, #224]	(8004474 <main+0xd04>)
 8004392:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f5a2 72ca 	sub.w	r2, r2, #404	; 0x194
 800439c:	3a01      	subs	r2, #1
 800439e:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	6032      	str	r2, [r6, #0]
 80043a6:	3b04      	subs	r3, #4
 80043a8:	3244      	adds	r2, #68
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	6022      	str	r2, [r4, #0]
 80043ae:	2004      	movs	r0, #4
 80043b0:	f7ff f91a 	bl	80035e8 <Posicao>
 80043b4:	2050      	movs	r0, #80
 80043b6:	f7fe ff07 	bl	80031c8 <mDelay>
					t=	4.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80043ba:	4b1a      	ldr	r3, [pc, #104]	(8004424 <main+0xcb4>)
 80043bc:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	4b28      	ldr	r3, [pc, #160]	(8004464 <main+0xcf4>)
 80043c4:	321d      	adds	r2, #29
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	4b27      	ldr	r3, [pc, #156]	(8004468 <main+0xcf8>)
 80043ca:	3a7f      	subs	r2, #127
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4b27      	ldr	r3, [pc, #156]	(800446c <main+0xcfc>)
 80043d0:	f502 728e 	add.w	r2, r2, #284	; 0x11c
 80043d4:	3203      	adds	r2, #3
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	4b25      	ldr	r3, [pc, #148]	(8004470 <main+0xd00>)
 80043da:	3af4      	subs	r2, #244
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	4b25      	ldr	r3, [pc, #148]	(8004474 <main+0xd04>)
 80043e0:	f502 72c6 	add.w	r2, r2, #396	; 0x18c
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	3b04      	subs	r3, #4
 80043ee:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	331f      	adds	r3, #31
 80043f6:	6032      	str	r2, [r6, #0]
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	2004      	movs	r0, #4
 80043fc:	f7ff f8f4 	bl	80035e8 <Posicao>
 8004400:	2050      	movs	r0, #80
 8004402:	f7fe fee1 	bl	80031c8 <mDelay>
					t=	4.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004406:	4a07      	ldr	r2, [pc, #28]	(8004424 <main+0xcb4>)
 8004408:	f240 13c5 	movw	r3, #453	; 0x1c5
 800440c:	e03a      	b.n	8004484 <main+0xd14>
 800440e:	46c0      	nop			(mov r8, r8)
 8004410:	20000004 	.word	0x20000004
 8004414:	2000000c 	.word	0x2000000c
 8004418:	20000054 	.word	0x20000054
 800441c:	20000055 	.word	0x20000055
 8004420:	20000010 	.word	0x20000010
 8004424:	2000002c 	.word	0x2000002c
 8004428:	20000056 	.word	0x20000056
 800442c:	20000014 	.word	0x20000014
 8004430:	20000048 	.word	0x20000048
 8004434:	20000057 	.word	0x20000057
 8004438:	20000018 	.word	0x20000018
 800443c:	2000004c 	.word	0x2000004c
 8004440:	20000058 	.word	0x20000058
 8004444:	2000001c 	.word	0x2000001c
 8004448:	20000050 	.word	0x20000050
 800444c:	20000059 	.word	0x20000059
 8004450:	20000020 	.word	0x20000020
 8004454:	2000005a 	.word	0x2000005a
 8004458:	20000024 	.word	0x20000024
 800445c:	2000005b 	.word	0x2000005b
 8004460:	20000028 	.word	0x20000028
 8004464:	20000030 	.word	0x20000030
 8004468:	20000034 	.word	0x20000034
 800446c:	20000038 	.word	0x20000038
 8004470:	2000003c 	.word	0x2000003c
 8004474:	20000040 	.word	0x20000040
 8004478:	20000044 	.word	0x20000044
 800447c:	20000181 	.word	0x20000181
 8004480:	20000182 	.word	0x20000182
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	f8df 2c44 	ldr.w	r2, [pc, #3140]	; 80050cc <main+0x195c>
 800448a:	331e      	adds	r3, #30
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	f8df 2c40 	ldr.w	r2, [pc, #3136]	; 80050d0 <main+0x1960>
 8004492:	3b7a      	subs	r3, #122
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	f8df 2c3c 	ldr.w	r2, [pc, #3132]	; 80050d4 <main+0x1964>
 800449a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800449e:	3301      	adds	r3, #1
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	f8df 2c34 	ldr.w	r2, [pc, #3124]	; 80050d8 <main+0x1968>
 80044a6:	3bf2      	subs	r3, #242
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	f8df 3c30 	ldr.w	r3, [pc, #3120]	; 80050dc <main+0x196c>
 80044ae:	f240 3219 	movw	r2, #793	; 0x319
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80044b8:	f5a2 72c9 	sub.w	r2, r2, #402	; 0x192
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	6032      	str	r2, [r6, #0]
 80044c0:	3b06      	subs	r3, #6
 80044c2:	3246      	adds	r2, #70
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	6022      	str	r2, [r4, #0]
 80044c8:	2004      	movs	r0, #4
 80044ca:	f7ff f88d 	bl	80035e8 <Posicao>
 80044ce:	2050      	movs	r0, #80
 80044d0:	f7fe fe7a 	bl	80031c8 <mDelay>
					t=	4.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80044d4:	f8df 3c08 	ldr.w	r3, [pc, #3080]	; 80050e0 <main+0x1970>
 80044d8:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f8df 3bec 	ldr.w	r3, [pc, #3052]	; 80050cc <main+0x195c>
 80044e2:	321f      	adds	r2, #31
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f8df 3be8 	ldr.w	r3, [pc, #3048]	; 80050d0 <main+0x1960>
 80044ea:	3a75      	subs	r2, #117
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	f8df 3be4 	ldr.w	r3, [pc, #3044]	; 80050d4 <main+0x1964>
 80044f2:	f44f 7221 	mov.w	r2, #644	; 0x284
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f8df 3bdc 	ldr.w	r3, [pc, #3036]	; 80050d8 <main+0x1968>
 80044fc:	3af2      	subs	r2, #242
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f8df 3bd8 	ldr.w	r3, [pc, #3032]	; 80050dc <main+0x196c>
 8004504:	f44f 7246 	mov.w	r2, #792	; 0x318
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	f240 13b7 	movw	r3, #439	; 0x1b7
 800450e:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	6032      	str	r2, [r6, #0]
 8004516:	3b07      	subs	r3, #7
 8004518:	3248      	adds	r2, #72
 800451a:	602b      	str	r3, [r5, #0]
 800451c:	6022      	str	r2, [r4, #0]
 800451e:	2004      	movs	r0, #4
 8004520:	f7ff f862 	bl	80035e8 <Posicao>
 8004524:	2050      	movs	r0, #80
 8004526:	f7fe fe4f 	bl	80031c8 <mDelay>
					t=	4.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800452a:	f8df 3bb4 	ldr.w	r3, [pc, #2996]	; 80050e0 <main+0x1970>
 800452e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f8df 3b94 	ldr.w	r3, [pc, #2964]	; 80050cc <main+0x195c>
 8004538:	321f      	adds	r2, #31
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f8df 3b90 	ldr.w	r3, [pc, #2960]	; 80050d0 <main+0x1960>
 8004540:	3a71      	subs	r2, #113
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f8df 3b8c 	ldr.w	r3, [pc, #2956]	; 80050d4 <main+0x1964>
 8004548:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800454c:	3203      	adds	r2, #3
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f8df 3b84 	ldr.w	r3, [pc, #2948]	; 80050d8 <main+0x1968>
 8004554:	3af0      	subs	r2, #240
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f8df 3b80 	ldr.w	r3, [pc, #2944]	; 80050dc <main+0x196c>
 800455c:	f502 72c1 	add.w	r2, r2, #386	; 0x182
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	f240 13bb 	movw	r3, #443	; 0x1bb
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	3b09      	subs	r3, #9
 800456a:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	3320      	adds	r3, #32
 8004572:	6032      	str	r2, [r6, #0]
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	2004      	movs	r0, #4
 8004578:	f7ff f836 	bl	80035e8 <Posicao>
 800457c:	2050      	movs	r0, #80
 800457e:	f7fe fe23 	bl	80031c8 <mDelay>
					t=	4.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004582:	f8df 2b5c 	ldr.w	r2, [pc, #2908]	; 80050e0 <main+0x1970>
 8004586:	f240 13c9 	movw	r3, #457	; 0x1c9
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	f8df 2b3c 	ldr.w	r2, [pc, #2876]	; 80050cc <main+0x195c>
 8004590:	3320      	adds	r3, #32
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	f8df 2b38 	ldr.w	r2, [pc, #2872]	; 80050d0 <main+0x1960>
 8004598:	3b6e      	subs	r3, #110
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	f8df 2b34 	ldr.w	r2, [pc, #2868]	; 80050d4 <main+0x1964>
 80045a0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	f8df 2b30 	ldr.w	r2, [pc, #2864]	; 80050d8 <main+0x1968>
 80045aa:	3bf0      	subs	r3, #240
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	f8df 2b2c 	ldr.w	r2, [pc, #2860]	; 80050dc <main+0x196c>
 80045b2:	f503 73bf 	add.w	r3, r3, #382	; 0x17e
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	f5a3 73ab 	sub.w	r3, r3, #342	; 0x156
 80045bc:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	6032      	str	r2, [r6, #0]
 80045c4:	3b0b      	subs	r3, #11
 80045c6:	324d      	adds	r2, #77
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	6022      	str	r2, [r4, #0]
 80045cc:	2004      	movs	r0, #4
 80045ce:	f7ff f80b 	bl	80035e8 <Posicao>
 80045d2:	2050      	movs	r0, #80
 80045d4:	f7fe fdf8 	bl	80031c8 <mDelay>
					t=	4.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80045d8:	f8df 3b04 	ldr.w	r3, [pc, #2820]	; 80050e0 <main+0x1970>
 80045dc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f8df 3ae8 	ldr.w	r3, [pc, #2792]	; 80050cc <main+0x195c>
 80045e6:	3220      	adds	r2, #32
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f8df 3ae4 	ldr.w	r3, [pc, #2788]	; 80050d0 <main+0x1960>
 80045ee:	3a6b      	subs	r2, #107
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f8df 3ae0 	ldr.w	r3, [pc, #2784]	; 80050d4 <main+0x1964>
 80045f6:	f44f 7222 	mov.w	r2, #648	; 0x288
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f8df 3ad8 	ldr.w	r3, [pc, #2776]	; 80050d8 <main+0x1968>
 8004600:	3af0      	subs	r2, #240
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f8df 3ad4 	ldr.w	r3, [pc, #2772]	; 80050dc <main+0x196c>
 8004608:	f44f 7245 	mov.w	r2, #788	; 0x314
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	f240 13c3 	movw	r3, #451	; 0x1c3
 8004612:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	6032      	str	r2, [r6, #0]
 800461a:	3b0c      	subs	r3, #12
 800461c:	3250      	adds	r2, #80
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	6022      	str	r2, [r4, #0]
 8004622:	2004      	movs	r0, #4
 8004624:	f7fe ffe0 	bl	80035e8 <Posicao>
 8004628:	2050      	movs	r0, #80
 800462a:	f7fe fdcd 	bl	80031c8 <mDelay>
					t=	5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800462e:	f8df 3ab0 	ldr.w	r3, [pc, #2736]	; 80050e0 <main+0x1970>
 8004632:	f240 12cd 	movw	r2, #461	; 0x1cd
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f8df 3a90 	ldr.w	r3, [pc, #2704]	; 80050cc <main+0x195c>
 800463c:	3220      	adds	r2, #32
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f8df 3a8c 	ldr.w	r3, [pc, #2700]	; 80050d0 <main+0x1960>
 8004644:	3a69      	subs	r2, #105
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f8df 3a88 	ldr.w	r3, [pc, #2696]	; 80050d4 <main+0x1964>
 800464c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f8df 3a84 	ldr.w	r3, [pc, #2692]	; 80050d8 <main+0x1968>
 8004656:	3af0      	subs	r2, #240
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	f8df 3a80 	ldr.w	r3, [pc, #2688]	; 80050dc <main+0x196c>
 800465e:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f240 13c7 	movw	r3, #455	; 0x1c7
 8004668:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	6032      	str	r2, [r6, #0]
 8004670:	3b0e      	subs	r3, #14
 8004672:	3253      	adds	r2, #83
 8004674:	602b      	str	r3, [r5, #0]
 8004676:	6022      	str	r2, [r4, #0]
 8004678:	2005      	movs	r0, #5
 800467a:	f7fe ffb5 	bl	80035e8 <Posicao>
 800467e:	2050      	movs	r0, #80
 8004680:	f7fe fda2 	bl	80031c8 <mDelay>
					t=	5.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004684:	f8df 3a58 	ldr.w	r3, [pc, #2648]	; 80050e0 <main+0x1970>
 8004688:	f240 12cf 	movw	r2, #463	; 0x1cf
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f8df 3a3c 	ldr.w	r3, [pc, #2620]	; 80050cc <main+0x195c>
 8004692:	3220      	adds	r2, #32
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f8df 3a38 	ldr.w	r3, [pc, #2616]	; 80050d0 <main+0x1960>
 800469a:	3a68      	subs	r2, #104
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f8df 3a34 	ldr.w	r3, [pc, #2612]	; 80050d4 <main+0x1964>
 80046a2:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	f8df 3a2c 	ldr.w	r3, [pc, #2604]	; 80050d8 <main+0x1968>
 80046ac:	3aef      	subs	r2, #239
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f8df 3a28 	ldr.w	r3, [pc, #2600]	; 80050dc <main+0x196c>
 80046b4:	f502 72b8 	add.w	r2, r2, #368	; 0x170
 80046b8:	3203      	adds	r2, #3
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f240 13cb 	movw	r3, #459	; 0x1cb
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	3b0f      	subs	r3, #15
 80046c4:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	3322      	adds	r3, #34
 80046cc:	6032      	str	r2, [r6, #0]
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	2005      	movs	r0, #5
 80046d2:	f7fe ff89 	bl	80035e8 <Posicao>
 80046d6:	2050      	movs	r0, #80
 80046d8:	f7fe fd76 	bl	80031c8 <mDelay>
					t=	5.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80046dc:	f8df 2a00 	ldr.w	r2, [pc, #2560]	; 80050e0 <main+0x1970>
 80046e0:	f240 13d1 	movw	r3, #465	; 0x1d1
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	f8df 29e4 	ldr.w	r2, [pc, #2532]	; 80050cc <main+0x195c>
 80046ea:	3321      	adds	r3, #33
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	f8df 29e0 	ldr.w	r2, [pc, #2528]	; 80050d0 <main+0x1960>
 80046f2:	3b68      	subs	r3, #104
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	f8df 29dc 	ldr.w	r2, [pc, #2524]	; 80050d4 <main+0x1964>
 80046fa:	f44f 7323 	mov.w	r3, #652	; 0x28c
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	f8df 29d4 	ldr.w	r2, [pc, #2516]	; 80050d8 <main+0x1968>
 8004704:	3bef      	subs	r3, #239
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	f8df 29d0 	ldr.w	r2, [pc, #2512]	; 80050dc <main+0x196c>
 800470c:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	f240 12cf 	movw	r2, #463	; 0x1cf
 8004716:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800471a:	603a      	str	r2, [r7, #0]
 800471c:	6033      	str	r3, [r6, #0]
 800471e:	3a10      	subs	r2, #16
 8004720:	335b      	adds	r3, #91
 8004722:	602a      	str	r2, [r5, #0]
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	2005      	movs	r0, #5
 8004728:	f7fe ff5e 	bl	80035e8 <Posicao>
 800472c:	2050      	movs	r0, #80
 800472e:	f7fe fd4b 	bl	80031c8 <mDelay>
					t=	5.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004732:	f8df 29ac 	ldr.w	r2, [pc, #2476]	; 80050e0 <main+0x1970>
 8004736:	f240 13d3 	movw	r3, #467	; 0x1d3
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 80050cc <main+0x195c>
 8004740:	3321      	adds	r3, #33
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	f8df 2988 	ldr.w	r2, [pc, #2440]	; 80050d0 <main+0x1960>
 8004748:	3b68      	subs	r3, #104
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	f8df 2984 	ldr.w	r2, [pc, #2436]	; 80050d4 <main+0x1964>
 8004750:	f44f 7323 	mov.w	r3, #652	; 0x28c
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	f8df 2980 	ldr.w	r2, [pc, #2432]	; 80050d8 <main+0x1968>
 800475a:	3bee      	subs	r3, #238
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	f8df 297c 	ldr.w	r2, [pc, #2428]	; 80050dc <main+0x196c>
 8004762:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800476c:	3b01      	subs	r3, #1
 800476e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8004772:	603a      	str	r2, [r7, #0]
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	3a10      	subs	r2, #16
 8004778:	335f      	adds	r3, #95
 800477a:	602a      	str	r2, [r5, #0]
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	2005      	movs	r0, #5
 8004780:	f7fe ff32 	bl	80035e8 <Posicao>
 8004784:	2050      	movs	r0, #80
 8004786:	f7fe fd1f 	bl	80031c8 <mDelay>
					t=	5.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800478a:	f8df 2954 	ldr.w	r2, [pc, #2388]	; 80050e0 <main+0x1970>
 800478e:	f240 13d5 	movw	r3, #469	; 0x1d5
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	f8df 2934 	ldr.w	r2, [pc, #2356]	; 80050cc <main+0x195c>
 8004798:	3321      	adds	r3, #33
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	f8df 2930 	ldr.w	r2, [pc, #2352]	; 80050d0 <main+0x1960>
 80047a0:	3b68      	subs	r3, #104
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	f8df 292c 	ldr.w	r2, [pc, #2348]	; 80050d4 <main+0x1964>
 80047a8:	33fe      	adds	r3, #254
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	f8df 2928 	ldr.w	r2, [pc, #2344]	; 80050d8 <main+0x1968>
 80047b0:	3bed      	subs	r3, #237
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	f8df 2924 	ldr.w	r2, [pc, #2340]	; 80050dc <main+0x196c>
 80047b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 80047c2:	f240 1283 	movw	r2, #387	; 0x183
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	6032      	str	r2, [r6, #0]
 80047ca:	3b11      	subs	r3, #17
 80047cc:	3265      	adds	r2, #101
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	6022      	str	r2, [r4, #0]
 80047d2:	2005      	movs	r0, #5
 80047d4:	f7fe ff08 	bl	80035e8 <Posicao>
 80047d8:	2050      	movs	r0, #80
 80047da:	f7fe fcf5 	bl	80031c8 <mDelay>
					t=	5.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80047de:	f8df 3900 	ldr.w	r3, [pc, #2304]	; 80050e0 <main+0x1970>
 80047e2:	f240 12d7 	movw	r2, #471	; 0x1d7
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f8df 38e0 	ldr.w	r3, [pc, #2272]	; 80050cc <main+0x195c>
 80047ec:	3222      	adds	r2, #34
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f8df 38dc 	ldr.w	r3, [pc, #2268]	; 80050d0 <main+0x1960>
 80047f4:	3a6a      	subs	r2, #106
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f8df 38d8 	ldr.w	r3, [pc, #2264]	; 80050d4 <main+0x1964>
 80047fc:	32fc      	adds	r2, #252
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f8df 38d4 	ldr.w	r3, [pc, #2260]	; 80050d8 <main+0x1968>
 8004804:	3aeb      	subs	r2, #235
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f8df 28d0 	ldr.w	r2, [pc, #2256]	; 80050dc <main+0x196c>
 800480c:	f44f 7341 	mov.w	r3, #772	; 0x304
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 8004816:	f240 1281 	movw	r2, #385	; 0x181
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	6032      	str	r2, [r6, #0]
 800481e:	3b11      	subs	r3, #17
 8004820:	326a      	adds	r2, #106
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	6022      	str	r2, [r4, #0]
 8004826:	2005      	movs	r0, #5
 8004828:	f7fe fede 	bl	80035e8 <Posicao>
 800482c:	2050      	movs	r0, #80
 800482e:	f7fe fccb 	bl	80031c8 <mDelay>
					t=	5.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004832:	f8df 38ac 	ldr.w	r3, [pc, #2220]	; 80050e0 <main+0x1970>
 8004836:	f240 12d9 	movw	r2, #473	; 0x1d9
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	f8df 388c 	ldr.w	r3, [pc, #2188]	; 80050cc <main+0x195c>
 8004840:	3222      	adds	r2, #34
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f8df 3888 	ldr.w	r3, [pc, #2184]	; 80050d0 <main+0x1960>
 8004848:	3a6c      	subs	r2, #108
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f8df 3884 	ldr.w	r3, [pc, #2180]	; 80050d4 <main+0x1964>
 8004850:	32fb      	adds	r2, #251
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f8df 3880 	ldr.w	r3, [pc, #2176]	; 80050d8 <main+0x1968>
 8004858:	3ae9      	subs	r2, #233
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f8df 287c 	ldr.w	r2, [pc, #2172]	; 80050dc <main+0x196c>
 8004860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800486a:	3b03      	subs	r3, #3
 800486c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	6032      	str	r2, [r6, #0]
 8004874:	3b11      	subs	r3, #17
 8004876:	326e      	adds	r2, #110
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	2005      	movs	r0, #5
 800487e:	f7fe feb3 	bl	80035e8 <Posicao>
 8004882:	2050      	movs	r0, #80
 8004884:	f7fe fca0 	bl	80031c8 <mDelay>
					t=	5.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004888:	f8df 2854 	ldr.w	r2, [pc, #2132]	; 80050e0 <main+0x1970>
 800488c:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	f8df 3838 	ldr.w	r3, [pc, #2104]	; 80050cc <main+0x195c>
 8004896:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f8df 3830 	ldr.w	r3, [pc, #2096]	; 80050d0 <main+0x1960>
 80048a0:	3a6f      	subs	r2, #111
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f8df 382c 	ldr.w	r3, [pc, #2092]	; 80050d4 <main+0x1964>
 80048a8:	32f9      	adds	r2, #249
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f8df 3828 	ldr.w	r3, [pc, #2088]	; 80050d8 <main+0x1968>
 80048b0:	3ae6      	subs	r2, #230
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f8df 2824 	ldr.w	r2, [pc, #2084]	; 80050dc <main+0x196c>
 80048b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80048c2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	6032      	str	r2, [r6, #0]
 80048ca:	3b10      	subs	r3, #16
 80048cc:	3274      	adds	r2, #116
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	2005      	movs	r0, #5
 80048d4:	f7fe fe88 	bl	80035e8 <Posicao>
 80048d8:	2050      	movs	r0, #80
 80048da:	f7fe fc75 	bl	80031c8 <mDelay>
					t=	5.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80048de:	f8df 3800 	ldr.w	r3, [pc, #2048]	; 80050e0 <main+0x1970>
 80048e2:	f44f 72ef 	mov.w	r2, #478	; 0x1de
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f8df 37e0 	ldr.w	r3, [pc, #2016]	; 80050cc <main+0x195c>
 80048ec:	3222      	adds	r2, #34
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f8df 37dc 	ldr.w	r3, [pc, #2012]	; 80050d0 <main+0x1960>
 80048f4:	3a71      	subs	r2, #113
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f8df 37d8 	ldr.w	r3, [pc, #2008]	; 80050d4 <main+0x1964>
 80048fc:	32f6      	adds	r2, #246
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f8df 37d4 	ldr.w	r3, [pc, #2004]	; 80050d8 <main+0x1968>
 8004904:	3ae3      	subs	r2, #227
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 80050dc <main+0x196c>
 800490c:	f240 23f9 	movw	r3, #761	; 0x2f9
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8004916:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	6032      	str	r2, [r6, #0]
 800491e:	3b10      	subs	r3, #16
 8004920:	3279      	adds	r2, #121
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	2005      	movs	r0, #5
 8004928:	f7fe fe5e 	bl	80035e8 <Posicao>
 800492c:	2050      	movs	r0, #80
 800492e:	f7fe fc4b 	bl	80031c8 <mDelay>
					t=	5.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004932:	f8df 37ac 	ldr.w	r3, [pc, #1964]	; 80050e0 <main+0x1970>
 8004936:	f240 12e1 	movw	r2, #481	; 0x1e1
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f8df 378c 	ldr.w	r3, [pc, #1932]	; 80050cc <main+0x195c>
 8004940:	3222      	adds	r2, #34
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f8df 3788 	ldr.w	r3, [pc, #1928]	; 80050d0 <main+0x1960>
 8004948:	3a74      	subs	r2, #116
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	f8df 3784 	ldr.w	r3, [pc, #1924]	; 80050d4 <main+0x1964>
 8004950:	32f2      	adds	r2, #242
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f8df 3780 	ldr.w	r3, [pc, #1920]	; 80050d8 <main+0x1968>
 8004958:	3ade      	subs	r2, #222
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f8df 377c 	ldr.w	r3, [pc, #1916]	; 80050dc <main+0x196c>
 8004960:	f502 72a9 	add.w	r2, r2, #338	; 0x152
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 800496a:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	6032      	str	r2, [r6, #0]
 8004972:	3b0f      	subs	r3, #15
 8004974:	327f      	adds	r2, #127
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	6022      	str	r2, [r4, #0]
 800497a:	2005      	movs	r0, #5
 800497c:	f7fe fe34 	bl	80035e8 <Posicao>
 8004980:	2050      	movs	r0, #80
 8004982:	f7fe fc21 	bl	80031c8 <mDelay>
					t=	6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004986:	f8df 3758 	ldr.w	r3, [pc, #1880]	; 80050e0 <main+0x1970>
 800498a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f8df 3738 	ldr.w	r3, [pc, #1848]	; 80050cc <main+0x195c>
 8004994:	3223      	adds	r2, #35
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f8df 3734 	ldr.w	r3, [pc, #1844]	; 80050d0 <main+0x1960>
 800499c:	3a78      	subs	r2, #120
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f8df 3730 	ldr.w	r3, [pc, #1840]	; 80050d4 <main+0x1964>
 80049a4:	32ef      	adds	r2, #239
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f8df 372c 	ldr.w	r3, [pc, #1836]	; 80050d8 <main+0x1968>
 80049ac:	3ada      	subs	r2, #218
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 80050dc <main+0x196c>
 80049b4:	f240 23f2 	movw	r3, #754	; 0x2f2
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80049be:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	6032      	str	r2, [r6, #0]
 80049c6:	3b0d      	subs	r3, #13
 80049c8:	3284      	adds	r2, #132
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	6022      	str	r2, [r4, #0]
 80049ce:	2006      	movs	r0, #6
 80049d0:	f7fe fe0a 	bl	80035e8 <Posicao>
 80049d4:	2050      	movs	r0, #80
 80049d6:	f7fe fbf7 	bl	80031c8 <mDelay>
					t=	6.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80049da:	f8df 3704 	ldr.w	r3, [pc, #1796]	; 80050e0 <main+0x1970>
 80049de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 80050cc <main+0x195c>
 80049e8:	3222      	adds	r2, #34
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f8df 36e0 	ldr.w	r3, [pc, #1760]	; 80050d0 <main+0x1960>
 80049f0:	3a7b      	subs	r2, #123
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f8df 36dc 	ldr.w	r3, [pc, #1756]	; 80050d4 <main+0x1964>
 80049f8:	32eb      	adds	r2, #235
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f8df 36d8 	ldr.w	r3, [pc, #1752]	; 80050d8 <main+0x1968>
 8004a00:	3ad5      	subs	r2, #213
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	f8df 26d4 	ldr.w	r2, [pc, #1748]	; 80050dc <main+0x196c>
 8004a08:	f240 23ee 	movw	r3, #750	; 0x2ee
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a12:	3b03      	subs	r3, #3
 8004a14:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	6032      	str	r2, [r6, #0]
 8004a1c:	3b0d      	subs	r3, #13
 8004a1e:	328a      	adds	r2, #138
 8004a20:	602b      	str	r3, [r5, #0]
 8004a22:	6022      	str	r2, [r4, #0]
 8004a24:	2006      	movs	r0, #6
 8004a26:	f7fe fddf 	bl	80035e8 <Posicao>
 8004a2a:	2050      	movs	r0, #80
 8004a2c:	f7fe fbcc 	bl	80031c8 <mDelay>
					t=	6.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004a30:	f8df 36ac 	ldr.w	r3, [pc, #1708]	; 80050e0 <main+0x1970>
 8004a34:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f8df 3690 	ldr.w	r3, [pc, #1680]	; 80050cc <main+0x195c>
 8004a3e:	3223      	adds	r2, #35
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	f8df 368c 	ldr.w	r3, [pc, #1676]	; 80050d0 <main+0x1960>
 8004a46:	3a7f      	subs	r2, #127
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f8df 3688 	ldr.w	r3, [pc, #1672]	; 80050d4 <main+0x1964>
 8004a4e:	32e6      	adds	r2, #230
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f8df 3684 	ldr.w	r3, [pc, #1668]	; 80050d8 <main+0x1968>
 8004a56:	3acf      	subs	r2, #207
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f8df 2680 	ldr.w	r2, [pc, #1664]	; 80050dc <main+0x196c>
 8004a5e:	f240 23ea 	movw	r3, #746	; 0x2ea
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	3bfd      	subs	r3, #253
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	3b78      	subs	r3, #120
 8004a6a:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8004a6e:	6033      	str	r3, [r6, #0]
 8004a70:	338f      	adds	r3, #143
 8004a72:	602a      	str	r2, [r5, #0]
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	2006      	movs	r0, #6
 8004a78:	f7fe fdb6 	bl	80035e8 <Posicao>
 8004a7c:	2050      	movs	r0, #80
 8004a7e:	f7fe fba3 	bl	80031c8 <mDelay>
					t=	6.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004a82:	f8df 265c 	ldr.w	r2, [pc, #1628]	; 80050e0 <main+0x1970>
 8004a86:	f240 13eb 	movw	r3, #491	; 0x1eb
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	f8df 263c 	ldr.w	r2, [pc, #1596]	; 80050cc <main+0x195c>
 8004a90:	3322      	adds	r3, #34
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	f8df 2638 	ldr.w	r2, [pc, #1592]	; 80050d0 <main+0x1960>
 8004a98:	3b82      	subs	r3, #130
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	f8df 2634 	ldr.w	r2, [pc, #1588]	; 80050d4 <main+0x1964>
 8004aa0:	33e2      	adds	r3, #226
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	f8df 2630 	ldr.w	r2, [pc, #1584]	; 80050d8 <main+0x1968>
 8004aa8:	3bcb      	subs	r3, #203
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	f8df 262c 	ldr.w	r2, [pc, #1580]	; 80050dc <main+0x196c>
 8004ab0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	3bf7      	subs	r3, #247
 8004ab8:	f240 1273 	movw	r2, #371	; 0x173
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	6032      	str	r2, [r6, #0]
 8004ac0:	3b09      	subs	r3, #9
 8004ac2:	3294      	adds	r2, #148
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	6022      	str	r2, [r4, #0]
 8004ac8:	2006      	movs	r0, #6
 8004aca:	f7fe fd8d 	bl	80035e8 <Posicao>
 8004ace:	2050      	movs	r0, #80
 8004ad0:	f7fe fb7a 	bl	80031c8 <mDelay>
					t=	6.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004ad4:	f8df 3608 	ldr.w	r3, [pc, #1544]	; 80050e0 <main+0x1970>
 8004ad8:	f240 12ed 	movw	r2, #493	; 0x1ed
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	f8df 35ec 	ldr.w	r3, [pc, #1516]	; 80050cc <main+0x195c>
 8004ae2:	3223      	adds	r2, #35
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 80050d0 <main+0x1960>
 8004aea:	3a85      	subs	r2, #133
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f8df 35e4 	ldr.w	r3, [pc, #1508]	; 80050d4 <main+0x1964>
 8004af2:	32dc      	adds	r2, #220
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f8df 35e0 	ldr.w	r3, [pc, #1504]	; 80050d8 <main+0x1968>
 8004afa:	3ac5      	subs	r2, #197
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f8df 25dc 	ldr.w	r2, [pc, #1500]	; 80050dc <main+0x196c>
 8004b02:	f240 23e2 	movw	r3, #738	; 0x2e2
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	3bf1      	subs	r3, #241
 8004b0a:	f240 1273 	movw	r2, #371	; 0x173
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	6032      	str	r2, [r6, #0]
 8004b12:	3b07      	subs	r3, #7
 8004b14:	3298      	adds	r2, #152
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	6022      	str	r2, [r4, #0]
 8004b1a:	2006      	movs	r0, #6
 8004b1c:	f7fe fd64 	bl	80035e8 <Posicao>
 8004b20:	2050      	movs	r0, #80
 8004b22:	f7fe fb51 	bl	80031c8 <mDelay>
					t=	6.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004b26:	f8df 35b8 	ldr.w	r3, [pc, #1464]	; 80050e0 <main+0x1970>
 8004b2a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f8df 3598 	ldr.w	r3, [pc, #1432]	; 80050cc <main+0x195c>
 8004b34:	3223      	adds	r2, #35
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	f8df 3594 	ldr.w	r3, [pc, #1428]	; 80050d0 <main+0x1960>
 8004b3c:	3a89      	subs	r2, #137
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f8df 2590 	ldr.w	r2, [pc, #1424]	; 80050d4 <main+0x1964>
 8004b44:	f240 2361 	movw	r3, #609	; 0x261
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	f8df 358c 	ldr.w	r3, [pc, #1420]	; 80050d8 <main+0x1968>
 8004b4e:	f240 12a1 	movw	r2, #417	; 0x1a1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f8df 2584 	ldr.w	r2, [pc, #1412]	; 80050dc <main+0x196c>
 8004b58:	f240 23de 	movw	r3, #734	; 0x2de
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	3beb      	subs	r3, #235
 8004b60:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	6032      	str	r2, [r6, #0]
 8004b68:	3b05      	subs	r3, #5
 8004b6a:	329c      	adds	r2, #156
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	6022      	str	r2, [r4, #0]
 8004b70:	2006      	movs	r0, #6
 8004b72:	f7fe fd39 	bl	80035e8 <Posicao>
 8004b76:	2050      	movs	r0, #80
 8004b78:	f7fe fb26 	bl	80031c8 <mDelay>
					t=	6.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004b7c:	f8df 3560 	ldr.w	r3, [pc, #1376]	; 80050e0 <main+0x1970>
 8004b80:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f8df 3544 	ldr.w	r3, [pc, #1348]	; 80050cc <main+0x195c>
 8004b8a:	3222      	adds	r2, #34
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f8df 3540 	ldr.w	r3, [pc, #1344]	; 80050d0 <main+0x1960>
 8004b92:	3a8c      	subs	r2, #140
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f8df 353c 	ldr.w	r3, [pc, #1340]	; 80050d4 <main+0x1964>
 8004b9a:	32d2      	adds	r2, #210
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 80050d8 <main+0x1968>
 8004ba2:	3abb      	subs	r2, #187
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f8df 3534 	ldr.w	r3, [pc, #1332]	; 80050dc <main+0x196c>
 8004baa:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8004bae:	3203      	adds	r2, #3
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8004bb6:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	6032      	str	r2, [r6, #0]
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	32a0      	adds	r2, #160
 8004bc2:	602b      	str	r3, [r5, #0]
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	2006      	movs	r0, #6
 8004bc8:	f7fe fd0e 	bl	80035e8 <Posicao>
 8004bcc:	2050      	movs	r0, #80
 8004bce:	f7fe fafb 	bl	80031c8 <mDelay>
					t=	6.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004bd2:	f8df 350c 	ldr.w	r3, [pc, #1292]	; 80050e0 <main+0x1970>
 8004bd6:	f240 12f5 	movw	r2, #501	; 0x1f5
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	f8df 34ec 	ldr.w	r3, [pc, #1260]	; 80050cc <main+0x195c>
 8004be0:	3223      	adds	r2, #35
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f8df 34e8 	ldr.w	r3, [pc, #1256]	; 80050d0 <main+0x1960>
 8004be8:	3a90      	subs	r2, #144
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f8df 24e4 	ldr.w	r2, [pc, #1252]	; 80050d4 <main+0x1964>
 8004bf0:	f240 2355 	movw	r3, #597	; 0x255
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	f8df 34e0 	ldr.w	r3, [pc, #1248]	; 80050d8 <main+0x1968>
 8004bfa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f8df 34d8 	ldr.w	r3, [pc, #1240]	; 80050dc <main+0x196c>
 8004c04:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8004c08:	3201      	adds	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8004c10:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	6032      	str	r2, [r6, #0]
 8004c18:	3b02      	subs	r3, #2
 8004c1a:	32a3      	adds	r2, #163
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	6022      	str	r2, [r4, #0]
 8004c20:	2006      	movs	r0, #6
 8004c22:	f7fe fce1 	bl	80035e8 <Posicao>
 8004c26:	2050      	movs	r0, #80
 8004c28:	f7fe face 	bl	80031c8 <mDelay>
					t=	6.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004c2c:	f8df 34b0 	ldr.w	r3, [pc, #1200]	; 80050e0 <main+0x1970>
 8004c30:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	f8df 3494 	ldr.w	r3, [pc, #1172]	; 80050cc <main+0x195c>
 8004c3a:	3222      	adds	r2, #34
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f8df 3490 	ldr.w	r3, [pc, #1168]	; 80050d0 <main+0x1960>
 8004c42:	3a92      	subs	r2, #146
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 80050d4 <main+0x1964>
 8004c4a:	32c8      	adds	r2, #200
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 80050d8 <main+0x1968>
 8004c52:	3ab4      	subs	r2, #180
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 80050dc <main+0x196c>
 8004c5a:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8004c5e:	3203      	adds	r2, #3
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 8004c66:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	6032      	str	r2, [r6, #0]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	32a6      	adds	r2, #166
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	6022      	str	r2, [r4, #0]
 8004c76:	2006      	movs	r0, #6
 8004c78:	f7fe fcb6 	bl	80035e8 <Posicao>
 8004c7c:	2050      	movs	r0, #80
 8004c7e:	f7fe faa3 	bl	80031c8 <mDelay>
					t=	6.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004c82:	f8df 345c 	ldr.w	r3, [pc, #1116]	; 80050e0 <main+0x1970>
 8004c86:	f240 12fb 	movw	r2, #507	; 0x1fb
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 80050cc <main+0x195c>
 8004c90:	3222      	adds	r2, #34
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f8df 3438 	ldr.w	r3, [pc, #1080]	; 80050d0 <main+0x1960>
 8004c98:	3a96      	subs	r2, #150
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f8df 3434 	ldr.w	r3, [pc, #1076]	; 80050d4 <main+0x1964>
 8004ca0:	32c5      	adds	r2, #197
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 80050d8 <main+0x1968>
 8004ca8:	3ab2      	subs	r2, #178
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 80050dc <main+0x196c>
 8004cb0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	3bd3      	subs	r3, #211
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	3b89      	subs	r3, #137
 8004cbc:	f240 12fd 	movw	r2, #509	; 0x1fd
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	33a8      	adds	r3, #168
 8004cc4:	602a      	str	r2, [r5, #0]
 8004cc6:	6023      	str	r3, [r4, #0]
 8004cc8:	2006      	movs	r0, #6
 8004cca:	f7fe fc8d 	bl	80035e8 <Posicao>
 8004cce:	2050      	movs	r0, #80
 8004cd0:	f7fe fa7a 	bl	80031c8 <mDelay>
					t=	7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004cd4:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 80050e0 <main+0x1970>
 8004cd8:	f240 13fd 	movw	r3, #509	; 0x1fd
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4afb      	ldr	r2, [pc, #1004]	(80050cc <main+0x195c>)
 8004ce0:	3322      	adds	r3, #34
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4afa      	ldr	r2, [pc, #1000]	(80050d0 <main+0x1960>)
 8004ce6:	3b98      	subs	r3, #152
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4afa      	ldr	r2, [pc, #1000]	(80050d4 <main+0x1964>)
 8004cec:	33c1      	adds	r3, #193
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4af9      	ldr	r2, [pc, #996]	(80050d8 <main+0x1968>)
 8004cf2:	3bb0      	subs	r3, #176
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4af9      	ldr	r2, [pc, #996]	(80050dc <main+0x196c>)
 8004cf8:	f44f 7333 	mov.w	r3, #716	; 0x2cc
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	3bcd      	subs	r3, #205
 8004d00:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	6032      	str	r2, [r6, #0]
 8004d08:	3302      	adds	r3, #2
 8004d0a:	32a9      	adds	r2, #169
 8004d0c:	602b      	str	r3, [r5, #0]
 8004d0e:	6022      	str	r2, [r4, #0]
 8004d10:	2007      	movs	r0, #7
 8004d12:	f7fe fc69 	bl	80035e8 <Posicao>
 8004d16:	2050      	movs	r0, #80
 8004d18:	f7fe fa56 	bl	80031c8 <mDelay>
					t=	7.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004d1c:	4bf0      	ldr	r3, [pc, #960]	(80050e0 <main+0x1970>)
 8004d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	4be9      	ldr	r3, [pc, #932]	(80050cc <main+0x195c>)
 8004d26:	3222      	adds	r2, #34
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	4be9      	ldr	r3, [pc, #932]	(80050d0 <main+0x1960>)
 8004d2c:	3a9b      	subs	r2, #155
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	4be8      	ldr	r3, [pc, #928]	(80050d4 <main+0x1964>)
 8004d32:	32bf      	adds	r2, #191
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4be8      	ldr	r3, [pc, #928]	(80050d8 <main+0x1968>)
 8004d38:	3ab1      	subs	r2, #177
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	4be7      	ldr	r3, [pc, #924]	(80050dc <main+0x196c>)
 8004d3e:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f240 2302 	movw	r3, #514	; 0x202
 8004d48:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	6032      	str	r2, [r6, #0]
 8004d50:	3303      	adds	r3, #3
 8004d52:	32aa      	adds	r2, #170
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	2007      	movs	r0, #7
 8004d58:	6022      	str	r2, [r4, #0]
 8004d5a:	f7fe fc45 	bl	80035e8 <Posicao>
 8004d5e:	2050      	movs	r0, #80
 8004d60:	f7fe fa32 	bl	80031c8 <mDelay>
					t=	7.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004d64:	4bde      	ldr	r3, [pc, #888]	(80050e0 <main+0x1970>)
 8004d66:	f240 2202 	movw	r2, #514	; 0x202
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4bd7      	ldr	r3, [pc, #860]	(80050cc <main+0x195c>)
 8004d6e:	3222      	adds	r2, #34
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	4bd7      	ldr	r3, [pc, #860]	(80050d0 <main+0x1960>)
 8004d74:	3a9d      	subs	r2, #157
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	4bd6      	ldr	r3, [pc, #856]	(80050d4 <main+0x1964>)
 8004d7a:	32bd      	adds	r2, #189
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	4bd6      	ldr	r3, [pc, #856]	(80050d8 <main+0x1968>)
 8004d80:	3ab2      	subs	r2, #178
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	4ad5      	ldr	r2, [pc, #852]	(80050dc <main+0x196c>)
 8004d86:	f240 23c6 	movw	r3, #710	; 0x2c6
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	3bc1      	subs	r3, #193
 8004d8e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	6032      	str	r2, [r6, #0]
 8004d96:	3304      	adds	r3, #4
 8004d98:	32aa      	adds	r2, #170
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	2007      	movs	r0, #7
 8004da0:	f7fe fc22 	bl	80035e8 <Posicao>
 8004da4:	2050      	movs	r0, #80
 8004da6:	f7fe fa0f 	bl	80031c8 <mDelay>
					t=	7.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004daa:	4bcd      	ldr	r3, [pc, #820]	(80050e0 <main+0x1970>)
 8004dac:	f240 2205 	movw	r2, #517	; 0x205
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	4bc6      	ldr	r3, [pc, #792]	(80050cc <main+0x195c>)
 8004db4:	3221      	adds	r2, #33
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	4bc5      	ldr	r3, [pc, #788]	(80050d0 <main+0x1960>)
 8004dba:	3a9f      	subs	r2, #159
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	4bc5      	ldr	r3, [pc, #788]	(80050d4 <main+0x1964>)
 8004dc0:	32bd      	adds	r2, #189
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	4bc4      	ldr	r3, [pc, #784]	(80050d8 <main+0x1968>)
 8004dc6:	3ab6      	subs	r2, #182
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	4ac4      	ldr	r2, [pc, #784]	(80050dc <main+0x196c>)
 8004dcc:	f240 23c3 	movw	r3, #707	; 0x2c3
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	3bbb      	subs	r3, #187
 8004dd4:	f240 1281 	movw	r2, #385	; 0x181
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	6032      	str	r2, [r6, #0]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	32a8      	adds	r2, #168
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	6022      	str	r2, [r4, #0]
 8004de4:	2007      	movs	r0, #7
 8004de6:	f7fe fbff 	bl	80035e8 <Posicao>
 8004dea:	2050      	movs	r0, #80
 8004dec:	f7fe f9ec 	bl	80031c8 <mDelay>
					t=	7.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004df0:	4bbb      	ldr	r3, [pc, #748]	(80050e0 <main+0x1970>)
 8004df2:	f240 2207 	movw	r2, #519	; 0x207
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	4bb4      	ldr	r3, [pc, #720]	(80050cc <main+0x195c>)
 8004dfa:	3221      	adds	r2, #33
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4bb4      	ldr	r3, [pc, #720]	(80050d0 <main+0x1960>)
 8004e00:	3aa1      	subs	r2, #161
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	4bb3      	ldr	r3, [pc, #716]	(80050d4 <main+0x1964>)
 8004e06:	32be      	adds	r2, #190
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	4bb3      	ldr	r3, [pc, #716]	(80050d8 <main+0x1968>)
 8004e0c:	3abb      	subs	r2, #187
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	4bb2      	ldr	r3, [pc, #712]	(80050dc <main+0x196c>)
 8004e12:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8004e1c:	3a03      	subs	r2, #3
 8004e1e:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	6032      	str	r2, [r6, #0]
 8004e26:	3304      	adds	r3, #4
 8004e28:	32a7      	adds	r2, #167
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	2007      	movs	r0, #7
 8004e2e:	6022      	str	r2, [r4, #0]
 8004e30:	f7fe fbda 	bl	80035e8 <Posicao>
 8004e34:	2050      	movs	r0, #80
 8004e36:	f7fe f9c7 	bl	80031c8 <mDelay>
					t=	7.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004e3a:	4ba9      	ldr	r3, [pc, #676]	(80050e0 <main+0x1970>)
 8004e3c:	f240 2209 	movw	r2, #521	; 0x209
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	4ba2      	ldr	r3, [pc, #648]	(80050cc <main+0x195c>)
 8004e44:	3221      	adds	r2, #33
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	4ba1      	ldr	r3, [pc, #644]	(80050d0 <main+0x1960>)
 8004e4a:	3aa3      	subs	r2, #163
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	4ba1      	ldr	r3, [pc, #644]	(80050d4 <main+0x1964>)
 8004e50:	32c0      	adds	r2, #192
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	4ba0      	ldr	r3, [pc, #640]	(80050d8 <main+0x1968>)
 8004e56:	3ac1      	subs	r2, #193
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	4aa0      	ldr	r2, [pc, #640]	(80050dc <main+0x196c>)
 8004e5c:	f240 23bd 	movw	r3, #701	; 0x2bd
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	3bae      	subs	r3, #174
 8004e64:	f240 128b 	movw	r2, #395	; 0x18b
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	6032      	str	r2, [r6, #0]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	32a4      	adds	r2, #164
 8004e70:	602b      	str	r3, [r5, #0]
 8004e72:	6022      	str	r2, [r4, #0]
 8004e74:	2007      	movs	r0, #7
 8004e76:	f7fe fbb7 	bl	80035e8 <Posicao>
 8004e7a:	2050      	movs	r0, #80
 8004e7c:	f7fe f9a4 	bl	80031c8 <mDelay>
					t=	7.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004e80:	4b97      	ldr	r3, [pc, #604]	(80050e0 <main+0x1970>)
 8004e82:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	4b90      	ldr	r3, [pc, #576]	(80050cc <main+0x195c>)
 8004e8a:	3220      	adds	r2, #32
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	4b90      	ldr	r3, [pc, #576]	(80050d0 <main+0x1960>)
 8004e90:	3aa4      	subs	r2, #164
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	4b8f      	ldr	r3, [pc, #572]	(80050d4 <main+0x1964>)
 8004e96:	32c3      	adds	r2, #195
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	4b8f      	ldr	r3, [pc, #572]	(80050d8 <main+0x1968>)
 8004e9c:	3aca      	subs	r2, #202
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	4a8e      	ldr	r2, [pc, #568]	(80050dc <main+0x196c>)
 8004ea2:	f240 23ba 	movw	r3, #698	; 0x2ba
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	3ba6      	subs	r3, #166
 8004eaa:	f240 1291 	movw	r2, #401	; 0x191
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	6032      	str	r2, [r6, #0]
 8004eb2:	3303      	adds	r3, #3
 8004eb4:	32a1      	adds	r2, #161
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	6022      	str	r2, [r4, #0]
 8004eba:	2007      	movs	r0, #7
 8004ebc:	f7fe fb94 	bl	80035e8 <Posicao>
 8004ec0:	2050      	movs	r0, #80
 8004ec2:	f7fe f981 	bl	80031c8 <mDelay>
					t=	7.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004ec6:	4b86      	ldr	r3, [pc, #536]	(80050e0 <main+0x1970>)
 8004ec8:	f240 220e 	movw	r2, #526	; 0x20e
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	4b7f      	ldr	r3, [pc, #508]	(80050cc <main+0x195c>)
 8004ed0:	3220      	adds	r2, #32
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	(80050d0 <main+0x1960>)
 8004ed6:	3aa6      	subs	r2, #166
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	4b7e      	ldr	r3, [pc, #504]	(80050d4 <main+0x1964>)
 8004edc:	32c8      	adds	r2, #200
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	4b7d      	ldr	r3, [pc, #500]	(80050d8 <main+0x1968>)
 8004ee2:	3ad4      	subs	r2, #212
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	4b7d      	ldr	r3, [pc, #500]	(80050dc <main+0x196c>)
 8004ee8:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8004eec:	3203      	adds	r2, #3
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004ef4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	6032      	str	r2, [r6, #0]
 8004efc:	3302      	adds	r3, #2
 8004efe:	329d      	adds	r2, #157
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	2007      	movs	r0, #7
 8004f04:	6022      	str	r2, [r4, #0]
 8004f06:	f7fe fb6f 	bl	80035e8 <Posicao>
 8004f0a:	2050      	movs	r0, #80
 8004f0c:	f7fe f95c 	bl	80031c8 <mDelay>
					t=	7.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004f10:	4b73      	ldr	r3, [pc, #460]	(80050e0 <main+0x1970>)
 8004f12:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	4b6c      	ldr	r3, [pc, #432]	(80050cc <main+0x195c>)
 8004f1a:	3220      	adds	r2, #32
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	4b6c      	ldr	r3, [pc, #432]	(80050d0 <main+0x1960>)
 8004f20:	3aa8      	subs	r2, #168
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	4b6b      	ldr	r3, [pc, #428]	(80050d4 <main+0x1964>)
 8004f26:	32ce      	adds	r2, #206
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	4b6b      	ldr	r3, [pc, #428]	(80050d8 <main+0x1968>)
 8004f2c:	3ae0      	subs	r2, #224
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	4a6a      	ldr	r2, [pc, #424]	(80050dc <main+0x196c>)
 8004f32:	f240 23b5 	movw	r3, #693	; 0x2b5
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	3b98      	subs	r3, #152
 8004f3a:	f240 129f 	movw	r2, #415	; 0x19f
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	331b      	adds	r3, #27
 8004f44:	6032      	str	r2, [r6, #0]
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	2007      	movs	r0, #7
 8004f4a:	f7fe fb4d 	bl	80035e8 <Posicao>
 8004f4e:	2050      	movs	r0, #80
 8004f50:	f7fe f93a 	bl	80031c8 <mDelay>
					t=	7.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004f54:	4a62      	ldr	r2, [pc, #392]	(80050e0 <main+0x1970>)
 8004f56:	f240 2312 	movw	r3, #530	; 0x212
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	4a5b      	ldr	r2, [pc, #364]	(80050cc <main+0x195c>)
 8004f5e:	3320      	adds	r3, #32
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4a5b      	ldr	r2, [pc, #364]	(80050d0 <main+0x1960>)
 8004f64:	3baa      	subs	r3, #170
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4a5a      	ldr	r2, [pc, #360]	(80050d4 <main+0x1964>)
 8004f6a:	33d5      	adds	r3, #213
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4a5a      	ldr	r2, [pc, #360]	(80050d8 <main+0x1968>)
 8004f70:	3bed      	subs	r3, #237
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	4a59      	ldr	r2, [pc, #356]	(80050dc <main+0x196c>)
 8004f76:	f503 73a1 	add.w	r3, r3, #322	; 0x142
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	3b90      	subs	r3, #144
 8004f7e:	f240 12a7 	movw	r2, #423	; 0x1a7
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	6032      	str	r2, [r6, #0]
 8004f86:	3b02      	subs	r3, #2
 8004f88:	3293      	adds	r2, #147
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	6022      	str	r2, [r4, #0]
 8004f8e:	2007      	movs	r0, #7
 8004f90:	f7fe fb2a 	bl	80035e8 <Posicao>
 8004f94:	2050      	movs	r0, #80
 8004f96:	f7fe f917 	bl	80031c8 <mDelay>
					t=	8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004f9a:	4b51      	ldr	r3, [pc, #324]	(80050e0 <main+0x1970>)
 8004f9c:	f44f 7205 	mov.w	r2, #532	; 0x214
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	(80050cc <main+0x195c>)
 8004fa4:	3220      	adds	r2, #32
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	4b49      	ldr	r3, [pc, #292]	(80050d0 <main+0x1960>)
 8004faa:	3aac      	subs	r2, #172
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	4b49      	ldr	r3, [pc, #292]	(80050d4 <main+0x1964>)
 8004fb0:	32de      	adds	r2, #222
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	4b48      	ldr	r3, [pc, #288]	(80050d8 <main+0x1968>)
 8004fb6:	3afd      	subs	r2, #253
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	4a48      	ldr	r2, [pc, #288]	(80050dc <main+0x196c>)
 8004fbc:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	3b89      	subs	r3, #137
 8004fc4:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	6032      	str	r2, [r6, #0]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	328d      	adds	r2, #141
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	6022      	str	r2, [r4, #0]
 8004fd4:	2008      	movs	r0, #8
 8004fd6:	f7fe fb07 	bl	80035e8 <Posicao>
 8004fda:	2050      	movs	r0, #80
 8004fdc:	f7fe f8f4 	bl	80031c8 <mDelay>
					t=	8.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8004fe0:	4b3f      	ldr	r3, [pc, #252]	(80050e0 <main+0x1970>)
 8004fe2:	f240 2216 	movw	r2, #534	; 0x216
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	4b38      	ldr	r3, [pc, #224]	(80050cc <main+0x195c>)
 8004fea:	321f      	adds	r2, #31
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	4b38      	ldr	r3, [pc, #224]	(80050d0 <main+0x1960>)
 8004ff0:	3aad      	subs	r2, #173
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	4b37      	ldr	r3, [pc, #220]	(80050d4 <main+0x1964>)
 8004ff6:	32e7      	adds	r2, #231
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	4a37      	ldr	r2, [pc, #220]	(80050d8 <main+0x1968>)
 8004ffc:	f240 1363 	movw	r3, #355	; 0x163
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4a36      	ldr	r2, [pc, #216]	(80050dc <main+0x196c>)
 8005004:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	3b81      	subs	r3, #129
 800500c:	f240 12b9 	movw	r2, #441	; 0x1b9
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	6032      	str	r2, [r6, #0]
 8005014:	3b06      	subs	r3, #6
 8005016:	3286      	adds	r2, #134
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	6022      	str	r2, [r4, #0]
 800501c:	2008      	movs	r0, #8
 800501e:	f7fe fae3 	bl	80035e8 <Posicao>
 8005022:	2050      	movs	r0, #80
 8005024:	f7fe f8d0 	bl	80031c8 <mDelay>
					t=	8.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005028:	4b2d      	ldr	r3, [pc, #180]	(80050e0 <main+0x1970>)
 800502a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	4b26      	ldr	r3, [pc, #152]	(80050cc <main+0x195c>)
 8005032:	321f      	adds	r2, #31
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	4b26      	ldr	r3, [pc, #152]	(80050d0 <main+0x1960>)
 8005038:	3aaf      	subs	r2, #175
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	4b25      	ldr	r3, [pc, #148]	(80050d4 <main+0x1964>)
 800503e:	32f1      	adds	r2, #241
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	4a25      	ldr	r2, [pc, #148]	(80050d8 <main+0x1968>)
 8005044:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4a24      	ldr	r2, [pc, #144]	(80050dc <main+0x196c>)
 800504c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8005050:	3303      	adds	r3, #3
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	3b79      	subs	r3, #121
 8005056:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	6032      	str	r2, [r6, #0]
 800505e:	3b09      	subs	r3, #9
 8005060:	327f      	adds	r2, #127
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	2008      	movs	r0, #8
 8005068:	f7fe fabe 	bl	80035e8 <Posicao>
 800506c:	2050      	movs	r0, #80
 800506e:	f7fe f8ab 	bl	80031c8 <mDelay>
					t=	8.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005072:	4b1b      	ldr	r3, [pc, #108]	(80050e0 <main+0x1970>)
 8005074:	f240 2219 	movw	r2, #537	; 0x219
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	4b14      	ldr	r3, [pc, #80]	(80050cc <main+0x195c>)
 800507c:	321f      	adds	r2, #31
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	4b13      	ldr	r3, [pc, #76]	(80050d0 <main+0x1960>)
 8005082:	3ab0      	subs	r2, #176
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	4b13      	ldr	r3, [pc, #76]	(80050d4 <main+0x1964>)
 8005088:	32fb      	adds	r2, #251
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	4a12      	ldr	r2, [pc, #72]	(80050d8 <main+0x1968>)
 800508e:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4a11      	ldr	r2, [pc, #68]	(80050dc <main+0x196c>)
 8005096:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800509a:	3301      	adds	r3, #1
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	3b71      	subs	r3, #113
 80050a0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	6032      	str	r2, [r6, #0]
 80050a8:	3b0d      	subs	r3, #13
 80050aa:	3278      	adds	r2, #120
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	6022      	str	r2, [r4, #0]
 80050b0:	2008      	movs	r0, #8
 80050b2:	f7fe fa99 	bl	80035e8 <Posicao>
 80050b6:	2050      	movs	r0, #80
 80050b8:	f7fe f886 	bl	80031c8 <mDelay>
					t=	8.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80050bc:	4b08      	ldr	r3, [pc, #32]	(80050e0 <main+0x1970>)
 80050be:	f240 221b 	movw	r2, #539	; 0x21b
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	4b01      	ldr	r3, [pc, #4]	(80050cc <main+0x195c>)
 80050c6:	321f      	adds	r2, #31
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e00b      	b.n	80050e4 <main+0x1974>
 80050cc:	20000030 	.word	0x20000030
 80050d0:	20000034 	.word	0x20000034
 80050d4:	20000038 	.word	0x20000038
 80050d8:	2000003c 	.word	0x2000003c
 80050dc:	20000040 	.word	0x20000040
 80050e0:	2000002c 	.word	0x2000002c
 80050e4:	f8df 3c44 	ldr.w	r3, [pc, #3140]	; 8005d2c <main+0x25bc>
 80050e8:	3ab3      	subs	r2, #179
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f8df 3c40 	ldr.w	r3, [pc, #3136]	; 8005d30 <main+0x25c0>
 80050f0:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80050f4:	3203      	adds	r2, #3
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	f8df 2c38 	ldr.w	r2, [pc, #3128]	; 8005d34 <main+0x25c4>
 80050fc:	f240 134d 	movw	r3, #333	; 0x14d
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	f8df 2c34 	ldr.w	r2, [pc, #3124]	; 8005d38 <main+0x25c8>
 8005106:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800510a:	3301      	adds	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	3b68      	subs	r3, #104
 8005110:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	6032      	str	r2, [r6, #0]
 8005118:	3b10      	subs	r3, #16
 800511a:	3270      	adds	r2, #112
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	6022      	str	r2, [r4, #0]
 8005120:	2008      	movs	r0, #8
 8005122:	f7fe fa61 	bl	80035e8 <Posicao>
 8005126:	2050      	movs	r0, #80
 8005128:	f7fe f84e 	bl	80031c8 <mDelay>
					t=	8.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800512c:	f8df 3c0c 	ldr.w	r3, [pc, #3084]	; 8005d3c <main+0x25cc>
 8005130:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f8df 3c08 	ldr.w	r3, [pc, #3080]	; 8005d40 <main+0x25d0>
 800513a:	321f      	adds	r2, #31
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f8df 3bec 	ldr.w	r3, [pc, #3052]	; 8005d2c <main+0x25bc>
 8005142:	3ab4      	subs	r2, #180
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f8df 2be8 	ldr.w	r2, [pc, #3048]	; 8005d30 <main+0x25c0>
 800514a:	f240 2399 	movw	r3, #665	; 0x299
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	f8df 3be0 	ldr.w	r3, [pc, #3040]	; 8005d34 <main+0x25c4>
 8005154:	f240 1245 	movw	r2, #325	; 0x145
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f8df 3bdc 	ldr.w	r3, [pc, #3036]	; 8005d38 <main+0x25c8>
 800515e:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	3ac3      	subs	r2, #195
 8005166:	f44f 7311 	mov.w	r3, #580	; 0x244
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	6032      	str	r2, [r6, #0]
 800516e:	3b14      	subs	r3, #20
 8005170:	3266      	adds	r2, #102
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	6022      	str	r2, [r4, #0]
 8005176:	2008      	movs	r0, #8
 8005178:	f7fe fa36 	bl	80035e8 <Posicao>
 800517c:	2050      	movs	r0, #80
 800517e:	f7fe f823 	bl	80031c8 <mDelay>
					t=	8.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005182:	f8df 3bb8 	ldr.w	r3, [pc, #3000]	; 8005d3c <main+0x25cc>
 8005186:	f240 221e 	movw	r2, #542	; 0x21e
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f8df 3bb0 	ldr.w	r3, [pc, #2992]	; 8005d40 <main+0x25d0>
 8005190:	321e      	adds	r2, #30
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f8df 3b94 	ldr.w	r3, [pc, #2964]	; 8005d2c <main+0x25bc>
 8005198:	3ab6      	subs	r2, #182
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f8df 3b90 	ldr.w	r3, [pc, #2960]	; 8005d30 <main+0x25c0>
 80051a0:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f8df 3b8c 	ldr.w	r3, [pc, #2956]	; 8005d34 <main+0x25c4>
 80051aa:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 80051ae:	3a03      	subs	r2, #3
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f8df 2b84 	ldr.w	r2, [pc, #2948]	; 8005d38 <main+0x25c8>
 80051b6:	f240 23a2 	movw	r3, #674	; 0x2a2
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	3b58      	subs	r3, #88
 80051be:	f240 12eb 	movw	r2, #491	; 0x1eb
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	6032      	str	r2, [r6, #0]
 80051c6:	3b18      	subs	r3, #24
 80051c8:	325e      	adds	r2, #94
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	6022      	str	r2, [r4, #0]
 80051ce:	2008      	movs	r0, #8
 80051d0:	f7fe fa0a 	bl	80035e8 <Posicao>
 80051d4:	2050      	movs	r0, #80
 80051d6:	f7fd fff7 	bl	80031c8 <mDelay>
					t=	8.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80051da:	f8df 3b60 	ldr.w	r3, [pc, #2912]	; 8005d3c <main+0x25cc>
 80051de:	f240 221f 	movw	r2, #543	; 0x21f
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f8df 3b58 	ldr.w	r3, [pc, #2904]	; 8005d40 <main+0x25d0>
 80051e8:	321e      	adds	r2, #30
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f8df 3b3c 	ldr.w	r3, [pc, #2876]	; 8005d2c <main+0x25bc>
 80051f0:	3ab7      	subs	r2, #183
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f8df 2b38 	ldr.w	r2, [pc, #2872]	; 8005d30 <main+0x25c0>
 80051f8:	f240 23ae 	movw	r3, #686	; 0x2ae
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	f8df 3b34 	ldr.w	r3, [pc, #2868]	; 8005d34 <main+0x25c4>
 8005202:	f240 1235 	movw	r2, #309	; 0x135
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	f8df 2b2c 	ldr.w	r2, [pc, #2860]	; 8005d38 <main+0x25c8>
 800520c:	f240 239f 	movw	r3, #671	; 0x29f
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	3b4f      	subs	r3, #79
 8005214:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	6032      	str	r2, [r6, #0]
 800521c:	3b1c      	subs	r3, #28
 800521e:	3256      	adds	r2, #86
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	6022      	str	r2, [r4, #0]
 8005224:	2008      	movs	r0, #8
 8005226:	f7fe f9df 	bl	80035e8 <Posicao>
 800522a:	2050      	movs	r0, #80
 800522c:	f7fd ffcc 	bl	80031c8 <mDelay>
					t=	8.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005230:	f8df 3b08 	ldr.w	r3, [pc, #2824]	; 8005d3c <main+0x25cc>
 8005234:	f44f 7208 	mov.w	r2, #544	; 0x220
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f8df 3b04 	ldr.w	r3, [pc, #2820]	; 8005d40 <main+0x25d0>
 800523e:	321e      	adds	r2, #30
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f8df 3ae8 	ldr.w	r3, [pc, #2792]	; 8005d2c <main+0x25bc>
 8005246:	3ab9      	subs	r2, #185
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f8df 2ae4 	ldr.w	r2, [pc, #2788]	; 8005d30 <main+0x25c0>
 800524e:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	f8df 2adc 	ldr.w	r2, [pc, #2780]	; 8005d34 <main+0x25c4>
 8005258:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800525c:	3b03      	subs	r3, #3
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	f8df 2ad4 	ldr.w	r2, [pc, #2772]	; 8005d38 <main+0x25c8>
 8005264:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	3b46      	subs	r3, #70
 800526c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	6032      	str	r2, [r6, #0]
 8005274:	3b21      	subs	r3, #33
 8005276:	324c      	adds	r2, #76
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	2008      	movs	r0, #8
 800527e:	f7fe f9b3 	bl	80035e8 <Posicao>
 8005282:	2050      	movs	r0, #80
 8005284:	f7fd ffa0 	bl	80031c8 <mDelay>
					t=	8.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005288:	f8df 3ab0 	ldr.w	r3, [pc, #2736]	; 8005d3c <main+0x25cc>
 800528c:	f240 2221 	movw	r2, #545	; 0x221
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	f8df 3aac 	ldr.w	r3, [pc, #2732]	; 8005d40 <main+0x25d0>
 8005296:	321e      	adds	r2, #30
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f8df 3a90 	ldr.w	r3, [pc, #2704]	; 8005d2c <main+0x25bc>
 800529e:	3abb      	subs	r2, #187
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	f8df 2a8c 	ldr.w	r2, [pc, #2700]	; 8005d30 <main+0x25c0>
 80052a6:	f240 23c1 	movw	r3, #705	; 0x2c1
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	f8df 3a84 	ldr.w	r3, [pc, #2692]	; 8005d34 <main+0x25c4>
 80052b0:	f240 1225 	movw	r2, #293	; 0x125
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f8df 2a80 	ldr.w	r2, [pc, #2688]	; 8005d38 <main+0x25c8>
 80052ba:	f240 239b 	movw	r3, #667	; 0x29b
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	3b3e      	subs	r3, #62
 80052c2:	f240 220a 	movw	r2, #522	; 0x20a
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	6032      	str	r2, [r6, #0]
 80052ca:	3b26      	subs	r3, #38
 80052cc:	3244      	adds	r2, #68
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	6022      	str	r2, [r4, #0]
 80052d2:	2008      	movs	r0, #8
 80052d4:	f7fe f988 	bl	80035e8 <Posicao>
 80052d8:	2050      	movs	r0, #80
 80052da:	f7fd ff75 	bl	80031c8 <mDelay>
					t=	9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80052de:	f8df 3a5c 	ldr.w	r3, [pc, #2652]	; 8005d3c <main+0x25cc>
 80052e2:	f240 2222 	movw	r2, #546	; 0x222
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f8df 3a54 	ldr.w	r3, [pc, #2644]	; 8005d40 <main+0x25d0>
 80052ec:	321e      	adds	r2, #30
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f8df 3a38 	ldr.w	r3, [pc, #2616]	; 8005d2c <main+0x25bc>
 80052f4:	3abd      	subs	r2, #189
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f8df 3a34 	ldr.w	r3, [pc, #2612]	; 8005d30 <main+0x25c0>
 80052fc:	f502 72a3 	add.w	r2, r2, #326	; 0x146
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	f8df 3a30 	ldr.w	r3, [pc, #2608]	; 8005d34 <main+0x25c4>
 8005306:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f8df 2a28 	ldr.w	r2, [pc, #2600]	; 8005d38 <main+0x25c8>
 8005310:	f44f 7326 	mov.w	r3, #664	; 0x298
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	3b35      	subs	r3, #53
 8005318:	f44f 7205 	mov.w	r2, #532	; 0x214
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	6032      	str	r2, [r6, #0]
 8005320:	3b2a      	subs	r3, #42
 8005322:	323b      	adds	r2, #59
 8005324:	602b      	str	r3, [r5, #0]
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	2009      	movs	r0, #9
 800532a:	f7fe f95d 	bl	80035e8 <Posicao>
 800532e:	2050      	movs	r0, #80
 8005330:	f7fd ff4a 	bl	80031c8 <mDelay>
					t=	9.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005334:	f8df 3a04 	ldr.w	r3, [pc, #2564]	; 8005d3c <main+0x25cc>
 8005338:	f240 2223 	movw	r2, #547	; 0x223
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	f8df 3a00 	ldr.w	r3, [pc, #2560]	; 8005d40 <main+0x25d0>
 8005342:	321d      	adds	r2, #29
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f8df 39e4 	ldr.w	r3, [pc, #2532]	; 8005d2c <main+0x25bc>
 800534a:	3abf      	subs	r2, #191
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f8df 29e0 	ldr.w	r2, [pc, #2528]	; 8005d30 <main+0x25c0>
 8005352:	f240 23cf 	movw	r3, #719	; 0x2cf
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	f8df 29d8 	ldr.w	r2, [pc, #2520]	; 8005d34 <main+0x25c4>
 800535c:	f5a3 73dd 	sub.w	r3, r3, #442	; 0x1ba
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	f8df 29d4 	ldr.w	r2, [pc, #2516]	; 8005d38 <main+0x25c8>
 8005366:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800536a:	3301      	adds	r3, #1
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	3b2d      	subs	r3, #45
 8005370:	f240 221e 	movw	r2, #542	; 0x21e
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	6032      	str	r2, [r6, #0]
 8005378:	3b2f      	subs	r3, #47
 800537a:	3232      	adds	r2, #50
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	6022      	str	r2, [r4, #0]
 8005380:	2009      	movs	r0, #9
 8005382:	f7fe f931 	bl	80035e8 <Posicao>
 8005386:	2050      	movs	r0, #80
 8005388:	f7fd ff1e 	bl	80031c8 <mDelay>
					t=	9.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800538c:	f8df 39ac 	ldr.w	r3, [pc, #2476]	; 8005d3c <main+0x25cc>
 8005390:	f240 2223 	movw	r2, #547	; 0x223
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f8df 39a8 	ldr.w	r3, [pc, #2472]	; 8005d40 <main+0x25d0>
 800539a:	321e      	adds	r2, #30
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f8df 398c 	ldr.w	r3, [pc, #2444]	; 8005d2c <main+0x25bc>
 80053a2:	3ac1      	subs	r2, #193
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f8df 2988 	ldr.w	r2, [pc, #2440]	; 8005d30 <main+0x25c0>
 80053aa:	f44f 7335 	mov.w	r3, #724	; 0x2d4
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	f8df 2980 	ldr.w	r2, [pc, #2432]	; 8005d34 <main+0x25c4>
 80053b4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80053b8:	3b03      	subs	r3, #3
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	f8df 3978 	ldr.w	r3, [pc, #2424]	; 8005d38 <main+0x25c8>
 80053c0:	f240 2293 	movw	r2, #659	; 0x293
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	3a6c      	subs	r2, #108
 80053c8:	f240 236e 	movw	r3, #622	; 0x26e
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	6032      	str	r2, [r6, #0]
 80053d0:	3b33      	subs	r3, #51
 80053d2:	322a      	adds	r2, #42
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	6022      	str	r2, [r4, #0]
 80053d8:	2009      	movs	r0, #9
 80053da:	f7fe f905 	bl	80035e8 <Posicao>
 80053de:	2050      	movs	r0, #80
 80053e0:	f7fd fef2 	bl	80031c8 <mDelay>
					t=	9.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80053e4:	f8df 3954 	ldr.w	r3, [pc, #2388]	; 8005d3c <main+0x25cc>
 80053e8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f8df 3950 	ldr.w	r3, [pc, #2384]	; 8005d40 <main+0x25d0>
 80053f2:	321d      	adds	r2, #29
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f8df 3934 	ldr.w	r3, [pc, #2356]	; 8005d2c <main+0x25bc>
 80053fa:	3ac2      	subs	r2, #194
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f8df 2930 	ldr.w	r2, [pc, #2352]	; 8005d30 <main+0x25c0>
 8005402:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	f8df 3928 	ldr.w	r3, [pc, #2344]	; 8005d34 <main+0x25c4>
 800540c:	f240 1205 	movw	r2, #261	; 0x105
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f8df 2924 	ldr.w	r2, [pc, #2340]	; 8005d38 <main+0x25c8>
 8005416:	f240 2391 	movw	r3, #657	; 0x291
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	3b1e      	subs	r3, #30
 800541e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	6032      	str	r2, [r6, #0]
 8005426:	3b37      	subs	r3, #55
 8005428:	3221      	adds	r2, #33
 800542a:	602b      	str	r3, [r5, #0]
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	2009      	movs	r0, #9
 8005430:	f7fe f8da 	bl	80035e8 <Posicao>
 8005434:	2050      	movs	r0, #80
 8005436:	f7fd fec7 	bl	80031c8 <mDelay>
					t=	9.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800543a:	f8df 3900 	ldr.w	r3, [pc, #2304]	; 8005d3c <main+0x25cc>
 800543e:	f44f 7209 	mov.w	r2, #548	; 0x224
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f8df 38f8 	ldr.w	r3, [pc, #2296]	; 8005d40 <main+0x25d0>
 8005448:	321d      	adds	r2, #29
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	f8df 38dc 	ldr.w	r3, [pc, #2268]	; 8005d2c <main+0x25bc>
 8005450:	3ac3      	subs	r2, #195
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f8df 38d8 	ldr.w	r3, [pc, #2264]	; 8005d30 <main+0x25c0>
 8005458:	f502 72ae 	add.w	r2, r2, #348	; 0x15c
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	f8df 28d4 	ldr.w	r2, [pc, #2260]	; 8005d34 <main+0x25c4>
 8005462:	23fe      	movs	r3, #254
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	f8df 38d0 	ldr.w	r3, [pc, #2256]	; 8005d38 <main+0x25c8>
 800546a:	f240 228e 	movw	r2, #654	; 0x28e
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	3a56      	subs	r2, #86
 8005472:	f44f 731e 	mov.w	r3, #632	; 0x278
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	6032      	str	r2, [r6, #0]
 800547a:	3b3c      	subs	r3, #60
 800547c:	321a      	adds	r2, #26
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	6022      	str	r2, [r4, #0]
 8005482:	2009      	movs	r0, #9
 8005484:	f7fe f8b0 	bl	80035e8 <Posicao>
 8005488:	2050      	movs	r0, #80
 800548a:	f7fd fe9d 	bl	80031c8 <mDelay>
					t=	9.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800548e:	f8df 38ac 	ldr.w	r3, [pc, #2220]	; 8005d3c <main+0x25cc>
 8005492:	f44f 7209 	mov.w	r2, #548	; 0x224
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f8df 38a4 	ldr.w	r3, [pc, #2212]	; 8005d40 <main+0x25d0>
 800549c:	321d      	adds	r2, #29
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f8df 3888 	ldr.w	r3, [pc, #2184]	; 8005d2c <main+0x25bc>
 80054a4:	3ac4      	subs	r2, #196
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f8df 3884 	ldr.w	r3, [pc, #2180]	; 8005d30 <main+0x25c0>
 80054ac:	f502 72af 	add.w	r2, r2, #350	; 0x15e
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f8df 2880 	ldr.w	r2, [pc, #2176]	; 8005d34 <main+0x25c4>
 80054b6:	23f7      	movs	r3, #247
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	f8df 387c 	ldr.w	r3, [pc, #2172]	; 8005d38 <main+0x25c8>
 80054be:	f240 228b 	movw	r2, #651	; 0x28b
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	3a4c      	subs	r2, #76
 80054c6:	f240 237d 	movw	r3, #637	; 0x27d
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	6032      	str	r2, [r6, #0]
 80054ce:	3b40      	subs	r3, #64
 80054d0:	3213      	adds	r2, #19
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	6022      	str	r2, [r4, #0]
 80054d6:	2009      	movs	r0, #9
 80054d8:	f7fe f886 	bl	80035e8 <Posicao>
 80054dc:	2050      	movs	r0, #80
 80054de:	f7fd fe73 	bl	80031c8 <mDelay>
					t=	9.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80054e2:	f8df 3858 	ldr.w	r3, [pc, #2136]	; 8005d3c <main+0x25cc>
 80054e6:	f44f 7209 	mov.w	r2, #548	; 0x224
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f8df 3850 	ldr.w	r3, [pc, #2128]	; 8005d40 <main+0x25d0>
 80054f0:	321d      	adds	r2, #29
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f8df 3834 	ldr.w	r3, [pc, #2100]	; 8005d2c <main+0x25bc>
 80054f8:	3ac5      	subs	r2, #197
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f8df 3830 	ldr.w	r3, [pc, #2096]	; 8005d30 <main+0x25c0>
 8005500:	f502 72af 	add.w	r2, r2, #350	; 0x15e
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f8df 282c 	ldr.w	r2, [pc, #2092]	; 8005d34 <main+0x25c4>
 800550a:	23f1      	movs	r3, #241
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	f8df 3828 	ldr.w	r3, [pc, #2088]	; 8005d38 <main+0x25c8>
 8005512:	f240 2289 	movw	r2, #649	; 0x289
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	3a43      	subs	r2, #67
 800551a:	f240 2381 	movw	r3, #641	; 0x281
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	6032      	str	r2, [r6, #0]
 8005522:	3b44      	subs	r3, #68
 8005524:	320d      	adds	r2, #13
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	6022      	str	r2, [r4, #0]
 800552a:	2009      	movs	r0, #9
 800552c:	f7fe f85c 	bl	80035e8 <Posicao>
 8005530:	2050      	movs	r0, #80
 8005532:	f7fd fe49 	bl	80031c8 <mDelay>
					t=	9.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005536:	f8df 3804 	ldr.w	r3, [pc, #2052]	; 8005d3c <main+0x25cc>
 800553a:	f44f 7209 	mov.w	r2, #548	; 0x224
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	f8df 37fc 	ldr.w	r3, [pc, #2044]	; 8005d40 <main+0x25d0>
 8005544:	321d      	adds	r2, #29
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f8df 37e0 	ldr.w	r3, [pc, #2016]	; 8005d2c <main+0x25bc>
 800554c:	3ac6      	subs	r2, #198
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f8df 37dc 	ldr.w	r3, [pc, #2012]	; 8005d30 <main+0x25c0>
 8005554:	f502 72ae 	add.w	r2, r2, #348	; 0x15c
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f8df 27d8 	ldr.w	r2, [pc, #2008]	; 8005d34 <main+0x25c4>
 800555e:	23eb      	movs	r3, #235
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	f8df 37d4 	ldr.w	r3, [pc, #2004]	; 8005d38 <main+0x25c8>
 8005566:	f240 2286 	movw	r2, #646	; 0x286
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	3a3b      	subs	r2, #59
 800556e:	f240 2385 	movw	r3, #645	; 0x285
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	6032      	str	r2, [r6, #0]
 8005576:	3b48      	subs	r3, #72
 8005578:	3208      	adds	r2, #8
 800557a:	602b      	str	r3, [r5, #0]
 800557c:	6022      	str	r2, [r4, #0]
 800557e:	2009      	movs	r0, #9
 8005580:	f7fe f832 	bl	80035e8 <Posicao>
 8005584:	2050      	movs	r0, #80
 8005586:	f7fd fe1f 	bl	80031c8 <mDelay>
					t=	9.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800558a:	f8df 37b0 	ldr.w	r3, [pc, #1968]	; 8005d3c <main+0x25cc>
 800558e:	f44f 7209 	mov.w	r2, #548	; 0x224
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f8df 37a8 	ldr.w	r3, [pc, #1960]	; 8005d40 <main+0x25d0>
 8005598:	321d      	adds	r2, #29
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	f8df 378c 	ldr.w	r3, [pc, #1932]	; 8005d2c <main+0x25bc>
 80055a0:	3ac7      	subs	r2, #199
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f8df 3788 	ldr.w	r3, [pc, #1928]	; 8005d30 <main+0x25c0>
 80055a8:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 80055ac:	3201      	adds	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f8df 2780 	ldr.w	r2, [pc, #1920]	; 8005d34 <main+0x25c4>
 80055b4:	23e5      	movs	r3, #229
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	f8df 377c 	ldr.w	r3, [pc, #1916]	; 8005d38 <main+0x25c8>
 80055bc:	f240 2283 	movw	r2, #643	; 0x283
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	3a33      	subs	r2, #51
 80055c4:	f44f 7322 	mov.w	r3, #648	; 0x288
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	6032      	str	r2, [r6, #0]
 80055cc:	3b4b      	subs	r3, #75
 80055ce:	3203      	adds	r2, #3
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	6022      	str	r2, [r4, #0]
 80055d4:	2009      	movs	r0, #9
 80055d6:	f7fe f807 	bl	80035e8 <Posicao>
 80055da:	2050      	movs	r0, #80
 80055dc:	f7fd fdf4 	bl	80031c8 <mDelay>
					t=	9.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80055e0:	f8df 3758 	ldr.w	r3, [pc, #1880]	; 8005d3c <main+0x25cc>
 80055e4:	f240 2223 	movw	r2, #547	; 0x223
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f8df 3754 	ldr.w	r3, [pc, #1876]	; 8005d40 <main+0x25d0>
 80055ee:	321d      	adds	r2, #29
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	f8df 3738 	ldr.w	r3, [pc, #1848]	; 8005d2c <main+0x25bc>
 80055f6:	3ac7      	subs	r2, #199
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	f8df 2734 	ldr.w	r2, [pc, #1844]	; 8005d30 <main+0x25c0>
 80055fe:	f240 23ce 	movw	r3, #718	; 0x2ce
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	f8df 272c 	ldr.w	r2, [pc, #1836]	; 8005d34 <main+0x25c4>
 8005608:	23e0      	movs	r3, #224
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8005d38 <main+0x25c8>
 8005610:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f240 238a 	movw	r3, #650	; 0x28a
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	3b36      	subs	r3, #54
 800561e:	3a44      	subs	r2, #68
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	3b02      	subs	r3, #2
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	2009      	movs	r0, #9
 800562a:	f7fd ffdd 	bl	80035e8 <Posicao>
 800562e:	2050      	movs	r0, #80
 8005630:	f7fd fdca 	bl	80031c8 <mDelay>
					t=	10	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005634:	f8df 2704 	ldr.w	r2, [pc, #1796]	; 8005d3c <main+0x25cc>
 8005638:	f240 2323 	movw	r3, #547	; 0x223
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	f8df 2700 	ldr.w	r2, [pc, #1792]	; 8005d40 <main+0x25d0>
 8005642:	331d      	adds	r3, #29
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	f8df 26e4 	ldr.w	r2, [pc, #1764]	; 8005d2c <main+0x25bc>
 800564a:	3bc8      	subs	r3, #200
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8005d30 <main+0x25c0>
 8005652:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8005656:	3303      	adds	r3, #3
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	f8df 26d8 	ldr.w	r2, [pc, #1752]	; 8005d34 <main+0x25c4>
 800565e:	23db      	movs	r3, #219
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	f8df 36d4 	ldr.w	r3, [pc, #1748]	; 8005d38 <main+0x25c8>
 8005666:	f240 227e 	movw	r2, #638	; 0x27e
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f44f 7323 	mov.w	r3, #652	; 0x28c
 8005670:	3a27      	subs	r2, #39
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	6032      	str	r2, [r6, #0]
 8005676:	3b50      	subs	r3, #80
 8005678:	3a05      	subs	r2, #5
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	6022      	str	r2, [r4, #0]
 800567e:	200a      	movs	r0, #10
 8005680:	f7fd ffb2 	bl	80035e8 <Posicao>
 8005684:	2050      	movs	r0, #80
 8005686:	f7fd fd9f 	bl	80031c8 <mDelay>
					t=	10.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800568a:	f8df 36b0 	ldr.w	r3, [pc, #1712]	; 8005d3c <main+0x25cc>
 800568e:	f240 2222 	movw	r2, #546	; 0x222
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	f8df 36a8 	ldr.w	r3, [pc, #1704]	; 8005d40 <main+0x25d0>
 8005698:	321d      	adds	r2, #29
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f8df 368c 	ldr.w	r3, [pc, #1676]	; 8005d2c <main+0x25bc>
 80056a0:	3ac7      	subs	r2, #199
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f8df 3688 	ldr.w	r3, [pc, #1672]	; 8005d30 <main+0x25c0>
 80056a8:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f8df 2684 	ldr.w	r2, [pc, #1668]	; 8005d34 <main+0x25c4>
 80056b2:	23d8      	movs	r3, #216
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	f8df 3680 	ldr.w	r3, [pc, #1664]	; 8005d38 <main+0x25c8>
 80056ba:	f240 227b 	movw	r2, #635	; 0x27b
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	3a21      	subs	r2, #33
 80056c2:	f240 238e 	movw	r3, #654	; 0x28e
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	6032      	str	r2, [r6, #0]
 80056ca:	3b53      	subs	r3, #83
 80056cc:	3a09      	subs	r2, #9
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	200a      	movs	r0, #10
 80056d4:	f7fd ff88 	bl	80035e8 <Posicao>
 80056d8:	2050      	movs	r0, #80
 80056da:	f7fd fd75 	bl	80031c8 <mDelay>
					t=	10.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80056de:	f8df 365c 	ldr.w	r3, [pc, #1628]	; 8005d3c <main+0x25cc>
 80056e2:	f240 2221 	movw	r2, #545	; 0x221
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f8df 3654 	ldr.w	r3, [pc, #1620]	; 8005d40 <main+0x25d0>
 80056ec:	321d      	adds	r2, #29
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f8df 3638 	ldr.w	r3, [pc, #1592]	; 8005d2c <main+0x25bc>
 80056f4:	3ac6      	subs	r2, #198
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f8df 3634 	ldr.w	r3, [pc, #1588]	; 8005d30 <main+0x25c0>
 80056fc:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 8005700:	3203      	adds	r2, #3
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f8df 362c 	ldr.w	r3, [pc, #1580]	; 8005d34 <main+0x25c4>
 8005708:	22d4      	movs	r2, #212
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	f8df 3628 	ldr.w	r3, [pc, #1576]	; 8005d38 <main+0x25c8>
 8005710:	f44f 721e 	mov.w	r2, #632	; 0x278
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	3a1d      	subs	r2, #29
 8005718:	f240 238f 	movw	r3, #655	; 0x28f
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	6032      	str	r2, [r6, #0]
 8005720:	3b55      	subs	r3, #85
 8005722:	3a0a      	subs	r2, #10
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	6022      	str	r2, [r4, #0]
 8005728:	200a      	movs	r0, #10
 800572a:	f7fd ff5d 	bl	80035e8 <Posicao>
 800572e:	2050      	movs	r0, #80
 8005730:	f7fd fd4a 	bl	80031c8 <mDelay>
					t=	10.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005734:	f8df 3604 	ldr.w	r3, [pc, #1540]	; 8005d3c <main+0x25cc>
 8005738:	f44f 7208 	mov.w	r2, #544	; 0x220
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f8df 3600 	ldr.w	r3, [pc, #1536]	; 8005d40 <main+0x25d0>
 8005742:	321e      	adds	r2, #30
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f8df 35e4 	ldr.w	r3, [pc, #1508]	; 8005d2c <main+0x25bc>
 800574a:	3ac6      	subs	r2, #198
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	f8df 25e0 	ldr.w	r2, [pc, #1504]	; 8005d30 <main+0x25c0>
 8005752:	f240 23af 	movw	r3, #687	; 0x2af
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	f8df 35d8 	ldr.w	r3, [pc, #1496]	; 8005d34 <main+0x25c4>
 800575c:	22d2      	movs	r2, #210
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f8df 35d4 	ldr.w	r3, [pc, #1492]	; 8005d38 <main+0x25c8>
 8005764:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8005768:	3203      	adds	r2, #3
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	3a1a      	subs	r2, #26
 800576e:	f44f 7324 	mov.w	r3, #656	; 0x290
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	6032      	str	r2, [r6, #0]
 8005776:	3b57      	subs	r3, #87
 8005778:	3a0b      	subs	r2, #11
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	200a      	movs	r0, #10
 800577e:	6022      	str	r2, [r4, #0]
 8005780:	f7fd ff32 	bl	80035e8 <Posicao>
 8005784:	2050      	movs	r0, #80
 8005786:	f7fd fd1f 	bl	80031c8 <mDelay>
					t=	10.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800578a:	f8df 35b0 	ldr.w	r3, [pc, #1456]	; 8005d3c <main+0x25cc>
 800578e:	f240 221f 	movw	r2, #543	; 0x21f
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f8df 35a8 	ldr.w	r3, [pc, #1448]	; 8005d40 <main+0x25d0>
 8005798:	321e      	adds	r2, #30
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	f8df 358c 	ldr.w	r3, [pc, #1420]	; 8005d2c <main+0x25bc>
 80057a0:	3ac5      	subs	r2, #197
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005d30 <main+0x25c0>
 80057a8:	f240 23a5 	movw	r3, #677	; 0x2a5
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 8005d34 <main+0x25c4>
 80057b2:	22d0      	movs	r2, #208
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f8df 3580 	ldr.w	r3, [pc, #1408]	; 8005d38 <main+0x25c8>
 80057ba:	f502 72d1 	add.w	r2, r2, #418	; 0x1a2
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	3a18      	subs	r2, #24
 80057c2:	f44f 7324 	mov.w	r3, #656	; 0x290
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	6032      	str	r2, [r6, #0]
 80057ca:	3b59      	subs	r3, #89
 80057cc:	3a0b      	subs	r2, #11
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	6022      	str	r2, [r4, #0]
 80057d2:	200a      	movs	r0, #10
 80057d4:	f7fd ff08 	bl	80035e8 <Posicao>
 80057d8:	2050      	movs	r0, #80
 80057da:	f7fd fcf5 	bl	80031c8 <mDelay>
					t=	10.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80057de:	f8df 355c 	ldr.w	r3, [pc, #1372]	; 8005d3c <main+0x25cc>
 80057e2:	f240 221e 	movw	r2, #542	; 0x21e
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f8df 3554 	ldr.w	r3, [pc, #1364]	; 8005d40 <main+0x25d0>
 80057ec:	321d      	adds	r2, #29
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8005d2c <main+0x25bc>
 80057f4:	3ac3      	subs	r2, #195
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f8df 2534 	ldr.w	r2, [pc, #1332]	; 8005d30 <main+0x25c0>
 80057fc:	f44f 7327 	mov.w	r3, #668	; 0x29c
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	f8df 3530 	ldr.w	r3, [pc, #1328]	; 8005d34 <main+0x25c4>
 8005806:	22cf      	movs	r2, #207
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f8df 352c 	ldr.w	r3, [pc, #1324]	; 8005d38 <main+0x25c8>
 800580e:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	3a16      	subs	r2, #22
 8005816:	f240 238f 	movw	r3, #655	; 0x28f
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	6032      	str	r2, [r6, #0]
 800581e:	3b59      	subs	r3, #89
 8005820:	3a0b      	subs	r2, #11
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	6022      	str	r2, [r4, #0]
 8005826:	200a      	movs	r0, #10
 8005828:	f7fd fede 	bl	80035e8 <Posicao>
 800582c:	2050      	movs	r0, #80
 800582e:	f7fd fccb 	bl	80031c8 <mDelay>
					t=	10.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005832:	f8df 3508 	ldr.w	r3, [pc, #1288]	; 8005d3c <main+0x25cc>
 8005836:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8005d40 <main+0x25d0>
 8005840:	321e      	adds	r2, #30
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f8df 34e4 	ldr.w	r3, [pc, #1252]	; 8005d2c <main+0x25bc>
 8005848:	3ac2      	subs	r2, #194
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f8df 34e0 	ldr.w	r3, [pc, #1248]	; 8005d30 <main+0x25c0>
 8005850:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8005854:	3203      	adds	r2, #3
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f8df 34d8 	ldr.w	r3, [pc, #1240]	; 8005d34 <main+0x25c4>
 800585c:	22cf      	movs	r2, #207
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f8df 34d4 	ldr.w	r3, [pc, #1236]	; 8005d38 <main+0x25c8>
 8005864:	f502 72cf 	add.w	r2, r2, #414	; 0x19e
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	3a17      	subs	r2, #23
 800586c:	f240 238e 	movw	r3, #654	; 0x28e
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	6032      	str	r2, [r6, #0]
 8005874:	3b5a      	subs	r3, #90
 8005876:	3a0a      	subs	r2, #10
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	200a      	movs	r0, #10
 800587e:	f7fd feb3 	bl	80035e8 <Posicao>
 8005882:	2050      	movs	r0, #80
 8005884:	f7fd fca0 	bl	80031c8 <mDelay>
					t=	10.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005888:	f8df 34b0 	ldr.w	r3, [pc, #1200]	; 8005d3c <main+0x25cc>
 800588c:	f240 221b 	movw	r2, #539	; 0x21b
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f8df 34ac 	ldr.w	r3, [pc, #1196]	; 8005d40 <main+0x25d0>
 8005896:	321e      	adds	r2, #30
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	f8df 3490 	ldr.w	r3, [pc, #1168]	; 8005d2c <main+0x25bc>
 800589e:	3ac0      	subs	r2, #192
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 8005d30 <main+0x25c0>
 80058a6:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 8005d34 <main+0x25c4>
 80058b0:	22cf      	movs	r2, #207
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f8df 3480 	ldr.w	r3, [pc, #1152]	; 8005d38 <main+0x25c8>
 80058b8:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 80058bc:	3203      	adds	r2, #3
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f240 238d 	movw	r3, #653	; 0x28d
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	3b3a      	subs	r3, #58
 80058c8:	3a38      	subs	r2, #56
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	3b08      	subs	r3, #8
 80058ce:	602a      	str	r2, [r5, #0]
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	200a      	movs	r0, #10
 80058d4:	f7fd fe88 	bl	80035e8 <Posicao>
 80058d8:	2050      	movs	r0, #80
 80058da:	f7fd fc75 	bl	80031c8 <mDelay>
					t=	10.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80058de:	f8df 245c 	ldr.w	r2, [pc, #1116]	; 8005d3c <main+0x25cc>
 80058e2:	f240 2319 	movw	r3, #537	; 0x219
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	f8df 2454 	ldr.w	r2, [pc, #1108]	; 8005d40 <main+0x25d0>
 80058ec:	331e      	adds	r3, #30
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	f8df 2438 	ldr.w	r2, [pc, #1080]	; 8005d2c <main+0x25bc>
 80058f4:	3bbe      	subs	r3, #190
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 8005d30 <main+0x25c0>
 80058fc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005d34 <main+0x25c4>
 8005906:	23d0      	movs	r3, #208
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 8005d38 <main+0x25c8>
 800590e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8005912:	3303      	adds	r3, #3
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	3b18      	subs	r3, #24
 8005918:	f240 228b 	movw	r2, #651	; 0x28b
 800591c:	603a      	str	r2, [r7, #0]
 800591e:	6033      	str	r3, [r6, #0]
 8005920:	3a5b      	subs	r2, #91
 8005922:	3b06      	subs	r3, #6
 8005924:	602a      	str	r2, [r5, #0]
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	200a      	movs	r0, #10
 800592a:	f7fd fe5d 	bl	80035e8 <Posicao>
 800592e:	2050      	movs	r0, #80
 8005930:	f7fd fc4a 	bl	80031c8 <mDelay>
					t=	10.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005934:	f8df 2404 	ldr.w	r2, [pc, #1028]	; 8005d3c <main+0x25cc>
 8005938:	f240 2317 	movw	r3, #535	; 0x217
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8005d40 <main+0x25d0>
 8005942:	331f      	adds	r3, #31
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	4af9      	ldr	r2, [pc, #996]	(8005d2c <main+0x25bc>)
 8005948:	3bbc      	subs	r3, #188
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	4af8      	ldr	r2, [pc, #992]	(8005d30 <main+0x25c0>)
 800594e:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4bf7      	ldr	r3, [pc, #988]	(8005d34 <main+0x25c4>)
 8005956:	22d2      	movs	r2, #210
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	4af7      	ldr	r2, [pc, #988]	(8005d38 <main+0x25c8>)
 800595c:	f240 2365 	movw	r3, #613	; 0x265
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	3324      	adds	r3, #36
 8005964:	f240 224a 	movw	r2, #586	; 0x24a
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	6032      	str	r2, [r6, #0]
 800596c:	3b5c      	subs	r3, #92
 800596e:	3a02      	subs	r2, #2
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	6022      	str	r2, [r4, #0]
 8005974:	200a      	movs	r0, #10
 8005976:	f7fd fe37 	bl	80035e8 <Posicao>
 800597a:	2050      	movs	r0, #80
 800597c:	f7fd fc24 	bl	80031c8 <mDelay>
					t=	11	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005980:	4bee      	ldr	r3, [pc, #952]	(8005d3c <main+0x25cc>)
 8005982:	f240 2215 	movw	r2, #533	; 0x215
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	4bed      	ldr	r3, [pc, #948]	(8005d40 <main+0x25d0>)
 800598a:	321f      	adds	r2, #31
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	4be7      	ldr	r3, [pc, #924]	(8005d2c <main+0x25bc>)
 8005990:	3ab9      	subs	r2, #185
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	4be6      	ldr	r3, [pc, #920]	(8005d30 <main+0x25c0>)
 8005996:	32fb      	adds	r2, #251
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	4be6      	ldr	r3, [pc, #920]	(8005d34 <main+0x25c4>)
 800599c:	22d4      	movs	r2, #212
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	4be5      	ldr	r3, [pc, #916]	(8005d38 <main+0x25c8>)
 80059a2:	f502 72c6 	add.w	r2, r2, #396	; 0x18c
 80059a6:	3203      	adds	r2, #3
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	3a1e      	subs	r2, #30
 80059ac:	f240 2387 	movw	r3, #647	; 0x287
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	6032      	str	r2, [r6, #0]
 80059b4:	3b5c      	subs	r3, #92
 80059b6:	3201      	adds	r2, #1
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	6022      	str	r2, [r4, #0]
 80059bc:	200b      	movs	r0, #11
 80059be:	f7fd fe13 	bl	80035e8 <Posicao>
 80059c2:	2050      	movs	r0, #80
 80059c4:	f7fd fc00 	bl	80031c8 <mDelay>
					t=	11.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80059c8:	4bdc      	ldr	r3, [pc, #880]	(8005d3c <main+0x25cc>)
 80059ca:	f240 2213 	movw	r2, #531	; 0x213
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	4bdb      	ldr	r3, [pc, #876]	(8005d40 <main+0x25d0>)
 80059d2:	321f      	adds	r2, #31
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	4bd5      	ldr	r3, [pc, #852]	(8005d2c <main+0x25bc>)
 80059d8:	3ab6      	subs	r2, #182
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	4bd4      	ldr	r3, [pc, #848]	(8005d30 <main+0x25c0>)
 80059de:	32f5      	adds	r2, #245
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	4ad4      	ldr	r2, [pc, #848]	(8005d34 <main+0x25c4>)
 80059e4:	23d7      	movs	r3, #215
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	4bd3      	ldr	r3, [pc, #844]	(8005d38 <main+0x25c8>)
 80059ea:	f44f 7218 	mov.w	r2, #608	; 0x260
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	3a20      	subs	r2, #32
 80059f2:	f240 2385 	movw	r3, #645	; 0x285
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	6032      	str	r2, [r6, #0]
 80059fa:	3b5d      	subs	r3, #93
 80059fc:	3204      	adds	r2, #4
 80059fe:	602b      	str	r3, [r5, #0]
 8005a00:	6022      	str	r2, [r4, #0]
 8005a02:	200b      	movs	r0, #11
 8005a04:	f7fd fdf0 	bl	80035e8 <Posicao>
 8005a08:	2050      	movs	r0, #80
 8005a0a:	f7fd fbdd 	bl	80031c8 <mDelay>
					t=	11.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005a0e:	4bcb      	ldr	r3, [pc, #812]	(8005d3c <main+0x25cc>)
 8005a10:	f240 2211 	movw	r2, #529	; 0x211
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	4aca      	ldr	r2, [pc, #808]	(8005d40 <main+0x25d0>)
 8005a18:	f240 2331 	movw	r3, #561	; 0x231
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	4bc3      	ldr	r3, [pc, #780]	(8005d2c <main+0x25bc>)
 8005a20:	f240 127d 	movw	r2, #381	; 0x17d
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	4bc2      	ldr	r3, [pc, #776]	(8005d30 <main+0x25c0>)
 8005a28:	32f1      	adds	r2, #241
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	4ac1      	ldr	r2, [pc, #772]	(8005d34 <main+0x25c4>)
 8005a2e:	23da      	movs	r3, #218
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4ac1      	ldr	r2, [pc, #772]	(8005d38 <main+0x25c8>)
 8005a34:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	3324      	adds	r3, #36
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	3b5d      	subs	r3, #93
 8005a40:	f240 223a 	movw	r2, #570	; 0x23a
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	331d      	adds	r3, #29
 8005a48:	6032      	str	r2, [r6, #0]
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	200b      	movs	r0, #11
 8005a4e:	f7fd fdcb 	bl	80035e8 <Posicao>
 8005a52:	2050      	movs	r0, #80
 8005a54:	f7fd fbb8 	bl	80031c8 <mDelay>
					t=	11.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005a58:	4bb8      	ldr	r3, [pc, #736]	(8005d3c <main+0x25cc>)
 8005a5a:	f240 220e 	movw	r2, #526	; 0x20e
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	4bb7      	ldr	r3, [pc, #732]	(8005d40 <main+0x25d0>)
 8005a62:	3221      	adds	r2, #33
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	4bb1      	ldr	r3, [pc, #708]	(8005d2c <main+0x25bc>)
 8005a68:	3ab1      	subs	r2, #177
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	4bb0      	ldr	r3, [pc, #704]	(8005d30 <main+0x25c0>)
 8005a6e:	32ed      	adds	r2, #237
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	4ab0      	ldr	r2, [pc, #704]	(8005d34 <main+0x25c4>)
 8005a74:	23df      	movs	r3, #223
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	4baf      	ldr	r3, [pc, #700]	(8005d38 <main+0x25c8>)
 8005a7a:	f240 225d 	movw	r2, #605	; 0x25d
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	3b4d      	subs	r3, #77
 8005a88:	3a3a      	subs	r2, #58
 8005a8a:	6033      	str	r3, [r6, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	602a      	str	r2, [r5, #0]
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	200b      	movs	r0, #11
 8005a94:	f7fd fda8 	bl	80035e8 <Posicao>
 8005a98:	2050      	movs	r0, #80
 8005a9a:	f7fd fb95 	bl	80031c8 <mDelay>
					t=	11.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005a9e:	4aa7      	ldr	r2, [pc, #668]	(8005d3c <main+0x25cc>)
 8005aa0:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4aa6      	ldr	r2, [pc, #664]	(8005d40 <main+0x25d0>)
 8005aa8:	3321      	adds	r3, #33
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	4a9f      	ldr	r2, [pc, #636]	(8005d2c <main+0x25bc>)
 8005aae:	3bad      	subs	r3, #173
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4a9f      	ldr	r2, [pc, #636]	(8005d30 <main+0x25c0>)
 8005ab4:	33ea      	adds	r3, #234
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	4a9e      	ldr	r2, [pc, #632]	(8005d34 <main+0x25c4>)
 8005aba:	23e3      	movs	r3, #227
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b9e      	ldr	r3, [pc, #632]	(8005d38 <main+0x25c8>)
 8005ac0:	f240 225b 	movw	r2, #603	; 0x25b
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	3a2e      	subs	r2, #46
 8005ac8:	f240 237e 	movw	r3, #638	; 0x27e
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	6032      	str	r2, [r6, #0]
 8005ad0:	3b5f      	subs	r3, #95
 8005ad2:	3210      	adds	r2, #16
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	6022      	str	r2, [r4, #0]
 8005ad8:	200b      	movs	r0, #11
 8005ada:	f7fd fd85 	bl	80035e8 <Posicao>
 8005ade:	2050      	movs	r0, #80
 8005ae0:	f7fd fb72 	bl	80031c8 <mDelay>
					t=	11.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005ae4:	4b95      	ldr	r3, [pc, #596]	(8005d3c <main+0x25cc>)
 8005ae6:	f240 2209 	movw	r2, #521	; 0x209
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	4b94      	ldr	r3, [pc, #592]	(8005d40 <main+0x25d0>)
 8005aee:	3221      	adds	r2, #33
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	4b8e      	ldr	r3, [pc, #568]	(8005d2c <main+0x25bc>)
 8005af4:	3aa9      	subs	r2, #169
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	4b8d      	ldr	r3, [pc, #564]	(8005d30 <main+0x25c0>)
 8005afa:	32e9      	adds	r2, #233
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	4a8d      	ldr	r2, [pc, #564]	(8005d34 <main+0x25c4>)
 8005b00:	23e8      	movs	r3, #232
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	4b8c      	ldr	r3, [pc, #560]	(8005d38 <main+0x25c8>)
 8005b06:	f240 225a 	movw	r2, #602	; 0x25a
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	3a33      	subs	r2, #51
 8005b0e:	f240 237b 	movw	r3, #635	; 0x27b
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	6032      	str	r2, [r6, #0]
 8005b16:	3b5f      	subs	r3, #95
 8005b18:	3213      	adds	r2, #19
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	6022      	str	r2, [r4, #0]
 8005b1e:	200b      	movs	r0, #11
 8005b20:	f7fd fd62 	bl	80035e8 <Posicao>
 8005b24:	2050      	movs	r0, #80
 8005b26:	f7fd fb4f 	bl	80031c8 <mDelay>
					t=	11.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005b2a:	4b84      	ldr	r3, [pc, #528]	(8005d3c <main+0x25cc>)
 8005b2c:	f240 2207 	movw	r2, #519	; 0x207
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	4b83      	ldr	r3, [pc, #524]	(8005d40 <main+0x25d0>)
 8005b34:	3221      	adds	r2, #33
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	4b7c      	ldr	r3, [pc, #496]	(8005d2c <main+0x25bc>)
 8005b3a:	3aa5      	subs	r2, #165
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	4b7c      	ldr	r3, [pc, #496]	(8005d30 <main+0x25c0>)
 8005b40:	32e8      	adds	r2, #232
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	4a7b      	ldr	r2, [pc, #492]	(8005d34 <main+0x25c4>)
 8005b46:	23ed      	movs	r3, #237
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	4b7b      	ldr	r3, [pc, #492]	(8005d38 <main+0x25c8>)
 8005b4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	3a38      	subs	r2, #56
 8005b54:	f240 2379 	movw	r3, #633	; 0x279
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	6032      	str	r2, [r6, #0]
 8005b5c:	3b60      	subs	r3, #96
 8005b5e:	3218      	adds	r2, #24
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	200b      	movs	r0, #11
 8005b66:	f7fd fd3f 	bl	80035e8 <Posicao>
 8005b6a:	2050      	movs	r0, #80
 8005b6c:	f7fd fb2c 	bl	80031c8 <mDelay>
					t=	11.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005b70:	4b72      	ldr	r3, [pc, #456]	(8005d3c <main+0x25cc>)
 8005b72:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	4b71      	ldr	r3, [pc, #452]	(8005d40 <main+0x25d0>)
 8005b7a:	3222      	adds	r2, #34
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	4b6b      	ldr	r3, [pc, #428]	(8005d2c <main+0x25bc>)
 8005b80:	3aa2      	subs	r2, #162
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	4b6a      	ldr	r3, [pc, #424]	(8005d30 <main+0x25c0>)
 8005b86:	32e9      	adds	r2, #233
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	4a6a      	ldr	r2, [pc, #424]	(8005d34 <main+0x25c4>)
 8005b8c:	23f3      	movs	r3, #243
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b69      	ldr	r3, [pc, #420]	(8005d38 <main+0x25c8>)
 8005b92:	f240 2257 	movw	r2, #599	; 0x257
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	3a3d      	subs	r2, #61
 8005b9a:	f240 2377 	movw	r3, #631	; 0x277
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	6032      	str	r2, [r6, #0]
 8005ba2:	3b62      	subs	r3, #98
 8005ba4:	321b      	adds	r2, #27
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	6022      	str	r2, [r4, #0]
 8005baa:	200b      	movs	r0, #11
 8005bac:	f7fd fd1c 	bl	80035e8 <Posicao>
 8005bb0:	2050      	movs	r0, #80
 8005bb2:	f7fd fb09 	bl	80031c8 <mDelay>
					t=	11.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005bb6:	4b61      	ldr	r3, [pc, #388]	(8005d3c <main+0x25cc>)
 8005bb8:	f240 2201 	movw	r2, #513	; 0x201
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	4b60      	ldr	r3, [pc, #384]	(8005d40 <main+0x25d0>)
 8005bc0:	3222      	adds	r2, #34
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	4b59      	ldr	r3, [pc, #356]	(8005d2c <main+0x25bc>)
 8005bc6:	3a9d      	subs	r2, #157
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	4b59      	ldr	r3, [pc, #356]	(8005d30 <main+0x25c0>)
 8005bcc:	32e9      	adds	r2, #233
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	4a58      	ldr	r2, [pc, #352]	(8005d34 <main+0x25c4>)
 8005bd2:	23f9      	movs	r3, #249
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	4b58      	ldr	r3, [pc, #352]	(8005d38 <main+0x25c8>)
 8005bd8:	f240 2257 	movw	r2, #599	; 0x257
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	3a43      	subs	r2, #67
 8005be0:	f240 2376 	movw	r3, #630	; 0x276
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	6032      	str	r2, [r6, #0]
 8005be8:	3b64      	subs	r3, #100
 8005bea:	321e      	adds	r2, #30
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	6022      	str	r2, [r4, #0]
 8005bf0:	200b      	movs	r0, #11
 8005bf2:	f7fd fcf9 	bl	80035e8 <Posicao>
 8005bf6:	2050      	movs	r0, #80
 8005bf8:	f7fd fae6 	bl	80031c8 <mDelay>
					t=	11.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005bfc:	4b4f      	ldr	r3, [pc, #316]	(8005d3c <main+0x25cc>)
 8005bfe:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	4b4e      	ldr	r3, [pc, #312]	(8005d40 <main+0x25d0>)
 8005c06:	3223      	adds	r2, #35
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	4b48      	ldr	r3, [pc, #288]	(8005d2c <main+0x25bc>)
 8005c0c:	3a99      	subs	r2, #153
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	4b47      	ldr	r3, [pc, #284]	(8005d30 <main+0x25c0>)
 8005c12:	32ea      	adds	r2, #234
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	4a47      	ldr	r2, [pc, #284]	(8005d34 <main+0x25c4>)
 8005c18:	23ff      	movs	r3, #255
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4b46      	ldr	r3, [pc, #280]	(8005d38 <main+0x25c8>)
 8005c1e:	f240 2256 	movw	r2, #598	; 0x256
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	3a47      	subs	r2, #71
 8005c26:	f240 2375 	movw	r3, #629	; 0x275
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	6032      	str	r2, [r6, #0]
 8005c2e:	3b67      	subs	r3, #103
 8005c30:	3220      	adds	r2, #32
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	6022      	str	r2, [r4, #0]
 8005c36:	200b      	movs	r0, #11
 8005c38:	f7fd fcd6 	bl	80035e8 <Posicao>
 8005c3c:	2050      	movs	r0, #80
 8005c3e:	f7fd fac3 	bl	80031c8 <mDelay>
					t=	12	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005c42:	4b3e      	ldr	r3, [pc, #248]	(8005d3c <main+0x25cc>)
 8005c44:	f240 12fb 	movw	r2, #507	; 0x1fb
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	4b3d      	ldr	r3, [pc, #244]	(8005d40 <main+0x25d0>)
 8005c4c:	3223      	adds	r2, #35
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	4b36      	ldr	r3, [pc, #216]	(8005d2c <main+0x25bc>)
 8005c52:	3a94      	subs	r2, #148
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	4b36      	ldr	r3, [pc, #216]	(8005d30 <main+0x25c0>)
 8005c58:	32eb      	adds	r2, #235
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	4b35      	ldr	r3, [pc, #212]	(8005d34 <main+0x25c4>)
 8005c5e:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	4b34      	ldr	r3, [pc, #208]	(8005d38 <main+0x25c8>)
 8005c66:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 8005c6a:	3201      	adds	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	f44f 731d 	mov.w	r3, #628	; 0x274
 8005c72:	3a4c      	subs	r2, #76
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	3b48      	subs	r3, #72
 8005c78:	6032      	str	r2, [r6, #0]
 8005c7a:	602a      	str	r2, [r5, #0]
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	200c      	movs	r0, #12
 8005c80:	f7fd fcb2 	bl	80035e8 <Posicao>
 8005c84:	2050      	movs	r0, #80
 8005c86:	f7fd fa9f 	bl	80031c8 <mDelay>
					t=	12.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	(8005d3c <main+0x25cc>)
 8005c8c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	4a2b      	ldr	r2, [pc, #172]	(8005d40 <main+0x25d0>)
 8005c94:	3324      	adds	r3, #36
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	4a24      	ldr	r2, [pc, #144]	(8005d2c <main+0x25bc>)
 8005c9a:	3b90      	subs	r3, #144
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4a24      	ldr	r2, [pc, #144]	(8005d30 <main+0x25c0>)
 8005ca0:	33ec      	adds	r3, #236
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	4a23      	ldr	r2, [pc, #140]	(8005d34 <main+0x25c4>)
 8005ca6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b22      	ldr	r3, [pc, #136]	(8005d38 <main+0x25c8>)
 8005cb0:	f240 2256 	movw	r2, #598	; 0x256
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	f44f 731d 	mov.w	r3, #628	; 0x274
 8005cba:	3a50      	subs	r2, #80
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	3b4b      	subs	r3, #75
 8005cc0:	6032      	str	r2, [r6, #0]
 8005cc2:	602a      	str	r2, [r5, #0]
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	200c      	movs	r0, #12
 8005cc8:	f7fd fc8e 	bl	80035e8 <Posicao>
 8005ccc:	2050      	movs	r0, #80
 8005cce:	f7fd fa7b 	bl	80031c8 <mDelay>
					t=	12.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	(8005d3c <main+0x25cc>)
 8005cd4:	f240 13f5 	movw	r3, #501	; 0x1f5
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4a19      	ldr	r2, [pc, #100]	(8005d40 <main+0x25d0>)
 8005cdc:	3324      	adds	r3, #36
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4a12      	ldr	r2, [pc, #72]	(8005d2c <main+0x25bc>)
 8005ce2:	3b8b      	subs	r3, #139
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4a12      	ldr	r2, [pc, #72]	(8005d30 <main+0x25c0>)
 8005ce8:	33ed      	adds	r3, #237
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4a11      	ldr	r2, [pc, #68]	(8005d34 <main+0x25c4>)
 8005cee:	f5a3 73b5 	sub.w	r3, r3, #362	; 0x16a
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	4b10      	ldr	r3, [pc, #64]	(8005d38 <main+0x25c8>)
 8005cf6:	f240 2256 	movw	r2, #598	; 0x256
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f240 2375 	movw	r3, #629	; 0x275
 8005d00:	3a54      	subs	r2, #84
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	3b4f      	subs	r3, #79
 8005d06:	6032      	str	r2, [r6, #0]
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	200c      	movs	r0, #12
 8005d0e:	f7fd fc6b 	bl	80035e8 <Posicao>
 8005d12:	2050      	movs	r0, #80
 8005d14:	f7fd fa58 	bl	80031c8 <mDelay>
					t=	12.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005d18:	4a08      	ldr	r2, [pc, #32]	(8005d3c <main+0x25cc>)
 8005d1a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	4a07      	ldr	r2, [pc, #28]	(8005d40 <main+0x25d0>)
 8005d22:	3324      	adds	r3, #36
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	4a01      	ldr	r2, [pc, #4]	(8005d2c <main+0x25bc>)
 8005d28:	3b85      	subs	r3, #133
 8005d2a:	e00b      	b.n	8005d44 <main+0x25d4>
 8005d2c:	20000034 	.word	0x20000034
 8005d30:	20000038 	.word	0x20000038
 8005d34:	2000003c 	.word	0x2000003c
 8005d38:	20000040 	.word	0x20000040
 8005d3c:	2000002c 	.word	0x2000002c
 8005d40:	20000030 	.word	0x20000030
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	f8df 25ec 	ldr.w	r2, [pc, #1516]	; 8006334 <main+0x2bc4>
 8005d4a:	33ec      	adds	r3, #236
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	f8df 25e8 	ldr.w	r2, [pc, #1512]	; 8006338 <main+0x2bc8>
 8005d52:	f5a3 73b3 	sub.w	r3, r3, #358	; 0x166
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	f8df 35e0 	ldr.w	r3, [pc, #1504]	; 800633c <main+0x2bcc>
 8005d5c:	f240 2256 	movw	r2, #598	; 0x256
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	3a57      	subs	r2, #87
 8005d64:	f240 2376 	movw	r3, #630	; 0x276
 8005d68:	603b      	str	r3, [r7, #0]
 8005d6a:	6032      	str	r2, [r6, #0]
 8005d6c:	3b78      	subs	r3, #120
 8005d6e:	3223      	adds	r2, #35
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	200c      	movs	r0, #12
 8005d76:	f7fd fc37 	bl	80035e8 <Posicao>
 8005d7a:	2050      	movs	r0, #80
 8005d7c:	f7fd fa24 	bl	80031c8 <mDelay>
					t=	12.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005d80:	f8df 35bc 	ldr.w	r3, [pc, #1468]	; 8006340 <main+0x2bd0>
 8005d84:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	f8df 35b8 	ldr.w	r3, [pc, #1464]	; 8006344 <main+0x2bd4>
 8005d8e:	3225      	adds	r2, #37
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f8df 25b4 	ldr.w	r2, [pc, #1460]	; 8006348 <main+0x2bd8>
 8005d96:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	f8df 3594 	ldr.w	r3, [pc, #1428]	; 8006334 <main+0x2bc4>
 8005da0:	f240 227f 	movw	r2, #639	; 0x27f
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	f8df 3590 	ldr.w	r3, [pc, #1424]	; 8006338 <main+0x2bc8>
 8005daa:	f5a2 72b1 	sub.w	r2, r2, #354	; 0x162
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f8df 3588 	ldr.w	r3, [pc, #1416]	; 800633c <main+0x2bcc>
 8005db4:	f502 729d 	add.w	r2, r2, #314	; 0x13a
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	3a5a      	subs	r2, #90
 8005dbc:	f240 2377 	movw	r3, #631	; 0x277
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	6032      	str	r2, [r6, #0]
 8005dc4:	3b7d      	subs	r3, #125
 8005dc6:	3222      	adds	r2, #34
 8005dc8:	602b      	str	r3, [r5, #0]
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	200c      	movs	r0, #12
 8005dce:	f7fd fc0b 	bl	80035e8 <Posicao>
 8005dd2:	2050      	movs	r0, #80
 8005dd4:	f7fd f9f8 	bl	80031c8 <mDelay>
					t=	12.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005dd8:	f8df 3564 	ldr.w	r3, [pc, #1380]	; 8006340 <main+0x2bd0>
 8005ddc:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f8df 3560 	ldr.w	r3, [pc, #1376]	; 8006344 <main+0x2bd4>
 8005de6:	3225      	adds	r2, #37
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f8df 355c 	ldr.w	r3, [pc, #1372]	; 8006348 <main+0x2bd8>
 8005dee:	3a7a      	subs	r2, #122
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f8df 3540 	ldr.w	r3, [pc, #1344]	; 8006334 <main+0x2bc4>
 8005df6:	32e8      	adds	r2, #232
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	f8df 253c 	ldr.w	r2, [pc, #1340]	; 8006338 <main+0x2bc8>
 8005dfe:	f44f 7391 	mov.w	r3, #290	; 0x122
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	f8df 3534 	ldr.w	r3, [pc, #1332]	; 800633c <main+0x2bcc>
 8005e08:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	3a5d      	subs	r2, #93
 8005e10:	f240 2379 	movw	r3, #633	; 0x279
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	6032      	str	r2, [r6, #0]
 8005e18:	3b83      	subs	r3, #131
 8005e1a:	3220      	adds	r2, #32
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	200c      	movs	r0, #12
 8005e22:	f7fd fbe1 	bl	80035e8 <Posicao>
 8005e26:	2050      	movs	r0, #80
 8005e28:	f7fd f9ce 	bl	80031c8 <mDelay>
					t=	12.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005e2c:	f8df 3510 	ldr.w	r3, [pc, #1296]	; 8006340 <main+0x2bd0>
 8005e30:	f240 12e9 	movw	r2, #489	; 0x1e9
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	f8df 350c 	ldr.w	r3, [pc, #1292]	; 8006344 <main+0x2bd4>
 8005e3a:	3225      	adds	r2, #37
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f8df 3508 	ldr.w	r3, [pc, #1288]	; 8006348 <main+0x2bd8>
 8005e42:	3a74      	subs	r2, #116
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	f8df 34ec 	ldr.w	r3, [pc, #1260]	; 8006334 <main+0x2bc4>
 8005e4a:	32e5      	adds	r2, #229
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	f8df 34e8 	ldr.w	r3, [pc, #1256]	; 8006338 <main+0x2bc8>
 8005e52:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f8df 34e0 	ldr.w	r3, [pc, #1248]	; 800633c <main+0x2bcc>
 8005e5c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	3a5d      	subs	r2, #93
 8005e64:	f240 237b 	movw	r3, #635	; 0x27b
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	6032      	str	r2, [r6, #0]
 8005e6c:	3b89      	subs	r3, #137
 8005e6e:	321d      	adds	r2, #29
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	200c      	movs	r0, #12
 8005e76:	f7fd fbb7 	bl	80035e8 <Posicao>
 8005e7a:	2050      	movs	r0, #80
 8005e7c:	f7fd f9a4 	bl	80031c8 <mDelay>
					t=	12.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005e80:	f8df 34bc 	ldr.w	r3, [pc, #1212]	; 8006340 <main+0x2bd0>
 8005e84:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	f8df 34b8 	ldr.w	r3, [pc, #1208]	; 8006344 <main+0x2bd4>
 8005e8e:	3225      	adds	r2, #37
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f8df 34b4 	ldr.w	r3, [pc, #1204]	; 8006348 <main+0x2bd8>
 8005e96:	3a6d      	subs	r2, #109
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f8df 3498 	ldr.w	r3, [pc, #1176]	; 8006334 <main+0x2bc4>
 8005e9e:	32e0      	adds	r2, #224
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f8df 3494 	ldr.w	r3, [pc, #1172]	; 8006338 <main+0x2bc8>
 8005ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 800633c <main+0x2bcc>
 8005eb0:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8005eb4:	3201      	adds	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	3a5f      	subs	r2, #95
 8005eba:	f240 237e 	movw	r3, #638	; 0x27e
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	6032      	str	r2, [r6, #0]
 8005ec2:	3b90      	subs	r3, #144
 8005ec4:	321a      	adds	r2, #26
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	6022      	str	r2, [r4, #0]
 8005eca:	200c      	movs	r0, #12
 8005ecc:	f7fd fb8c 	bl	80035e8 <Posicao>
 8005ed0:	2050      	movs	r0, #80
 8005ed2:	f7fd f979 	bl	80031c8 <mDelay>
					t=	12.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005ed6:	f8df 3468 	ldr.w	r3, [pc, #1128]	; 8006340 <main+0x2bd0>
 8005eda:	f240 12e3 	movw	r2, #483	; 0x1e3
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8006344 <main+0x2bd4>
 8005ee4:	3225      	adds	r2, #37
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f8df 345c 	ldr.w	r3, [pc, #1116]	; 8006348 <main+0x2bd8>
 8005eec:	3a67      	subs	r2, #103
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f8df 3440 	ldr.w	r3, [pc, #1088]	; 8006334 <main+0x2bc4>
 8005ef4:	32dc      	adds	r2, #220
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f8df 243c 	ldr.w	r2, [pc, #1084]	; 8006338 <main+0x2bc8>
 8005efc:	f240 1331 	movw	r3, #305	; 0x131
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	f8df 3438 	ldr.w	r3, [pc, #1080]	; 800633c <main+0x2bcc>
 8005f06:	f240 225b 	movw	r2, #603	; 0x25b
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	3a61      	subs	r2, #97
 8005f0e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	6032      	str	r2, [r6, #0]
 8005f16:	3b96      	subs	r3, #150
 8005f18:	3216      	adds	r2, #22
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	200c      	movs	r0, #12
 8005f20:	f7fd fb62 	bl	80035e8 <Posicao>
 8005f24:	2050      	movs	r0, #80
 8005f26:	f7fd f94f 	bl	80031c8 <mDelay>
					t=	12.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005f2a:	f8df 3414 	ldr.w	r3, [pc, #1044]	; 8006340 <main+0x2bd0>
 8005f2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	f8df 340c 	ldr.w	r3, [pc, #1036]	; 8006344 <main+0x2bd4>
 8005f38:	3225      	adds	r2, #37
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 8006348 <main+0x2bd8>
 8005f40:	3a60      	subs	r2, #96
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	4bfb      	ldr	r3, [pc, #1004]	(8006334 <main+0x2bc4>)
 8005f46:	32d5      	adds	r2, #213
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	4bfb      	ldr	r3, [pc, #1004]	(8006338 <main+0x2bc8>)
 8005f4c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8005f50:	3a01      	subs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	4af9      	ldr	r2, [pc, #996]	(800633c <main+0x2bcc>)
 8005f56:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	3327      	adds	r3, #39
 8005f5e:	f240 12fb 	movw	r2, #507	; 0x1fb
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	6032      	str	r2, [r6, #0]
 8005f66:	3b9d      	subs	r3, #157
 8005f68:	3212      	adds	r2, #18
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	200c      	movs	r0, #12
 8005f70:	f7fd fb3a 	bl	80035e8 <Posicao>
 8005f74:	2050      	movs	r0, #80
 8005f76:	f7fd f927 	bl	80031c8 <mDelay>
					t=	13	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005f7a:	4bf1      	ldr	r3, [pc, #964]	(8006340 <main+0x2bd0>)
 8005f7c:	f240 12dd 	movw	r2, #477	; 0x1dd
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	4bf0      	ldr	r3, [pc, #960]	(8006344 <main+0x2bd4>)
 8005f84:	3226      	adds	r2, #38
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	4bef      	ldr	r3, [pc, #956]	(8006348 <main+0x2bd8>)
 8005f8a:	3a5a      	subs	r2, #90
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	4be9      	ldr	r3, [pc, #932]	(8006334 <main+0x2bc4>)
 8005f90:	32ce      	adds	r2, #206
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	4ae8      	ldr	r2, [pc, #928]	(8006338 <main+0x2bc8>)
 8005f96:	f44f 739c 	mov.w	r3, #312	; 0x138
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	4be7      	ldr	r3, [pc, #924]	(800633c <main+0x2bcc>)
 8005f9e:	f240 225d 	movw	r2, #605	; 0x25d
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	3a61      	subs	r2, #97
 8005fa6:	f240 2386 	movw	r3, #646	; 0x286
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	6032      	str	r2, [r6, #0]
 8005fae:	3ba4      	subs	r3, #164
 8005fb0:	320d      	adds	r2, #13
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	6022      	str	r2, [r4, #0]
 8005fb6:	200d      	movs	r0, #13
 8005fb8:	f7fd fb16 	bl	80035e8 <Posicao>
 8005fbc:	2050      	movs	r0, #80
 8005fbe:	f7fd f903 	bl	80031c8 <mDelay>
					t=	13.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8005fc2:	4bdf      	ldr	r3, [pc, #892]	(8006340 <main+0x2bd0>)
 8005fc4:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	4bde      	ldr	r3, [pc, #888]	(8006344 <main+0x2bd4>)
 8005fcc:	3226      	adds	r2, #38
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	4bdd      	ldr	r3, [pc, #884]	(8006348 <main+0x2bd8>)
 8005fd2:	3a52      	subs	r2, #82
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	4bd7      	ldr	r3, [pc, #860]	(8006334 <main+0x2bc4>)
 8005fd8:	32c6      	adds	r2, #198
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	4ad6      	ldr	r2, [pc, #856]	(8006338 <main+0x2bc8>)
 8005fde:	f240 133b 	movw	r3, #315	; 0x13b
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4ad5      	ldr	r2, [pc, #852]	(800633c <main+0x2bcc>)
 8005fe6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	3329      	adds	r3, #41
 8005fee:	f240 12fd 	movw	r2, #509	; 0x1fd
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	6032      	str	r2, [r6, #0]
 8005ff6:	3baa      	subs	r3, #170
 8005ff8:	3208      	adds	r2, #8
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	6022      	str	r2, [r4, #0]
 8005ffe:	200d      	movs	r0, #13
 8006000:	f7fd faf2 	bl	80035e8 <Posicao>
 8006004:	2050      	movs	r0, #80
 8006006:	f7fd f8df 	bl	80031c8 <mDelay>
					t=	13.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800600a:	4bcd      	ldr	r3, [pc, #820]	(8006340 <main+0x2bd0>)
 800600c:	f240 12d7 	movw	r2, #471	; 0x1d7
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	4bcc      	ldr	r3, [pc, #816]	(8006344 <main+0x2bd4>)
 8006014:	3226      	adds	r2, #38
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	4bcb      	ldr	r3, [pc, #812]	(8006348 <main+0x2bd8>)
 800601a:	3a4c      	subs	r2, #76
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	4bc5      	ldr	r3, [pc, #788]	(8006334 <main+0x2bc4>)
 8006020:	32c0      	adds	r2, #192
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	4ac4      	ldr	r2, [pc, #784]	(8006338 <main+0x2bc8>)
 8006026:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	4bc3      	ldr	r3, [pc, #780]	(800633c <main+0x2bcc>)
 800602e:	f44f 7218 	mov.w	r2, #608	; 0x260
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	3a62      	subs	r2, #98
 8006036:	f240 238a 	movw	r3, #650	; 0x28a
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	6032      	str	r2, [r6, #0]
 800603e:	3bb0      	subs	r3, #176
 8006040:	3203      	adds	r2, #3
 8006042:	602b      	str	r3, [r5, #0]
 8006044:	6022      	str	r2, [r4, #0]
 8006046:	200d      	movs	r0, #13
 8006048:	f7fd face 	bl	80035e8 <Posicao>
 800604c:	2050      	movs	r0, #80
 800604e:	f7fd f8bb 	bl	80031c8 <mDelay>
					t=	13.3	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8006052:	4bbb      	ldr	r3, [pc, #748]	(8006340 <main+0x2bd0>)
 8006054:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	4bba      	ldr	r3, [pc, #744]	(8006344 <main+0x2bd4>)
 800605c:	3226      	adds	r2, #38
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	4bb9      	ldr	r3, [pc, #740]	(8006348 <main+0x2bd8>)
 8006062:	3a45      	subs	r2, #69
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	4bb3      	ldr	r3, [pc, #716]	(8006334 <main+0x2bc4>)
 8006068:	32ba      	adds	r2, #186
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	4bb2      	ldr	r3, [pc, #712]	(8006338 <main+0x2bc8>)
 800606e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	4ab1      	ldr	r2, [pc, #708]	(800633c <main+0x2bcc>)
 8006076:	f240 2362 	movw	r3, #610	; 0x262
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	3329      	adds	r3, #41
 800607e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	6032      	str	r2, [r6, #0]
 8006086:	3bb5      	subs	r3, #181
 8006088:	3a01      	subs	r2, #1
 800608a:	602b      	str	r3, [r5, #0]
 800608c:	6022      	str	r2, [r4, #0]
 800608e:	200d      	movs	r0, #13
 8006090:	f7fd faaa 	bl	80035e8 <Posicao>
 8006094:	2050      	movs	r0, #80
 8006096:	f7fd f897 	bl	80031c8 <mDelay>
					t=	13.4	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800609a:	4ba9      	ldr	r3, [pc, #676]	(8006340 <main+0x2bd0>)
 800609c:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	4ba8      	ldr	r3, [pc, #672]	(8006344 <main+0x2bd4>)
 80060a4:	3225      	adds	r2, #37
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	4ba7      	ldr	r3, [pc, #668]	(8006348 <main+0x2bd8>)
 80060aa:	3a3f      	subs	r2, #63
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	4ba1      	ldr	r3, [pc, #644]	(8006334 <main+0x2bc4>)
 80060b0:	32b5      	adds	r2, #181
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	4aa0      	ldr	r2, [pc, #640]	(8006338 <main+0x2bc8>)
 80060b6:	f240 1343 	movw	r3, #323	; 0x143
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	4b9f      	ldr	r3, [pc, #636]	(800633c <main+0x2bcc>)
 80060be:	f44f 7219 	mov.w	r2, #612	; 0x264
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	3a65      	subs	r2, #101
 80060c6:	f44f 7323 	mov.w	r3, #652	; 0x28c
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	6032      	str	r2, [r6, #0]
 80060ce:	3bba      	subs	r3, #186
 80060d0:	3a05      	subs	r2, #5
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	6022      	str	r2, [r4, #0]
 80060d6:	200d      	movs	r0, #13
 80060d8:	f7fd fa86 	bl	80035e8 <Posicao>
 80060dc:	2050      	movs	r0, #80
 80060de:	f7fd f873 	bl	80031c8 <mDelay>
					t=	13.5	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80060e2:	4b97      	ldr	r3, [pc, #604]	(8006340 <main+0x2bd0>)
 80060e4:	f240 12cf 	movw	r2, #463	; 0x1cf
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	4b96      	ldr	r3, [pc, #600]	(8006344 <main+0x2bd4>)
 80060ec:	3225      	adds	r2, #37
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	4b95      	ldr	r3, [pc, #596]	(8006348 <main+0x2bd8>)
 80060f2:	3a3a      	subs	r2, #58
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	4b8f      	ldr	r3, [pc, #572]	(8006334 <main+0x2bc4>)
 80060f8:	32b2      	adds	r2, #178
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	4b8e      	ldr	r3, [pc, #568]	(8006338 <main+0x2bc8>)
 80060fe:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8006102:	3a03      	subs	r2, #3
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	4b8d      	ldr	r3, [pc, #564]	(800633c <main+0x2bcc>)
 8006108:	f502 7290 	add.w	r2, r2, #288	; 0x120
 800610c:	3201      	adds	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	3a68      	subs	r2, #104
 8006112:	f240 238b 	movw	r3, #651	; 0x28b
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	6032      	str	r2, [r6, #0]
 800611a:	3bbc      	subs	r3, #188
 800611c:	3a08      	subs	r2, #8
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	6022      	str	r2, [r4, #0]
 8006122:	200d      	movs	r0, #13
 8006124:	f7fd fa60 	bl	80035e8 <Posicao>
 8006128:	2050      	movs	r0, #80
 800612a:	f7fd f84d 	bl	80031c8 <mDelay>
					t=	13.6	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 800612e:	4b84      	ldr	r3, [pc, #528]	(8006340 <main+0x2bd0>)
 8006130:	f240 12cd 	movw	r2, #461	; 0x1cd
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	4b83      	ldr	r3, [pc, #524]	(8006344 <main+0x2bd4>)
 8006138:	3224      	adds	r2, #36
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	4b82      	ldr	r3, [pc, #520]	(8006348 <main+0x2bd8>)
 800613e:	3a36      	subs	r2, #54
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	4b7c      	ldr	r3, [pc, #496]	(8006334 <main+0x2bc4>)
 8006144:	32b1      	adds	r2, #177
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	4b7b      	ldr	r3, [pc, #492]	(8006338 <main+0x2bc8>)
 800614a:	f44f 72a3 	mov.w	r2, #326	; 0x146
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	4b7a      	ldr	r3, [pc, #488]	(800633c <main+0x2bcc>)
 8006152:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8006156:	3203      	adds	r2, #3
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	3a6c      	subs	r2, #108
 800615c:	f240 2389 	movw	r3, #649	; 0x289
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	6032      	str	r2, [r6, #0]
 8006164:	3bbe      	subs	r3, #190
 8006166:	3a0b      	subs	r2, #11
 8006168:	602b      	str	r3, [r5, #0]
 800616a:	6022      	str	r2, [r4, #0]
 800616c:	200d      	movs	r0, #13
 800616e:	f7fd fa3b 	bl	80035e8 <Posicao>
 8006172:	2050      	movs	r0, #80
 8006174:	f7fd f828 	bl	80031c8 <mDelay>
					t=	13.7	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8006178:	4b71      	ldr	r3, [pc, #452]	(8006340 <main+0x2bd0>)
 800617a:	f240 12cb 	movw	r2, #459	; 0x1cb
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	4b70      	ldr	r3, [pc, #448]	(8006344 <main+0x2bd4>)
 8006182:	3224      	adds	r2, #36
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	4b70      	ldr	r3, [pc, #448]	(8006348 <main+0x2bd8>)
 8006188:	3a34      	subs	r2, #52
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	4b69      	ldr	r3, [pc, #420]	(8006334 <main+0x2bc4>)
 800618e:	32b3      	adds	r2, #179
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	4a69      	ldr	r2, [pc, #420]	(8006338 <main+0x2bc8>)
 8006194:	f240 1347 	movw	r3, #327	; 0x147
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	4b68      	ldr	r3, [pc, #416]	(800633c <main+0x2bcc>)
 800619c:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	3a71      	subs	r2, #113
 80061a4:	f240 2385 	movw	r3, #645	; 0x285
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	6032      	str	r2, [r6, #0]
 80061ac:	3bbd      	subs	r3, #189
 80061ae:	3a0c      	subs	r2, #12
 80061b0:	602b      	str	r3, [r5, #0]
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	200d      	movs	r0, #13
 80061b6:	f7fd fa17 	bl	80035e8 <Posicao>
 80061ba:	2050      	movs	r0, #80
 80061bc:	f7fd f804 	bl	80031c8 <mDelay>
					t=	13.8	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 80061c0:	4b5f      	ldr	r3, [pc, #380]	(8006340 <main+0x2bd0>)
 80061c2:	f240 12c9 	movw	r2, #457	; 0x1c9
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	4b5e      	ldr	r3, [pc, #376]	(8006344 <main+0x2bd4>)
 80061ca:	3223      	adds	r2, #35
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	4b5e      	ldr	r3, [pc, #376]	(8006348 <main+0x2bd8>)
 80061d0:	3a33      	subs	r2, #51
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	4b57      	ldr	r3, [pc, #348]	(8006334 <main+0x2bc4>)
 80061d6:	32b8      	adds	r2, #184
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	4a57      	ldr	r2, [pc, #348]	(8006338 <main+0x2bc8>)
 80061dc:	f44f 73a4 	mov.w	r3, #328	; 0x148
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b56      	ldr	r3, [pc, #344]	(800633c <main+0x2bcc>)
 80061e4:	f240 226f 	movw	r2, #623	; 0x26f
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	f44f 7320 	mov.w	r3, #640	; 0x280
 80061ee:	3a78      	subs	r2, #120
 80061f0:	603b      	str	r3, [r7, #0]
 80061f2:	6032      	str	r2, [r6, #0]
 80061f4:	3bbb      	subs	r3, #187
 80061f6:	3a0c      	subs	r2, #12
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	6022      	str	r2, [r4, #0]
 80061fc:	200d      	movs	r0, #13
 80061fe:	f7fd f9f3 	bl	80035e8 <Posicao>
 8006202:	2050      	movs	r0, #80
 8006204:	f7fc ffe0 	bl	80031c8 <mDelay>
					t=	13.9	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(x);
 8006208:	4b4d      	ldr	r3, [pc, #308]	(8006340 <main+0x2bd0>)
 800620a:	f240 12c7 	movw	r2, #455	; 0x1c7
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	4b4c      	ldr	r3, [pc, #304]	(8006344 <main+0x2bd4>)
 8006212:	3222      	adds	r2, #34
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	4b4c      	ldr	r3, [pc, #304]	(8006348 <main+0x2bd8>)
 8006218:	3a35      	subs	r2, #53
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	4b45      	ldr	r3, [pc, #276]	(8006334 <main+0x2bc4>)
 800621e:	32c0      	adds	r2, #192
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	4b45      	ldr	r3, [pc, #276]	(8006338 <main+0x2bc8>)
 8006224:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8006228:	3a03      	subs	r2, #3
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	4b43      	ldr	r3, [pc, #268]	(800633c <main+0x2bcc>)
 800622e:	f502 7295 	add.w	r2, r2, #298	; 0x12a
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	3a82      	subs	r2, #130
 8006236:	f240 2379 	movw	r3, #633	; 0x279
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	6032      	str	r2, [r6, #0]
 800623e:	3bb7      	subs	r3, #183
 8006240:	3a0a      	subs	r2, #10
 8006242:	602b      	str	r3, [r5, #0]
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	200d      	movs	r0, #13
 8006248:	f7fd f9ce 	bl	80035e8 <Posicao>
 800624c:	2050      	movs	r0, #80
 800624e:	f7fc ffbb 	bl	80031c8 <mDelay>
					t=	14	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(500);
 8006252:	4b3b      	ldr	r3, [pc, #236]	(8006340 <main+0x2bd0>)
 8006254:	f240 12c5 	movw	r2, #453	; 0x1c5
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	4b3a      	ldr	r3, [pc, #232]	(8006344 <main+0x2bd4>)
 800625c:	3222      	adds	r2, #34
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	4b39      	ldr	r3, [pc, #228]	(8006348 <main+0x2bd8>)
 8006262:	3a39      	subs	r2, #57
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	4b33      	ldr	r3, [pc, #204]	(8006334 <main+0x2bc4>)
 8006268:	32cb      	adds	r2, #203
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	4b32      	ldr	r3, [pc, #200]	(8006338 <main+0x2bc8>)
 800626e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	4b31      	ldr	r3, [pc, #196]	(800633c <main+0x2bcc>)
 8006276:	f44f 721e 	mov.w	r2, #632	; 0x278
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	3a8d      	subs	r2, #141
 800627e:	f240 236f 	movw	r3, #623	; 0x26f
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	6032      	str	r2, [r6, #0]
 8006286:	3baf      	subs	r3, #175
 8006288:	3a07      	subs	r2, #7
 800628a:	602b      	str	r3, [r5, #0]
 800628c:	6022      	str	r2, [r4, #0]
 800628e:	200e      	movs	r0, #14
 8006290:	f7fd f9aa 	bl	80035e8 <Posicao>
 8006294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006298:	f7fc ff96 	bl	80031c8 <mDelay>
					t=	14.1	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(500);
 800629c:	4b28      	ldr	r3, [pc, #160]	(8006340 <main+0x2bd0>)
 800629e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	4b27      	ldr	r3, [pc, #156]	(8006344 <main+0x2bd4>)
 80062a6:	3220      	adds	r2, #32
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	4b27      	ldr	r3, [pc, #156]	(8006348 <main+0x2bd8>)
 80062ac:	3a3f      	subs	r2, #63
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	4b20      	ldr	r3, [pc, #128]	(8006334 <main+0x2bc4>)
 80062b2:	32d8      	adds	r2, #216
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	4b20      	ldr	r3, [pc, #128]	(8006338 <main+0x2bc8>)
 80062b8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	4b1f      	ldr	r3, [pc, #124]	(800633c <main+0x2bcc>)
 80062c0:	f502 729a 	add.w	r2, r2, #308	; 0x134
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	3a9b      	subs	r2, #155
 80062c8:	f44f 7319 	mov.w	r3, #612	; 0x264
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	6032      	str	r2, [r6, #0]
 80062d0:	3ba7      	subs	r3, #167
 80062d2:	3a02      	subs	r2, #2
 80062d4:	602b      	str	r3, [r5, #0]
 80062d6:	6022      	str	r2, [r4, #0]
 80062d8:	200e      	movs	r0, #14
 80062da:	f7fd f985 	bl	80035e8 <Posicao>
 80062de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062e2:	f7fc ff71 	bl	80031c8 <mDelay>
					t=	14.2	;GoalPos9=(int)(-0.000275921606029018*t*t*t*t*t*t+0.0224866058355711*t*t*t*t*t-0.554002659792176*t*t*t*t+5.27359561063168*t*t*t-16.6250714681205*t*t+1.07731363098685*t+492.577239841013);GoalPos10=(int)(-0.000140124106979082*t*t*t*t*t*t+0.00957747098059501*t*t*t*t*t-0.17601617035749*t*t*t*t+0.366976848153587*t*t*t+13.7934195723444*t*t-82.4753256531787*t+597.355314009854);GoalPos11=(int)(0.00000140489885303541*t*t*t*t*t*t*t*t*t*t*t*t-0.000137098037479588*t*t*t*t*t*t*t*t*t*t*t+0.00593962266650624*t*t*t*t*t*t*t*t*t*t-0.150467310047963*t*t*t*t*t*t*t*t*t+2.47028882826084*t*t*t*t*t*t*t*t-27.5207922276621*t*t*t*t*t*t*t+211.699439008591*t*t*t*t*t*t-1121.79501433143*t*t*t*t*t+4012.95422656784*t*t*t*t-9303.65422686671*t*t*t+13044.0770540131*t*t-9823.0075743571*t+3401.38059312374);GoalPos12=(int)(0.00000011672084327608*t*t*t*t*t*t*t*t*t*t*t*t*t*t-0.000012662080312946*t*t*t*t*t*t*t*t*t*t*t*t*t+0.000615851466539234*t*t*t*t*t*t*t*t*t*t*t*t-0.017737457506048*t*t*t*t*t*t*t*t*t*t*t+0.336649535916704*t*t*t*t*t*t*t*t*t*t-4.43504476680317*t*t*t*t*t*t*t*t*t+41.6304852819428*t*t*t*t*t*t*t*t-281.48687768283*t*t*t*t*t*t*t+1370.97665082275*t*t*t*t*t*t-4763.85605618472*t*t*t*t*t+11574.9816970237*t*t*t*t-18997.7828225834*t*t*t+19842.4241425091*t*t-11754.8617513084*t+3597.71125928176);GoalPos13=(int)(-0.0000148141287899076*t*t*t*t*t*t*t*t*t*t+0.00119700195674767*t*t*t*t*t*t*t*t*t-0.0415853177723568*t*t*t*t*t*t*t*t+0.813243772863493*t*t*t*t*t*t*t-9.8518102730438*t*t*t*t*t*t+76.7204688187178*t*t*t*t*t-385.724100593995*t*t*t*t+1221.58291298422*t*t*t-2295.15666871898*t*t+2304.35552800843*t-653.058578051134);GoalPos14=(int)(0.00000083846544852191*t*t*t*t*t*t*t*t*t*t-0.00000812251364211665*t*t*t*t*t*t*t*t*t-0.00194976423616432*t*t*t*t*t*t*t*t+0.0861933684303852*t*t*t*t*t*t*t-1.69603346375747*t*t*t*t*t*t+18.9297051399361*t*t*t*t*t-127.429816133823*t*t*t*t+517.304913254853*t*t*t-1215.69884225685*t*t+1501.00777573452*t+34.6214069610031);GoalPos15=(int)(0.0000217898674376092*t*t*t*t*t*t*t*t*t*t-0.00168504911464163*t*t*t*t*t*t*t*t*t+0.0556171425516435*t*t*t*t*t*t*t*t-1.02212510842425*t*t*t*t*t*t*t+11.4361911769592*t*t*t*t*t*t-79.9218400189809*t*t*t*t*t+343.33892677256*t*t*t*t-852.044744171629*t*t*t+1066.9698822212*t*t-535.985198422995*t+651.394169313619);GoalPos16=(int)(0.0000248742798796263*t*t*t*t*t*t*t*t*t*t-0.00191083364372945*t*t*t*t*t*t*t*t*t+0.0626362655558014*t*t*t*t*t*t*t*t-1.1448672116933*t*t*t*t*t*t*t+12.8113562500397*t*t*t*t*t*t-90.8916292359355*t*t*t*t*t+410.536161792987*t*t*t*t-1157.63710507665*t*t*t+1944.09966170448*t*t-1764.8116655254*t+1056.68768177018);GoalPos17=(int)(-0.000602821242505626*t*t*t*t*t*t+0.0405315649727053*t*t*t*t*t-0.916931723020958 *t*t*t*t+8.3576698861698*t*t*t-25.507120415259*t*t-1.29495830014807*t+497.088587623408);GoalPos18=(int)(-0.00021958932773343*t*t*t*t*t*t+0.0135980370756124*t*t*t*t*t-0.239784506804081 *t*t*t*t+0.466436883005924*t*t*t+18.9979103475509*t*t-113.421209371814*t+620.07665583061);Posicao((int)t);mDelay(500);
 80062e6:	4b16      	ldr	r3, [pc, #88]	(8006340 <main+0x2bd0>)
 80062e8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	4b15      	ldr	r3, [pc, #84]	(8006344 <main+0x2bd4>)
 80062f0:	3220      	adds	r2, #32
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	4a14      	ldr	r2, [pc, #80]	(8006348 <main+0x2bd8>)
 80062f6:	f240 1399 	movw	r3, #409	; 0x199
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	4b0d      	ldr	r3, [pc, #52]	(8006334 <main+0x2bc4>)
 80062fe:	f240 2281 	movw	r2, #641	; 0x281
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	4b0c      	ldr	r3, [pc, #48]	(8006338 <main+0x2bc8>)
 8006306:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	4b0b      	ldr	r3, [pc, #44]	(800633c <main+0x2bcc>)
 800630e:	f44f 7221 	mov.w	r2, #644	; 0x284
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f240 2356 	movw	r3, #598	; 0x256
 8006318:	3aac      	subs	r2, #172
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	6032      	str	r2, [r6, #0]
 800631e:	3b9b      	subs	r3, #155
 8006320:	3205      	adds	r2, #5
 8006322:	200e      	movs	r0, #14
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	f7fd f95e 	bl	80035e8 <Posicao>
 800632c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006330:	f7fd bad9 	b.w	80038e6 <main+0x176>
 8006334:	20000038 	.word	0x20000038
 8006338:	2000003c 	.word	0x2000003c
 800633c:	20000040 	.word	0x20000040
 8006340:	2000002c 	.word	0x2000002c
 8006344:	20000030 	.word	0x20000030
 8006348:	20000034 	.word	0x20000034

0800634c <NMIException>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
}
 800634c:	4770      	bx	lr
 800634e:	46c0      	nop			(mov r8, r8)

08006350 <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 8006350:	e7fe      	b.n	8006350 <HardFaultException>
 8006352:	46c0      	nop			(mov r8, r8)

08006354 <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 8006354:	e7fe      	b.n	8006354 <MemManageException>
 8006356:	46c0      	nop			(mov r8, r8)

08006358 <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 8006358:	e7fe      	b.n	8006358 <BusFaultException>
 800635a:	46c0      	nop			(mov r8, r8)

0800635c <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 800635c:	e7fe      	b.n	800635c <UsageFaultException>
 800635e:	46c0      	nop			(mov r8, r8)

08006360 <DebugMonitor>:
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
}
 8006360:	4770      	bx	lr
 8006362:	46c0      	nop			(mov r8, r8)

08006364 <SVCHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
}
 8006364:	4770      	bx	lr
 8006366:	46c0      	nop			(mov r8, r8)

08006368 <PendSVC>:
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
}
 8006368:	4770      	bx	lr
 800636a:	46c0      	nop			(mov r8, r8)

0800636c <WWDG_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
}
 800636c:	4770      	bx	lr
 800636e:	46c0      	nop			(mov r8, r8)

08006370 <PVD_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
}
 8006370:	4770      	bx	lr
 8006372:	46c0      	nop			(mov r8, r8)

08006374 <TAMPER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
}
 8006374:	4770      	bx	lr
 8006376:	46c0      	nop			(mov r8, r8)

08006378 <RTC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
}
 8006378:	4770      	bx	lr
 800637a:	46c0      	nop			(mov r8, r8)

0800637c <FLASH_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
}
 800637c:	4770      	bx	lr
 800637e:	46c0      	nop			(mov r8, r8)

08006380 <RCC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
}
 8006380:	4770      	bx	lr
 8006382:	46c0      	nop			(mov r8, r8)

08006384 <EXTI0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
}
 8006384:	4770      	bx	lr
 8006386:	46c0      	nop			(mov r8, r8)

08006388 <EXTI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
}
 8006388:	4770      	bx	lr
 800638a:	46c0      	nop			(mov r8, r8)

0800638c <EXTI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
}
 800638c:	4770      	bx	lr
 800638e:	46c0      	nop			(mov r8, r8)

08006390 <EXTI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
}
 8006390:	4770      	bx	lr
 8006392:	46c0      	nop			(mov r8, r8)

08006394 <EXTI4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
}
 8006394:	4770      	bx	lr
 8006396:	46c0      	nop			(mov r8, r8)

08006398 <DMA1_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
}
 8006398:	4770      	bx	lr
 800639a:	46c0      	nop			(mov r8, r8)

0800639c <DMA1_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
}
 800639c:	4770      	bx	lr
 800639e:	46c0      	nop			(mov r8, r8)

080063a0 <DMA1_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
}
 80063a0:	4770      	bx	lr
 80063a2:	46c0      	nop			(mov r8, r8)

080063a4 <DMA1_Channel4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
}
 80063a4:	4770      	bx	lr
 80063a6:	46c0      	nop			(mov r8, r8)

080063a8 <DMA1_Channel5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
}
 80063a8:	4770      	bx	lr
 80063aa:	46c0      	nop			(mov r8, r8)

080063ac <DMA1_Channel6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
}
 80063ac:	4770      	bx	lr
 80063ae:	46c0      	nop			(mov r8, r8)

080063b0 <DMA1_Channel7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
}
 80063b0:	4770      	bx	lr
 80063b2:	46c0      	nop			(mov r8, r8)

080063b4 <ADC1_2_IRQHandler>:
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
}
 80063b4:	4770      	bx	lr
 80063b6:	46c0      	nop			(mov r8, r8)

080063b8 <USB_HP_CAN_TX_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
}
 80063b8:	4770      	bx	lr
 80063ba:	46c0      	nop			(mov r8, r8)

080063bc <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
}
 80063bc:	4770      	bx	lr
 80063be:	46c0      	nop			(mov r8, r8)

080063c0 <CAN_RX1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
}
 80063c0:	4770      	bx	lr
 80063c2:	46c0      	nop			(mov r8, r8)

080063c4 <CAN_SCE_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
}
 80063c4:	4770      	bx	lr
 80063c6:	46c0      	nop			(mov r8, r8)

080063c8 <EXTI9_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
}
 80063c8:	4770      	bx	lr
 80063ca:	46c0      	nop			(mov r8, r8)

080063cc <TIM1_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
}
 80063cc:	4770      	bx	lr
 80063ce:	46c0      	nop			(mov r8, r8)

080063d0 <TIM1_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
}
 80063d0:	4770      	bx	lr
 80063d2:	46c0      	nop			(mov r8, r8)

080063d4 <TIM1_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
}
 80063d4:	4770      	bx	lr
 80063d6:	46c0      	nop			(mov r8, r8)

080063d8 <TIM1_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
}
 80063d8:	4770      	bx	lr
 80063da:	46c0      	nop			(mov r8, r8)

080063dc <TIM3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
}
 80063dc:	4770      	bx	lr
 80063de:	46c0      	nop			(mov r8, r8)

080063e0 <TIM4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
}
 80063e0:	4770      	bx	lr
 80063e2:	46c0      	nop			(mov r8, r8)

080063e4 <I2C1_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
}
 80063e4:	4770      	bx	lr
 80063e6:	46c0      	nop			(mov r8, r8)

080063e8 <I2C1_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
}
 80063e8:	4770      	bx	lr
 80063ea:	46c0      	nop			(mov r8, r8)

080063ec <I2C2_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
}
 80063ec:	4770      	bx	lr
 80063ee:	46c0      	nop			(mov r8, r8)

080063f0 <I2C2_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
}
 80063f0:	4770      	bx	lr
 80063f2:	46c0      	nop			(mov r8, r8)

080063f4 <SPI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
}
 80063f4:	4770      	bx	lr
 80063f6:	46c0      	nop			(mov r8, r8)

080063f8 <SPI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
}
 80063f8:	4770      	bx	lr
 80063fa:	46c0      	nop			(mov r8, r8)

080063fc <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
}
 80063fc:	4770      	bx	lr
 80063fe:	46c0      	nop			(mov r8, r8)

08006400 <USART3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
}
 8006400:	4770      	bx	lr
 8006402:	46c0      	nop			(mov r8, r8)

08006404 <EXTI15_10_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
}
 8006404:	4770      	bx	lr
 8006406:	46c0      	nop			(mov r8, r8)

08006408 <RTCAlarm_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
}
 8006408:	4770      	bx	lr
 800640a:	46c0      	nop			(mov r8, r8)

0800640c <USBWakeUp_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
}
 800640c:	4770      	bx	lr
 800640e:	46c0      	nop			(mov r8, r8)

08006410 <TIM8_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
}
 8006410:	4770      	bx	lr
 8006412:	46c0      	nop			(mov r8, r8)

08006414 <TIM8_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
}
 8006414:	4770      	bx	lr
 8006416:	46c0      	nop			(mov r8, r8)

08006418 <TIM8_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
}
 8006418:	4770      	bx	lr
 800641a:	46c0      	nop			(mov r8, r8)

0800641c <TIM8_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
}
 800641c:	4770      	bx	lr
 800641e:	46c0      	nop			(mov r8, r8)

08006420 <ADC3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
}
 8006420:	4770      	bx	lr
 8006422:	46c0      	nop			(mov r8, r8)

08006424 <FSMC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
}
 8006424:	4770      	bx	lr
 8006426:	46c0      	nop			(mov r8, r8)

08006428 <SDIO_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
}
 8006428:	4770      	bx	lr
 800642a:	46c0      	nop			(mov r8, r8)

0800642c <TIM5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
}
 800642c:	4770      	bx	lr
 800642e:	46c0      	nop			(mov r8, r8)

08006430 <SPI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
}
 8006430:	4770      	bx	lr
 8006432:	46c0      	nop			(mov r8, r8)

08006434 <UART4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
}
 8006434:	4770      	bx	lr
 8006436:	46c0      	nop			(mov r8, r8)

08006438 <UART5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
}
 8006438:	4770      	bx	lr
 800643a:	46c0      	nop			(mov r8, r8)

0800643c <TIM6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
}
 800643c:	4770      	bx	lr
 800643e:	46c0      	nop			(mov r8, r8)

08006440 <TIM7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
}
 8006440:	4770      	bx	lr
 8006442:	46c0      	nop			(mov r8, r8)

08006444 <DMA2_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
}
 8006444:	4770      	bx	lr
 8006446:	46c0      	nop			(mov r8, r8)

08006448 <DMA2_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
}
 8006448:	4770      	bx	lr
 800644a:	46c0      	nop			(mov r8, r8)

0800644c <DMA2_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
}
 800644c:	4770      	bx	lr
 800644e:	46c0      	nop			(mov r8, r8)

08006450 <DMA2_Channel4_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
}
 8006450:	4770      	bx	lr
 8006452:	46c0      	nop			(mov r8, r8)

08006454 <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 8006454:	b500      	push	{lr}
 8006456:	b081      	sub	sp, #4
	RxD0Interrupt();
 8006458:	f7fc fed8 	bl	800320c <RxD0Interrupt>
}
 800645c:	b001      	add	sp, #4
 800645e:	bd00      	pop	{pc}

08006460 <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 8006460:	b500      	push	{lr}
 8006462:	b081      	sub	sp, #4
	TimerInterrupt_1ms();
 8006464:	f7fc feee 	bl	8003244 <TimerInterrupt_1ms>
}
 8006468:	b001      	add	sp, #4
 800646a:	bd00      	pop	{pc}

0800646c <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 800646c:	b500      	push	{lr}
 800646e:	b081      	sub	sp, #4
	__ISR_DELAY();
 8006470:	f7fc fe90 	bl	8003194 <__ISR_DELAY>
}
 8006474:	b001      	add	sp, #4
 8006476:	bd00      	pop	{pc}

08006478 <dxl_hal_timeout>:
	//exceed range of int...
	StartDiscount(NumRcvByte*100);
}

int dxl_hal_timeout(void)
{
 8006478:	b500      	push	{lr}
 800647a:	b081      	sub	sp, #4
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	return CheckTimeOut();
 800647c:	f7fc fe9a 	bl	80031b4 <CheckTimeOut>
}
 8006480:	b001      	add	sp, #4
 8006482:	bd00      	pop	{pc}

08006484 <dxl_hal_set_timeout>:
	}
	return numPacket;
}

void dxl_hal_set_timeout( int NumRcvByte )
{
 8006484:	b500      	push	{lr}
 8006486:	4603      	mov	r3, r0
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 8006488:	2064      	movs	r0, #100
	}
	return numPacket;
}

void dxl_hal_set_timeout( int NumRcvByte )
{
 800648a:	b081      	sub	sp, #4
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 800648c:	fb00 f003 	mul.w	r0, r0, r3
 8006490:	f7fc fe8a 	bl	80031a8 <StartDiscount>
}
 8006494:	b001      	add	sp, #4
 8006496:	bd00      	pop	{pc}

08006498 <dxl_hal_rx>:

	return numPacket;
}

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4606      	mov	r6, r0
 800649c:	460d      	mov	r5, r1
 800649e:	2400      	movs	r4, #0
 80064a0:	e009      	b.n	80064b6 <dxl_hal_rx+0x1e>
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
	{
		if (CheckNewArrive())
 80064a2:	f7fc fe53 	bl	800314c <CheckNewArrive>
 80064a6:	b908      	cbnz	r0, 80064ac <dxl_hal_rx+0x14>
 80064a8:	4625      	mov	r5, r4
 80064aa:	e006      	b.n	80064ba <dxl_hal_rx+0x22>
			pPacket[i] =  RxDByte_DXL();
 80064ac:	f7fc fe5a 	bl	8003164 <RxDByte_DXL>
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 80064b0:	1c63      	adds	r3, r4, #1
	{
		if (CheckNewArrive())
			pPacket[i] =  RxDByte_DXL();
 80064b2:	5530      	strb	r0, [r6, r4]
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 80064b4:	b2dc      	uxtb	r4, r3
 80064b6:	42ac      	cmp	r4, r5
 80064b8:	dbf3      	blt.n	80064a2 <dxl_hal_rx+0xa>
			pPacket[i] =  RxDByte_DXL();
		else
			return i;
	}
	return numPacket;
}
 80064ba:	4628      	mov	r0, r5
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	46c0      	nop			(mov r8, r8)

080064c0 <dxl_hal_tx>:

	ClearBuffer256();
}

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	4606      	mov	r6, r0
 80064c4:	460d      	mov	r5, r1
 80064c6:	2400      	movs	r4, #0
 80064c8:	e004      	b.n	80064d4 <dxl_hal_tx+0x14>
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
		TxDByte_DXL(pPacket[i]);
 80064ca:	5d30      	ldrb	r0, [r6, r4]
 80064cc:	f7fc ff68 	bl	80033a0 <TxDByte_DXL>
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
 80064d0:	1c63      	adds	r3, r4, #1
 80064d2:	b2dc      	uxtb	r4, r3
 80064d4:	42ac      	cmp	r4, r5
 80064d6:	dbf8      	blt.n	80064ca <dxl_hal_tx+0xa>
		TxDByte_DXL(pPacket[i]);

	return numPacket;
}
 80064d8:	4628      	mov	r0, r5
 80064da:	bd70      	pop	{r4, r5, r6, pc}

080064dc <dxl_hal_clear>:
	/* Disable the USART1 */
	DisableUSART1();
}

void dxl_hal_clear(void)
{
 80064dc:	b500      	push	{lr}
 80064de:	b081      	sub	sp, #4
	// Clear communication buffer

	ClearBuffer256();
 80064e0:	f7fc fe28 	bl	8003134 <ClearBuffer256>
}
 80064e4:	b001      	add	sp, #4
 80064e6:	bd00      	pop	{pc}

080064e8 <dxl_hal_close>:
	USART1_Configuration(baudrate);
	return 1;
}

void dxl_hal_close()
{
 80064e8:	b500      	push	{lr}
 80064ea:	b081      	sub	sp, #4
	// Closing device

	/* Disable the USART1 */
	DisableUSART1();
 80064ec:	f7fc ff7a 	bl	80033e4 <DisableUSART1>
}
 80064f0:	b001      	add	sp, #4
 80064f2:	bd00      	pop	{pc}

080064f4 <dxl_hal_open>:
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 80064f4:	b500      	push	{lr}
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 80064f6:	4608      	mov	r0, r1
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 80064f8:	b081      	sub	sp, #4
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 80064fa:	f7fc ffbd 	bl	8003478 <USART1_Configuration>
	return 1;
}
 80064fe:	2001      	movs	r0, #1
 8006500:	b001      	add	sp, #4
 8006502:	bd00      	pop	{pc}

08006504 <dxl_get_result>:


}

int dxl_get_result()
{
 8006504:	4b01      	ldr	r3, [pc, #4]	(800650c <dxl_get_result+0x8>)
 8006506:	6818      	ldr	r0, [r3, #0]
	return gbCommStatus;
}
 8006508:	4770      	bx	lr
 800650a:	46c0      	nop			(mov r8, r8)
 800650c:	20000068 	.word	0x20000068

08006510 <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
 8006510:	4b01      	ldr	r3, [pc, #4]	(8006518 <dxl_set_txpacket_id+0x8>)
 8006512:	7098      	strb	r0, [r3, #2]
}
 8006514:	4770      	bx	lr
 8006516:	46c0      	nop			(mov r8, r8)
 8006518:	20000184 	.word	0x20000184

0800651c <dxl_set_txpacket_instruction>:

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
 800651c:	4b01      	ldr	r3, [pc, #4]	(8006524 <dxl_set_txpacket_instruction+0x8>)
 800651e:	7118      	strb	r0, [r3, #4]
}
 8006520:	4770      	bx	lr
 8006522:	46c0      	nop			(mov r8, r8)
 8006524:	20000184 	.word	0x20000184

08006528 <dxl_set_txpacket_parameter>:

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
 8006528:	4b01      	ldr	r3, [pc, #4]	(8006530 <dxl_set_txpacket_parameter+0x8>)
 800652a:	181b      	adds	r3, r3, r0
 800652c:	7159      	strb	r1, [r3, #5]
}
 800652e:	4770      	bx	lr
 8006530:	20000184 	.word	0x20000184

08006534 <dxl_set_txpacket_length>:

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
 8006534:	4b01      	ldr	r3, [pc, #4]	(800653c <dxl_set_txpacket_length+0x8>)
 8006536:	70d8      	strb	r0, [r3, #3]
}
 8006538:	4770      	bx	lr
 800653a:	46c0      	nop			(mov r8, r8)
 800653c:	20000184 	.word	0x20000184

08006540 <dxl_get_rxpacket_error>:

int dxl_get_rxpacket_error( int errbit )
{
 8006540:	4b03      	ldr	r3, [pc, #12]	(8006550 <dxl_get_rxpacket_error+0x10>)
 8006542:	791b      	ldrb	r3, [r3, #4]
 8006544:	4218      	tst	r0, r3
 8006546:	bf0c      	ite	eq
 8006548:	2000      	moveq	r0, #0
 800654a:	2001      	movne	r0, #1
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
		return 1;

	return 0;
}
 800654c:	4770      	bx	lr
 800654e:	46c0      	nop			(mov r8, r8)
 8006550:	20000224 	.word	0x20000224

08006554 <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
 8006554:	4b01      	ldr	r3, [pc, #4]	(800655c <dxl_get_rxpacket_length+0x8>)
 8006556:	78d8      	ldrb	r0, [r3, #3]
	return (int)gbStatusPacket[LENGTH];
}
 8006558:	4770      	bx	lr
 800655a:	46c0      	nop			(mov r8, r8)
 800655c:	20000224 	.word	0x20000224

08006560 <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
 8006560:	4b01      	ldr	r3, [pc, #4]	(8006568 <dxl_get_rxpacket_parameter+0x8>)
 8006562:	181b      	adds	r3, r3, r0
 8006564:	7958      	ldrb	r0, [r3, #5]
	return (int)gbStatusPacket[PARAMETER+index];
}
 8006566:	4770      	bx	lr
 8006568:	20000224 	.word	0x20000224

0800656c <dxl_makeword>:
int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
 800656c:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8006570:	b280      	uxth	r0, r0
	word = word + lowbyte;
	return (int)word;
}
 8006572:	4770      	bx	lr

08006574 <dxl_get_lowbyte>:

int dxl_get_lowbyte( int word )
{
 8006574:	b2c0      	uxtb	r0, r0
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
 8006576:	4770      	bx	lr

08006578 <dxl_get_highbyte>:

int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
 8006578:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800657c:	0a00      	lsrs	r0, r0, #8
	temp = temp >> 8;
	return (int)temp;
}
 800657e:	4770      	bx	lr

08006580 <dxl_rx_packet>:

	gbCommStatus = COMM_TXSUCCESS;
}

void dxl_rx_packet()
{
 8006580:	b530      	push	{r4, r5, lr}
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8006582:	4953      	ldr	r1, [pc, #332]	(80066d0 <dxl_rx_packet+0x150>)

	gbCommStatus = COMM_TXSUCCESS;
}

void dxl_rx_packet()
{
 8006584:	b081      	sub	sp, #4
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 8006586:	680b      	ldr	r3, [r1, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 809f 	beq.w	80066cc <dxl_rx_packet+0x14c>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
 800658e:	4b51      	ldr	r3, [pc, #324]	(80066d4 <dxl_rx_packet+0x154>)
 8006590:	4a51      	ldr	r2, [pc, #324]	(80066d8 <dxl_rx_packet+0x158>)
 8006592:	789b      	ldrb	r3, [r3, #2]
 8006594:	2bfe      	cmp	r3, #254
 8006596:	f000 8095 	beq.w	80066c4 <dxl_rx_packet+0x144>
		gbCommStatus = COMM_RXSUCCESS;
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	b922      	cbnz	r2, 80065a8 <dxl_rx_packet+0x28>
	{
		gbRxGetLength = 0;
 800659e:	4b4f      	ldr	r3, [pc, #316]	(80066dc <dxl_rx_packet+0x15c>)
 80065a0:	701a      	strb	r2, [r3, #0]
		gbRxPacketLength = 6;
 80065a2:	4b4f      	ldr	r3, [pc, #316]	(80066e0 <dxl_rx_packet+0x160>)
 80065a4:	2206      	movs	r2, #6
 80065a6:	701a      	strb	r2, [r3, #0]
	}

	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 80065a8:	4d4c      	ldr	r5, [pc, #304]	(80066dc <dxl_rx_packet+0x15c>)
 80065aa:	4c4d      	ldr	r4, [pc, #308]	(80066e0 <dxl_rx_packet+0x160>)
 80065ac:	782b      	ldrb	r3, [r5, #0]
 80065ae:	7821      	ldrb	r1, [r4, #0]
 80065b0:	484c      	ldr	r0, [pc, #304]	(80066e4 <dxl_rx_packet+0x164>)
 80065b2:	1ac9      	subs	r1, r1, r3
 80065b4:	18c0      	adds	r0, r0, r3
 80065b6:	f7ff ff6f 	bl	8006498 <dxl_hal_rx>
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 80065ba:	782b      	ldrb	r3, [r5, #0]
 80065bc:	18c0      	adds	r0, r0, r3
	if( gbRxGetLength < gbRxPacketLength )
 80065be:	7823      	ldrb	r3, [r4, #0]
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 80065c0:	b2c0      	uxtb	r0, r0
	if( gbRxGetLength < gbRxPacketLength )
 80065c2:	4283      	cmp	r3, r0
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 80065c4:	7028      	strb	r0, [r5, #0]
	if( gbRxGetLength < gbRxPacketLength )
 80065c6:	d903      	bls.n	80065d0 <dxl_rx_packet+0x50>
	{
		if( dxl_hal_timeout() == 1 )
 80065c8:	f7ff ff56 	bl	8006478 <dxl_hal_timeout>
 80065cc:	2801      	cmp	r0, #1
 80065ce:	d008      	beq.n	80065e2 <dxl_rx_packet+0x62>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 80065d0:	4b42      	ldr	r3, [pc, #264]	(80066dc <dxl_rx_packet+0x15c>)
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 80065d2:	2000      	movs	r0, #0
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 80065d4:	781a      	ldrb	r2, [r3, #0]
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 80065d6:	4943      	ldr	r1, [pc, #268]	(80066e4 <dxl_rx_packet+0x164>)
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 80065d8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 80065dc:	f1a2 0e02 	sub.w	lr, r2, #2	; 0x2
 80065e0:	e019      	b.n	8006616 <dxl_rx_packet+0x96>
	{
		if( dxl_hal_timeout() == 1 )
		{


			if(gbRxGetLength == 0)
 80065e2:	782b      	ldrb	r3, [r5, #0]
 80065e4:	4a3c      	ldr	r2, [pc, #240]	(80066d8 <dxl_rx_packet+0x158>)
 80065e6:	b90b      	cbnz	r3, 80065ec <dxl_rx_packet+0x6c>
				gbCommStatus = COMM_RXTIMEOUT;
 80065e8:	2306      	movs	r3, #6
 80065ea:	e000      	b.n	80065ee <dxl_rx_packet+0x6e>
			else
				gbCommStatus = COMM_RXCORRUPT;
 80065ec:	2307      	movs	r3, #7
 80065ee:	6013      	str	r3, [r2, #0]
			giBusUsing = 0;
 80065f0:	2200      	movs	r2, #0
 80065f2:	4b37      	ldr	r3, [pc, #220]	(80066d0 <dxl_rx_packet+0x150>)
 80065f4:	e04f      	b.n	8006696 <dxl_rx_packet+0x116>
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 80065f6:	5c0b      	ldrb	r3, [r1, r0]
 80065f8:	2bff      	cmp	r3, #255
 80065fa:	d104      	bne.n	8006606 <dxl_rx_packet+0x86>
 80065fc:	eb01 0300 	add.w	r3, r1, r0
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2bff      	cmp	r3, #255
 8006604:	d009      	beq.n	800661a <dxl_rx_packet+0x9a>
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8006606:	4570      	cmp	r0, lr
 8006608:	d103      	bne.n	8006612 <dxl_rx_packet+0x92>
 800660a:	f811 300c 	ldrb.w	r3, [r1, ip]
 800660e:	2bff      	cmp	r3, #255
 8006610:	d003      	beq.n	800661a <dxl_rx_packet+0x9a>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	b2d8      	uxtb	r0, r3
 8006616:	4560      	cmp	r0, ip
 8006618:	dbed      	blt.n	80065f6 <dxl_rx_packet+0x76>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
 800661a:	b188      	cbz	r0, 8006640 <dxl_rx_packet+0xc0>
 800661c:	2100      	movs	r1, #0
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 800661e:	ebc0 0c02 	rsb	ip, r0, r2
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8006622:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 80066e4 <dxl_rx_packet+0x164>
 8006626:	e006      	b.n	8006636 <dxl_rx_packet+0xb6>
 8006628:	eb0e 0301 	add.w	r3, lr, r1
 800662c:	5c1b      	ldrb	r3, [r3, r0]
 800662e:	f80e 3001 	strb.w	r3, [lr, r1]
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8006632:	1c4b      	adds	r3, r1, #1
 8006634:	b2d9      	uxtb	r1, r3
 8006636:	4561      	cmp	r1, ip
 8006638:	dbf6      	blt.n	8006628 <dxl_rx_packet+0xa8>
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
 800663a:	4b28      	ldr	r3, [pc, #160]	(80066dc <dxl_rx_packet+0x15c>)
 800663c:	1a12      	subs	r2, r2, r0
 800663e:	701a      	strb	r2, [r3, #0]
	}

	if( gbRxGetLength < gbRxPacketLength )
 8006640:	4d26      	ldr	r5, [pc, #152]	(80066dc <dxl_rx_packet+0x15c>)
 8006642:	4c27      	ldr	r4, [pc, #156]	(80066e0 <dxl_rx_packet+0x160>)
 8006644:	f895 c000 	ldrb.w	ip, [r5]
 8006648:	7823      	ldrb	r3, [r4, #0]
 800664a:	4563      	cmp	r3, ip
 800664c:	d821      	bhi.n	8006692 <dxl_rx_packet+0x112>
		return;
	}


	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
 800664e:	4b21      	ldr	r3, [pc, #132]	(80066d4 <dxl_rx_packet+0x154>)
 8006650:	4824      	ldr	r0, [pc, #144]	(80066e4 <dxl_rx_packet+0x164>)
 8006652:	789a      	ldrb	r2, [r3, #2]
 8006654:	7883      	ldrb	r3, [r0, #2]
 8006656:	429a      	cmp	r2, r3
 8006658:	d003      	beq.n	8006662 <dxl_rx_packet+0xe2>
	{
		gbCommStatus = COMM_RXCORRUPT;
 800665a:	4b1f      	ldr	r3, [pc, #124]	(80066d8 <dxl_rx_packet+0x158>)
 800665c:	2207      	movs	r2, #7
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	e7c6      	b.n	80065f0 <dxl_rx_packet+0x70>
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8006662:	78c3      	ldrb	r3, [r0, #3]
 8006664:	3304      	adds	r3, #4
 8006666:	b2d9      	uxtb	r1, r3
	if( gbRxGetLength < gbRxPacketLength )
 8006668:	458c      	cmp	ip, r1
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 800666a:	7021      	strb	r1, [r4, #0]
	if( gbRxGetLength < gbRxPacketLength )
 800666c:	d20b      	bcs.n	8006686 <dxl_rx_packet+0x106>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 800666e:	4460      	add	r0, ip
 8006670:	ebcc 0101 	rsb	r1, ip, r1
 8006674:	f7ff ff10 	bl	8006498 <dxl_hal_rx>
		gbRxGetLength += nRead;
 8006678:	782b      	ldrb	r3, [r5, #0]
 800667a:	18c0      	adds	r0, r0, r3
		if( gbRxGetLength < gbRxPacketLength )
 800667c:	7823      	ldrb	r3, [r4, #0]
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 800667e:	b2c0      	uxtb	r0, r0
		if( gbRxGetLength < gbRxPacketLength )
 8006680:	4283      	cmp	r3, r0
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8006682:	7028      	strb	r0, [r5, #0]
		if( gbRxGetLength < gbRxPacketLength )
 8006684:	d805      	bhi.n	8006692 <dxl_rx_packet+0x112>
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 8006686:	4b17      	ldr	r3, [pc, #92]	(80066e4 <dxl_rx_packet+0x164>)
 8006688:	2100      	movs	r1, #0
 800668a:	78d8      	ldrb	r0, [r3, #3]
 800668c:	2200      	movs	r2, #0
 800668e:	469c      	mov	ip, r3
 8006690:	e00a      	b.n	80066a8 <dxl_rx_packet+0x128>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
		if( gbRxGetLength < gbRxPacketLength )
		{
			gbCommStatus = COMM_RXWAITING;
 8006692:	4b11      	ldr	r3, [pc, #68]	(80066d8 <dxl_rx_packet+0x158>)
 8006694:	2205      	movs	r2, #5
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e018      	b.n	80066cc <dxl_rx_packet+0x14c>
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
		checksum += gbStatusPacket[i+2];
 800669a:	eb0c 0301 	add.w	r3, ip, r1
 800669e:	789b      	ldrb	r3, [r3, #2]
 80066a0:	4413      	add	r3, r2
 80066a2:	b2da      	uxtb	r2, r3
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 80066a4:	1c4b      	adds	r3, r1, #1
 80066a6:	b2d9      	uxtb	r1, r3
 80066a8:	4288      	cmp	r0, r1
 80066aa:	daf6      	bge.n	800669a <dxl_rx_packet+0x11a>
		checksum += gbStatusPacket[i+2];
	checksum = ~checksum;

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
 80066ac:	4b0d      	ldr	r3, [pc, #52]	(80066e4 <dxl_rx_packet+0x164>)
 80066ae:	ea6f 0202 	mvn.w	r2, r2
 80066b2:	181b      	adds	r3, r3, r0
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	4293      	cmp	r3, r2
 80066ba:	4905      	ldr	r1, [pc, #20]	(80066d0 <dxl_rx_packet+0x150>)
 80066bc:	4a06      	ldr	r2, [pc, #24]	(80066d8 <dxl_rx_packet+0x158>)
 80066be:	d001      	beq.n	80066c4 <dxl_rx_packet+0x144>
	{
		gbCommStatus = COMM_RXCORRUPT;
 80066c0:	2307      	movs	r3, #7
 80066c2:	e000      	b.n	80066c6 <dxl_rx_packet+0x146>
		giBusUsing = 0;
		return;
	}

	gbCommStatus = COMM_RXSUCCESS;
 80066c4:	2301      	movs	r3, #1
 80066c6:	6013      	str	r3, [r2, #0]
	giBusUsing = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	600b      	str	r3, [r1, #0]
}
 80066cc:	b001      	add	sp, #4
 80066ce:	bd30      	pop	{r4, r5, pc}
 80066d0:	2000026c 	.word	0x2000026c
 80066d4:	20000184 	.word	0x20000184
 80066d8:	20000068 	.word	0x20000068
 80066dc:	2000026b 	.word	0x2000026b
 80066e0:	2000026a 	.word	0x2000026a
 80066e4:	20000224 	.word	0x20000224

080066e8 <dxl_tx_packet>:
{
	dxl_hal_close();
}

void dxl_tx_packet()
{
 80066e8:	b530      	push	{r4, r5, lr}
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 80066ea:	492d      	ldr	r1, [pc, #180]	(80067a0 <dxl_tx_packet+0xb8>)
{
	dxl_hal_close();
}

void dxl_tx_packet()
{
 80066ec:	b081      	sub	sp, #4
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 80066ee:	680b      	ldr	r3, [r1, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d052      	beq.n	800679a <dxl_tx_packet+0xb2>
	


	giBusUsing = 1;

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 80066f4:	482b      	ldr	r0, [pc, #172]	(80067a4 <dxl_tx_packet+0xbc>)
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 80066f6:	2301      	movs	r3, #1

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 80066f8:	f890 c003 	ldrb.w	ip, [r0, #3]
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 80066fc:	600b      	str	r3, [r1, #0]

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 80066fe:	f1bc 0f98 	cmp.w	ip, #152	; 0x98
 8006702:	d80b      	bhi.n	800671c <dxl_tx_packet+0x34>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] != INST_PING
 8006704:	7903      	ldrb	r3, [r0, #4]
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	3b83      	subs	r3, #131
 800670c:	bf18      	it	ne
 800670e:	2301      	movne	r3, #1
 8006710:	2a05      	cmp	r2, #5
 8006712:	bf94      	ite	ls
 8006714:	2300      	movls	r3, #0
 8006716:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
 800671a:	b12b      	cbz	r3, 8006728 <dxl_tx_packet+0x40>
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
	{
		gbCommStatus = COMM_TXERROR;
 800671c:	4a22      	ldr	r2, [pc, #136]	(80067a8 <dxl_tx_packet+0xc0>)
 800671e:	2304      	movs	r3, #4
 8006720:	6013      	str	r3, [r2, #0]
		giBusUsing = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	600b      	str	r3, [r1, #0]
 8006726:	e038      	b.n	800679a <dxl_tx_packet+0xb2>
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8006728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800672c:	7003      	strb	r3, [r0, #0]
	gbInstructionPacket[1] = 0xff;
 800672e:	7043      	strb	r3, [r0, #1]
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8006730:	2100      	movs	r1, #0
 8006732:	2200      	movs	r2, #0
 8006734:	e006      	b.n	8006744 <dxl_tx_packet+0x5c>
		checksum += gbInstructionPacket[i+2];
 8006736:	eb00 0301 	add.w	r3, r0, r1
 800673a:	789b      	ldrb	r3, [r3, #2]
 800673c:	4413      	add	r3, r2
 800673e:	b2da      	uxtb	r2, r3
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8006740:	1c4b      	adds	r3, r1, #1
 8006742:	b2d9      	uxtb	r1, r3
 8006744:	458c      	cmp	ip, r1
 8006746:	daf6      	bge.n	8006736 <dxl_tx_packet+0x4e>
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8006748:	4b16      	ldr	r3, [pc, #88]	(80067a4 <dxl_tx_packet+0xbc>)
 800674a:	ea6f 0202 	mvn.w	r2, r2
 800674e:	4463      	add	r3, ip
 8006750:	70da      	strb	r2, [r3, #3]
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8006752:	4b15      	ldr	r3, [pc, #84]	(80067a8 <dxl_tx_packet+0xc0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3b06      	subs	r3, #6
 8006758:	2b01      	cmp	r3, #1
 800675a:	d801      	bhi.n	8006760 <dxl_tx_packet+0x78>
	{




		dxl_hal_clear();
 800675c:	f7ff febe 	bl	80064dc <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8006760:	4d10      	ldr	r5, [pc, #64]	(80067a4 <dxl_tx_packet+0xbc>)
 8006762:	78ec      	ldrb	r4, [r5, #3]
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8006764:	4628      	mov	r0, r5


		dxl_hal_clear();
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8006766:	3404      	adds	r4, #4
 8006768:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 800676a:	4621      	mov	r1, r4
 800676c:	f7ff fea8 	bl	80064c0 <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
 8006770:	b2c0      	uxtb	r0, r0
 8006772:	4284      	cmp	r4, r0
 8006774:	d005      	beq.n	8006782 <dxl_tx_packet+0x9a>
	{

		gbCommStatus = COMM_TXFAIL;
 8006776:	4b0c      	ldr	r3, [pc, #48]	(80067a8 <dxl_tx_packet+0xc0>)
 8006778:	2202      	movs	r2, #2
 800677a:	601a      	str	r2, [r3, #0]
		giBusUsing = 0;
 800677c:	2200      	movs	r2, #0
 800677e:	4b08      	ldr	r3, [pc, #32]	(80067a0 <dxl_tx_packet+0xb8>)
 8006780:	e00a      	b.n	8006798 <dxl_tx_packet+0xb0>
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
 8006782:	792b      	ldrb	r3, [r5, #4]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d102      	bne.n	800678e <dxl_tx_packet+0xa6>
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8006788:	79a8      	ldrb	r0, [r5, #6]
 800678a:	3006      	adds	r0, #6
 800678c:	e000      	b.n	8006790 <dxl_tx_packet+0xa8>
	else
		dxl_hal_set_timeout( 6 );
 800678e:	2006      	movs	r0, #6
 8006790:	f7ff fe78 	bl	8006484 <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
 8006794:	4b04      	ldr	r3, [pc, #16]	(80067a8 <dxl_tx_packet+0xc0>)
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
}
 800679a:	b001      	add	sp, #4
 800679c:	bd30      	pop	{r4, r5, pc}
 800679e:	46c0      	nop			(mov r8, r8)
 80067a0:	2000026c 	.word	0x2000026c
 80067a4:	20000184 	.word	0x20000184
 80067a8:	20000068 	.word	0x20000068

080067ac <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
 80067ac:	b510      	push	{r4, lr}

	dxl_tx_packet();
 80067ae:	f7ff ff9b 	bl	80066e8 <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
 80067b2:	4a05      	ldr	r2, [pc, #20]	(80067c8 <dxl_txrx_packet+0x1c>)
 80067b4:	6813      	ldr	r3, [r2, #0]
 80067b6:	b92b      	cbnz	r3, 80067c4 <dxl_txrx_packet+0x18>

	do{

		dxl_rx_packet();

	}while( gbCommStatus == COMM_RXWAITING );	
 80067b8:	4614      	mov	r4, r2
	if( gbCommStatus != COMM_TXSUCCESS )
		return;	

	do{

		dxl_rx_packet();
 80067ba:	f7ff fee1 	bl	8006580 <dxl_rx_packet>

	}while( gbCommStatus == COMM_RXWAITING );	
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	2b05      	cmp	r3, #5
 80067c2:	d0fa      	beq.n	80067ba <dxl_txrx_packet+0xe>


}
 80067c4:	bd10      	pop	{r4, pc}
 80067c6:	46c0      	nop			(mov r8, r8)
 80067c8:	20000068 	.word	0x20000068

080067cc <dxl_write_word>:

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 80067cc:	b500      	push	{lr}
	while(giBusUsing);
 80067ce:	4b0b      	ldr	r3, [pc, #44]	(80067fc <dxl_write_word+0x30>)

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 80067d0:	b081      	sub	sp, #4
	while(giBusUsing);
 80067d2:	681b      	ldr	r3, [r3, #0]

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 80067d4:	4694      	mov	ip, r2
	while(giBusUsing);
 80067d6:	b97b      	cbnz	r3, 80067f8 <dxl_write_word+0x2c>

	gbInstructionPacket[ID] = (unsigned char)id;
 80067d8:	4a09      	ldr	r2, [pc, #36]	(8006800 <dxl_write_word+0x34>)
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 80067da:	2303      	movs	r3, #3
 80067dc:	7113      	strb	r3, [r2, #4]

int dxl_get_lowbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff;
 80067de:	fa1f f38c 	uxth.w	r3, ip
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
 80067e2:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	71d3      	strb	r3, [r2, #7]
	gbInstructionPacket[LENGTH] = 5;
 80067e8:	2305      	movs	r3, #5

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 80067ea:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 80067ec:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 80067ee:	70d3      	strb	r3, [r2, #3]
	
	dxl_txrx_packet();
 80067f0:	f7ff ffdc 	bl	80067ac <dxl_txrx_packet>
}
 80067f4:	b001      	add	sp, #4
 80067f6:	bd00      	pop	{pc}
 80067f8:	e7fe      	b.n	80067f8 <dxl_write_word+0x2c>
 80067fa:	46c0      	nop			(mov r8, r8)
 80067fc:	2000026c 	.word	0x2000026c
 8006800:	20000184 	.word	0x20000184

08006804 <dxl_read_word>:
	
	dxl_txrx_packet();
}

int dxl_read_word( int id, int address )
{
 8006804:	b500      	push	{lr}
	while(giBusUsing);
 8006806:	4b0b      	ldr	r3, [pc, #44]	(8006834 <dxl_read_word+0x30>)
	
	dxl_txrx_packet();
}

int dxl_read_word( int id, int address )
{
 8006808:	b081      	sub	sp, #4
	while(giBusUsing);
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	b98b      	cbnz	r3, 8006832 <dxl_read_word+0x2e>

	gbInstructionPacket[ID] = (unsigned char)id;
 800680e:	4a0a      	ldr	r2, [pc, #40]	(8006838 <dxl_read_word+0x34>)
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8006810:	2302      	movs	r3, #2
 8006812:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
 8006814:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[LENGTH] = 4;
 8006816:	2304      	movs	r3, #4

int dxl_read_word( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8006818:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 800681a:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = 2;
	gbInstructionPacket[LENGTH] = 4;
 800681c:	70d3      	strb	r3, [r2, #3]
	



	dxl_txrx_packet();
 800681e:	f7ff ffc5 	bl	80067ac <dxl_txrx_packet>

int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
 8006822:	4b06      	ldr	r3, [pc, #24]	(800683c <dxl_read_word+0x38>)
 8006824:	799a      	ldrb	r2, [r3, #6]
	word = word << 8;
 8006826:	7958      	ldrb	r0, [r3, #5]
 8006828:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800682c:	b280      	uxth	r0, r0


	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
 800682e:	b001      	add	sp, #4
 8006830:	bd00      	pop	{pc}
 8006832:	e7fe      	b.n	8006832 <dxl_read_word+0x2e>
 8006834:	2000026c 	.word	0x2000026c
 8006838:	20000184 	.word	0x20000184
 800683c:	20000224 	.word	0x20000224

08006840 <dxl_write_byte>:

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8006840:	b500      	push	{lr}
	while(giBusUsing);
 8006842:	4b09      	ldr	r3, [pc, #36]	(8006868 <dxl_write_byte+0x28>)

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8006844:	b081      	sub	sp, #4
	while(giBusUsing);
 8006846:	681b      	ldr	r3, [r3, #0]

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8006848:	4694      	mov	ip, r2
	while(giBusUsing);
 800684a:	b963      	cbnz	r3, 8006866 <dxl_write_byte+0x26>

	gbInstructionPacket[ID] = (unsigned char)id;
 800684c:	4b07      	ldr	r3, [pc, #28]	(800686c <dxl_write_byte+0x2c>)
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 800684e:	2203      	movs	r2, #3
 8006850:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8006852:	2204      	movs	r2, #4

void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8006854:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8006856:	7159      	strb	r1, [r3, #5]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
 8006858:	f883 c006 	strb.w	ip, [r3, #6]
	gbInstructionPacket[LENGTH] = 4;
 800685c:	70da      	strb	r2, [r3, #3]
	
	dxl_txrx_packet();
 800685e:	f7ff ffa5 	bl	80067ac <dxl_txrx_packet>
}
 8006862:	b001      	add	sp, #4
 8006864:	bd00      	pop	{pc}
 8006866:	e7fe      	b.n	8006866 <dxl_write_byte+0x26>
 8006868:	2000026c 	.word	0x2000026c
 800686c:	20000184 	.word	0x20000184

08006870 <dxl_read_byte>:
	
	dxl_txrx_packet();
}

int dxl_read_byte( int id, int address )
{
 8006870:	b500      	push	{lr}
	while(giBusUsing);
 8006872:	4b0a      	ldr	r3, [pc, #40]	(800689c <dxl_read_byte+0x2c>)
	
	dxl_txrx_packet();
}

int dxl_read_byte( int id, int address )
{
 8006874:	b081      	sub	sp, #4
	while(giBusUsing);
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b973      	cbnz	r3, 8006898 <dxl_read_byte+0x28>

	gbInstructionPacket[ID] = (unsigned char)id;
 800687a:	4a09      	ldr	r2, [pc, #36]	(80068a0 <dxl_read_byte+0x30>)
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 800687c:	2302      	movs	r3, #2
 800687e:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
 8006880:	2301      	movs	r3, #1
 8006882:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[LENGTH] = 4;
 8006884:	2304      	movs	r3, #4

int dxl_read_byte( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8006886:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
 8006888:	70d3      	strb	r3, [r2, #3]
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 800688a:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();
 800688c:	f7ff ff8e 	bl	80067ac <dxl_txrx_packet>
 8006890:	4b04      	ldr	r3, [pc, #16]	(80068a4 <dxl_read_byte+0x34>)
 8006892:	7958      	ldrb	r0, [r3, #5]

	return (int)gbStatusPacket[PARAMETER];
}
 8006894:	b001      	add	sp, #4
 8006896:	bd00      	pop	{pc}
 8006898:	e7fe      	b.n	8006898 <dxl_read_byte+0x28>
 800689a:	46c0      	nop			(mov r8, r8)
 800689c:	2000026c 	.word	0x2000026c
 80068a0:	20000184 	.word	0x20000184
 80068a4:	20000224 	.word	0x20000224

080068a8 <dxl_ping>:
	temp = temp >> 8;
	return (int)temp;
}

void dxl_ping( int id )
{
 80068a8:	b500      	push	{lr}
	while(giBusUsing);
 80068aa:	4b07      	ldr	r3, [pc, #28]	(80068c8 <dxl_ping+0x20>)
	temp = temp >> 8;
	return (int)temp;
}

void dxl_ping( int id )
{
 80068ac:	b081      	sub	sp, #4
	while(giBusUsing);
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	b94b      	cbnz	r3, 80068c6 <dxl_ping+0x1e>

	gbInstructionPacket[ID] = (unsigned char)id;
 80068b2:	4b06      	ldr	r3, [pc, #24]	(80068cc <dxl_ping+0x24>)
	gbInstructionPacket[INSTRUCTION] = INST_PING;
 80068b4:	2201      	movs	r2, #1
 80068b6:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[LENGTH] = 2;
 80068b8:	2202      	movs	r2, #2

void dxl_ping( int id )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 80068ba:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[INSTRUCTION] = INST_PING;
	gbInstructionPacket[LENGTH] = 2;
 80068bc:	70da      	strb	r2, [r3, #3]
	
	dxl_txrx_packet();
 80068be:	f7ff ff75 	bl	80067ac <dxl_txrx_packet>
}
 80068c2:	b001      	add	sp, #4
 80068c4:	bd00      	pop	{pc}
 80068c6:	e7fe      	b.n	80068c6 <dxl_ping+0x1e>
 80068c8:	2000026c 	.word	0x2000026c
 80068cc:	20000184 	.word	0x20000184

080068d0 <dxl_terminate>:

	return 1;
}

void dxl_terminate()
{
 80068d0:	b500      	push	{lr}
 80068d2:	b081      	sub	sp, #4
	dxl_hal_close();
 80068d4:	f7ff fe08 	bl	80064e8 <dxl_hal_close>
}
 80068d8:	b001      	add	sp, #4
 80068da:	bd00      	pop	{pc}

080068dc <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 80068dc:	b500      	push	{lr}
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 80068de:	4b09      	ldr	r3, [pc, #36]	(8006904 <dxl_initialize+0x28>)
 80068e0:	3101      	adds	r1, #1
 80068e2:	fb93 f3f1 	sdiv	r3, r3, r1
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 80068e6:	b081      	sub	sp, #4
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 80068e8:	4619      	mov	r1, r3
 80068ea:	f7ff fe03 	bl	80064f4 <dxl_hal_open>
 80068ee:	b130      	cbz	r0, 80068fe <dxl_initialize+0x22>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
 80068f0:	4b05      	ldr	r3, [pc, #20]	(8006908 <dxl_initialize+0x2c>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
	giBusUsing = 0;
 80068f6:	4b05      	ldr	r3, [pc, #20]	(800690c <dxl_initialize+0x30>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	2001      	movs	r0, #1



	return 1;
}
 80068fe:	b001      	add	sp, #4
 8006900:	bd00      	pop	{pc}
 8006902:	46c0      	nop			(mov r8, r8)
 8006904:	001e8480 	.word	0x001e8480
 8006908:	20000068 	.word	0x20000068
 800690c:	2000026c 	.word	0x2000026c

08006910 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8006910:	4a04      	ldr	r2, [pc, #16]	(8006924 <FLASH_SetLatency+0x14>)
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006918:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	4318      	orrs	r0, r3
 800691e:	6010      	str	r0, [r2, #0]
}
 8006920:	4770      	bx	lr
 8006922:	46c0      	nop			(mov r8, r8)
 8006924:	40022000 	.word	0x40022000

08006928 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8006928:	4a04      	ldr	r2, [pc, #16]	(800693c <FLASH_HalfCycleAccessCmd+0x14>)
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8006930:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	4318      	orrs	r0, r3
 8006936:	6010      	str	r0, [r2, #0]
}
 8006938:	4770      	bx	lr
 800693a:	46c0      	nop			(mov r8, r8)
 800693c:	40022000 	.word	0x40022000

08006940 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8006940:	4a04      	ldr	r2, [pc, #16]	(8006954 <FLASH_PrefetchBufferCmd+0x14>)
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8006948:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	4318      	orrs	r0, r3
 800694e:	6010      	str	r0, [r2, #0]
}
 8006950:	4770      	bx	lr
 8006952:	46c0      	nop			(mov r8, r8)
 8006954:	40022000 	.word	0x40022000

08006958 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8006958:	4b03      	ldr	r3, [pc, #12]	(8006968 <FLASH_Unlock+0x10>)
 800695a:	4a04      	ldr	r2, [pc, #16]	(800696c <FLASH_Unlock+0x14>)
 800695c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800695e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8006962:	605a      	str	r2, [r3, #4]
}
 8006964:	4770      	bx	lr
 8006966:	46c0      	nop			(mov r8, r8)
 8006968:	40022000 	.word	0x40022000
 800696c:	45670123 	.word	0x45670123

08006970 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8006970:	4a02      	ldr	r2, [pc, #8]	(800697c <FLASH_Lock+0xc>)
 8006972:	6913      	ldr	r3, [r2, #16]
 8006974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006978:	6113      	str	r3, [r2, #16]
}
 800697a:	4770      	bx	lr
 800697c:	40022000 	.word	0x40022000

08006980 <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 8006980:	4b01      	ldr	r3, [pc, #4]	(8006988 <FLASH_GetUserOptionByte+0x8>)
 8006982:	69d8      	ldr	r0, [r3, #28]
 8006984:	0880      	lsrs	r0, r0, #2
}
 8006986:	4770      	bx	lr
 8006988:	40022000 	.word	0x40022000

0800698c <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 800698c:	4b01      	ldr	r3, [pc, #4]	(8006994 <FLASH_GetWriteProtectionOptionByte+0x8>)
 800698e:	6a18      	ldr	r0, [r3, #32]
}
 8006990:	4770      	bx	lr
 8006992:	46c0      	nop			(mov r8, r8)
 8006994:	40022000 	.word	0x40022000

08006998 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 8006998:	4b02      	ldr	r3, [pc, #8]	(80069a4 <FLASH_GetReadOutProtectionStatus+0xc>)
 800699a:	69d8      	ldr	r0, [r3, #28]
 800699c:	0840      	lsrs	r0, r0, #1
 800699e:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 80069a2:	4770      	bx	lr
 80069a4:	40022000 	.word	0x40022000

080069a8 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 80069a8:	4b02      	ldr	r3, [pc, #8]	(80069b4 <FLASH_GetPrefetchBufferStatus+0xc>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	0940      	lsrs	r0, r0, #5
 80069ae:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 80069b2:	4770      	bx	lr
 80069b4:	40022000 	.word	0x40022000

080069b8 <FLASH_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80069b8:	b121      	cbz	r1, 80069c4 <FLASH_ITConfig+0xc>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80069ba:	4a05      	ldr	r2, [pc, #20]	(80069d0 <FLASH_ITConfig+0x18>)
 80069bc:	6913      	ldr	r3, [r2, #16]
 80069be:	ea40 0303 	orr.w	r3, r0, r3
 80069c2:	e003      	b.n	80069cc <FLASH_ITConfig+0x14>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 80069c4:	4a02      	ldr	r2, [pc, #8]	(80069d0 <FLASH_ITConfig+0x18>)
 80069c6:	6913      	ldr	r3, [r2, #16]
 80069c8:	ea23 0300 	bic.w	r3, r3, r0
 80069cc:	6113      	str	r3, [r2, #16]
  }
}
 80069ce:	4770      	bx	lr
 80069d0:	40022000 	.word	0x40022000

080069d4 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 80069d4:	2801      	cmp	r0, #1
 80069d6:	d104      	bne.n	80069e2 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 80069d8:	4b05      	ldr	r3, [pc, #20]	(80069f0 <FLASH_GetFlagStatus+0x1c>)
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f003 0001 	and.w	r0, r3, #1	; 0x1
 80069e0:	e005      	b.n	80069ee <FLASH_GetFlagStatus+0x1a>
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 80069e2:	4b03      	ldr	r3, [pc, #12]	(80069f0 <FLASH_GetFlagStatus+0x1c>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	4218      	tst	r0, r3
 80069e8:	bf0c      	ite	eq
 80069ea:	2000      	moveq	r0, #0
 80069ec:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 80069ee:	4770      	bx	lr
 80069f0:	40022000 	.word	0x40022000

080069f4 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80069f4:	4b01      	ldr	r3, [pc, #4]	(80069fc <FLASH_ClearFlag+0x8>)
 80069f6:	60d8      	str	r0, [r3, #12]
}
 80069f8:	4770      	bx	lr
 80069fa:	46c0      	nop			(mov r8, r8)
 80069fc:	40022000 	.word	0x40022000

08006a00 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006a00:	4a09      	ldr	r2, [pc, #36]	(8006a28 <FLASH_GetStatus+0x28>)
 8006a02:	68d3      	ldr	r3, [r2, #12]
 8006a04:	f013 0f01 	tst.w	r3, #1	; 0x1
 8006a08:	d001      	beq.n	8006a0e <FLASH_GetStatus+0xe>
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	e00b      	b.n	8006a26 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8006a0e:	68d3      	ldr	r3, [r2, #12]
 8006a10:	f013 0f04 	tst.w	r3, #4	; 0x4
 8006a14:	d001      	beq.n	8006a1a <FLASH_GetStatus+0x1a>
 8006a16:	2002      	movs	r0, #2
 8006a18:	e005      	b.n	8006a26 <FLASH_GetStatus+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8006a1a:	68d3      	ldr	r3, [r2, #12]
 8006a1c:	f013 0f10 	tst.w	r3, #16	; 0x10
 8006a20:	bf14      	ite	ne
 8006a22:	2003      	movne	r0, #3
 8006a24:	2004      	moveq	r0, #4
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8006a26:	4770      	bx	lr
 8006a28:	40022000 	.word	0x40022000

08006a2c <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8006a2c:	b510      	push	{r4, lr}
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006a2e:	4a23      	ldr	r2, [pc, #140]	(8006abc <FLASH_WaitForLastOperation+0x90>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8006a30:	b082      	sub	sp, #8
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006a32:	68d3      	ldr	r3, [r2, #12]
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8006a34:	4601      	mov	r1, r0
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006a36:	f013 0f01 	tst.w	r3, #1	; 0x1
 8006a3a:	d001      	beq.n	8006a40 <FLASH_WaitForLastOperation+0x14>
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	e02a      	b.n	8006a96 <FLASH_WaitForLastOperation+0x6a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8006a40:	68d3      	ldr	r3, [r2, #12]
 8006a42:	f013 0f04 	tst.w	r3, #4	; 0x4
 8006a46:	d001      	beq.n	8006a4c <FLASH_WaitForLastOperation+0x20>
 8006a48:	2002      	movs	r0, #2
 8006a4a:	e024      	b.n	8006a96 <FLASH_WaitForLastOperation+0x6a>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8006a4c:	68d3      	ldr	r3, [r2, #12]
 8006a4e:	f013 0f10 	tst.w	r3, #16	; 0x10
 8006a52:	bf14      	ite	ne
 8006a54:	2003      	movne	r0, #3
 8006a56:	2004      	moveq	r0, #4
 8006a58:	e01d      	b.n	8006a96 <FLASH_WaitForLastOperation+0x6a>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8006a5a:	9401      	str	r4, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 8006a5c:	f8cd c004 	str.w	ip, [sp, #4]
 8006a60:	e002      	b.n	8006a68 <FLASH_WaitForLastOperation+0x3c>
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	9b01      	ldr	r3, [sp, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f9      	bne.n	8006a62 <FLASH_WaitForLastOperation+0x36>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006a6e:	68d3      	ldr	r3, [r2, #12]
 8006a70:	f013 0f01 	tst.w	r3, #1	; 0x1
 8006a74:	d001      	beq.n	8006a7a <FLASH_WaitForLastOperation+0x4e>
 8006a76:	2001      	movs	r0, #1
 8006a78:	e00b      	b.n	8006a92 <FLASH_WaitForLastOperation+0x66>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8006a7a:	68d3      	ldr	r3, [r2, #12]
 8006a7c:	f013 0f04 	tst.w	r3, #4	; 0x4
 8006a80:	d001      	beq.n	8006a86 <FLASH_WaitForLastOperation+0x5a>
 8006a82:	2002      	movs	r0, #2
 8006a84:	e005      	b.n	8006a92 <FLASH_WaitForLastOperation+0x66>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8006a86:	68d3      	ldr	r3, [r2, #12]
 8006a88:	f013 0f10 	tst.w	r3, #16	; 0x10
 8006a8c:	bf14      	ite	ne
 8006a8e:	2003      	movne	r0, #3
 8006a90:	2004      	moveq	r0, #4
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
    Timeout--;
 8006a92:	3901      	subs	r1, #1
 8006a94:	e003      	b.n	8006a9e <FLASH_WaitForLastOperation+0x72>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8006a96:	4a09      	ldr	r2, [pc, #36]	(8006abc <FLASH_WaitForLastOperation+0x90>)
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8006a98:	2400      	movs	r4, #0

  for(i = 0xFF; i != 0; i--)
 8006a9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8006a9e:	1e0b      	subs	r3, r1, #0
 8006aa0:	bf18      	it	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	2801      	cmp	r0, #1
 8006aa6:	bf14      	ite	ne
 8006aa8:	2300      	movne	r3, #0
 8006aaa:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1d3      	bne.n	8006a5a <FLASH_WaitForLastOperation+0x2e>
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }

  if(Timeout == 0x00 )
 8006ab2:	2900      	cmp	r1, #0
 8006ab4:	bf08      	it	eq
 8006ab6:	2005      	moveq	r0, #5
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 8006ab8:	b002      	add	sp, #8
 8006aba:	bd10      	pop	{r4, pc}
 8006abc:	40022000 	.word	0x40022000

08006ac0 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8006ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8006ac2:	4b13      	ldr	r3, [pc, #76]	(8006b10 <FLASH_UserOptionByteConfig+0x50>)
 8006ac4:	4c13      	ldr	r4, [pc, #76]	(8006b14 <FLASH_UserOptionByteConfig+0x54>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8006ac6:	b081      	sub	sp, #4
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8006ac8:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8006aca:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8006ace:	4605      	mov	r5, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 8006ad0:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006ad2:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8006ad4:	460e      	mov	r6, r1
 8006ad6:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006ad8:	f7ff ffa8 	bl	8006a2c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8006adc:	2804      	cmp	r0, #4
 8006ade:	d115      	bne.n	8006b0c <FLASH_UserOptionByteConfig+0x4c>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8006ae0:	6923      	ldr	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8006ae2:	4a0d      	ldr	r2, [pc, #52]	(8006b18 <FLASH_UserOptionByteConfig+0x58>)
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8006ae4:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8006ae8:	6123      	str	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8006aea:	f045 03f8 	orr.w	r3, r5, #248	; 0xf8
 8006aee:	ea46 0303 	orr.w	r3, r6, r3
 8006af2:	ea47 0303 	orr.w	r3, r7, r3
 8006af6:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006af8:	200f      	movs	r0, #15
 8006afa:	f7ff ff97 	bl	8006a2c <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8006afe:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8006b00:	bf1f      	itttt	ne
 8006b02:	6922      	ldrne	r2, [r4, #16]
 8006b04:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8006b08:	4013      	andne	r3, r2
 8006b0a:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8006b0c:	b001      	add	sp, #4
 8006b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b10:	45670123 	.word	0x45670123
 8006b14:	40022000 	.word	0x40022000
 8006b18:	1ffff800 	.word	0x1ffff800

08006b1c <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8006b1c:	b530      	push	{r4, r5, lr}
 8006b1e:	4605      	mov	r5, r0
 8006b20:	b081      	sub	sp, #4
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 8006b22:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006b26:	f7ff ff81 	bl	8006a2c <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8006b2a:	2804      	cmp	r0, #4
 8006b2c:	d13c      	bne.n	8006ba8 <FLASH_ReadOutProtection+0x8c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006b2e:	4c1f      	ldr	r4, [pc, #124]	(8006bac <FLASH_ReadOutProtection+0x90>)
 8006b30:	4b1f      	ldr	r3, [pc, #124]	(8006bb0 <FLASH_ReadOutProtection+0x94>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006b32:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006b36:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8006b38:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8006b3c:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 8006b3e:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006b40:	301b      	adds	r0, #27
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    FLASH->CR |= CR_OPTER_Set;
 8006b42:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8006b46:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4e:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006b50:	f7ff ff6c 	bl	8006a2c <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 8006b54:	2804      	cmp	r0, #4
 8006b56:	d120      	bne.n	8006b9a <FLASH_ReadOutProtection+0x7e>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	f641 72df 	movw	r2, #8159	; 0x1fdf
 8006b5e:	ea03 0202 	and.w	r2, r3, r2
 8006b62:	6122      	str	r2, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8006b6a:	6123      	str	r3, [r4, #16]

      if(NewState != DISABLE)
 8006b6c:	b11d      	cbz	r5, 8006b76 <FLASH_ReadOutProtection+0x5a>
      {
        OB->RDP = 0x00;
 8006b6e:	4b11      	ldr	r3, [pc, #68]	(8006bb4 <FLASH_ReadOutProtection+0x98>)
 8006b70:	f04f 0200 	mov.w	r2, #0	; 0x0
 8006b74:	e002      	b.n	8006b7c <FLASH_ReadOutProtection+0x60>
      }
      else
      {
        OB->RDP = RDP_Key;  
 8006b76:	4b0f      	ldr	r3, [pc, #60]	(8006bb4 <FLASH_ReadOutProtection+0x98>)
 8006b78:	f04f 02a5 	mov.w	r2, #165	; 0xa5
 8006b7c:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 8006b7e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006b82:	f7ff ff53 	bl	8006a2c <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 8006b86:	2801      	cmp	r0, #1
 8006b88:	d00e      	beq.n	8006ba8 <FLASH_ReadOutProtection+0x8c>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8006b8a:	4908      	ldr	r1, [pc, #32]	(8006bac <FLASH_ReadOutProtection+0x90>)
 8006b8c:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8006b90:	690a      	ldr	r2, [r1, #16]
 8006b92:	ea02 0303 	and.w	r3, r2, r3
 8006b96:	610b      	str	r3, [r1, #16]
 8006b98:	e006      	b.n	8006ba8 <FLASH_ReadOutProtection+0x8c>
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 8006b9a:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8006b9c:	bf1f      	itttt	ne
 8006b9e:	6922      	ldrne	r2, [r4, #16]
 8006ba0:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8006ba4:	4013      	andne	r3, r2
 8006ba6:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 8006ba8:	b001      	add	sp, #4
 8006baa:	bd30      	pop	{r4, r5, pc}
 8006bac:	40022000 	.word	0x40022000
 8006bb0:	45670123 	.word	0x45670123
 8006bb4:	1ffff800 	.word	0x1ffff800

08006bb8 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006bbc:	200f      	movs	r0, #15
 8006bbe:	f7ff ff35 	bl	8006a2c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8006bc2:	2804      	cmp	r0, #4
 8006bc4:	d150      	bne.n	8006c68 <FLASH_EnableWriteProtection+0xb0>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006bc6:	4a29      	ldr	r2, [pc, #164]	(8006c6c <FLASH_EnableWriteProtection+0xb4>)
 8006bc8:	4b29      	ldr	r3, [pc, #164]	(8006c70 <FLASH_EnableWriteProtection+0xb8>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 8006bca:	ea6f 0404 	mvn.w	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006bce:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8006bd0:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8006bd4:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8006bd6:	6913      	ldr	r3, [r2, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 8006bd8:	b2e1      	uxtb	r1, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8006bda:	f043 0310 	orr.w	r3, r3, #16	; 0x10

    if(WRP0_Data != 0xFF)
 8006bde:	29ff      	cmp	r1, #255
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8006be0:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 8006be2:	d004      	beq.n	8006bee <FLASH_EnableWriteProtection+0x36>
    {
      OB->WRP0 = WRP0_Data;
 8006be4:	4b23      	ldr	r3, [pc, #140]	(8006c74 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006be6:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8006be8:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006bea:	f7ff ff1f 	bl	8006a2c <FLASH_WaitForLastOperation>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 8006bee:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8006bf2:	0a1a      	lsrs	r2, r3, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8006bf4:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8006bf8:	bf18      	it	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	2804      	cmp	r0, #4
 8006bfe:	bf14      	ite	ne
 8006c00:	2300      	movne	r3, #0
 8006c02:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8006c06:	b123      	cbz	r3, 8006c12 <FLASH_EnableWriteProtection+0x5a>
    {
      OB->WRP1 = WRP1_Data;
 8006c08:	4b1a      	ldr	r3, [pc, #104]	(8006c74 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c0a:	200f      	movs	r0, #15
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8006c0c:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c0e:	f7ff ff0d 	bl	8006a2c <FLASH_WaitForLastOperation>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8006c12:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 8006c16:	0c1a      	lsrs	r2, r3, #16
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8006c18:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8006c1c:	bf18      	it	ne
 8006c1e:	2301      	movne	r3, #1
 8006c20:	2804      	cmp	r0, #4
 8006c22:	bf14      	ite	ne
 8006c24:	2300      	movne	r3, #0
 8006c26:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8006c2a:	b123      	cbz	r3, 8006c36 <FLASH_EnableWriteProtection+0x7e>
    {
      OB->WRP2 = WRP2_Data;
 8006c2c:	4b11      	ldr	r3, [pc, #68]	(8006c74 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c2e:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8006c30:	819a      	strh	r2, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c32:	f7ff fefb 	bl	8006a2c <FLASH_WaitForLastOperation>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 8006c36:	0e22      	lsrs	r2, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8006c38:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8006c3c:	bf18      	it	ne
 8006c3e:	2301      	movne	r3, #1
 8006c40:	2804      	cmp	r0, #4
 8006c42:	bf14      	ite	ne
 8006c44:	2300      	movne	r3, #0
 8006c46:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8006c4a:	b123      	cbz	r3, 8006c56 <FLASH_EnableWriteProtection+0x9e>
    {
      OB->WRP3 = WRP3_Data;
 8006c4c:	4b09      	ldr	r3, [pc, #36]	(8006c74 <FLASH_EnableWriteProtection+0xbc>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c4e:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8006c50:	81da      	strh	r2, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c52:	f7ff feeb 	bl	8006a2c <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 8006c56:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8006c58:	bf1f      	itttt	ne
 8006c5a:	4904      	ldrne	r1, [pc, #16]	(8006c6c <FLASH_EnableWriteProtection+0xb4>)
 8006c5c:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8006c60:	690a      	ldrne	r2, [r1, #16]
 8006c62:	4013      	andne	r3, r2
 8006c64:	bf18      	it	ne
 8006c66:	610b      	strne	r3, [r1, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8006c68:	bd10      	pop	{r4, pc}
 8006c6a:	46c0      	nop			(mov r8, r8)
 8006c6c:	40022000 	.word	0x40022000
 8006c70:	45670123 	.word	0x45670123
 8006c74:	1ffff800 	.word	0x1ffff800

08006c78 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c7c:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 8006c7e:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c80:	f7ff fed4 	bl	8006a2c <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8006c84:	2804      	cmp	r0, #4
 8006c86:	d114      	bne.n	8006cb2 <FLASH_ProgramOptionByteData+0x3a>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006c88:	4c0a      	ldr	r4, [pc, #40]	(8006cb4 <FLASH_ProgramOptionByteData+0x3c>)
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	(8006cb8 <FLASH_ProgramOptionByteData+0x40>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006c8c:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006c8e:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8006c90:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8006c94:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8006c9c:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 8006c9e:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006ca0:	f7ff fec4 	bl	8006a2c <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8006ca4:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8006ca6:	bf1f      	itttt	ne
 8006ca8:	6922      	ldrne	r2, [r4, #16]
 8006caa:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8006cae:	4013      	andne	r3, r2
 8006cb0:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	40022000 	.word	0x40022000
 8006cb8:	45670123 	.word	0x45670123

08006cbc <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006cc0:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8006cc2:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006cc4:	f7ff feb2 	bl	8006a2c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8006cc8:	2804      	cmp	r0, #4
 8006cca:	d10f      	bne.n	8006cec <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8006ccc:	4c08      	ldr	r4, [pc, #32]	(8006cf0 <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006cce:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8006cd6:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8006cd8:	8035      	strh	r5, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006cda:	f7ff fea7 	bl	8006a2c <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8006cde:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8006ce0:	bf1f      	itttt	ne
 8006ce2:	6922      	ldrne	r2, [r4, #16]
 8006ce4:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8006ce8:	4013      	andne	r3, r2
 8006cea:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8006cec:	bd70      	pop	{r4, r5, r6, pc}
 8006cee:	46c0      	nop			(mov r8, r8)
 8006cf0:	40022000 	.word	0x40022000

08006cf4 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006cf8:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8006cfa:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006cfc:	f7ff fe96 	bl	8006a2c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8006d00:	2804      	cmp	r0, #4
 8006d02:	d117      	bne.n	8006d34 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8006d04:	4c0c      	ldr	r4, [pc, #48]	(8006d38 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006d06:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8006d0e:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8006d10:	b2ab      	uxth	r3, r5
 8006d12:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006d14:	f7ff fe8a 	bl	8006a2c <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8006d18:	2804      	cmp	r0, #4
 8006d1a:	d104      	bne.n	8006d26 <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8006d1c:	0c2b      	lsrs	r3, r5, #16
 8006d1e:	8073      	strh	r3, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006d20:	200f      	movs	r0, #15
 8006d22:	f7ff fe83 	bl	8006a2c <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8006d26:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8006d28:	bf1f      	itttt	ne
 8006d2a:	6922      	ldrne	r2, [r4, #16]
 8006d2c:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8006d30:	4013      	andne	r3, r2
 8006d32:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8006d34:	bd70      	pop	{r4, r5, r6, pc}
 8006d36:	46c0      	nop			(mov r8, r8)
 8006d38:	40022000 	.word	0x40022000

08006d3c <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8006d3c:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8006d3e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006d42:	f7ff fe73 	bl	8006a2c <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8006d46:	2804      	cmp	r0, #4
 8006d48:	d12c      	bne.n	8006da4 <FLASH_EraseOptionBytes+0x68>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006d4a:	4c17      	ldr	r4, [pc, #92]	(8006da8 <FLASH_EraseOptionBytes+0x6c>)
 8006d4c:	4b17      	ldr	r3, [pc, #92]	(8006dac <FLASH_EraseOptionBytes+0x70>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006d4e:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8006d52:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8006d54:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8006d58:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8006d5a:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006d5c:	301b      	adds	r0, #27
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8006d5e:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8006d62:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6a:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006d6c:	f7ff fe5e 	bl	8006a2c <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 8006d70:	2804      	cmp	r0, #4
 8006d72:	d110      	bne.n	8006d96 <FLASH_EraseOptionBytes+0x5a>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8006d74:	6922      	ldr	r2, [r4, #16]
 8006d76:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8006d7a:	ea02 0303 	and.w	r3, r2, r3
 8006d7e:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8006d80:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8006d82:	f04f 02a5 	mov.w	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8006d86:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8006d8a:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8006d8c:	4b08      	ldr	r3, [pc, #32]	(8006db0 <FLASH_EraseOptionBytes+0x74>)

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006d8e:	200f      	movs	r0, #15
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 8006d90:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8006d92:	f7ff fe4b 	bl	8006a2c <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8006d96:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8006d98:	bf1f      	itttt	ne
 8006d9a:	6922      	ldrne	r2, [r4, #16]
 8006d9c:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8006da0:	4013      	andne	r3, r2
 8006da2:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	46c0      	nop			(mov r8, r8)
 8006da8:	40022000 	.word	0x40022000
 8006dac:	45670123 	.word	0x45670123
 8006db0:	1ffff800 	.word	0x1ffff800

08006db4 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8006db4:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8006db6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006dba:	f7ff fe37 	bl	8006a2c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8006dbe:	2804      	cmp	r0, #4
 8006dc0:	d113      	bne.n	8006dea <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8006dc2:	4c0a      	ldr	r4, [pc, #40]	(8006dec <FLASH_EraseAllPages+0x38>)
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	4303      	orrs	r3, r0
 8006dc8:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8006dca:	6923      	ldr	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006dcc:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
     FLASH->CR |= CR_STRT_Set;
 8006dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd4:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006dd6:	301b      	adds	r0, #27
 8006dd8:	f7ff fe28 	bl	8006a2c <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8006ddc:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 8006dde:	bf1f      	itttt	ne
 8006de0:	6922      	ldrne	r2, [r4, #16]
 8006de2:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 8006de6:	4013      	andne	r3, r2
 8006de8:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 8006dea:	bd10      	pop	{r4, pc}
 8006dec:	40022000 	.word	0x40022000

08006df0 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8006df0:	b530      	push	{r4, r5, lr}
 8006df2:	4605      	mov	r5, r0
 8006df4:	b081      	sub	sp, #4

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8006df6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8006dfa:	f7ff fe17 	bl	8006a2c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8006dfe:	2804      	cmp	r0, #4
 8006e00:	d115      	bne.n	8006e2e <FLASH_ErasePage+0x3e>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8006e02:	4c0c      	ldr	r4, [pc, #48]	(8006e34 <FLASH_ErasePage+0x44>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006e04:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8006e08:	6923      	ldr	r3, [r4, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006e0a:	301b      	adds	r0, #27
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8006e0c:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8006e10:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8006e12:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1a:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8006e1c:	f7ff fe06 	bl	8006a2c <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8006e20:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8006e22:	bf1f      	itttt	ne
 8006e24:	6922      	ldrne	r2, [r4, #16]
 8006e26:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8006e2a:	4013      	andne	r3, r2
 8006e2c:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8006e2e:	b001      	add	sp, #4
 8006e30:	bd30      	pop	{r4, r5, pc}
 8006e32:	46c0      	nop			(mov r8, r8)
 8006e34:	40022000 	.word	0x40022000

08006e38 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8006e3a:	78cd      	ldrb	r5, [r1, #3]
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8006e3c:	880e      	ldrh	r6, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8006e3e:	f015 0f10 	tst.w	r5, #16	; 0x10
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8006e42:	bf18      	it	ne
 8006e44:	788b      	ldrbne	r3, [r1, #2]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8006e46:	f005 070f 	and.w	r7, r5, #15	; 0xf
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8006e4a:	bf18      	it	ne
 8006e4c:	431f      	orrne	r7, r3
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8006e4e:	f016 0fff 	tst.w	r6, #255	; 0xff
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006e52:	b083      	sub	sp, #12
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8006e54:	d01e      	beq.n	8006e94 <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 8006e56:	6804      	ldr	r4, [r0, #0]
 8006e58:	2100      	movs	r1, #0

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((u32)0x01) << pinpos;
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	fa12 f301 	lsls.w	r3, r2, r1
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006e60:	ea03 0c06 	and.w	ip, r3, r6

      if (currentpin == pos)
 8006e64:	459c      	cmp	ip, r3
 8006e66:	d111      	bne.n	8006e8c <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8006e68:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 8006e6a:	230f      	movs	r3, #15
 8006e6c:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8006e6e:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8006e72:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8006e76:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8006e78:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8006e7a:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8006e7c:	bf08      	it	eq
 8006e7e:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8006e82:	d003      	beq.n	8006e8c <GPIO_Init+0x54>
          GPIOx->BRR = (((u32)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8006e84:	2d48      	cmp	r5, #72
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 8006e86:	bf08      	it	eq
 8006e88:	f8c0 c010 	streq.w	ip, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8006e8c:	3101      	adds	r1, #1
 8006e8e:	2908      	cmp	r1, #8
 8006e90:	d1e3      	bne.n	8006e5a <GPIO_Init+0x22>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8006e92:	6004      	str	r4, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8006e94:	2eff      	cmp	r6, #255
 8006e96:	d920      	bls.n	8006eda <GPIO_Init+0xa2>
  {
    tmpreg = GPIOx->CRH;
 8006e98:	6844      	ldr	r4, [r0, #4]
 8006e9a:	2100      	movs	r1, #0
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f101 0308 	add.w	r3, r1, #8	; 0x8
 8006ea2:	fa12 f303 	lsls.w	r3, r2, r3
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8006ea6:	ea03 0c06 	and.w	ip, r3, r6
      if (currentpin == pos)
 8006eaa:	459c      	cmp	ip, r3
 8006eac:	d111      	bne.n	8006ed2 <GPIO_Init+0x9a>
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8006eae:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 8006eb0:	230f      	movs	r3, #15
 8006eb2:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8006eb4:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8006eb8:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8006ebc:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8006ebe:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8006ec0:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8006ec2:	bf08      	it	eq
 8006ec4:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8006ec8:	d003      	beq.n	8006ed2 <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8006eca:	2d48      	cmp	r5, #72
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8006ecc:	bf08      	it	eq
 8006ece:	f8c0 c010 	streq.w	ip, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8006ed2:	3101      	adds	r1, #1
 8006ed4:	2908      	cmp	r1, #8
 8006ed6:	d1e1      	bne.n	8006e9c <GPIO_Init+0x64>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8006ed8:	6044      	str	r4, [r0, #4]
  }
}
 8006eda:	b003      	add	sp, #12
 8006edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ede:	46c0      	nop			(mov r8, r8)

08006ee0 <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8006ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ee4:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8006eea:	2304      	movs	r3, #4
 8006eec:	70c3      	strb	r3, [r0, #3]
}
 8006eee:	4770      	bx	lr

08006ef0 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8006ef0:	6883      	ldr	r3, [r0, #8]
 8006ef2:	4219      	tst	r1, r3
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2000      	moveq	r0, #0
 8006ef8:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8006efa:	4770      	bx	lr

08006efc <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 8006efc:	6880      	ldr	r0, [r0, #8]
 8006efe:	b280      	uxth	r0, r0
}
 8006f00:	4770      	bx	lr
 8006f02:	46c0      	nop			(mov r8, r8)

08006f04 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8006f04:	68c3      	ldr	r3, [r0, #12]
 8006f06:	4219      	tst	r1, r3
 8006f08:	bf0c      	ite	eq
 8006f0a:	2000      	moveq	r0, #0
 8006f0c:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8006f0e:	4770      	bx	lr

08006f10 <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8006f10:	68c0      	ldr	r0, [r0, #12]
 8006f12:	b280      	uxth	r0, r0
}
 8006f14:	4770      	bx	lr
 8006f16:	46c0      	nop			(mov r8, r8)

08006f18 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8006f18:	6101      	str	r1, [r0, #16]
}
 8006f1a:	4770      	bx	lr

08006f1c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8006f1c:	6141      	str	r1, [r0, #20]
}
 8006f1e:	4770      	bx	lr

08006f20 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8006f20:	b10a      	cbz	r2, 8006f26 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f22:	6101      	str	r1, [r0, #16]
 8006f24:	e000      	b.n	8006f28 <GPIO_WriteBit+0x8>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8006f26:	6141      	str	r1, [r0, #20]
  }
}
 8006f28:	4770      	bx	lr
 8006f2a:	46c0      	nop			(mov r8, r8)

08006f2c <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8006f2c:	60c1      	str	r1, [r0, #12]
}
 8006f2e:	4770      	bx	lr

08006f30 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8006f30:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8006f34:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8006f36:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8006f38:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8006f3a:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8006f3c:	6983      	ldr	r3, [r0, #24]
}
 8006f3e:	4770      	bx	lr

08006f40 <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8006f40:	f8df c018 	ldr.w	ip, [pc, #24]	; 8006f5c <GPIO_EventOutputConfig+0x1c>
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8006f44:	f64f 7380 	movw	r3, #65408	; 0xff80

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8006f48:	f8dc 2000 	ldr.w	r2, [ip]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 8006f4c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8006f50:	ea02 0303 	and.w	r3, r2, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8006f54:	4319      	orrs	r1, r3

  AFIO->EVCR = tmpreg;
 8006f56:	f8cc 1000 	str.w	r1, [ip]
}
 8006f5a:	4770      	bx	lr
 8006f5c:	40010000 	.word	0x40010000

08006f60 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8006f60:	4b01      	ldr	r3, [pc, #4]	(8006f68 <GPIO_EventOutputCmd+0x8>)
 8006f62:	6018      	str	r0, [r3, #0]
}
 8006f64:	4770      	bx	lr
 8006f66:	46c0      	nop			(mov r8, r8)
 8006f68:	4220001c 	.word	0x4220001c

08006f6c <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8006f6c:	b530      	push	{r4, r5, lr}
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8006f6e:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8006f72:	0404      	lsls	r4, r0, #16
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8006f74:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8006f76:	4914      	ldr	r1, [pc, #80]	(8006fc8 <GPIO_PinRemapConfig+0x5c>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8006f78:	0c24      	lsrs	r4, r4, #16

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8006f7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8006f7e:	f8d1 c004 	ldr.w	ip, [r1, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8006f82:	d106      	bne.n	8006f92 <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8006f84:	684b      	ldr	r3, [r1, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8006f86:	f02c 6270 	bic.w	r2, ip, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8006f8a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006f8e:	604b      	str	r3, [r1, #4]
 8006f90:	e010      	b.n	8006fb4 <GPIO_PinRemapConfig+0x48>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8006f92:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8006f96:	d005      	beq.n	8006fa4 <GPIO_PinRemapConfig+0x38>
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8006f98:	f400 2270 	and.w	r2, r0, #983040	; 0xf0000
 8006f9c:	0c12      	lsrs	r2, r2, #16
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	4093      	lsls	r3, r2
 8006fa2:	e003      	b.n	8006fac <GPIO_PinRemapConfig+0x40>
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8006fa4:	0d43      	lsrs	r3, r0, #21
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	fa14 f303 	lsls.w	r3, r4, r3
 8006fac:	ea2c 0303 	bic.w	r3, ip, r3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8006fb0:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8006fb4:	b125      	cbz	r5, 8006fc0 <GPIO_PinRemapConfig+0x54>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8006fb6:	0d43      	lsrs	r3, r0, #21
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	fa14 f303 	lsls.w	r3, r4, r3
 8006fbe:	431a      	orrs	r2, r3
  }

  AFIO->MAPR = tmpreg;
 8006fc0:	4b01      	ldr	r3, [pc, #4]	(8006fc8 <GPIO_PinRemapConfig+0x5c>)
 8006fc2:	605a      	str	r2, [r3, #4]
}
 8006fc4:	bd30      	pop	{r4, r5, pc}
 8006fc6:	46c0      	nop			(mov r8, r8)
 8006fc8:	40010000 	.word	0x40010000

08006fcc <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8006fcc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8006fce:	f001 0403 	and.w	r4, r1, #3	; 0x3
 8006fd2:	00a4      	lsls	r4, r4, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8006fd4:	230f      	movs	r3, #15
 8006fd6:	40a3      	lsls	r3, r4
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8006fd8:	40a0      	lsls	r0, r4
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8006fda:	f8df c020 	ldr.w	ip, [pc, #32]	; 8006ffc <GPIO_EXTILineConfig+0x30>
 8006fde:	0889      	lsrs	r1, r1, #2
 8006fe0:	3102      	adds	r1, #2
 8006fe2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8006fe6:	ea22 0203 	bic.w	r2, r2, r3
 8006fea:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8006fee:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8006ff2:	4318      	orrs	r0, r3
 8006ff4:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
}
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	46c0      	nop			(mov r8, r8)
 8006ffc:	40010000 	.word	0x40010000

08007000 <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8007000:	b500      	push	{lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8007002:	2001      	movs	r0, #1
 8007004:	2101      	movs	r1, #1
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8007006:	b081      	sub	sp, #4
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8007008:	f000 fbf6 	bl	80077f8 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800700c:	2001      	movs	r0, #1
 800700e:	2100      	movs	r1, #0
 8007010:	f000 fbf2 	bl	80077f8 <RCC_APB2PeriphResetCmd>
}
 8007014:	b001      	add	sp, #4
 8007016:	bd00      	pop	{pc}

08007018 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8007018:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800701a:	4b27      	ldr	r3, [pc, #156]	(80070b8 <GPIO_DeInit+0xa0>)
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800701c:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800701e:	4298      	cmp	r0, r3
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8007020:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8007022:	d02b      	beq.n	800707c <GPIO_DeInit+0x64>
 8007024:	d80c      	bhi.n	8007040 <GPIO_DeInit+0x28>
 8007026:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800702a:	4298      	cmp	r0, r3
 800702c:	d01a      	beq.n	8007064 <GPIO_DeInit+0x4c>
 800702e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007032:	4298      	cmp	r0, r3
 8007034:	d01c      	beq.n	8007070 <GPIO_DeInit+0x58>
 8007036:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800703a:	4298      	cmp	r0, r3
 800703c:	d13a      	bne.n	80070b4 <GPIO_DeInit+0x9c>
 800703e:	e00b      	b.n	8007058 <GPIO_DeInit+0x40>
 8007040:	4b1e      	ldr	r3, [pc, #120]	(80070bc <GPIO_DeInit+0xa4>)
 8007042:	4298      	cmp	r0, r3
 8007044:	d026      	beq.n	8007094 <GPIO_DeInit+0x7c>
 8007046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704a:	4298      	cmp	r0, r3
 800704c:	d028      	beq.n	80070a0 <GPIO_DeInit+0x88>
 800704e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007052:	4298      	cmp	r0, r3
 8007054:	d12e      	bne.n	80070b4 <GPIO_DeInit+0x9c>
 8007056:	e017      	b.n	8007088 <GPIO_DeInit+0x70>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8007058:	2004      	movs	r0, #4
 800705a:	2101      	movs	r1, #1
 800705c:	f000 fbcc 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8007060:	2004      	movs	r0, #4
 8007062:	e024      	b.n	80070ae <GPIO_DeInit+0x96>
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8007064:	2008      	movs	r0, #8
 8007066:	2101      	movs	r1, #1
 8007068:	f000 fbc6 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800706c:	2008      	movs	r0, #8
 800706e:	e01e      	b.n	80070ae <GPIO_DeInit+0x96>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8007070:	2010      	movs	r0, #16
 8007072:	2101      	movs	r1, #1
 8007074:	f000 fbc0 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8007078:	2010      	movs	r0, #16
 800707a:	e018      	b.n	80070ae <GPIO_DeInit+0x96>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 800707c:	2020      	movs	r0, #32
 800707e:	2101      	movs	r1, #1
 8007080:	f000 fbba 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8007084:	2020      	movs	r0, #32
 8007086:	e012      	b.n	80070ae <GPIO_DeInit+0x96>
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8007088:	2040      	movs	r0, #64
 800708a:	2101      	movs	r1, #1
 800708c:	f000 fbb4 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8007090:	2040      	movs	r0, #64
 8007092:	e00c      	b.n	80070ae <GPIO_DeInit+0x96>
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8007094:	2080      	movs	r0, #128
 8007096:	2101      	movs	r1, #1
 8007098:	f000 fbae 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 800709c:	2080      	movs	r0, #128
 800709e:	e006      	b.n	80070ae <GPIO_DeInit+0x96>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80070a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070a4:	2101      	movs	r1, #1
 80070a6:	f000 fba7 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80070aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070ae:	2100      	movs	r1, #0
 80070b0:	f000 fba2 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      break;                       

    default:
      break;
  }
}
 80070b4:	b003      	add	sp, #12
 80070b6:	bd00      	pop	{pc}
 80070b8:	40011400 	.word	0x40011400
 80070bc:	40011c00 	.word	0x40011c00

080070c0 <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	(80070f0 <NVIC_DeInit+0x30>)
 80070c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  NVIC->ICER[1] = 0x0FFFFFFF;
 80070c6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 80070ca:	f8c3 1080 	str.w	r1, [r3, #128]
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 80070ce:	4618      	mov	r0, r3
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
 80070d0:	f8c3 2084 	str.w	r2, [r3, #132]
  NVIC->ICPR[0] = 0xFFFFFFFF;
 80070d4:	f8c3 1180 	str.w	r1, [r3, #384]
  NVIC->ICPR[1] = 0x0FFFFFFF;
 80070d8:	f8c3 2184 	str.w	r2, [r3, #388]
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 80070dc:	2100      	movs	r1, #0
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
 80070de:	2200      	movs	r2, #0
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 80070e0:	f102 03c0 	add.w	r3, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80070e4:	3201      	adds	r2, #1
 80070e6:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 80070e8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 80070ec:	d1f8      	bne.n	80070e0 <NVIC_DeInit+0x20>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 80070ee:	4770      	bx	lr
 80070f0:	e000e100 	.word	0xe000e100

080070f4 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 80070f4:	4a09      	ldr	r2, [pc, #36]	(800711c <NVIC_SCBDeInit+0x28>)
 80070f6:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 80070fa:	4909      	ldr	r1, [pc, #36]	(8007120 <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 80070fc:	6053      	str	r3, [r2, #4]
  SCB->VTOR = 0x00000000;
 80070fe:	2300      	movs	r3, #0
 8007100:	6093      	str	r3, [r2, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8007102:	60d1      	str	r1, [r2, #12]
  SCB->SCR = 0x00000000;
 8007104:	6113      	str	r3, [r2, #16]
  SCB->CCR = 0x00000000;
 8007106:	6153      	str	r3, [r2, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 8007108:	6193      	str	r3, [r2, #24]
 800710a:	61d3      	str	r3, [r2, #28]
 800710c:	6213      	str	r3, [r2, #32]
  }
  SCB->SHCSR = 0x00000000;
 800710e:	6253      	str	r3, [r2, #36]
  SCB->CFSR = 0xFFFFFFFF;
 8007110:	3b01      	subs	r3, #1
 8007112:	6293      	str	r3, [r2, #40]
  SCB->HFSR = 0xFFFFFFFF;
 8007114:	62d3      	str	r3, [r2, #44]
  SCB->DFSR = 0xFFFFFFFF;
 8007116:	6313      	str	r3, [r2, #48]
}
 8007118:	4770      	bx	lr
 800711a:	46c0      	nop			(mov r8, r8)
 800711c:	e000ed00 	.word	0xe000ed00
 8007120:	05fa0000 	.word	0x05fa0000

08007124 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8007124:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8007128:	4b02      	ldr	r3, [pc, #8]	(8007134 <NVIC_PriorityGroupConfig+0x10>)
 800712a:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 800712e:	60d8      	str	r0, [r3, #12]
}
 8007130:	4770      	bx	lr
 8007132:	46c0      	nop			(mov r8, r8)
 8007134:	e000ed00 	.word	0xe000ed00

08007138 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8007138:	b530      	push	{r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800713a:	78c3      	ldrb	r3, [r0, #3]
 800713c:	7805      	ldrb	r5, [r0, #0]
 800713e:	b35b      	cbz	r3, 8007198 <NVIC_Init+0x60>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8007140:	4b1a      	ldr	r3, [pc, #104]	(80071ac <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8007142:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8007144:	68da      	ldr	r2, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8007146:	4c1a      	ldr	r4, [pc, #104]	(80071b0 <NVIC_Init+0x78>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8007148:	ea6f 0202 	mvn.w	r2, r2
 800714c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007150:	0a12      	lsrs	r2, r2, #8
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8007152:	f1c2 0304 	rsb	r3, r2, #4	; 0x4
 8007156:	4099      	lsls	r1, r3
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8007158:	230f      	movs	r3, #15
 800715a:	40d3      	lsrs	r3, r2
 800715c:	7882      	ldrb	r2, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800715e:	f005 0003 	and.w	r0, r5, #3	; 0x3
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8007162:	4013      	ands	r3, r2
 8007164:	430b      	orrs	r3, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8007166:	00c0      	lsls	r0, r0, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8007168:	011b      	lsls	r3, r3, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800716a:	22ff      	movs	r2, #255
 800716c:	4082      	lsls	r2, r0
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800716e:	4083      	lsls	r3, r0
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8007170:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8007174:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
 8007178:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 800717c:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 800717e:	ea21 0102 	bic.w	r1, r1, r2
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 8007182:	430b      	orrs	r3, r1

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8007184:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8007188:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 800718c:	2301      	movs	r3, #1
 800718e:	4093      	lsls	r3, r2
 8007190:	0969      	lsrs	r1, r5, #5
 8007192:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8007196:	e008      	b.n	80071aa <NVIC_Init+0x72>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8007198:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 800719c:	2301      	movs	r3, #1
 800719e:	4093      	lsls	r3, r2
 80071a0:	0969      	lsrs	r1, r5, #5
 80071a2:	4a03      	ldr	r2, [pc, #12]	(80071b0 <NVIC_Init+0x78>)
 80071a4:	3120      	adds	r1, #32
 80071a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 80071aa:	bd30      	pop	{r4, r5, pc}
 80071ac:	e000ed00 	.word	0xe000ed00
 80071b0:	e000e100 	.word	0xe000e100

080071b4 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 80071b4:	2300      	movs	r3, #0
 80071b6:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 80071b8:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 80071ba:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 80071bc:	70c3      	strb	r3, [r0, #3]
}
 80071be:	4770      	bx	lr

080071c0 <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 80071c0:	4b03      	ldr	r3, [pc, #12]	(80071d0 <NVIC_GetCurrentPendingIRQChannel+0x10>)
 80071c2:	4804      	ldr	r0, [pc, #16]	(80071d4 <NVIC_GetCurrentPendingIRQChannel+0x14>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	ea03 0000 	and.w	r0, r3, r0
 80071ca:	0b00      	lsrs	r0, r0, #12
}
 80071cc:	4770      	bx	lr
 80071ce:	46c0      	nop			(mov r8, r8)
 80071d0:	e000ed00 	.word	0xe000ed00
 80071d4:	003ff000 	.word	0x003ff000

080071d8 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 80071d8:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 80071dc:	2201      	movs	r2, #1
 80071de:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 80071e0:	0940      	lsrs	r0, r0, #5
 80071e2:	4b05      	ldr	r3, [pc, #20]	(80071f8 <NVIC_GetIRQChannelPendingBitStatus+0x20>)
 80071e4:	3040      	adds	r0, #64
 80071e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80071ea:	4010      	ands	r0, r2
 80071ec:	4290      	cmp	r0, r2
 80071ee:	bf14      	ite	ne
 80071f0:	2000      	movne	r0, #0
 80071f2:	2001      	moveq	r0, #1
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 80071f4:	4770      	bx	lr
 80071f6:	46c0      	nop			(mov r8, r8)
 80071f8:	e000e100 	.word	0xe000e100

080071fc <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 80071fc:	4b01      	ldr	r3, [pc, #4]	(8007204 <NVIC_SetIRQChannelPendingBit+0x8>)
 80071fe:	6018      	str	r0, [r3, #0]
}
 8007200:	4770      	bx	lr
 8007202:	46c0      	nop			(mov r8, r8)
 8007204:	e000ef00 	.word	0xe000ef00

08007208 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8007208:	0941      	lsrs	r1, r0, #5
 800720a:	2301      	movs	r3, #1
 800720c:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8007210:	4083      	lsls	r3, r0
 8007212:	4a02      	ldr	r2, [pc, #8]	(800721c <NVIC_ClearIRQChannelPendingBit+0x14>)
 8007214:	3160      	adds	r1, #96
 8007216:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800721a:	4770      	bx	lr
 800721c:	e000e100 	.word	0xe000e100

08007220 <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8007220:	4b02      	ldr	r3, [pc, #8]	(800722c <NVIC_GetCurrentActiveHandler+0xc>)
 8007222:	6858      	ldr	r0, [r3, #4]
 8007224:	0580      	lsls	r0, r0, #22
 8007226:	0d80      	lsrs	r0, r0, #22
}
 8007228:	4770      	bx	lr
 800722a:	46c0      	nop			(mov r8, r8)
 800722c:	e000ed00 	.word	0xe000ed00

08007230 <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8007230:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8007234:	2201      	movs	r2, #1
 8007236:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8007238:	0940      	lsrs	r0, r0, #5
 800723a:	4b05      	ldr	r3, [pc, #20]	(8007250 <NVIC_GetIRQChannelActiveBitStatus+0x20>)
 800723c:	3080      	adds	r0, #128
 800723e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007242:	4010      	ands	r0, r2
 8007244:	4290      	cmp	r0, r2
 8007246:	bf14      	ite	ne
 8007248:	2000      	movne	r0, #0
 800724a:	2001      	moveq	r0, #1
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 800724c:	4770      	bx	lr
 800724e:	46c0      	nop			(mov r8, r8)
 8007250:	e000e100 	.word	0xe000e100

08007254 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8007254:	4b01      	ldr	r3, [pc, #4]	(800725c <NVIC_GetCPUID+0x8>)
 8007256:	6818      	ldr	r0, [r3, #0]
}
 8007258:	4770      	bx	lr
 800725a:	46c0      	nop			(mov r8, r8)
 800725c:	e000ed00 	.word	0xe000ed00

08007260 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8007260:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8007264:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8007268:	4b01      	ldr	r3, [pc, #4]	(8007270 <NVIC_SetVectorTable+0x10>)
 800726a:	4301      	orrs	r1, r0
 800726c:	6099      	str	r1, [r3, #8]
}
 800726e:	4770      	bx	lr
 8007270:	e000ed00 	.word	0xe000ed00

08007274 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8007274:	4a01      	ldr	r2, [pc, #4]	(800727c <NVIC_GenerateSystemReset+0x8>)
 8007276:	4b02      	ldr	r3, [pc, #8]	(8007280 <NVIC_GenerateSystemReset+0xc>)
 8007278:	60da      	str	r2, [r3, #12]
}
 800727a:	4770      	bx	lr
 800727c:	05fa0004 	.word	0x05fa0004
 8007280:	e000ed00 	.word	0xe000ed00

08007284 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8007284:	4a01      	ldr	r2, [pc, #4]	(800728c <NVIC_GenerateCoreReset+0x8>)
 8007286:	4b02      	ldr	r3, [pc, #8]	(8007290 <NVIC_GenerateCoreReset+0xc>)
 8007288:	60da      	str	r2, [r3, #12]
}
 800728a:	4770      	bx	lr
 800728c:	05fa0001 	.word	0x05fa0001
 8007290:	e000ed00 	.word	0xe000ed00

08007294 <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8007294:	b121      	cbz	r1, 80072a0 <NVIC_SystemLPConfig+0xc>
  {
    SCB->SCR |= LowPowerMode;
 8007296:	4a05      	ldr	r2, [pc, #20]	(80072ac <NVIC_SystemLPConfig+0x18>)
 8007298:	6913      	ldr	r3, [r2, #16]
 800729a:	ea40 0303 	orr.w	r3, r0, r3
 800729e:	e003      	b.n	80072a8 <NVIC_SystemLPConfig+0x14>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 80072a0:	4a02      	ldr	r2, [pc, #8]	(80072ac <NVIC_SystemLPConfig+0x18>)
 80072a2:	6913      	ldr	r3, [r2, #16]
 80072a4:	ea23 0300 	bic.w	r3, r3, r0
 80072a8:	6113      	str	r3, [r2, #16]
  }
}
 80072aa:	4770      	bx	lr
 80072ac:	e000ed00 	.word	0xe000ed00

080072b0 <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 80072b0:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80072b4:	2301      	movs	r3, #1
 80072b6:	fa13 f000 	lsls.w	r0, r3, r0

  if (NewState != DISABLE)
 80072ba:	b121      	cbz	r1, 80072c6 <NVIC_SystemHandlerConfig+0x16>
  {
    SCB->SHCSR |= tmpreg;
 80072bc:	4a05      	ldr	r2, [pc, #20]	(80072d4 <NVIC_SystemHandlerConfig+0x24>)
 80072be:	6a53      	ldr	r3, [r2, #36]
 80072c0:	ea40 0303 	orr.w	r3, r0, r3
 80072c4:	e003      	b.n	80072ce <NVIC_SystemHandlerConfig+0x1e>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 80072c6:	4a03      	ldr	r2, [pc, #12]	(80072d4 <NVIC_SystemHandlerConfig+0x24>)
 80072c8:	6a53      	ldr	r3, [r2, #36]
 80072ca:	ea23 0300 	bic.w	r3, r3, r0
 80072ce:	6253      	str	r3, [r2, #36]
  }
}
 80072d0:	4770      	bx	lr
 80072d2:	46c0      	nop			(mov r8, r8)
 80072d4:	e000ed00 	.word	0xe000ed00

080072d8 <NVIC_SystemHandlerPriorityConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 80072d8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 80072da:	4c14      	ldr	r4, [pc, #80]	(800732c <NVIC_SystemHandlerPriorityConfig+0x54>)
 80072dc:	68e3      	ldr	r3, [r4, #12]
 80072de:	ea6f 0303 	mvn.w	r3, r3
 80072e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072e6:	0a1b      	lsrs	r3, r3, #8
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 80072e8:	f1c3 0c04 	rsb	ip, r3, #4	; 0x4
 80072ec:	fa01 f10c 	lsl.w	r1, r1, ip
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 80072f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80072f4:	fa2c f303 	lsr.w	r3, ip, r3
 80072f8:	401a      	ands	r2, r3
 80072fa:	430a      	orrs	r2, r1

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
 80072fc:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8007300:	0940      	lsrs	r0, r0, #5
 8007302:	f000 0018 	and.w	r0, r0, #24	; 0x18
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8007306:	fa0c fc00 	lsl.w	ip, ip, r0
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 800730a:	0112      	lsls	r2, r2, #4
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 800730c:	4082      	lsls	r2, r0
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 800730e:	0989      	lsrs	r1, r1, #6
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8007310:	3106      	adds	r1, #6
 8007312:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8007316:	ea23 030c 	bic.w	r3, r3, ip
 800731a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
 800731e:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8007322:	431a      	orrs	r2, r3
 8007324:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 8007328:	bd10      	pop	{r4, pc}
 800732a:	46c0      	nop			(mov r8, r8)
 800732c:	e000ed00 	.word	0xe000ed00

08007330 <NVIC_GetSystemHandlerPendingBitStatus>:
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
 8007330:	0a80      	lsrs	r0, r0, #10
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 8007332:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8007336:	2301      	movs	r3, #1
 8007338:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 800733a:	4a04      	ldr	r2, [pc, #16]	(800734c <NVIC_GetSystemHandlerPendingBitStatus+0x1c>)
 800733c:	6a50      	ldr	r0, [r2, #36]
 800733e:	ea03 0000 	and.w	r0, r3, r0
 8007342:	4298      	cmp	r0, r3
 8007344:	bf14      	ite	ne
 8007346:	2000      	movne	r0, #0
 8007348:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800734a:	4770      	bx	lr
 800734c:	e000ed00 	.word	0xe000ed00

08007350 <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8007350:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8007354:	2301      	movs	r3, #1
 8007356:	4083      	lsls	r3, r0
 8007358:	4a02      	ldr	r2, [pc, #8]	(8007364 <NVIC_SetSystemHandlerPendingBit+0x14>)
 800735a:	6851      	ldr	r1, [r2, #4]
 800735c:	430b      	orrs	r3, r1
 800735e:	6053      	str	r3, [r2, #4]
}
 8007360:	4770      	bx	lr
 8007362:	46c0      	nop			(mov r8, r8)
 8007364:	e000ed00 	.word	0xe000ed00

08007368 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8007368:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 800736c:	3801      	subs	r0, #1
 800736e:	2301      	movs	r3, #1
 8007370:	4083      	lsls	r3, r0
 8007372:	4a02      	ldr	r2, [pc, #8]	(800737c <NVIC_ClearSystemHandlerPendingBit+0x14>)
 8007374:	6851      	ldr	r1, [r2, #4]
 8007376:	430b      	orrs	r3, r1
 8007378:	6053      	str	r3, [r2, #4]
}
 800737a:	4770      	bx	lr
 800737c:	e000ed00 	.word	0xe000ed00

08007380 <NVIC_GetSystemHandlerActiveBitStatus>:
  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 8007380:	0b80      	lsrs	r0, r0, #14
 8007382:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8007386:	2301      	movs	r3, #1
 8007388:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 800738a:	4a04      	ldr	r2, [pc, #16]	(800739c <NVIC_GetSystemHandlerActiveBitStatus+0x1c>)
 800738c:	6a50      	ldr	r0, [r2, #36]
 800738e:	ea03 0000 	and.w	r0, r3, r0
 8007392:	4298      	cmp	r0, r3
 8007394:	bf14      	ite	ne
 8007396:	2000      	movne	r0, #0
 8007398:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800739a:	4770      	bx	lr
 800739c:	e000ed00 	.word	0xe000ed00

080073a0 <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 80073a0:	0c83      	lsrs	r3, r0, #18
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 80073a2:	f013 0303 	ands.w	r3, r3, #3	; 0x3
 80073a6:	d102      	bne.n	80073ae <NVIC_GetFaultHandlerSources+0xe>
  {
    faultsources = SCB->HFSR;
 80073a8:	4b0d      	ldr	r3, [pc, #52]	(80073e0 <NVIC_GetFaultHandlerSources+0x40>)
 80073aa:	6ad8      	ldr	r0, [r3, #44]
 80073ac:	e017      	b.n	80073de <NVIC_GetFaultHandlerSources+0x3e>
  }
  else if (tmpreg == 0x01)
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d113      	bne.n	80073da <NVIC_GetFaultHandlerSources+0x3a>
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 80073b2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80073b6:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80073ba:	33fe      	adds	r3, #254

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 80073bc:	0d02      	lsrs	r2, r0, #20
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 80073be:	3301      	adds	r3, #1

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 80073c0:	f002 0203 	and.w	r2, r2, #3	; 0x3
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 80073c4:	6a99      	ldr	r1, [r3, #40]
 80073c6:	00d3      	lsls	r3, r2, #3
 80073c8:	fa31 f003 	lsrs.w	r0, r1, r3
    if (tmppos != 0x02)
 80073cc:	2a02      	cmp	r2, #2
    {
      faultsources &= (u32)0x0F;
 80073ce:	bf14      	ite	ne
 80073d0:	f000 000f 	andne.w	r0, r0, #15	; 0xf
    }
    else
    {
      faultsources &= (u32)0xFF;
 80073d4:	f000 00ff 	andeq.w	r0, r0, #255	; 0xff
 80073d8:	e001      	b.n	80073de <NVIC_GetFaultHandlerSources+0x3e>
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 80073da:	4b01      	ldr	r3, [pc, #4]	(80073e0 <NVIC_GetFaultHandlerSources+0x40>)
 80073dc:	6b18      	ldr	r0, [r3, #48]
  }
  return faultsources;
}
 80073de:	4770      	bx	lr
 80073e0:	e000ed00 	.word	0xe000ed00

080073e4 <NVIC_GetFaultAddress>:
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 80073e4:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 80073e8:	bf0b      	itete	eq
 80073ea:	4b02      	ldreq	r3, [pc, #8]	(80073f4 <NVIC_GetFaultAddress+0x10>)
  }
  else
  {
    faultaddress = SCB->BFAR;
 80073ec:	4b01      	ldrne	r3, [pc, #4]	(80073f4 <NVIC_GetFaultAddress+0x10>)
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
  {
    faultaddress = SCB->MMFAR;
 80073ee:	6b58      	ldreq	r0, [r3, #52]
  }
  else
  {
    faultaddress = SCB->BFAR;
 80073f0:	6b98      	ldrne	r0, [r3, #56]
  }
  return faultaddress;
}
 80073f2:	4770      	bx	lr
 80073f4:	e000ed00 	.word	0xe000ed00

080073f8 <NVIC_GetBASEPRI>:
* Input          : None
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
 80073f8:	b500      	push	{lr}
 80073fa:	b081      	sub	sp, #4
  return (__GetBASEPRI());
 80073fc:	f001 fb88 	bl	8008b10 <__GetBASEPRI>
}
 8007400:	b001      	add	sp, #4
 8007402:	bd00      	pop	{pc}

08007404 <NVIC_BASEPRICONFIG>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8007404:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8007406:	0100      	lsls	r0, r0, #4
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8007408:	b081      	sub	sp, #4
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 800740a:	f001 fb7e 	bl	8008b0a <__BASEPRICONFIG>
}
 800740e:	b001      	add	sp, #4
 8007410:	bd00      	pop	{pc}
 8007412:	46c0      	nop			(mov r8, r8)

08007414 <NVIC_RESETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
 8007414:	b500      	push	{lr}
 8007416:	b081      	sub	sp, #4
  __RESETFAULTMASK();
 8007418:	f001 fb75 	bl	8008b06 <__RESETFAULTMASK>
}
 800741c:	b001      	add	sp, #4
 800741e:	bd00      	pop	{pc}

08007420 <NVIC_SETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
 8007420:	b500      	push	{lr}
 8007422:	b081      	sub	sp, #4
  __SETFAULTMASK();
 8007424:	f001 fb6d 	bl	8008b02 <__SETFAULTMASK>
}
 8007428:	b001      	add	sp, #4
 800742a:	bd00      	pop	{pc}

0800742c <NVIC_RESETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
 800742c:	b500      	push	{lr}
 800742e:	b081      	sub	sp, #4
  __RESETPRIMASK();
 8007430:	f001 fb65 	bl	8008afe <__RESETPRIMASK>
}
 8007434:	b001      	add	sp, #4
 8007436:	bd00      	pop	{pc}

08007438 <NVIC_SETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
 8007438:	b500      	push	{lr}
 800743a:	b081      	sub	sp, #4
  __SETPRIMASK();
 800743c:	f001 fb5d 	bl	8008afa <__SETPRIMASK>
}
 8007440:	b001      	add	sp, #4
 8007442:	bd00      	pop	{pc}

08007444 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8007444:	4b01      	ldr	r3, [pc, #4]	(800744c <PWR_BackupAccessCmd+0x8>)
 8007446:	6018      	str	r0, [r3, #0]
}
 8007448:	4770      	bx	lr
 800744a:	46c0      	nop			(mov r8, r8)
 800744c:	420e0020 	.word	0x420e0020

08007450 <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 8007450:	4b01      	ldr	r3, [pc, #4]	(8007458 <PWR_PVDCmd+0x8>)
 8007452:	6018      	str	r0, [r3, #0]
}
 8007454:	4770      	bx	lr
 8007456:	46c0      	nop			(mov r8, r8)
 8007458:	420e0010 	.word	0x420e0010

0800745c <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 800745c:	4a03      	ldr	r2, [pc, #12]	(800746c <PWR_PVDLevelConfig+0x10>)
 800745e:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 8007460:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8007464:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8007466:	6010      	str	r0, [r2, #0]
}
 8007468:	4770      	bx	lr
 800746a:	46c0      	nop			(mov r8, r8)
 800746c:	40007000 	.word	0x40007000

08007470 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8007470:	4b01      	ldr	r3, [pc, #4]	(8007478 <PWR_WakeUpPinCmd+0x8>)
 8007472:	6018      	str	r0, [r3, #0]
}
 8007474:	4770      	bx	lr
 8007476:	46c0      	nop			(mov r8, r8)
 8007478:	420e00a0 	.word	0x420e00a0

0800747c <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 800747c:	4b03      	ldr	r3, [pc, #12]	(800748c <PWR_GetFlagStatus+0x10>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4218      	tst	r0, r3
 8007482:	bf0c      	ite	eq
 8007484:	2000      	moveq	r0, #0
 8007486:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8007488:	4770      	bx	lr
 800748a:	46c0      	nop			(mov r8, r8)
 800748c:	40007000 	.word	0x40007000

08007490 <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8007490:	4a02      	ldr	r2, [pc, #8]	(800749c <PWR_ClearFlag+0xc>)
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8007498:	6013      	str	r3, [r2, #0]
}
 800749a:	4770      	bx	lr
 800749c:	40007000 	.word	0x40007000

080074a0 <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 80074a0:	4a0b      	ldr	r2, [pc, #44]	(80074d0 <PWR_EnterSTANDBYMode+0x30>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 80074a2:	b500      	push	{lr}
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 80074a4:	6813      	ldr	r3, [r2, #0]
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 80074a6:	b081      	sub	sp, #4
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 80074a8:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80074ac:	6013      	str	r3, [r2, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80074b4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 80074b6:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 80074ba:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 80074be:	3210      	adds	r2, #16
 80074c0:	6813      	ldr	r3, [r2, #0]
 80074c2:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80074c6:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 80074c8:	f001 faf2 	bl	8008ab0 <__WFI>
}
 80074cc:	b001      	add	sp, #4
 80074ce:	bd00      	pop	{pc}
 80074d0:	40007000 	.word	0x40007000

080074d4 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80074d4:	4a0c      	ldr	r2, [pc, #48]	(8007508 <PWR_EnterSTOPMode+0x34>)
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 80074d6:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80074d8:	6813      	ldr	r3, [r2, #0]
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 80074da:	b081      	sub	sp, #4
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 80074dc:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80074e0:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80074e2:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 80074e4:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 80074e8:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 80074ec:	3210      	adds	r2, #16
 80074ee:	6813      	ldr	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80074f0:	2901      	cmp	r1, #1

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 80074f2:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80074f6:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80074f8:	d102      	bne.n	8007500 <PWR_EnterSTOPMode+0x2c>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80074fa:	f001 fad9 	bl	8008ab0 <__WFI>
 80074fe:	e001      	b.n	8007504 <PWR_EnterSTOPMode+0x30>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8007500:	f001 fad8 	bl	8008ab4 <__WFE>
  }
}
 8007504:	b001      	add	sp, #4
 8007506:	bd00      	pop	{pc}
 8007508:	40007000 	.word	0x40007000

0800750c <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 800750c:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800750e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 8007512:	4620      	mov	r0, r4
 8007514:	2101      	movs	r1, #1
 8007516:	f000 f97d 	bl	8007814 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800751a:	4620      	mov	r0, r4
 800751c:	2100      	movs	r1, #0
 800751e:	f000 f979 	bl	8007814 <RCC_APB1PeriphResetCmd>
}
 8007522:	bd10      	pop	{r4, pc}

08007524 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8007524:	4a0d      	ldr	r2, [pc, #52]	(800755c <RCC_DeInit+0x38>)
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800752c:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 800752e:	6851      	ldr	r1, [r2, #4]
 8007530:	4b0b      	ldr	r3, [pc, #44]	(8007560 <RCC_DeInit+0x3c>)
 8007532:	ea01 0303 	and.w	r3, r1, r3
 8007536:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8007538:	6813      	ldr	r3, [r2, #0]
 800753a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800753e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007542:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8007544:	6813      	ldr	r3, [r2, #0]
 8007546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800754a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 800754c:	6853      	ldr	r3, [r2, #4]
 800754e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007552:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007554:	2300      	movs	r3, #0
 8007556:	6093      	str	r3, [r2, #8]
}
 8007558:	4770      	bx	lr
 800755a:	46c0      	nop			(mov r8, r8)
 800755c:	40021000 	.word	0x40021000
 8007560:	f8ff0000 	.word	0xf8ff0000

08007564 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8007564:	4a0b      	ldr	r2, [pc, #44]	(8007594 <RCC_HSEConfig+0x30>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8007566:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800756a:	6813      	ldr	r3, [r2, #0]
 800756c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007570:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007578:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800757a:	d003      	beq.n	8007584 <RCC_HSEConfig+0x20>
 800757c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8007580:	d107      	bne.n	8007592 <RCC_HSEConfig+0x2e>
 8007582:	e002      	b.n	800758a <RCC_HSEConfig+0x26>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8007584:	6813      	ldr	r3, [r2, #0]
 8007586:	4303      	orrs	r3, r0
 8007588:	e002      	b.n	8007590 <RCC_HSEConfig+0x2c>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800758a:	6813      	ldr	r3, [r2, #0]
 800758c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8007590:	6013      	str	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8007592:	4770      	bx	lr
 8007594:	40021000 	.word	0x40021000

08007598 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8007598:	b082      	sub	sp, #8
  vu32 StartUpCounter = 0;
 800759a:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800759c:	4909      	ldr	r1, [pc, #36]	(80075c4 <RCC_WaitForHSEStartUp+0x2c>)
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  vu32 StartUpCounter = 0;
 800759e:	9301      	str	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80075a0:	680a      	ldr	r2, [r1, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	3301      	adds	r3, #1
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80075a6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80075aa:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80075ac:	d103      	bne.n	80075b6 <RCC_WaitForHSEStartUp+0x1e>
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80075b4:	d1f4      	bne.n	80075a0 <RCC_WaitForHSEStartUp+0x8>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80075b6:	4b03      	ldr	r3, [pc, #12]	(80075c4 <RCC_WaitForHSEStartUp+0x2c>)
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	0c40      	lsrs	r0, r0, #17
 80075bc:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    status = ERROR;
  }  

  return (status);
}
 80075c0:	b002      	add	sp, #8
 80075c2:	4770      	bx	lr
 80075c4:	40021000 	.word	0x40021000

080075c8 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80075c8:	4a03      	ldr	r2, [pc, #12]	(80075d8 <RCC_AdjustHSICalibrationValue+0x10>)
 80075ca:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 80075cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 80075d0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80075d4:	6013      	str	r3, [r2, #0]
}
 80075d6:	4770      	bx	lr
 80075d8:	40021000 	.word	0x40021000

080075dc <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 80075dc:	4b01      	ldr	r3, [pc, #4]	(80075e4 <RCC_HSICmd+0x8>)
 80075de:	6018      	str	r0, [r3, #0]
}
 80075e0:	4770      	bx	lr
 80075e2:	46c0      	nop			(mov r8, r8)
 80075e4:	42420000 	.word	0x42420000

080075e8 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80075e8:	4a03      	ldr	r2, [pc, #12]	(80075f8 <RCC_PLLConfig+0x10>)
 80075ea:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80075ec:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80075f0:	4318      	orrs	r0, r3
 80075f2:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80075f4:	6050      	str	r0, [r2, #4]
}
 80075f6:	4770      	bx	lr
 80075f8:	40021000 	.word	0x40021000

080075fc <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 80075fc:	4b01      	ldr	r3, [pc, #4]	(8007604 <RCC_PLLCmd+0x8>)
 80075fe:	6018      	str	r0, [r3, #0]
}
 8007600:	4770      	bx	lr
 8007602:	46c0      	nop			(mov r8, r8)
 8007604:	42420060 	.word	0x42420060

08007608 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8007608:	4a03      	ldr	r2, [pc, #12]	(8007618 <RCC_SYSCLKConfig+0x10>)
 800760a:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800760c:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8007610:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8007612:	6050      	str	r0, [r2, #4]
}
 8007614:	4770      	bx	lr
 8007616:	46c0      	nop			(mov r8, r8)
 8007618:	40021000 	.word	0x40021000

0800761c <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 800761c:	4b02      	ldr	r3, [pc, #8]	(8007628 <RCC_GetSYSCLKSource+0xc>)
 800761e:	6858      	ldr	r0, [r3, #4]
 8007620:	f000 000c 	and.w	r0, r0, #12	; 0xc
}
 8007624:	4770      	bx	lr
 8007626:	46c0      	nop			(mov r8, r8)
 8007628:	40021000 	.word	0x40021000

0800762c <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800762c:	4a03      	ldr	r2, [pc, #12]	(800763c <RCC_HCLKConfig+0x10>)
 800762e:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8007630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8007634:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8007636:	6050      	str	r0, [r2, #4]
}
 8007638:	4770      	bx	lr
 800763a:	46c0      	nop			(mov r8, r8)
 800763c:	40021000 	.word	0x40021000

08007640 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8007640:	4a03      	ldr	r2, [pc, #12]	(8007650 <RCC_PCLK1Config+0x10>)
 8007642:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8007644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8007648:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800764a:	6050      	str	r0, [r2, #4]
}
 800764c:	4770      	bx	lr
 800764e:	46c0      	nop			(mov r8, r8)
 8007650:	40021000 	.word	0x40021000

08007654 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8007654:	4a03      	ldr	r2, [pc, #12]	(8007664 <RCC_PCLK2Config+0x10>)
 8007656:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8007658:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800765c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8007660:	6053      	str	r3, [r2, #4]
}
 8007662:	4770      	bx	lr
 8007664:	40021000 	.word	0x40021000

08007668 <RCC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007668:	b121      	cbz	r1, 8007674 <RCC_ITConfig+0xc>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800766a:	4a05      	ldr	r2, [pc, #20]	(8007680 <RCC_ITConfig+0x18>)
 800766c:	7813      	ldrb	r3, [r2, #0]
 800766e:	ea40 0303 	orr.w	r3, r0, r3
 8007672:	e003      	b.n	800767c <RCC_ITConfig+0x14>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8007674:	4a02      	ldr	r2, [pc, #8]	(8007680 <RCC_ITConfig+0x18>)
 8007676:	7813      	ldrb	r3, [r2, #0]
 8007678:	ea23 0300 	bic.w	r3, r3, r0
 800767c:	7013      	strb	r3, [r2, #0]
  }
}
 800767e:	4770      	bx	lr
 8007680:	40021009 	.word	0x40021009

08007684 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8007684:	4b01      	ldr	r3, [pc, #4]	(800768c <RCC_USBCLKConfig+0x8>)
 8007686:	6018      	str	r0, [r3, #0]
}
 8007688:	4770      	bx	lr
 800768a:	46c0      	nop			(mov r8, r8)
 800768c:	424200d8 	.word	0x424200d8

08007690 <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8007690:	4a03      	ldr	r2, [pc, #12]	(80076a0 <RCC_ADCCLKConfig+0x10>)
 8007692:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8007694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8007698:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800769a:	6050      	str	r0, [r2, #4]
}
 800769c:	4770      	bx	lr
 800769e:	46c0      	nop			(mov r8, r8)
 80076a0:	40021000 	.word	0x40021000

080076a4 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 80076a4:	4a06      	ldr	r2, [pc, #24]	(80076c0 <RCC_LSEConfig+0x1c>)
 80076a6:	2300      	movs	r3, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80076a8:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 80076aa:	7013      	strb	r3, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 80076ac:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 80076ae:	bf08      	it	eq
 80076b0:	7010      	strbeq	r0, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80076b2:	d003      	beq.n	80076bc <RCC_LSEConfig+0x18>
 80076b4:	2804      	cmp	r0, #4
 80076b6:	d101      	bne.n	80076bc <RCC_LSEConfig+0x18>
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80076b8:	2305      	movs	r3, #5
 80076ba:	7013      	strb	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 80076bc:	4770      	bx	lr
 80076be:	46c0      	nop			(mov r8, r8)
 80076c0:	40021020 	.word	0x40021020

080076c4 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 80076c4:	4b01      	ldr	r3, [pc, #4]	(80076cc <RCC_LSICmd+0x8>)
 80076c6:	6018      	str	r0, [r3, #0]
}
 80076c8:	4770      	bx	lr
 80076ca:	46c0      	nop			(mov r8, r8)
 80076cc:	42420480 	.word	0x42420480

080076d0 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80076d0:	4a02      	ldr	r2, [pc, #8]	(80076dc <RCC_RTCCLKConfig+0xc>)
 80076d2:	6a13      	ldr	r3, [r2, #32]
 80076d4:	4318      	orrs	r0, r3
 80076d6:	6210      	str	r0, [r2, #32]
}
 80076d8:	4770      	bx	lr
 80076da:	46c0      	nop			(mov r8, r8)
 80076dc:	40021000 	.word	0x40021000

080076e0 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 80076e0:	4b01      	ldr	r3, [pc, #4]	(80076e8 <RCC_RTCCLKCmd+0x8>)
 80076e2:	6018      	str	r0, [r3, #0]
}
 80076e4:	4770      	bx	lr
 80076e6:	46c0      	nop			(mov r8, r8)
 80076e8:	4242043c 	.word	0x4242043c

080076ec <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80076ec:	4929      	ldr	r1, [pc, #164]	(8007794 <RCC_GetClocksFreq+0xa8>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80076ee:	4684      	mov	ip, r0
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80076f0:	684b      	ldr	r3, [r1, #4]

  switch (tmp)
 80076f2:	f003 030c 	and.w	r3, r3, #12	; 0xc
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d021      	beq.n	800773e <RCC_GetClocksFreq+0x52>
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d11f      	bne.n	800773e <RCC_GetClocksFreq+0x52>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80076fe:	684b      	ldr	r3, [r1, #4]
      pllmull = ( pllmull >> 18) + 2;
 8007700:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007704:	0c9b      	lsrs	r3, r3, #18
 8007706:	1c9a      	adds	r2, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8007708:	684b      	ldr	r3, [r1, #4]

      if (pllsource == 0x00)
 800770a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 800770e:	bf08      	it	eq
 8007710:	ebc2 1342 	rsbeq	r3, r2, r2, lsl #5
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8007714:	d006      	beq.n	8007724 <RCC_GetClocksFreq+0x38>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8007716:	684b      	ldr	r3, [r1, #4]
 8007718:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800771c:	ea4f 1342 	mov.w	r3, r2, lsl #5
 8007720:	d006      	beq.n	8007730 <RCC_GetClocksFreq+0x44>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8007728:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	e007      	b.n	8007740 <RCC_GetClocksFreq+0x54>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8007730:	1a9b      	subs	r3, r3, r2
 8007732:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8007736:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800773a:	025b      	lsls	r3, r3, #9
 800773c:	e000      	b.n	8007740 <RCC_GetClocksFreq+0x54>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800773e:	4b16      	ldr	r3, [pc, #88]	(8007798 <RCC_GetClocksFreq+0xac>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8007740:	4814      	ldr	r0, [pc, #80]	(8007794 <RCC_GetClocksFreq+0xa8>)
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8007742:	f8cc 3000 	str.w	r3, [ip]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8007746:	6843      	ldr	r3, [r0, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8007748:	4a14      	ldr	r2, [pc, #80]	(800779c <RCC_GetClocksFreq+0xb0>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800774a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800774e:	091b      	lsrs	r3, r3, #4
 8007750:	5cd3      	ldrb	r3, [r2, r3]
 8007752:	f8dc 1000 	ldr.w	r1, [ip]
 8007756:	40d9      	lsrs	r1, r3
 8007758:	f8cc 1004 	str.w	r1, [ip, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800775c:	6843      	ldr	r3, [r0, #4]
 800775e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	5cd3      	ldrb	r3, [r2, r3]
 8007766:	fa31 f303 	lsrs.w	r3, r1, r3
 800776a:	f8cc 3008 	str.w	r3, [ip, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800776e:	6843      	ldr	r3, [r0, #4]
 8007770:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8007774:	0adb      	lsrs	r3, r3, #11
 8007776:	5cd3      	ldrb	r3, [r2, r3]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8007778:	4a09      	ldr	r2, [pc, #36]	(80077a0 <RCC_GetClocksFreq+0xb4>)
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800777a:	40d9      	lsrs	r1, r3
 800777c:	f8cc 100c 	str.w	r1, [ip, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8007780:	6843      	ldr	r3, [r0, #4]
 8007782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8007786:	0b9b      	lsrs	r3, r3, #14
 8007788:	5cd3      	ldrb	r3, [r2, r3]
 800778a:	fbb1 f1f3 	udiv	r1, r1, r3
 800778e:	f8cc 1010 	str.w	r1, [ip, #16]
}
 8007792:	4770      	bx	lr
 8007794:	40021000 	.word	0x40021000
 8007798:	007a1200 	.word	0x007a1200
 800779c:	08008b74 	.word	0x08008b74
 80077a0:	08008b84 	.word	0x08008b84

080077a4 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077a4:	b121      	cbz	r1, 80077b0 <RCC_AHBPeriphClockCmd+0xc>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80077a6:	4a05      	ldr	r2, [pc, #20]	(80077bc <RCC_AHBPeriphClockCmd+0x18>)
 80077a8:	6953      	ldr	r3, [r2, #20]
 80077aa:	ea40 0303 	orr.w	r3, r0, r3
 80077ae:	e003      	b.n	80077b8 <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80077b0:	4a02      	ldr	r2, [pc, #8]	(80077bc <RCC_AHBPeriphClockCmd+0x18>)
 80077b2:	6953      	ldr	r3, [r2, #20]
 80077b4:	ea23 0300 	bic.w	r3, r3, r0
 80077b8:	6153      	str	r3, [r2, #20]
  }
}
 80077ba:	4770      	bx	lr
 80077bc:	40021000 	.word	0x40021000

080077c0 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077c0:	b121      	cbz	r1, 80077cc <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80077c2:	4a05      	ldr	r2, [pc, #20]	(80077d8 <RCC_APB2PeriphClockCmd+0x18>)
 80077c4:	6993      	ldr	r3, [r2, #24]
 80077c6:	ea40 0303 	orr.w	r3, r0, r3
 80077ca:	e003      	b.n	80077d4 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80077cc:	4a02      	ldr	r2, [pc, #8]	(80077d8 <RCC_APB2PeriphClockCmd+0x18>)
 80077ce:	6993      	ldr	r3, [r2, #24]
 80077d0:	ea23 0300 	bic.w	r3, r3, r0
 80077d4:	6193      	str	r3, [r2, #24]
  }
}
 80077d6:	4770      	bx	lr
 80077d8:	40021000 	.word	0x40021000

080077dc <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077dc:	b121      	cbz	r1, 80077e8 <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80077de:	4a05      	ldr	r2, [pc, #20]	(80077f4 <RCC_APB1PeriphClockCmd+0x18>)
 80077e0:	69d3      	ldr	r3, [r2, #28]
 80077e2:	ea40 0303 	orr.w	r3, r0, r3
 80077e6:	e003      	b.n	80077f0 <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80077e8:	4a02      	ldr	r2, [pc, #8]	(80077f4 <RCC_APB1PeriphClockCmd+0x18>)
 80077ea:	69d3      	ldr	r3, [r2, #28]
 80077ec:	ea23 0300 	bic.w	r3, r3, r0
 80077f0:	61d3      	str	r3, [r2, #28]
  }
}
 80077f2:	4770      	bx	lr
 80077f4:	40021000 	.word	0x40021000

080077f8 <RCC_APB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077f8:	b121      	cbz	r1, 8007804 <RCC_APB2PeriphResetCmd+0xc>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80077fa:	4a05      	ldr	r2, [pc, #20]	(8007810 <RCC_APB2PeriphResetCmd+0x18>)
 80077fc:	68d3      	ldr	r3, [r2, #12]
 80077fe:	ea40 0303 	orr.w	r3, r0, r3
 8007802:	e003      	b.n	800780c <RCC_APB2PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8007804:	4a02      	ldr	r2, [pc, #8]	(8007810 <RCC_APB2PeriphResetCmd+0x18>)
 8007806:	68d3      	ldr	r3, [r2, #12]
 8007808:	ea23 0300 	bic.w	r3, r3, r0
 800780c:	60d3      	str	r3, [r2, #12]
  }
}
 800780e:	4770      	bx	lr
 8007810:	40021000 	.word	0x40021000

08007814 <RCC_APB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007814:	b121      	cbz	r1, 8007820 <RCC_APB1PeriphResetCmd+0xc>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8007816:	4a05      	ldr	r2, [pc, #20]	(800782c <RCC_APB1PeriphResetCmd+0x18>)
 8007818:	6913      	ldr	r3, [r2, #16]
 800781a:	ea40 0303 	orr.w	r3, r0, r3
 800781e:	e003      	b.n	8007828 <RCC_APB1PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8007820:	4a02      	ldr	r2, [pc, #8]	(800782c <RCC_APB1PeriphResetCmd+0x18>)
 8007822:	6913      	ldr	r3, [r2, #16]
 8007824:	ea23 0300 	bic.w	r3, r3, r0
 8007828:	6113      	str	r3, [r2, #16]
  }
}
 800782a:	4770      	bx	lr
 800782c:	40021000 	.word	0x40021000

08007830 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8007830:	4b01      	ldr	r3, [pc, #4]	(8007838 <RCC_BackupResetCmd+0x8>)
 8007832:	6018      	str	r0, [r3, #0]
}
 8007834:	4770      	bx	lr
 8007836:	46c0      	nop			(mov r8, r8)
 8007838:	42420440 	.word	0x42420440

0800783c <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 800783c:	4b01      	ldr	r3, [pc, #4]	(8007844 <RCC_ClockSecuritySystemCmd+0x8>)
 800783e:	6018      	str	r0, [r3, #0]
}
 8007840:	4770      	bx	lr
 8007842:	46c0      	nop			(mov r8, r8)
 8007844:	4242004c 	.word	0x4242004c

08007848 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8007848:	4b01      	ldr	r3, [pc, #4]	(8007850 <RCC_MCOConfig+0x8>)
 800784a:	7018      	strb	r0, [r3, #0]
}
 800784c:	4770      	bx	lr
 800784e:	46c0      	nop			(mov r8, r8)
 8007850:	40021007 	.word	0x40021007

08007854 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8007854:	0943      	lsrs	r3, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 8007856:	2b01      	cmp	r3, #1
 8007858:	d108      	bne.n	800786c <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 800785a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800785e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007862:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8007866:	3307      	adds	r3, #7
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	e00c      	b.n	8007886 <RCC_GetFlagStatus+0x32>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800786c:	2b02      	cmp	r3, #2
 800786e:	d108      	bne.n	8007882 <RCC_GetFlagStatus+0x2e>
  {
    statusreg = RCC->BDCR;
 8007870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007874:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007878:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800787c:	3306      	adds	r3, #6
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	e001      	b.n	8007886 <RCC_GetFlagStatus+0x32>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8007882:	4b04      	ldr	r3, [pc, #16]	(8007894 <RCC_GetFlagStatus+0x40>)
 8007884:	6a5b      	ldr	r3, [r3, #36]
 8007886:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 800788a:	fa33 f000 	lsrs.w	r0, r3, r0
 800788e:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8007892:	4770      	bx	lr
 8007894:	40021000 	.word	0x40021000

08007898 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8007898:	4a02      	ldr	r2, [pc, #8]	(80078a4 <RCC_ClearFlag+0xc>)
 800789a:	6a53      	ldr	r3, [r2, #36]
 800789c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078a0:	6253      	str	r3, [r2, #36]
}
 80078a2:	4770      	bx	lr
 80078a4:	40021000 	.word	0x40021000

080078a8 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 80078a8:	4b03      	ldr	r3, [pc, #12]	(80078b8 <RCC_GetITStatus+0x10>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	4218      	tst	r0, r3
 80078ae:	bf0c      	ite	eq
 80078b0:	2000      	moveq	r0, #0
 80078b2:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 80078b4:	4770      	bx	lr
 80078b6:	46c0      	nop			(mov r8, r8)
 80078b8:	40021000 	.word	0x40021000

080078bc <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 80078bc:	4b01      	ldr	r3, [pc, #4]	(80078c4 <RCC_ClearITPendingBit+0x8>)
 80078be:	7018      	strb	r0, [r3, #0]
}
 80078c0:	4770      	bx	lr
 80078c2:	46c0      	nop			(mov r8, r8)
 80078c4:	4002100a 	.word	0x4002100a

080078c8 <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80078c8:	2804      	cmp	r0, #4
 80078ca:	d103      	bne.n	80078d4 <SysTick_CLKSourceConfig+0xc>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80078cc:	4a04      	ldr	r2, [pc, #16]	(80078e0 <SysTick_CLKSourceConfig+0x18>)
 80078ce:	6813      	ldr	r3, [r2, #0]
 80078d0:	4303      	orrs	r3, r0
 80078d2:	e003      	b.n	80078dc <SysTick_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80078d4:	4a02      	ldr	r2, [pc, #8]	(80078e0 <SysTick_CLKSourceConfig+0x18>)
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80078dc:	6013      	str	r3, [r2, #0]
  }
}
 80078de:	4770      	bx	lr
 80078e0:	e000e010 	.word	0xe000e010

080078e4 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 80078e4:	4b01      	ldr	r3, [pc, #4]	(80078ec <SysTick_SetReload+0x8>)
 80078e6:	6058      	str	r0, [r3, #4]
}
 80078e8:	4770      	bx	lr
 80078ea:	46c0      	nop			(mov r8, r8)
 80078ec:	e000e010 	.word	0xe000e010

080078f0 <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 80078f0:	2801      	cmp	r0, #1
 80078f2:	d103      	bne.n	80078fc <SysTick_CounterCmd+0xc>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 80078f4:	4a08      	ldr	r2, [pc, #32]	(8007918 <SysTick_CounterCmd+0x28>)
 80078f6:	6813      	ldr	r3, [r2, #0]
 80078f8:	4303      	orrs	r3, r0
 80078fa:	e006      	b.n	800790a <SysTick_CounterCmd+0x1a>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 80078fc:	f110 0f02 	cmn.w	r0, #2	; 0x2
 8007900:	d105      	bne.n	800790e <SysTick_CounterCmd+0x1e>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 8007902:	4a05      	ldr	r2, [pc, #20]	(8007918 <SysTick_CounterCmd+0x28>)
 8007904:	6813      	ldr	r3, [r2, #0]
 8007906:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e002      	b.n	8007914 <SysTick_CounterCmd+0x24>
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 800790e:	4b02      	ldr	r3, [pc, #8]	(8007918 <SysTick_CounterCmd+0x28>)
 8007910:	2200      	movs	r2, #0
 8007912:	609a      	str	r2, [r3, #8]
  }    
}
 8007914:	4770      	bx	lr
 8007916:	46c0      	nop			(mov r8, r8)
 8007918:	e000e010 	.word	0xe000e010

0800791c <SysTick_ITConfig>:
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800791c:	b120      	cbz	r0, 8007928 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 800791e:	4a05      	ldr	r2, [pc, #20]	(8007934 <SysTick_ITConfig+0x18>)
 8007920:	6813      	ldr	r3, [r2, #0]
 8007922:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8007926:	e003      	b.n	8007930 <SysTick_ITConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8007928:	4a02      	ldr	r2, [pc, #8]	(8007934 <SysTick_ITConfig+0x18>)
 800792a:	6813      	ldr	r3, [r2, #0]
 800792c:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8007930:	6013      	str	r3, [r2, #0]
  }
}
 8007932:	4770      	bx	lr
 8007934:	e000e010 	.word	0xe000e010

08007938 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8007938:	4b01      	ldr	r3, [pc, #4]	(8007940 <SysTick_GetCounter+0x8>)
 800793a:	6898      	ldr	r0, [r3, #8]
}
 800793c:	4770      	bx	lr
 800793e:	46c0      	nop			(mov r8, r8)
 8007940:	e000e010 	.word	0xe000e010

08007944 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8007944:	08c3      	lsrs	r3, r0, #3
 8007946:	2b02      	cmp	r3, #2
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
 8007948:	4602      	mov	r2, r0
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 800794a:	d106      	bne.n	800795a <SysTick_GetFlagStatus+0x16>
  {
    statusreg = SysTick->CTRL;
 800794c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8007950:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8007954:	330e      	adds	r3, #14
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	e001      	b.n	800795e <SysTick_GetFlagStatus+0x1a>
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 800795a:	4b03      	ldr	r3, [pc, #12]	(8007968 <SysTick_GetFlagStatus+0x24>)
 800795c:	68d8      	ldr	r0, [r3, #12]
 800795e:	40d0      	lsrs	r0, r2
 8007960:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8007964:	4770      	bx	lr
 8007966:	46c0      	nop			(mov r8, r8)
 8007968:	e000e010 	.word	0xe000e010

0800796c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 800796c:	8803      	ldrh	r3, [r0, #0]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800796e:	b082      	sub	sp, #8
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 8007970:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8007974:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8007976:	8803      	ldrh	r3, [r0, #0]
 8007978:	88ca      	ldrh	r2, [r1, #6]
 800797a:	b29b      	uxth	r3, r3
 800797c:	4313      	orrs	r3, r2
 800797e:	884a      	ldrh	r2, [r1, #2]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8007980:	9001      	str	r0, [sp, #4]
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8007982:	4313      	orrs	r3, r2
 8007984:	b29b      	uxth	r3, r3
 8007986:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8007988:	888b      	ldrh	r3, [r1, #4]
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 800798a:	4a0b      	ldr	r2, [pc, #44]	(80079b8 <TIM_TimeBaseInit+0x4c>)
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800798c:	8583      	strh	r3, [r0, #44]

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800798e:	880b      	ldrh	r3, [r1, #0]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8007990:	468c      	mov	ip, r1
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8007992:	8503      	strh	r3, [r0, #40]

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8007994:	f04f 0301 	mov.w	r3, #1	; 0x1
 8007998:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 800799a:	4b08      	ldr	r3, [pc, #32]	(80079bc <TIM_TimeBaseInit+0x50>)
 800799c:	4298      	cmp	r0, r3
 800799e:	bf14      	ite	ne
 80079a0:	2300      	movne	r3, #0
 80079a2:	2301      	moveq	r3, #1
 80079a4:	4290      	cmp	r0, r2
 80079a6:	bf08      	it	eq
 80079a8:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
 80079ac:	b113      	cbz	r3, 80079b4 <TIM_TimeBaseInit+0x48>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80079ae:	f89c 3008 	ldrb.w	r3, [ip, #8]
 80079b2:	8603      	strh	r3, [r0, #48]
  }        
}
 80079b4:	b002      	add	sp, #8
 80079b6:	4770      	bx	lr
 80079b8:	40012c00 	.word	0x40012c00
 80079bc:	40013400 	.word	0x40013400

080079c0 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80079c0:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80079c2:	468c      	mov	ip, r1
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80079c4:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ce:	8c01      	ldrh	r1, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	8883      	ldrh	r3, [r0, #4]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80079d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d6:	8b03      	ldrh	r3, [r0, #24]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80079d8:	f8bc 2008 	ldrh.w	r2, [ip, #8]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079dc:	b29e      	uxth	r6, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80079de:	f8bc 3002 	ldrh.w	r3, [ip, #2]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 80079e2:	f021 0102 	bic.w	r1, r1, #2	; 0x2

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80079e6:	4313      	orrs	r3, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 80079e8:	0409      	lsls	r1, r1, #16

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80079ea:	b29b      	uxth	r3, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 80079ec:	0c09      	lsrs	r1, r1, #16

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80079ee:	ea43 0401 	orr.w	r4, r3, r1
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80079f2:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80079f6:	f8bc 7000 	ldrh.w	r7, [ip]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80079fa:	8683      	strh	r3, [r0, #52]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 80079fc:	4b1a      	ldr	r3, [pc, #104]	(8007a68 <TIM_OC1Init+0xa8>)
 80079fe:	4a1b      	ldr	r2, [pc, #108]	(8007a6c <TIM_OC1Init+0xac>)
 8007a00:	4298      	cmp	r0, r3
 8007a02:	bf14      	ite	ne
 8007a04:	2300      	movne	r3, #0
 8007a06:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007a08:	b083      	sub	sp, #12
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007a0a:	4290      	cmp	r0, r2
 8007a0c:	bf08      	it	eq
 8007a0e:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007a12:	9001      	str	r0, [sp, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007a14:	b1eb      	cbz	r3, 8007a52 <TIM_OC1Init+0x92>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 8007a16:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8007a1a:	f5a2 5230 	sub.w	r2, r2, #11264	; 0x2c00

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8007a1e:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 8007a22:	3a09      	subs	r2, #9
 8007a24:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8007a28:	431a      	orrs	r2, r3

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
 8007a2a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8007a2e:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8007a32:	f8bc 2004 	ldrh.w	r2, [ip, #4]

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8007a36:	f647 41ff 	movw	r1, #31999	; 0x7cff

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8007a3a:	ea43 0402 	orr.w	r4, r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8007a3e:	f8bc 300e 	ldrh.w	r3, [ip, #14]
 8007a42:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8007a46:	ea05 0101 	and.w	r1, r5, r1

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8007a4e:	ea43 0501 	orr.w	r5, r3, r1
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8007a52:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8007a56:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8007a5a:	433b      	orrs	r3, r7

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a5c:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a5e:	8303      	strh	r3, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a60:	8404      	strh	r4, [r0, #32]
}
 8007a62:	b003      	add	sp, #12
 8007a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a66:	46c0      	nop			(mov r8, r8)
 8007a68:	40013400 	.word	0x40013400
 8007a6c:	40012c00 	.word	0x40012c00

08007a70 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8007a70:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007a72:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8007a74:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8007a78:	041b      	lsls	r3, r3, #16
 8007a7a:	0c1b      	lsrs	r3, r3, #16
 8007a7c:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8007a7e:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a80:	8882      	ldrh	r2, [r0, #4]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8007a82:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a86:	b295      	uxth	r5, r2
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a88:	8b02      	ldrh	r2, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8007a8a:	041b      	lsls	r3, r3, #16

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a8c:	b296      	uxth	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8007a8e:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8007a90:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8007a92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8007a96:	884a      	ldrh	r2, [r1, #2]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8007a98:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8007a9a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007a9e:	b29c      	uxth	r4, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8007aa0:	88cb      	ldrh	r3, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8007aa2:	880f      	ldrh	r7, [r1, #0]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8007aa4:	8703      	strh	r3, [r0, #56]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007aa6:	4b1e      	ldr	r3, [pc, #120]	(8007b20 <TIM_OC2Init+0xb0>)
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	(8007b24 <TIM_OC2Init+0xb4>)
 8007aaa:	4298      	cmp	r0, r3
 8007aac:	bf14      	ite	ne
 8007aae:	2300      	movne	r3, #0
 8007ab0:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007ab2:	b083      	sub	sp, #12
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007ab4:	4290      	cmp	r0, r2
 8007ab6:	bf08      	it	eq
 8007ab8:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007abc:	9001      	str	r0, [sp, #4]
 8007abe:	468c      	mov	ip, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007ac0:	b30b      	cbz	r3, 8007b06 <TIM_OC2Init+0x96>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8007ac2:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8007ac6:	f5a2 5232 	sub.w	r2, r2, #11392	; 0x2c80

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8007aca:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8007ace:	3a01      	subs	r2, #1
 8007ad0:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8007ad4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
 8007ad8:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8007adc:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8007ae0:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8007ae4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007ae8:	b29c      	uxth	r4, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8007aea:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
 8007aee:	f247 33ff 	movw	r3, #29695	; 0x73ff
 8007af2:	ea05 0303 	and.w	r3, r5, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8007af6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8007afa:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8007afe:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8007b00:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8007b04:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 8007b06:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8007b0a:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8007b0e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8007b12:	b29b      	uxth	r3, r3
    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b14:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b16:	8303      	strh	r3, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b18:	8404      	strh	r4, [r0, #32]
}
 8007b1a:	b003      	add	sp, #12
 8007b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1e:	46c0      	nop			(mov r8, r8)
 8007b20:	40013400 	.word	0x40013400
 8007b24:	40012c00 	.word	0x40012c00

08007b28 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8007b28:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	0c1b      	lsrs	r3, r3, #16
 8007b34:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	8882      	ldrh	r2, [r0, #4]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8007b3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3e:	b295      	uxth	r5, r2
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b40:	8b82      	ldrh	r2, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8007b42:	041b      	lsls	r3, r3, #16

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b44:	b296      	uxth	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8007b46:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8007b48:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8007b4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8007b4e:	884a      	ldrh	r2, [r1, #2]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8007b50:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8007b52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007b56:	b29c      	uxth	r4, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8007b58:	88cb      	ldrh	r3, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8007b5a:	880f      	ldrh	r7, [r1, #0]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8007b5c:	8783      	strh	r3, [r0, #60]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007b5e:	4b1d      	ldr	r3, [pc, #116]	(8007bd4 <TIM_OC3Init+0xac>)
 8007b60:	4a1d      	ldr	r2, [pc, #116]	(8007bd8 <TIM_OC3Init+0xb0>)
 8007b62:	4298      	cmp	r0, r3
 8007b64:	bf14      	ite	ne
 8007b66:	2300      	movne	r3, #0
 8007b68:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007b6a:	b083      	sub	sp, #12
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007b6c:	4290      	cmp	r0, r2
 8007b6e:	bf08      	it	eq
 8007b70:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007b74:	9001      	str	r0, [sp, #4]
 8007b76:	468c      	mov	ip, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007b78:	b30b      	cbz	r3, 8007bbe <TIM_OC3Init+0x96>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8007b7a:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8007b7e:	f5a2 5250 	sub.w	r2, r2, #13312	; 0x3400

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8007b82:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8007b86:	3a01      	subs	r2, #1
 8007b88:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8007b8c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 8007b90:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8007b94:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8007b98:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8007b9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007ba0:	b29c      	uxth	r4, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8007ba2:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 8007ba6:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8007baa:	ea05 0303 	and.w	r3, r5, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8007bae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8007bb2:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8007bb6:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8007bb8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007bbc:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8007bbe:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8007bc2:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8007bc6:	433b      	orrs	r3, r7
    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc8:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bca:	8383      	strh	r3, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bcc:	8404      	strh	r4, [r0, #32]
}
 8007bce:	b003      	add	sp, #12
 8007bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bd2:	46c0      	nop			(mov r8, r8)
 8007bd4:	40013400 	.word	0x40013400
 8007bd8:	40012c00 	.word	0x40012c00

08007bdc <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8007bdc:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007bde:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8007be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bea:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007bec:	b085      	sub	sp, #20

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	9302      	str	r3, [sp, #8]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf2:	8883      	ldrh	r3, [r0, #4]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8007bf4:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf6:	fa1f fc83 	uxth.w	ip, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bfa:	8b83      	ldrh	r3, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8007bfc:	880e      	ldrh	r6, [r1, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bfe:	b29d      	uxth	r5, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8007c00:	88cb      	ldrh	r3, [r1, #6]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8007c02:	890f      	ldrh	r7, [r1, #8]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8007c04:	f8a0 3040 	strh.w	r3, [r0, #64]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007c08:	4b17      	ldr	r3, [pc, #92]	(8007c68 <TIM_OC4Init+0x8c>)

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8007c0a:	9201      	str	r2, [sp, #4]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007c0c:	4a17      	ldr	r2, [pc, #92]	(8007c6c <TIM_OC4Init+0x90>)
 8007c0e:	4298      	cmp	r0, r3
 8007c10:	bf14      	ite	ne
 8007c12:	2300      	movne	r3, #0
 8007c14:	2301      	moveq	r3, #1
 8007c16:	4290      	cmp	r0, r2
 8007c18:	bf08      	it	eq
 8007c1a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007c1e:	9003      	str	r0, [sp, #12]
 8007c20:	460c      	mov	r4, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8007c22:	b13b      	cbz	r3, 8007c34 <TIM_OC4Init+0x58>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 8007c24:	ea4f 438c 	mov.w	r3, ip, lsl #18

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8007c28:	89a2      	ldrh	r2, [r4, #12]
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 8007c2a:	0c9b      	lsrs	r3, r3, #18

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8007c2c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007c30:	fa1f fc83 	uxth.w	ip, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 8007c34:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8007c38:	ea05 0303 	and.w	r3, r5, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8007c3c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8007c40:	b29b      	uxth	r3, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 8007c42:	9a02      	ldr	r2, [sp, #8]
    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c44:	f8a0 c004 	strh.w	ip, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8007c48:	8383      	strh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 8007c4a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8007c4e:	ea02 0303 	and.w	r3, r2, r3

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8007c52:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8007c56:	9a01      	ldr	r2, [sp, #4]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8007c58:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8007c5a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007c5e:	b29b      	uxth	r3, r3
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c60:	8403      	strh	r3, [r0, #32]
}
 8007c62:	b005      	add	sp, #20
 8007c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c66:	46c0      	nop			(mov r8, r8)
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40012c00 	.word	0x40012c00

08007c70 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8007c70:	880b      	ldrh	r3, [r1, #0]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8007c72:	b530      	push	{r4, r5, lr}
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8007c78:	bb43      	cbnz	r3, 8007ccc <TIM_ICInit+0x5c>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8007c7a:	8c23      	ldrh	r3, [r4, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007c7c:	8849      	ldrh	r1, [r1, #2]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8007c7e:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8007c82:	041b      	lsls	r3, r3, #16
 8007c84:	0c1b      	lsrs	r3, r3, #16
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007c86:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8007c8a:	8928      	ldrh	r0, [r5, #8]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8007c8c:	8423      	strh	r3, [r4, #32]

  tmpccmr1 = TIMx->CCMR1;
 8007c8e:	8b23      	ldrh	r3, [r4, #24]
  tmpccer = TIMx->CCER;
 8007c90:	8c22      	ldrh	r2, [r4, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007c92:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8007c9a:	f022 0202 	bic.w	r2, r2, #2	; 0x2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007c9e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8007ca2:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007ca4:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8007ca6:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007ca8:	f041 0101 	orr.w	r1, r1, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007cac:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007cb0:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cb2:	8323      	strh	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007cb4:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8007cb6:	8b23      	ldrh	r3, [r4, #24]
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007cb8:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8007cba:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8007cbe:	041b      	lsls	r3, r3, #16
 8007cc0:	0c1b      	lsrs	r3, r3, #16
 8007cc2:	8323      	strh	r3, [r4, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8007cc4:	8b23      	ldrh	r3, [r4, #24]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	e02e      	b.n	8007d2a <TIM_ICInit+0xba>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d12e      	bne.n	8007d2e <TIM_ICInit+0xbe>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8007cd0:	8c23      	ldrh	r3, [r4, #32]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007cd2:	f8b1 c002 	ldrh.w	ip, [r1, #2]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8007cd6:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	0c1b      	lsrs	r3, r3, #16
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8007cde:	8888      	ldrh	r0, [r1, #4]
 8007ce0:	8909      	ldrh	r1, [r1, #8]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8007ce2:	8423      	strh	r3, [r4, #32]

  tmpccmr1 = TIMx->CCMR1;
 8007ce4:	8b23      	ldrh	r3, [r4, #24]
  tmpccer = TIMx->CCER;
 8007ce6:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8007ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cec:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007cee:	f022 0220 	bic.w	r2, r2, #32	; 0x20
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8007cf2:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007cf4:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8007cf6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007cfa:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8007cfc:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007cfe:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8007d02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007d06:	b292      	uxth	r2, r2
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8007d08:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007d0a:	f042 0210 	orr.w	r2, r2, #16	; 0x10

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d0e:	8323      	strh	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8007d10:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8007d12:	8b23      	ldrh	r3, [r4, #24]
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007d14:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8007d16:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	0c1b      	lsrs	r3, r3, #16
 8007d1e:	8323      	strh	r3, [r4, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8007d20:	8b23      	ldrh	r3, [r4, #24]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	8323      	strh	r3, [r4, #24]
 8007d2c:	e055      	b.n	8007dda <TIM_ICInit+0x16a>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8007d34:	8888      	ldrh	r0, [r1, #4]
 8007d36:	8909      	ldrh	r1, [r1, #8]
 8007d38:	d125      	bne.n	8007d86 <TIM_ICInit+0x116>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8007d3a:	8c23      	ldrh	r3, [r4, #32]
 8007d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d40:	041b      	lsls	r3, r3, #16
 8007d42:	0c1b      	lsrs	r3, r3, #16
 8007d44:	8423      	strh	r3, [r4, #32]

  tmpccmr2 = TIMx->CCMR2;
 8007d46:	8ba3      	ldrh	r3, [r4, #28]
  tmpccer = TIMx->CCER;
 8007d48:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007d4a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8007d4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007d52:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8007d54:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007d56:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8007d58:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007d5a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8007d5e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007d62:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8007d64:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007d66:	4303      	orrs	r3, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 8007d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d6c:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer;
 8007d6e:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 8007d70:	8ba3      	ldrh	r3, [r4, #28]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007d72:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 8007d74:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8007d78:	041b      	lsls	r3, r3, #16
 8007d7a:	0c1b      	lsrs	r3, r3, #16
 8007d7c:	83a3      	strh	r3, [r4, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8007d7e:	8ba3      	ldrh	r3, [r4, #28]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4313      	orrs	r3, r2
 8007d84:	e028      	b.n	8007dd8 <TIM_ICInit+0x168>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8007d86:	8c23      	ldrh	r3, [r4, #32]
 8007d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d8c:	041b      	lsls	r3, r3, #16
 8007d8e:	0c1b      	lsrs	r3, r3, #16
 8007d90:	8423      	strh	r3, [r4, #32]

  tmpccmr2 = TIMx->CCMR2;
 8007d92:	8ba3      	ldrh	r3, [r4, #28]
  tmpccer = TIMx->CCER;
 8007d94:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8007d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9a:	051b      	lsls	r3, r3, #20

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8007d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8007da0:	0d1b      	lsrs	r3, r3, #20

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8007da2:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8007da4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8007da8:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8007daa:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8007dac:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8007db0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8007db4:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8007db6:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8007db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007dbc:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer ;
 8007dbe:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8007dc0:	8ba3      	ldrh	r3, [r4, #28]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007dc2:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8007dc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007dc8:	041b      	lsls	r3, r3, #16
 8007dca:	0c1b      	lsrs	r3, r3, #16
 8007dcc:	83a3      	strh	r3, [r4, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 8007dce:	8ba3      	ldrh	r3, [r4, #28]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	83a3      	strh	r3, [r4, #28]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8007dda:	bd30      	pop	{r4, r5, pc}

08007ddc <TIM_PWMIConfig>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8007ddc:	468c      	mov	ip, r1
 8007dde:	b5f0      	push	{r4, r5, r6, r7, lr}
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8007de0:	f8bc 3000 	ldrh.w	r3, [ip]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8007de4:	884c      	ldrh	r4, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8007de6:	8889      	ldrh	r1, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8007de8:	2c00      	cmp	r4, #0
 8007dea:	bf0c      	ite	eq
 8007dec:	2702      	moveq	r7, #2
 8007dee:	2700      	movne	r7, #0
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8007df0:	2901      	cmp	r1, #1
 8007df2:	bf0c      	ite	eq
 8007df4:	2602      	moveq	r6, #2
 8007df6:	2601      	movne	r6, #1
 8007df8:	f8bc 5008 	ldrh.w	r5, [ip, #8]
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d14b      	bne.n	8007e98 <TIM_PWMIConfig+0xbc>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8007e00:	8c03      	ldrh	r3, [r0, #32]
 8007e02:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8007e06:	041b      	lsls	r3, r3, #16
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8007e0c:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8007e0e:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007e10:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8007e14:	041b      	lsls	r3, r3, #16
 8007e16:	0c1b      	lsrs	r3, r3, #16
 8007e18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8007e1c:	f022 0202 	bic.w	r2, r2, #2	; 0x2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007e20:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8007e22:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007e24:	430b      	orrs	r3, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8007e26:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007e28:	f044 0101 	orr.w	r1, r4, #1	; 0x1
 8007e2c:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e2e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007e30:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8007e32:	8b03      	ldrh	r3, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007e34:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8007e38:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8007e3c:	041b      	lsls	r3, r3, #16
 8007e3e:	0c1b      	lsrs	r3, r3, #16
 8007e40:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8007e42:	8b03      	ldrh	r3, [r0, #24]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	430b      	orrs	r3, r1
 8007e48:	8303      	strh	r3, [r0, #24]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8007e4a:	8c03      	ldrh	r3, [r0, #32]
 8007e4c:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8007e50:	041b      	lsls	r3, r3, #16
 8007e52:	0c1b      	lsrs	r3, r3, #16
 8007e54:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8007e56:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8007e58:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5e:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007e60:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8007e64:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007e66:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8007e68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007e6c:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8007e6e:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007e70:	f042 0210 	orr.w	r2, r2, #16	; 0x10
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8007e74:	ea43 2306 	orr.w	r3, r3, r6, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007e78:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e7c:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007e7e:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8007e80:	8b03      	ldrh	r3, [r0, #24]
 8007e82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	0c1b      	lsrs	r3, r3, #16
 8007e8a:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8007e8c:	8b03      	ldrh	r3, [r0, #24]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	e04c      	b.n	8007f32 <TIM_PWMIConfig+0x156>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8007e98:	8c03      	ldrh	r3, [r0, #32]
 8007e9a:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	0c1b      	lsrs	r3, r3, #16
 8007ea2:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8007ea4:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8007ea6:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8007ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eac:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007eae:	f022 0220 	bic.w	r2, r2, #32	; 0x20
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8007eb2:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007eb4:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8007eb6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007eba:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8007ebc:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007ebe:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8007ec2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007ec6:	b292      	uxth	r2, r2
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8007ec8:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8007eca:	f042 0210 	orr.w	r2, r2, #16	; 0x10

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ece:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007ed0:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8007ed2:	8b03      	ldrh	r3, [r0, #24]
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8007ed4:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8007ed8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007edc:	041b      	lsls	r3, r3, #16
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8007ee2:	8b03      	ldrh	r3, [r0, #24]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	8303      	strh	r3, [r0, #24]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8007eee:	8c03      	ldrh	r3, [r0, #32]
 8007ef0:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	0c1b      	lsrs	r3, r3, #16
 8007ef8:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8007efa:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8007efc:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007efe:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8007f02:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007f04:	f022 0203 	bic.w	r2, r2, #3	; 0x3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007f08:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007f0a:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007f0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007f10:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007f12:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007f14:	f042 0201 	orr.w	r2, r2, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8007f18:	4333      	orrs	r3, r6

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8007f1a:	433a      	orrs	r2, r7

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f1c:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007f1e:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8007f20:	8b03      	ldrh	r3, [r0, #24]
 8007f22:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8007f2c:	8b03      	ldrh	r3, [r0, #24]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	430b      	orrs	r3, r1
 8007f32:	8303      	strh	r3, [r0, #24]
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8007f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f36:	46c0      	nop			(mov r8, r8)

08007f38 <TIM_BDTRConfig>:
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8007f38:	880a      	ldrh	r2, [r1, #0]
 8007f3a:	884b      	ldrh	r3, [r1, #2]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	888a      	ldrh	r2, [r1, #4]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	88ca      	ldrh	r2, [r1, #6]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	890a      	ldrh	r2, [r1, #8]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	894a      	ldrh	r2, [r1, #10]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	898a      	ldrh	r2, [r1, #12]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	f8a0 3044 	strh.w	r3, [r0, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;

}
 8007f58:	4770      	bx	lr
 8007f5a:	46c0      	nop			(mov r8, r8)

08007f5c <TIM_TimeBaseStructInit>:
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f60:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8007f62:	f04f 0300 	mov.w	r3, #0	; 0x0
 8007f66:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8007f68:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8007f6a:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	7203      	strb	r3, [r0, #8]
}
 8007f70:	4770      	bx	lr
 8007f72:	46c0      	nop			(mov r8, r8)

08007f74 <TIM_OCStructInit>:
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8007f74:	f04f 0300 	mov.w	r3, #0	; 0x0
 8007f78:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8007f7a:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8007f7c:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8007f7e:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8007f80:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8007f82:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8007f84:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8007f86:	81c3      	strh	r3, [r0, #14]
}
 8007f88:	4770      	bx	lr
 8007f8a:	46c0      	nop			(mov r8, r8)

08007f8c <TIM_ICStructInit>:
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8007f8c:	f04f 0300 	mov.w	r3, #0	; 0x0
 8007f90:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8007f92:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8007f94:	f04f 0301 	mov.w	r3, #1	; 0x1
 8007f98:	8083      	strh	r3, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8007f9a:	f04f 0300 	mov.w	r3, #0	; 0x0
 8007f9e:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8007fa0:	8103      	strh	r3, [r0, #8]
}
 8007fa2:	4770      	bx	lr

08007fa4 <TIM_BDTRStructInit>:
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8007fa4:	f04f 0300 	mov.w	r3, #0	; 0x0
 8007fa8:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8007faa:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8007fac:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8007fae:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8007fb0:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8007fb2:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8007fb4:	8183      	strh	r3, [r0, #12]
}
 8007fb6:	4770      	bx	lr

08007fb8 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007fb8:	b121      	cbz	r1, 8007fc4 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 8007fba:	8803      	ldrh	r3, [r0, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8007fc2:	e004      	b.n	8007fce <TIM_Cmd+0x16>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 8007fc4:	8803      	ldrh	r3, [r0, #0]
 8007fc6:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8007fca:	059b      	lsls	r3, r3, #22
 8007fcc:	0d9b      	lsrs	r3, r3, #22
 8007fce:	8003      	strh	r3, [r0, #0]
  }
}
 8007fd0:	4770      	bx	lr
 8007fd2:	46c0      	nop			(mov r8, r8)

08007fd4 <TIM_CtrlPWMOutputs>:
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007fd4:	b129      	cbz	r1, 8007fe2 <TIM_CtrlPWMOutputs+0xe>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 8007fd6:	f8b0 3044 	ldrh.w	r3, [r0, #68]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe0:	e003      	b.n	8007fea <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
 8007fe2:	f8b0 3044 	ldrh.w	r3, [r0, #68]
 8007fe6:	045b      	lsls	r3, r3, #17
 8007fe8:	0c5b      	lsrs	r3, r3, #17
 8007fea:	f8a0 3044 	strh.w	r3, [r0, #68]
  }  
}
 8007fee:	4770      	bx	lr

08007ff0 <TIM_ITConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007ff0:	b122      	cbz	r2, 8007ffc <TIM_ITConfig+0xc>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8007ff2:	8983      	ldrh	r3, [r0, #12]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ea41 0303 	orr.w	r3, r1, r3
 8007ffa:	e003      	b.n	8008004 <TIM_ITConfig+0x14>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
 8007ffc:	8983      	ldrh	r3, [r0, #12]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	ea23 0301 	bic.w	r3, r3, r1
 8008004:	8183      	strh	r3, [r0, #12]
  }
}
 8008006:	4770      	bx	lr

08008008 <TIM_GenerateEvent>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8008008:	8281      	strh	r1, [r0, #20]
}
 800800a:	4770      	bx	lr

0800800c <TIM_DMAConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800800c:	430a      	orrs	r2, r1
 800800e:	f8a0 2048 	strh.w	r2, [r0, #72]
}
 8008012:	4770      	bx	lr

08008014 <TIM_DMACmd>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008014:	b122      	cbz	r2, 8008020 <TIM_DMACmd+0xc>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8008016:	8983      	ldrh	r3, [r0, #12]
 8008018:	b29b      	uxth	r3, r3
 800801a:	ea41 0303 	orr.w	r3, r1, r3
 800801e:	e003      	b.n	8008028 <TIM_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 8008020:	8983      	ldrh	r3, [r0, #12]
 8008022:	b29b      	uxth	r3, r3
 8008024:	ea23 0301 	bic.w	r3, r3, r1
 8008028:	8183      	strh	r3, [r0, #12]
  }
}
 800802a:	4770      	bx	lr

0800802c <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
 800802c:	8903      	ldrh	r3, [r0, #8]
 800802e:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 8008032:	041b      	lsls	r3, r3, #16
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	8103      	strh	r3, [r0, #8]
}
 8008038:	4770      	bx	lr
 800803a:	46c0      	nop			(mov r8, r8)

0800803c <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800803c:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800803e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008042:	041b      	lsls	r3, r3, #16
 8008044:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8008046:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008048:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800804a:	8903      	ldrh	r3, [r0, #8]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f043 0307 	orr.w	r3, r3, #7	; 0x7
 8008052:	8103      	strh	r3, [r0, #8]
}
 8008054:	4770      	bx	lr
 8008056:	46c0      	nop			(mov r8, r8)

08008058 <TIM_TIxExternalClockConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 8008058:	b510      	push	{r4, lr}
 800805a:	460c      	mov	r4, r1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800805c:	2c60      	cmp	r4, #96
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 800805e:	4611      	mov	r1, r2
 8008060:	469c      	mov	ip, r3
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8008062:	d11a      	bne.n	800809a <TIM_TIxExternalClockConfig+0x42>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8008064:	8c03      	ldrh	r3, [r0, #32]
 8008066:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 800806a:	041b      	lsls	r3, r3, #16
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8008070:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8008072:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8008074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8008078:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 800807c:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800807e:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8008080:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8008082:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8008084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8008088:	f042 0210 	orr.w	r2, r2, #16	; 0x10
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 800808c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8008090:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8008094:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8008096:	b292      	uxth	r2, r2
 8008098:	e017      	b.n	80080ca <TIM_TIxExternalClockConfig+0x72>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 800809a:	8c03      	ldrh	r3, [r0, #32]
 800809c:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	0c1b      	lsrs	r3, r3, #16
 80080a4:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80080a6:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 80080a8:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80080aa:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80080ae:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80080b0:	f022 0203 	bic.w	r2, r2, #3	; 0x3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80080b4:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80080b6:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80080b8:	f043 0301 	orr.w	r3, r3, #1	; 0x1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80080bc:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80080be:	ea43 130c 	orr.w	r3, r3, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80080c2:	f042 0201 	orr.w	r2, r2, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80080c6:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80080c8:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ca:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80080cc:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080ce:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80080d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d4:	041b      	lsls	r3, r3, #16
 80080d6:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80080d8:	ea44 0303 	orr.w	r3, r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080dc:	8103      	strh	r3, [r0, #8]

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80080de:	8903      	ldrh	r3, [r0, #8]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f043 0307 	orr.w	r3, r3, #7	; 0x7
 80080e6:	8103      	strh	r3, [r0, #8]
}
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	46c0      	nop			(mov r8, r8)

080080ec <TIM_ETRClockMode1Config>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80080ec:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 80080f0:	fa5f fc8c 	uxtb.w	ip, ip
 80080f4:	ea41 010c 	orr.w	r1, r1, ip
 80080f8:	430a      	orrs	r2, r1
 80080fa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80080fe:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008100:	8102      	strh	r2, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008102:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8008104:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008108:	041b      	lsls	r3, r3, #16
 800810a:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
  tmpsmcr |= TIM_TS_ETRF;
 800810c:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008110:	8103      	strh	r3, [r0, #8]
}
 8008112:	4770      	bx	lr

08008114 <TIM_ETRClockMode2Config>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8008114:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 8008118:	fa5f fc8c 	uxtb.w	ip, ip
 800811c:	ea41 010c 	orr.w	r1, r1, ip
 8008120:	430a      	orrs	r2, r1
 8008122:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008126:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008128:	8102      	strh	r2, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
 800812a:	8903      	ldrh	r3, [r0, #8]
 800812c:	b29b      	uxth	r3, r3
 800812e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008132:	8103      	strh	r3, [r0, #8]
}
 8008134:	4770      	bx	lr
 8008136:	46c0      	nop			(mov r8, r8)

08008138 <TIM_ETRConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8008138:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 800813c:	fa5f fc8c 	uxtb.w	ip, ip
 8008140:	ea41 010c 	orr.w	r1, r1, ip
 8008144:	430a      	orrs	r2, r1
 8008146:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800814a:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800814c:	8102      	strh	r2, [r0, #8]
}
 800814e:	4770      	bx	lr

08008150 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8008150:	8501      	strh	r1, [r0, #40]

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8008152:	8282      	strh	r2, [r0, #20]
}
 8008154:	4770      	bx	lr
 8008156:	46c0      	nop			(mov r8, r8)

08008158 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8008158:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
 800815a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815e:	059b      	lsls	r3, r3, #22
 8008160:	0d9b      	lsrs	r3, r3, #22

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8008162:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8008164:	8001      	strh	r1, [r0, #0]
}
 8008166:	4770      	bx	lr

08008168 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008168:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8008172:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008174:	8101      	strh	r1, [r0, #8]
}
 8008176:	4770      	bx	lr

08008178 <TIM_EncoderInterfaceConfig>:
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008178:	f8b0 c008 	ldrh.w	ip, [r0, #8]
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
 800817c:	b530      	push	{r4, r5, lr}

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800817e:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008180:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8008182:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8008186:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 800818a:	f024 0403 	bic.w	r4, r4, #3	; 0x3
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 800818e:	042d      	lsls	r5, r5, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8008190:	f02c 0c07 	bic.w	ip, ip, #7	; 0x7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 8008194:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8008196:	0c2d      	lsrs	r5, r5, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 8008198:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 800819c:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 800819e:	432a      	orrs	r2, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 80081a0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 80081a4:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80081a8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
 80081ac:	ea41 010c 	orr.w	r1, r1, ip

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 80081b0:	f044 0401 	orr.w	r4, r4, #1	; 0x1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80081b4:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081b6:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80081b8:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ba:	8402      	strh	r2, [r0, #32]
}
 80081bc:	bd30      	pop	{r4, r5, pc}
 80081be:	46c0      	nop			(mov r8, r8)

080081c0 <TIM_ForcedOC1Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 80081c0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
 80081c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80081ca:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80081cc:	8301      	strh	r1, [r0, #24]
}
 80081ce:	4770      	bx	lr

080081d0 <TIM_ForcedOC2Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 80081d0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
 80081d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
 80081da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80081de:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80081e0:	8303      	strh	r3, [r0, #24]
}
 80081e2:	4770      	bx	lr

080081e4 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80081e4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
 80081e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80081ee:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80081f0:	8381      	strh	r1, [r0, #28]
}
 80081f2:	4770      	bx	lr

080081f4 <TIM_ForcedOC4Config>:
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80081f4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
 80081f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081fa:	041b      	lsls	r3, r3, #16
 80081fc:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
 80081fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008202:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008204:	8383      	strh	r3, [r0, #28]
}
 8008206:	4770      	bx	lr

08008208 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008208:	b121      	cbz	r1, 8008214 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 800820a:	8803      	ldrh	r3, [r0, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	e004      	b.n	800821e <TIM_ARRPreloadConfig+0x16>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
 8008214:	8803      	ldrh	r3, [r0, #0]
 8008216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800821a:	059b      	lsls	r3, r3, #22
 800821c:	0d9b      	lsrs	r3, r3, #22
 800821e:	8003      	strh	r3, [r0, #0]
  }
}
 8008220:	4770      	bx	lr
 8008222:	46c0      	nop			(mov r8, r8)

08008224 <TIM_SelectCOM>:
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008224:	b121      	cbz	r1, 8008230 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 8008226:	8883      	ldrh	r3, [r0, #4]
 8008228:	b29b      	uxth	r3, r3
 800822a:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 800822e:	e004      	b.n	800823a <TIM_SelectCOM+0x16>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
 8008230:	8883      	ldrh	r3, [r0, #4]
 8008232:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8008236:	041b      	lsls	r3, r3, #16
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	8083      	strh	r3, [r0, #4]
  }
}
 800823c:	4770      	bx	lr
 800823e:	46c0      	nop			(mov r8, r8)

08008240 <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008240:	b121      	cbz	r1, 800824c <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 8008242:	8883      	ldrh	r3, [r0, #4]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 800824a:	e004      	b.n	8008256 <TIM_SelectCCDMA+0x16>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
 800824c:	8883      	ldrh	r3, [r0, #4]
 800824e:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8008252:	041b      	lsls	r3, r3, #16
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	8083      	strh	r3, [r0, #4]
  }
}
 8008258:	4770      	bx	lr
 800825a:	46c0      	nop			(mov r8, r8)

0800825c <TIM_CCPreloadControl>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800825c:	b121      	cbz	r1, 8008268 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 800825e:	8883      	ldrh	r3, [r0, #4]
 8008260:	b29b      	uxth	r3, r3
 8008262:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8008266:	e004      	b.n	8008272 <TIM_CCPreloadControl+0x16>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
 8008268:	8883      	ldrh	r3, [r0, #4]
 800826a:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	0c1b      	lsrs	r3, r3, #16
 8008272:	8083      	strh	r3, [r0, #4]
  }
}
 8008274:	4770      	bx	lr
 8008276:	46c0      	nop			(mov r8, r8)

08008278 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8008278:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
 800827a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8008282:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008284:	8301      	strh	r1, [r0, #24]
}
 8008286:	4770      	bx	lr

08008288 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8008288:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
 800828a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800828e:	041b      	lsls	r3, r3, #16
 8008290:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
 8008292:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008296:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008298:	8303      	strh	r3, [r0, #24]
}
 800829a:	4770      	bx	lr

0800829c <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800829c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
 800829e:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80082a6:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80082a8:	8381      	strh	r1, [r0, #28]
}
 80082aa:	4770      	bx	lr

080082ac <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80082ac:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
 80082ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
 80082b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80082ba:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80082bc:	8383      	strh	r3, [r0, #28]
}
 80082be:	4770      	bx	lr

080082c0 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80082c0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
 80082c2:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80082ca:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80082cc:	8301      	strh	r1, [r0, #24]
}
 80082ce:	4770      	bx	lr

080082d0 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80082d0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
 80082d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082d6:	041b      	lsls	r3, r3, #16
 80082d8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
 80082da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80082de:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80082e0:	8303      	strh	r3, [r0, #24]
}
 80082e2:	4770      	bx	lr

080082e4 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80082e4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
 80082e6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80082ea:	041b      	lsls	r3, r3, #16
 80082ec:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80082ee:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80082f0:	8381      	strh	r1, [r0, #28]
}
 80082f2:	4770      	bx	lr

080082f4 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80082f4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
 80082f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
 80082fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008302:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8008304:	8383      	strh	r3, [r0, #28]
}
 8008306:	4770      	bx	lr

08008308 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8008308:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
 800830a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800830e:	041b      	lsls	r3, r3, #16
 8008310:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8008312:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008314:	8301      	strh	r1, [r0, #24]
}
 8008316:	4770      	bx	lr

08008318 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8008318:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
 800831a:	045b      	lsls	r3, r3, #17
 800831c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
 800831e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008322:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8008324:	8303      	strh	r3, [r0, #24]
}
 8008326:	4770      	bx	lr

08008328 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8008328:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
 800832a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8008332:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008334:	8381      	strh	r1, [r0, #28]
}
 8008336:	4770      	bx	lr

08008338 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8008338:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
 800833a:	045b      	lsls	r3, r3, #17
 800833c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
 800833e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008342:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8008344:	8383      	strh	r3, [r0, #28]
}
 8008346:	4770      	bx	lr

08008348 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008348:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
 800834a:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 800834e:	041b      	lsls	r3, r3, #16
 8008350:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8008352:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008354:	8401      	strh	r1, [r0, #32]
}
 8008356:	4770      	bx	lr

08008358 <TIM_OC1NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8008358:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
 800835a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 800835e:	041b      	lsls	r3, r3, #16
 8008360:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8008362:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008364:	8401      	strh	r1, [r0, #32]
}
 8008366:	4770      	bx	lr

08008368 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008368:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
 800836a:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 800836e:	041b      	lsls	r3, r3, #16
 8008370:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 4);
 8008372:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8008376:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8008378:	8403      	strh	r3, [r0, #32]
}
 800837a:	4770      	bx	lr

0800837c <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800837c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
 800837e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008382:	041b      	lsls	r3, r3, #16
 8008384:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
 8008386:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800838a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800838c:	8403      	strh	r3, [r0, #32]
}
 800838e:	4770      	bx	lr

08008390 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8008390:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
 8008392:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008396:	041b      	lsls	r3, r3, #16
 8008398:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 8);
 800839a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800839e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80083a0:	8403      	strh	r3, [r0, #32]
}
 80083a2:	4770      	bx	lr

080083a4 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80083a4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
 80083a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083aa:	041b      	lsls	r3, r3, #16
 80083ac:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
 80083ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80083b2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80083b4:	8403      	strh	r3, [r0, #32]
}
 80083b6:	4770      	bx	lr

080083b8 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80083b8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
 80083ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083be:	041b      	lsls	r3, r3, #16
 80083c0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 12);
 80083c2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80083c6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80083c8:	8403      	strh	r3, [r0, #32]
}
 80083ca:	4770      	bx	lr

080083cc <TIM_CCxCmd>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80083cc:	2301      	movs	r3, #1
 80083ce:	408b      	lsls	r3, r1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 80083d0:	408a      	lsls	r2, r1
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 80083d2:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 80083d6:	fa1f fc8c 	uxth.w	ip, ip
 80083da:	ea2c 0c03 	bic.w	ip, ip, r3
 80083de:	f8a0 c020 	strh.w	ip, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 80083e2:	8c03      	ldrh	r3, [r0, #32]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	b292      	uxth	r2, r2
 80083e8:	8402      	strh	r2, [r0, #32]
}
 80083ea:	4770      	bx	lr

080083ec <TIM_CCxNCmd>:
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 80083ec:	2304      	movs	r3, #4
 80083ee:	408b      	lsls	r3, r1

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 80083f0:	408a      	lsls	r2, r1
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 80083f2:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 80083f6:	fa1f fc8c 	uxth.w	ip, ip
 80083fa:	ea2c 0c03 	bic.w	ip, ip, r3
 80083fe:	f8a0 c020 	strh.w	ip, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 8008402:	8c03      	ldrh	r3, [r0, #32]
 8008404:	431a      	orrs	r2, r3
 8008406:	b292      	uxth	r2, r2
 8008408:	8402      	strh	r2, [r0, #32]
}
 800840a:	4770      	bx	lr

0800840c <TIM_SelectOCxM>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800840c:	2301      	movs	r3, #1
 800840e:	408b      	lsls	r3, r1
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8008410:	4694      	mov	ip, r2
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8008412:	8c02      	ldrh	r2, [r0, #32]
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8008414:	b082      	sub	sp, #8
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8008416:	b292      	uxth	r2, r2
 8008418:	ea22 0203 	bic.w	r2, r2, r3

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800841c:	2908      	cmp	r1, #8
 800841e:	bf14      	ite	ne
 8008420:	2300      	movne	r3, #0
 8008422:	2301      	moveq	r3, #1
 8008424:	2900      	cmp	r1, #0
 8008426:	bf08      	it	eq
 8008428:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 800842c:	9001      	str	r0, [sp, #4]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800842e:	8402      	strh	r2, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8008430:	b16b      	cbz	r3, 800844e <TIM_SelectOCxM+0x42>
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
 8008432:	f110 0218 	adds.w	r2, r0, #24	; 0x18
 8008436:	0849      	lsrs	r1, r1, #1
 8008438:	5850      	ldr	r0, [r2, r1]
 800843a:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800843e:	ea00 0303 	and.w	r3, r0, r3
 8008442:	5053      	str	r3, [r2, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
 8008444:	5853      	ldr	r3, [r2, r1]
 8008446:	ea43 030c 	orr.w	r3, r3, ip
 800844a:	5053      	str	r3, [r2, r1]
 800844c:	e010      	b.n	8008470 <TIM_SelectOCxM+0x64>

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 800844e:	9801      	ldr	r0, [sp, #4]
 8008450:	1f0a      	subs	r2, r1, #4
 8008452:	b292      	uxth	r2, r2
 8008454:	3018      	adds	r0, #24
 8008456:	0852      	lsrs	r2, r2, #1
 8008458:	5881      	ldr	r1, [r0, r2]
 800845a:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800845e:	ea01 0303 	and.w	r3, r1, r3
 8008462:	5083      	str	r3, [r0, r2]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 8008464:	5881      	ldr	r1, [r0, r2]
 8008466:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800846a:	b29b      	uxth	r3, r3
 800846c:	4319      	orrs	r1, r3
 800846e:	5081      	str	r1, [r0, r2]
  }
}
 8008470:	b002      	add	sp, #8
 8008472:	4770      	bx	lr

08008474 <TIM_UpdateDisableConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008474:	b121      	cbz	r1, 8008480 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 8008476:	8803      	ldrh	r3, [r0, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 800847e:	e004      	b.n	800848a <TIM_UpdateDisableConfig+0x16>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
 8008480:	8803      	ldrh	r3, [r0, #0]
 8008482:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8008486:	059b      	lsls	r3, r3, #22
 8008488:	0d9b      	lsrs	r3, r3, #22
 800848a:	8003      	strh	r3, [r0, #0]
  }
}
 800848c:	4770      	bx	lr
 800848e:	46c0      	nop			(mov r8, r8)

08008490 <TIM_UpdateRequestConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8008490:	b121      	cbz	r1, 800849c <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 8008492:	8803      	ldrh	r3, [r0, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 800849a:	e004      	b.n	80084a6 <TIM_UpdateRequestConfig+0x16>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
 800849c:	8803      	ldrh	r3, [r0, #0]
 800849e:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80084a2:	059b      	lsls	r3, r3, #22
 80084a4:	0d9b      	lsrs	r3, r3, #22
 80084a6:	8003      	strh	r3, [r0, #0]
  }
}
 80084a8:	4770      	bx	lr
 80084aa:	46c0      	nop			(mov r8, r8)

080084ac <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80084ac:	b121      	cbz	r1, 80084b8 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 80084ae:	8883      	ldrh	r3, [r0, #4]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b6:	e004      	b.n	80084c2 <TIM_SelectHallSensor+0x16>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
 80084b8:	8883      	ldrh	r3, [r0, #4]
 80084ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084be:	041b      	lsls	r3, r3, #16
 80084c0:	0c1b      	lsrs	r3, r3, #16
 80084c2:	8083      	strh	r3, [r0, #4]
  }
}
 80084c4:	4770      	bx	lr
 80084c6:	46c0      	nop			(mov r8, r8)

080084c8 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
 80084c8:	8803      	ldrh	r3, [r0, #0]
 80084ca:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80084ce:	059b      	lsls	r3, r3, #22
 80084d0:	0d9b      	lsrs	r3, r3, #22
 80084d2:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80084d4:	8803      	ldrh	r3, [r0, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	4319      	orrs	r1, r3
 80084da:	8001      	strh	r1, [r0, #0]
}
 80084dc:	4770      	bx	lr
 80084de:	46c0      	nop			(mov r8, r8)

080084e0 <TIM_SelectOutputTrigger>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
 80084e0:	8883      	ldrh	r3, [r0, #4]
 80084e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	0c1b      	lsrs	r3, r3, #16
 80084ea:	8083      	strh	r3, [r0, #4]

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80084ec:	8883      	ldrh	r3, [r0, #4]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	4319      	orrs	r1, r3
 80084f2:	8081      	strh	r1, [r0, #4]
}
 80084f4:	4770      	bx	lr
 80084f6:	46c0      	nop			(mov r8, r8)

080084f8 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
 80084f8:	8903      	ldrh	r3, [r0, #8]
 80084fa:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 80084fe:	041b      	lsls	r3, r3, #16
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8008504:	8903      	ldrh	r3, [r0, #8]
 8008506:	b29b      	uxth	r3, r3
 8008508:	4319      	orrs	r1, r3
 800850a:	8101      	strh	r1, [r0, #8]
}
 800850c:	4770      	bx	lr
 800850e:	46c0      	nop			(mov r8, r8)

08008510 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
 8008510:	8903      	ldrh	r3, [r0, #8]
 8008512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800851c:	8903      	ldrh	r3, [r0, #8]
 800851e:	b29b      	uxth	r3, r3
 8008520:	4319      	orrs	r1, r3
 8008522:	8101      	strh	r1, [r0, #8]
}
 8008524:	4770      	bx	lr
 8008526:	46c0      	nop			(mov r8, r8)

08008528 <TIM_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8008528:	8481      	strh	r1, [r0, #36]
}
 800852a:	4770      	bx	lr

0800852c <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800852c:	8581      	strh	r1, [r0, #44]
}
 800852e:	4770      	bx	lr

08008530 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8008530:	8681      	strh	r1, [r0, #52]
}
 8008532:	4770      	bx	lr

08008534 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8008534:	8701      	strh	r1, [r0, #56]
}
 8008536:	4770      	bx	lr

08008538 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8008538:	8781      	strh	r1, [r0, #60]
}
 800853a:	4770      	bx	lr

0800853c <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800853c:	f8a0 1040 	strh.w	r1, [r0, #64]
}
 8008540:	4770      	bx	lr
 8008542:	46c0      	nop			(mov r8, r8)

08008544 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8008544:	8b03      	ldrh	r3, [r0, #24]
 8008546:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 800854a:	041b      	lsls	r3, r3, #16
 800854c:	0c1b      	lsrs	r3, r3, #16
 800854e:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8008550:	8b03      	ldrh	r3, [r0, #24]
 8008552:	b29b      	uxth	r3, r3
 8008554:	4319      	orrs	r1, r3
 8008556:	8301      	strh	r1, [r0, #24]
}
 8008558:	4770      	bx	lr
 800855a:	46c0      	nop			(mov r8, r8)

0800855c <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 800855c:	8b03      	ldrh	r3, [r0, #24]
 800855e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008562:	041b      	lsls	r3, r3, #16
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 8008568:	8b03      	ldrh	r3, [r0, #24]
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008570:	b29b      	uxth	r3, r3
 8008572:	8303      	strh	r3, [r0, #24]
}
 8008574:	4770      	bx	lr
 8008576:	46c0      	nop			(mov r8, r8)

08008578 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 8008578:	8b83      	ldrh	r3, [r0, #28]
 800857a:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 800857e:	041b      	lsls	r3, r3, #16
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8008584:	8b83      	ldrh	r3, [r0, #28]
 8008586:	b29b      	uxth	r3, r3
 8008588:	4319      	orrs	r1, r3
 800858a:	8381      	strh	r1, [r0, #28]
}
 800858c:	4770      	bx	lr
 800858e:	46c0      	nop			(mov r8, r8)

08008590 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8008590:	8b83      	ldrh	r3, [r0, #28]
 8008592:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008596:	041b      	lsls	r3, r3, #16
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 800859c:	8b83      	ldrh	r3, [r0, #28]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	8383      	strh	r3, [r0, #28]
}
 80085a8:	4770      	bx	lr
 80085aa:	46c0      	nop			(mov r8, r8)

080085ac <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
 80085ac:	8803      	ldrh	r3, [r0, #0]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80085b2:	8803      	ldrh	r3, [r0, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4319      	orrs	r1, r3
 80085b8:	8001      	strh	r1, [r0, #0]
}
 80085ba:	4770      	bx	lr

080085bc <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80085bc:	8e80      	ldrh	r0, [r0, #52]
 80085be:	b280      	uxth	r0, r0
}
 80085c0:	4770      	bx	lr
 80085c2:	46c0      	nop			(mov r8, r8)

080085c4 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80085c4:	8f00      	ldrh	r0, [r0, #56]
 80085c6:	b280      	uxth	r0, r0
}
 80085c8:	4770      	bx	lr
 80085ca:	46c0      	nop			(mov r8, r8)

080085cc <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80085cc:	8f80      	ldrh	r0, [r0, #60]
 80085ce:	b280      	uxth	r0, r0
}
 80085d0:	4770      	bx	lr
 80085d2:	46c0      	nop			(mov r8, r8)

080085d4 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80085d4:	f8b0 0040 	ldrh.w	r0, [r0, #64]
 80085d8:	b280      	uxth	r0, r0
}
 80085da:	4770      	bx	lr

080085dc <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80085dc:	8c80      	ldrh	r0, [r0, #36]
 80085de:	b280      	uxth	r0, r0
}
 80085e0:	4770      	bx	lr
 80085e2:	46c0      	nop			(mov r8, r8)

080085e4 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80085e4:	8d00      	ldrh	r0, [r0, #40]
 80085e6:	b280      	uxth	r0, r0
}
 80085e8:	4770      	bx	lr
 80085ea:	46c0      	nop			(mov r8, r8)

080085ec <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
 80085ec:	8a03      	ldrh	r3, [r0, #16]
 80085ee:	4219      	tst	r1, r3
 80085f0:	bf0c      	ite	eq
 80085f2:	2000      	moveq	r0, #0
 80085f4:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80085f6:	4770      	bx	lr

080085f8 <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
 80085f8:	ea6f 0101 	mvn.w	r1, r1
 80085fc:	b289      	uxth	r1, r1
 80085fe:	8201      	strh	r1, [r0, #16]
}
 8008600:	4770      	bx	lr
 8008602:	46c0      	nop			(mov r8, r8)

08008604 <TIM_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8008604:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8008606:	8982      	ldrh	r2, [r0, #12]

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8008608:	4219      	tst	r1, r3
 800860a:	bf0c      	ite	eq
 800860c:	2000      	moveq	r0, #0
 800860e:	2001      	movne	r0, #1
 8008610:	4211      	tst	r1, r2
 8008612:	bf0c      	ite	eq
 8008614:	2000      	moveq	r0, #0
 8008616:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800861a:	4770      	bx	lr

0800861c <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 800861c:	ea6f 0101 	mvn.w	r1, r1
 8008620:	b289      	uxth	r1, r1
 8008622:	8201      	strh	r1, [r0, #16]
}
 8008624:	4770      	bx	lr
 8008626:	46c0      	nop			(mov r8, r8)

08008628 <TIM_DeInit>:
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8008628:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 800862a:	4b2f      	ldr	r3, [pc, #188]	(80086e8 <TIM_DeInit+0xc0>)
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800862c:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 800862e:	4298      	cmp	r0, r3
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8008630:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8008632:	d037      	beq.n	80086a4 <TIM_DeInit+0x7c>
 8008634:	d80b      	bhi.n	800864e <TIM_DeInit+0x26>
 8008636:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800863a:	4298      	cmp	r0, r3
 800863c:	d026      	beq.n	800868c <TIM_DeInit+0x64>
 800863e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008642:	4298      	cmp	r0, r3
 8008644:	d028      	beq.n	8008698 <TIM_DeInit+0x70>
 8008646:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800864a:	d14a      	bne.n	80086e2 <TIM_DeInit+0xba>
 800864c:	e018      	b.n	8008680 <TIM_DeInit+0x58>
 800864e:	4b27      	ldr	r3, [pc, #156]	(80086ec <TIM_DeInit+0xc4>)
 8008650:	4298      	cmp	r0, r3
 8008652:	d033      	beq.n	80086bc <TIM_DeInit+0x94>
 8008654:	d804      	bhi.n	8008660 <TIM_DeInit+0x38>
 8008656:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800865a:	4298      	cmp	r0, r3
 800865c:	d141      	bne.n	80086e2 <TIM_DeInit+0xba>
 800865e:	e027      	b.n	80086b0 <TIM_DeInit+0x88>
 8008660:	4b23      	ldr	r3, [pc, #140]	(80086f0 <TIM_DeInit+0xc8>)
 8008662:	4298      	cmp	r0, r3
 8008664:	d004      	beq.n	8008670 <TIM_DeInit+0x48>
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	4298      	cmp	r0, r3
 800866c:	d139      	bne.n	80086e2 <TIM_DeInit+0xba>
 800866e:	e02e      	b.n	80086ce <TIM_DeInit+0xa6>
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8008670:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008674:	2101      	movs	r1, #1
 8008676:	f7ff f8bf 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800867a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800867e:	e02d      	b.n	80086dc <TIM_DeInit+0xb4>
      break; 
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8008680:	2001      	movs	r0, #1
 8008682:	2101      	movs	r1, #1
 8008684:	f7ff f8c6 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8008688:	2001      	movs	r0, #1
 800868a:	e01c      	b.n	80086c6 <TIM_DeInit+0x9e>
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800868c:	2002      	movs	r0, #2
 800868e:	2101      	movs	r1, #1
 8008690:	f7ff f8c0 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8008694:	2002      	movs	r0, #2
 8008696:	e016      	b.n	80086c6 <TIM_DeInit+0x9e>
      break;
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8008698:	2004      	movs	r0, #4
 800869a:	2101      	movs	r1, #1
 800869c:	f7ff f8ba 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80086a0:	2004      	movs	r0, #4
 80086a2:	e010      	b.n	80086c6 <TIM_DeInit+0x9e>
      break;
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80086a4:	2008      	movs	r0, #8
 80086a6:	2101      	movs	r1, #1
 80086a8:	f7ff f8b4 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80086ac:	2008      	movs	r0, #8
 80086ae:	e00a      	b.n	80086c6 <TIM_DeInit+0x9e>
      break;
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80086b0:	2010      	movs	r0, #16
 80086b2:	2101      	movs	r1, #1
 80086b4:	f7ff f8ae 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80086b8:	2010      	movs	r0, #16
 80086ba:	e004      	b.n	80086c6 <TIM_DeInit+0x9e>
      break;
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80086bc:	2020      	movs	r0, #32
 80086be:	2101      	movs	r1, #1
 80086c0:	f7ff f8a8 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80086c4:	2020      	movs	r0, #32
 80086c6:	2100      	movs	r1, #0
 80086c8:	f7ff f8a4 	bl	8007814 <RCC_APB1PeriphResetCmd>
 80086cc:	e009      	b.n	80086e2 <TIM_DeInit+0xba>
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80086ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80086d2:	2101      	movs	r1, #1
 80086d4:	f7ff f890 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 80086d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80086dc:	2100      	movs	r1, #0
 80086de:	f7ff f88b 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      break; 
      
    default:
      break;
  }
}
 80086e2:	b003      	add	sp, #12
 80086e4:	bd00      	pop	{pc}
 80086e6:	46c0      	nop			(mov r8, r8)
 80086e8:	40000c00 	.word	0x40000c00
 80086ec:	40001400 	.word	0x40001400
 80086f0:	40012c00 	.word	0x40012c00

080086f4 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80086f4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80086f8:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80086fa:	f04f 0300 	mov.w	r3, #0	; 0x0
 80086fe:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8008700:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8008702:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8008704:	f04f 030c 	mov.w	r3, #12	; 0xc
 8008708:	8143      	strh	r3, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800870a:	f04f 0300 	mov.w	r3, #0	; 0x0
 800870e:	8183      	strh	r3, [r0, #12]
}
 8008710:	4770      	bx	lr
 8008712:	46c0      	nop			(mov r8, r8)

08008714 <USART_ClockInit>:
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8008714:	f8b1 c000 	ldrh.w	ip, [r1]
 8008718:	884b      	ldrh	r3, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800871a:	8a02      	ldrh	r2, [r0, #16]
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800871c:	ea43 030c 	orr.w	r3, r3, ip
 8008720:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8008724:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8008726:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800872a:	ea43 030c 	orr.w	r3, r3, ip
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 800872e:	0412      	lsls	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8008730:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8008732:	0c12      	lsrs	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8008734:	b29b      	uxth	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	8203      	strh	r3, [r0, #16]
}
 800873a:	4770      	bx	lr

0800873c <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800873c:	f04f 0300 	mov.w	r3, #0	; 0x0
 8008740:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8008742:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8008744:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8008746:	80c3      	strh	r3, [r0, #6]
}
 8008748:	4770      	bx	lr
 800874a:	46c0      	nop			(mov r8, r8)

0800874c <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800874c:	b121      	cbz	r1, 8008758 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800874e:	8983      	ldrh	r3, [r0, #12]
 8008750:	b29b      	uxth	r3, r3
 8008752:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008756:	e004      	b.n	8008762 <USART_Cmd+0x16>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8008758:	8983      	ldrh	r3, [r0, #12]
 800875a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	0c1b      	lsrs	r3, r3, #16
 8008762:	8183      	strh	r3, [r0, #12]
  }
}
 8008764:	4770      	bx	lr
 8008766:	46c0      	nop			(mov r8, r8)

08008768 <USART_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8008768:	b2cb      	uxtb	r3, r1
 800876a:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 800876e:	f001 011f 	and.w	r1, r1, #31	; 0x1f
 8008772:	2301      	movs	r3, #1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8008774:	b082      	sub	sp, #8
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8008776:	fa13 f101 	lsls.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800877a:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 800877e:	9001      	str	r0, [sp, #4]
  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8008780:	d101      	bne.n	8008786 <USART_ITConfig+0x1e>
  {
    usartxbase += 0x0C;
 8008782:	300c      	adds	r0, #12
 8008784:	e005      	b.n	8008792 <USART_ITConfig+0x2a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8008786:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
 800878a:	d101      	bne.n	8008790 <USART_ITConfig+0x28>
  {
    usartxbase += 0x10;
 800878c:	3010      	adds	r0, #16
 800878e:	e000      	b.n	8008792 <USART_ITConfig+0x2a>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8008790:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8008792:	b112      	cbz	r2, 800879a <USART_ITConfig+0x32>
  {
    *(vu32*)usartxbase  |= itmask;
 8008794:	6803      	ldr	r3, [r0, #0]
 8008796:	430b      	orrs	r3, r1
 8008798:	e002      	b.n	80087a0 <USART_ITConfig+0x38>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 800879a:	6803      	ldr	r3, [r0, #0]
 800879c:	ea23 0301 	bic.w	r3, r3, r1
 80087a0:	6003      	str	r3, [r0, #0]
  }
}
 80087a2:	b002      	add	sp, #8
 80087a4:	4770      	bx	lr
 80087a6:	46c0      	nop			(mov r8, r8)

080087a8 <USART_DMACmd>:
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80087a8:	b122      	cbz	r2, 80087b4 <USART_DMACmd+0xc>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80087aa:	8a83      	ldrh	r3, [r0, #20]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ea41 0303 	orr.w	r3, r1, r3
 80087b2:	e003      	b.n	80087bc <USART_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 80087b4:	8a83      	ldrh	r3, [r0, #20]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea23 0301 	bic.w	r3, r3, r1
 80087bc:	8283      	strh	r3, [r0, #20]
  }
}
 80087be:	4770      	bx	lr

080087c0 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 80087c0:	8a03      	ldrh	r3, [r0, #16]
 80087c2:	f023 030f 	bic.w	r3, r3, #15	; 0xf
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	0c1b      	lsrs	r3, r3, #16
 80087ca:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80087cc:	8a03      	ldrh	r3, [r0, #16]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	430b      	orrs	r3, r1
 80087d2:	8203      	strh	r3, [r0, #16]
}
 80087d4:	4770      	bx	lr
 80087d6:	46c0      	nop			(mov r8, r8)

080087d8 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 80087d8:	8983      	ldrh	r3, [r0, #12]
 80087da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	0c1b      	lsrs	r3, r3, #16
 80087e2:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80087e4:	8983      	ldrh	r3, [r0, #12]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4319      	orrs	r1, r3
 80087ea:	8181      	strh	r1, [r0, #12]
}
 80087ec:	4770      	bx	lr
 80087ee:	46c0      	nop			(mov r8, r8)

080087f0 <USART_ReceiverWakeUpCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80087f0:	b121      	cbz	r1, 80087fc <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 80087f2:	8983      	ldrh	r3, [r0, #12]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80087fa:	e004      	b.n	8008806 <USART_ReceiverWakeUpCmd+0x16>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 80087fc:	8983      	ldrh	r3, [r0, #12]
 80087fe:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8008802:	041b      	lsls	r3, r3, #16
 8008804:	0c1b      	lsrs	r3, r3, #16
 8008806:	8183      	strh	r3, [r0, #12]
  }
}
 8008808:	4770      	bx	lr
 800880a:	46c0      	nop			(mov r8, r8)

0800880c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 800880c:	8a03      	ldrh	r3, [r0, #16]
 800880e:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8008812:	041b      	lsls	r3, r3, #16
 8008814:	0c1b      	lsrs	r3, r3, #16
 8008816:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8008818:	8a03      	ldrh	r3, [r0, #16]
 800881a:	b29b      	uxth	r3, r3
 800881c:	4319      	orrs	r1, r3
 800881e:	8201      	strh	r1, [r0, #16]
}
 8008820:	4770      	bx	lr
 8008822:	46c0      	nop			(mov r8, r8)

08008824 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008824:	b121      	cbz	r1, 8008830 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8008826:	8a03      	ldrh	r3, [r0, #16]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800882e:	e004      	b.n	800883a <USART_LINCmd+0x16>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8008830:	8a03      	ldrh	r3, [r0, #16]
 8008832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008836:	041b      	lsls	r3, r3, #16
 8008838:	0c1b      	lsrs	r3, r3, #16
 800883a:	8203      	strh	r3, [r0, #16]
  }
}
 800883c:	4770      	bx	lr
 800883e:	46c0      	nop			(mov r8, r8)

08008840 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8008840:	05c9      	lsls	r1, r1, #23
 8008842:	0dc9      	lsrs	r1, r1, #23
 8008844:	8081      	strh	r1, [r0, #4]
}
 8008846:	4770      	bx	lr

08008848 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8008848:	8880      	ldrh	r0, [r0, #4]
 800884a:	05c0      	lsls	r0, r0, #23
 800884c:	0dc0      	lsrs	r0, r0, #23
}
 800884e:	4770      	bx	lr

08008850 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8008850:	8983      	ldrh	r3, [r0, #12]
 8008852:	b29b      	uxth	r3, r3
 8008854:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8008858:	8183      	strh	r3, [r0, #12]
}
 800885a:	4770      	bx	lr

0800885c <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 800885c:	8b03      	ldrh	r3, [r0, #24]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 8008862:	8b03      	ldrh	r3, [r0, #24]
 8008864:	b29b      	uxth	r3, r3
 8008866:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800886a:	8303      	strh	r3, [r0, #24]
}
 800886c:	4770      	bx	lr
 800886e:	46c0      	nop			(mov r8, r8)

08008870 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8008870:	8b03      	ldrh	r3, [r0, #24]
 8008872:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008876:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8008878:	8b03      	ldrh	r3, [r0, #24]
 800887a:	b29b      	uxth	r3, r3
 800887c:	430b      	orrs	r3, r1
 800887e:	8303      	strh	r3, [r0, #24]
}
 8008880:	4770      	bx	lr
 8008882:	46c0      	nop			(mov r8, r8)

08008884 <USART_SmartCardCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008884:	b121      	cbz	r1, 8008890 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8008886:	8a83      	ldrh	r3, [r0, #20]
 8008888:	b29b      	uxth	r3, r3
 800888a:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 800888e:	e004      	b.n	800889a <USART_SmartCardCmd+0x16>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8008890:	8a83      	ldrh	r3, [r0, #20]
 8008892:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8008896:	041b      	lsls	r3, r3, #16
 8008898:	0c1b      	lsrs	r3, r3, #16
 800889a:	8283      	strh	r3, [r0, #20]
  }
}
 800889c:	4770      	bx	lr
 800889e:	46c0      	nop			(mov r8, r8)

080088a0 <USART_SmartCardNACKCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80088a0:	b121      	cbz	r1, 80088ac <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80088a2:	8a83      	ldrh	r3, [r0, #20]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80088aa:	e004      	b.n	80088b6 <USART_SmartCardNACKCmd+0x16>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80088ac:	8a83      	ldrh	r3, [r0, #20]
 80088ae:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80088b2:	041b      	lsls	r3, r3, #16
 80088b4:	0c1b      	lsrs	r3, r3, #16
 80088b6:	8283      	strh	r3, [r0, #20]
  }
}
 80088b8:	4770      	bx	lr
 80088ba:	46c0      	nop			(mov r8, r8)

080088bc <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80088bc:	b121      	cbz	r1, 80088c8 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80088be:	8a83      	ldrh	r3, [r0, #20]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 80088c6:	e004      	b.n	80088d2 <USART_HalfDuplexCmd+0x16>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 80088c8:	8a83      	ldrh	r3, [r0, #20]
 80088ca:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80088ce:	041b      	lsls	r3, r3, #16
 80088d0:	0c1b      	lsrs	r3, r3, #16
 80088d2:	8283      	strh	r3, [r0, #20]
  }
}
 80088d4:	4770      	bx	lr
 80088d6:	46c0      	nop			(mov r8, r8)

080088d8 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 80088d8:	8a83      	ldrh	r3, [r0, #20]
 80088da:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80088de:	041b      	lsls	r3, r3, #16
 80088e0:	0c1b      	lsrs	r3, r3, #16
 80088e2:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80088e4:	8a83      	ldrh	r3, [r0, #20]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	4319      	orrs	r1, r3
 80088ea:	8281      	strh	r1, [r0, #20]
}
 80088ec:	4770      	bx	lr
 80088ee:	46c0      	nop			(mov r8, r8)

080088f0 <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80088f0:	b121      	cbz	r1, 80088fc <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 80088f2:	8a83      	ldrh	r3, [r0, #20]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80088fa:	e004      	b.n	8008906 <USART_IrDACmd+0x16>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 80088fc:	8a83      	ldrh	r3, [r0, #20]
 80088fe:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	0c1b      	lsrs	r3, r3, #16
 8008906:	8283      	strh	r3, [r0, #20]
  }
}
 8008908:	4770      	bx	lr
 800890a:	46c0      	nop			(mov r8, r8)

0800890c <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 800890c:	8803      	ldrh	r3, [r0, #0]
 800890e:	4219      	tst	r1, r3
 8008910:	bf0c      	ite	eq
 8008912:	2000      	moveq	r0, #0
 8008914:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8008916:	4770      	bx	lr

08008918 <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8008918:	ea6f 0101 	mvn.w	r1, r1
 800891c:	b289      	uxth	r1, r1
 800891e:	8001      	strh	r1, [r0, #0]
}
 8008920:	4770      	bx	lr
 8008922:	46c0      	nop			(mov r8, r8)

08008924 <USART_GetITStatus>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8008924:	b2cb      	uxtb	r3, r1
 8008926:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 800892a:	f001 021f 	and.w	r2, r1, #31	; 0x1f
 800892e:	2301      	movs	r3, #1
 8008930:	fa13 f202 	lsls.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8008934:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
  {
    itmask &= USARTx->CR1;
 8008938:	bf08      	it	eq
 800893a:	8983      	ldrheq	r3, [r0, #12]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800893c:	d004      	beq.n	8008948 <USART_GetITStatus+0x24>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800893e:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
  {
    itmask &= USARTx->CR2;
 8008942:	bf0c      	ite	eq
 8008944:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8008946:	8a83      	ldrhne	r3, [r0, #20]
 8008948:	b29b      	uxth	r3, r3
 800894a:	ea02 0c03 	and.w	ip, r2, r3
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 800894e:	0a0b      	lsrs	r3, r1, #8
 8008950:	2201      	movs	r2, #1
 8008952:	409a      	lsls	r2, r3
  bitpos &= USARTx->SR;
 8008954:	8803      	ldrh	r3, [r0, #0]
 8008956:	b29b      	uxth	r3, r3

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8008958:	421a      	tst	r2, r3
 800895a:	bf0c      	ite	eq
 800895c:	2000      	moveq	r0, #0
 800895e:	2001      	movne	r0, #1
 8008960:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
 8008964:	bf0c      	ite	eq
 8008966:	2000      	moveq	r0, #0
 8008968:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 800896c:	4770      	bx	lr
 800896e:	46c0      	nop			(mov r8, r8)

08008970 <USART_ClearITPendingBit>:
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
  USARTx->SR = (u16)~itmask;
 8008970:	0a09      	lsrs	r1, r1, #8
 8008972:	2301      	movs	r3, #1
 8008974:	408b      	lsls	r3, r1
 8008976:	ea6f 0303 	mvn.w	r3, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	8003      	strh	r3, [r0, #0]
}
 800897e:	4770      	bx	lr

08008980 <USART_Init>:
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8008980:	8a03      	ldrh	r3, [r0, #16]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8008982:	88ca      	ldrh	r2, [r1, #6]
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8008984:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008988:	041b      	lsls	r3, r3, #16
 800898a:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800898c:	4313      	orrs	r3, r2
 800898e:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8008990:	8982      	ldrh	r2, [r0, #12]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8008992:	b570      	push	{r4, r5, r6, lr}
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8008994:	890b      	ldrh	r3, [r1, #8]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8008996:	460e      	mov	r6, r1
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8008998:	8889      	ldrh	r1, [r1, #4]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800899a:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 800899e:	430b      	orrs	r3, r1
 80089a0:	8971      	ldrh	r1, [r6, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80089a2:	f022 020c 	bic.w	r2, r2, #12	; 0xc
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80089a6:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80089a8:	0412      	lsls	r2, r2, #16
 80089aa:	0c12      	lsrs	r2, r2, #16
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	4313      	orrs	r3, r2
 80089b0:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80089b2:	8a83      	ldrh	r3, [r0, #20]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80089b4:	89b2      	ldrh	r2, [r6, #12]
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80089b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ba:	041b      	lsls	r3, r3, #16
 80089bc:	0c1b      	lsrs	r3, r3, #16
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80089be:	b088      	sub	sp, #32
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80089c0:	4313      	orrs	r3, r2
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80089c2:	4605      	mov	r5, r0
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80089c4:	8283      	strh	r3, [r0, #20]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80089c6:	9001      	str	r0, [sp, #4]
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  /* The hardware flow control is available only for USART1, USART2 and USART3 */          
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);
 80089c8:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80089ca:	a803      	add	r0, sp, #12
 80089cc:	f7fe fe8e 	bl	80076ec <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80089d0:	4b10      	ldr	r3, [pc, #64]	(8008a14 <USART_Init+0x94>)
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 80089d2:	4811      	ldr	r0, [pc, #68]	(8008a18 <USART_Init+0x98>)
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 80089d4:	429d      	cmp	r5, r3
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80089d6:	bf0c      	ite	eq
 80089d8:	9b06      	ldreq	r3, [sp, #24]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80089da:	9b05      	ldrne	r3, [sp, #20]
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 80089dc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80089e0:	6833      	ldr	r3, [r6, #0]
 80089e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	fbb1 f1f3 	udiv	r1, r1, r3
  tmpreg = (integerdivider / 0x64) << 0x04;
 80089ec:	fba1 2300 	umull	r2, r3, r1, r0

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 80089f0:	2264      	movs	r2, #100
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 80089f2:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 80089f6:	fb0c 1212 	mls	r2, ip, r2, r1
 80089fa:	0112      	lsls	r2, r2, #4
 80089fc:	3232      	adds	r2, #50
 80089fe:	fba2 2300 	umull	r2, r3, r2, r0
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	f003 030f 	and.w	r3, r3, #15	; 0xf

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8008a08:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	812b      	strh	r3, [r5, #8]
}
 8008a10:	b008      	add	sp, #32
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	40013800 	.word	0x40013800
 8008a18:	51eb851f 	.word	0x51eb851f

08008a1c <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8008a1c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8008a1e:	4b22      	ldr	r3, [pc, #136]	(8008aa8 <USART_DeInit+0x8c>)
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8008a20:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8008a22:	4298      	cmp	r0, r3
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8008a24:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8008a26:	d02b      	beq.n	8008a80 <USART_DeInit+0x64>
 8008a28:	d808      	bhi.n	8008a3c <USART_DeInit+0x20>
 8008a2a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008a2e:	4298      	cmp	r0, r3
 8008a30:	d016      	beq.n	8008a60 <USART_DeInit+0x44>
 8008a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a36:	4298      	cmp	r0, r3
 8008a38:	d134      	bne.n	8008aa4 <USART_DeInit+0x88>
 8008a3a:	e019      	b.n	8008a70 <USART_DeInit+0x54>
 8008a3c:	4b1b      	ldr	r3, [pc, #108]	(8008aac <USART_DeInit+0x90>)
 8008a3e:	4298      	cmp	r0, r3
 8008a40:	d026      	beq.n	8008a90 <USART_DeInit+0x74>
 8008a42:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8008a46:	4298      	cmp	r0, r3
 8008a48:	d12c      	bne.n	8008aa4 <USART_DeInit+0x88>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008a50:	f7fe fed2 	bl	80077f8 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8008a54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008a58:	2100      	movs	r1, #0
 8008a5a:	f7fe fecd 	bl	80077f8 <RCC_APB2PeriphResetCmd>
 8008a5e:	e021      	b.n	8008aa4 <USART_DeInit+0x88>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8008a60:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008a64:	2101      	movs	r1, #1
 8008a66:	f7fe fed5 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8008a6a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008a6e:	e016      	b.n	8008a9e <USART_DeInit+0x82>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8008a70:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008a74:	2101      	movs	r1, #1
 8008a76:	f7fe fecd 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8008a7a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008a7e:	e00e      	b.n	8008a9e <USART_DeInit+0x82>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8008a80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008a84:	2101      	movs	r1, #1
 8008a86:	f7fe fec5 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8008a8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008a8e:	e006      	b.n	8008a9e <USART_DeInit+0x82>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8008a90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008a94:	2101      	movs	r1, #1
 8008a96:	f7fe febd 	bl	8007814 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8008a9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f7fe feb8 	bl	8007814 <RCC_APB1PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8008aa4:	b003      	add	sp, #12
 8008aa6:	bd00      	pop	{pc}
 8008aa8:	40004c00 	.word	0x40004c00
 8008aac:	40005000 	.word	0x40005000

08008ab0 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8008ab0:	bf30      	wfi
    BX r14
 8008ab2:	4770      	bx	lr

08008ab4 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8008ab4:	bf20      	wfe
    BX r14
 8008ab6:	4770      	bx	lr

08008ab8 <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8008ab8:	bf40      	sev
    BX r14
 8008aba:	4770      	bx	lr

08008abc <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8008abc:	f3bf 8f6f 	isb	sy
    BX r14
 8008ac0:	4770      	bx	lr

08008ac2 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8008ac2:	f3bf 8f4f 	dsb	sy
    BX r14
 8008ac6:	4770      	bx	lr

08008ac8 <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8008ac8:	f3bf 8f5f 	dmb	sy
    BX r14
 8008acc:	4770      	bx	lr

08008ace <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8008ace:	df01      	svc	1
    BX r14
 8008ad0:	4770      	bx	lr

08008ad2 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8008ad2:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8008ad6:	4770      	bx	lr

08008ad8 <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8008ad8:	f380 8814 	msr	CONTROL, r0
  ISB
 8008adc:	f3bf 8f6f 	isb	sy
  BX r14
 8008ae0:	4770      	bx	lr

08008ae2 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8008ae2:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8008ae6:	4770      	bx	lr

08008ae8 <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8008ae8:	f380 8809 	msr	PSP, r0
    BX r14
 8008aec:	4770      	bx	lr

08008aee <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8008aee:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8008af2:	4770      	bx	lr

08008af4 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8008af4:	f380 8808 	msr	MSP, r0
    BX r14
 8008af8:	4770      	bx	lr

08008afa <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8008afa:	b672      	cpsid	i
  BX r14
 8008afc:	4770      	bx	lr

08008afe <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8008afe:	b662      	cpsie	i
  BX r14
 8008b00:	4770      	bx	lr

08008b02 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8008b02:	b671      	cpsid	f
  BX r14
 8008b04:	4770      	bx	lr

08008b06 <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8008b06:	b661      	cpsie	f
  BX r14
 8008b08:	4770      	bx	lr

08008b0a <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8008b0a:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8008b0e:	4770      	bx	lr

08008b10 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8008b10:	f3ef 8012 	mrs	r0, BASEPRI_MASK
  BX r14
 8008b14:	4770      	bx	lr

08008b16 <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8008b16:	ba40      	rev16	r0, r0
  BX r14
 8008b18:	4770      	bx	lr

08008b1a <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8008b1a:	ba00      	rev	r0, r0
  BX r14
 8008b1c:	4770      	bx	lr
	...

08008b20 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8008b20:	f02d 0107 	bic.w	r1, sp, #7	; 0x7
 8008b24:	4668      	mov	r0, sp
 8008b26:	468d      	mov	sp, r1
 8008b28:	b501      	push	{r0, lr}
 8008b2a:	2200      	movs	r2, #0

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8008b2c:	490c      	ldr	r1, [pc, #48]	(8008b60 <Reset_Handler+0x40>)
 8008b2e:	f8df c034 	ldr.w	ip, [pc, #52]	; 8008b64 <Reset_Handler+0x44>
    {
        *(pulDest++) = *(pulSrc++);
 8008b32:	480d      	ldr	r0, [pc, #52]	(8008b68 <Reset_Handler+0x48>)
 8008b34:	e002      	b.n	8008b3c <Reset_Handler+0x1c>
 8008b36:	5883      	ldr	r3, [r0, r2]
 8008b38:	508b      	str	r3, [r1, r2]
 8008b3a:	3204      	adds	r2, #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8008b3c:	eb01 0302 	add.w	r3, r1, r2
 8008b40:	4563      	cmp	r3, ip
 8008b42:	d3f8      	bcc.n	8008b36 <Reset_Handler+0x16>
 8008b44:	4b09      	ldr	r3, [pc, #36]	(8008b6c <Reset_Handler+0x4c>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8008b46:	490a      	ldr	r1, [pc, #40]	(8008b70 <Reset_Handler+0x50>)
    {
        *(pulDest++) = 0;
 8008b48:	2200      	movs	r2, #0
 8008b4a:	e001      	b.n	8008b50 <Reset_Handler+0x30>
 8008b4c:	f843 2b04 	str.w	r2, [r3], #4
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8008b50:	428b      	cmp	r3, r1
 8008b52:	d3fb      	bcc.n	8008b4c <Reset_Handler+0x2c>
    }

    //
    // Call the application's entry point.
    //
    main();
 8008b54:	f7fa fe0c 	bl	8003770 <main>
}
 8008b58:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8008b5c:	4685      	mov	sp, r0
 8008b5e:	4770      	bx	lr
 8008b60:	20000000 	.word	0x20000000
 8008b64:	2000006c 	.word	0x2000006c
 8008b68:	08008b88 	.word	0x08008b88
 8008b6c:	2000006c 	.word	0x2000006c
 8008b70:	20000270 	.word	0x20000270

08008b74 <APBAHBPrescTable>:
 8008b74:	00000000 	.word	0x00000000
 8008b78:	04030201 	.word	0x04030201
 8008b7c:	04030201 	.word	0x04030201
 8008b80:	09080706 	.word	0x09080706

08008b84 <ADCPrescTable>:
 8008b84:	08060402 	.word	0x08060402

Disassembly of section .data:

20000000 <Baudrate_DXL>:
20000000:	000f4240 	.word	0x000f4240

20000004 <Baudrate_PC>:
20000004:	0000e100 	.word	0x0000e100

20000008 <CCR1_Val>:
20000008:	00000064 	.word	0x00000064

2000000c <GoalPos1>:
2000000c:	0000014e 	.word	0x0000014e

20000010 <GoalPos2>:
20000010:	000002b2 	.word	0x000002b2

20000014 <GoalPos3>:
20000014:	0000012a 	.word	0x0000012a

20000018 <GoalPos4>:
20000018:	000002d4 	.word	0x000002d4

2000001c <GoalPos5>:
2000001c:	0000019c 	.word	0x0000019c

20000020 <GoalPos6>:
20000020:	00000263 	.word	0x00000263

20000024 <GoalPos7>:
20000024:	00000163 	.word	0x00000163

20000028 <GoalPos8>:
20000028:	00000298 	.word	0x00000298

2000002c <GoalPos9>:
2000002c:	000001eb 	.word	0x000001eb

20000030 <GoalPos10>:
20000030:	00000212 	.word	0x00000212

20000034 <GoalPos11>:
20000034:	0000018a 	.word	0x0000018a

20000038 <GoalPos12>:
20000038:	00000271 	.word	0x00000271

2000003c <GoalPos13>:
2000003c:	00000116 	.word	0x00000116

20000040 <GoalPos14>:
20000040:	000002e7 	.word	0x000002e7

20000044 <GoalPos15>:
20000044:	00000268 	.word	0x00000268

20000048 <GoalPos16>:
20000048:	00000195 	.word	0x00000195

2000004c <GoalPos17>:
2000004c:	000001ea 	.word	0x000001ea

20000050 <GoalPos18>:
20000050:	00000212 	.word	0x00000212

20000054 <id1>:
20000054:	01          	.byte	0x01

20000055 <id2>:
20000055:	02          	.byte	0x02

20000056 <id3>:
20000056:	03          	.byte	0x03

20000057 <id4>:
20000057:	04          	.byte	0x04

20000058 <id5>:
20000058:	05          	.byte	0x05

20000059 <id6>:
20000059:	06          	.byte	0x06

2000005a <id7>:
2000005a:	07          	.byte	0x07

2000005b <id8>:
2000005b:	08          	.byte	0x08

2000005c <id9>:
2000005c:	09          	.byte	0x09

2000005d <id10>:
2000005d:	0a          	.byte	0x0a

2000005e <id11>:
2000005e:	0b          	.byte	0x0b

2000005f <id12>:
2000005f:	0c          	.byte	0x0c

20000060 <id13>:
20000060:	0d          	.byte	0x0d

20000061 <id14>:
20000061:	0e          	.byte	0x0e

20000062 <id15>:
20000062:	0f          	.byte	0x0f

20000063 <id16>:
20000063:	10          	.byte	0x10

20000064 <id17>:
20000064:	11          	.byte	0x11

20000065 <id18>:
20000065:	12          	.byte	0x12
	...

20000068 <gbCommStatus>:
20000068:	00000001 	.word	0x00000001

Disassembly of section .bss:

2000006c <_sbss>:
2000006c:	00000000 	.word	0x00000000

20000070 <gbpRxInterruptBuffer>:
	...

20000170 <gbRxBufferWritePointer>:
	...

20000171 <gbRxBufferReadPointer>:
20000171:	00          	.byte	0x00
	...

20000174 <gwTimingDelay>:
20000174:	00000000 	.word	0x00000000

20000178 <gw1msCounter>:
20000178:	00000000 	.word	0x00000000

2000017c <Position>:
	...

2000017e <wPresentPos>:
	...

20000180 <Voltage>:
	...

20000181 <bMoving>:
	...

20000182 <CommStatus>:
	...

20000184 <gbInstructionPacket>:
	...

20000224 <gbStatusPacket>:
	...

2000026a <gbRxPacketLength>:
	...

2000026b <gbRxGetLength>:
	...

2000026c <giBusUsing>:
2000026c:	00000000 	.word	0x00000000

Disassembly of section ._usrstack:

20000270 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	5728203a 	undefined
   8:	52416e69 	subpl	r6, r1, #1680	; 0x690
   c:	614d204d 	cmpvs	sp, sp, asr #32
  10:	20686372 	rsbcs	r6, r8, r2, ror r3
  14:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  20:	43434700 	movtmi	r4, #14080	; 0x3700
  24:	5728203a 	undefined
  28:	52416e69 	subpl	r6, r1, #1680	; 0x690
  2c:	614d204d 	cmpvs	sp, sp, asr #32
  30:	20686372 	rsbcs	r6, r8, r2, ror r3
  34:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  38:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  3c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  40:	43434700 	movtmi	r4, #14080	; 0x3700
  44:	5728203a 	undefined
  48:	52416e69 	subpl	r6, r1, #1680	; 0x690
  4c:	614d204d 	cmpvs	sp, sp, asr #32
  50:	20686372 	rsbcs	r6, r8, r2, ror r3
  54:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  58:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  5c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  60:	43434700 	movtmi	r4, #14080	; 0x3700
  64:	5728203a 	undefined
  68:	52416e69 	subpl	r6, r1, #1680	; 0x690
  6c:	614d204d 	cmpvs	sp, sp, asr #32
  70:	20686372 	rsbcs	r6, r8, r2, ror r3
  74:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  78:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  7c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  80:	43434700 	movtmi	r4, #14080	; 0x3700
  84:	5728203a 	undefined
  88:	52416e69 	subpl	r6, r1, #1680	; 0x690
  8c:	614d204d 	cmpvs	sp, sp, asr #32
  90:	20686372 	rsbcs	r6, r8, r2, ror r3
  94:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  98:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  9c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  a0:	43434700 	movtmi	r4, #14080	; 0x3700
  a4:	5728203a 	undefined
  a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ac:	614d204d 	cmpvs	sp, sp, asr #32
  b0:	20686372 	rsbcs	r6, r8, r2, ror r3
  b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  c0:	43434700 	movtmi	r4, #14080	; 0x3700
  c4:	5728203a 	undefined
  c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  cc:	614d204d 	cmpvs	sp, sp, asr #32
  d0:	20686372 	rsbcs	r6, r8, r2, ror r3
  d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  e0:	43434700 	movtmi	r4, #14080	; 0x3700
  e4:	5728203a 	undefined
  e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ec:	614d204d 	cmpvs	sp, sp, asr #32
  f0:	20686372 	rsbcs	r6, r8, r2, ror r3
  f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 100:	43434700 	movtmi	r4, #14080	; 0x3700
 104:	5728203a 	undefined
 108:	52416e69 	subpl	r6, r1, #1680	; 0x690
 10c:	614d204d 	cmpvs	sp, sp, asr #32
 110:	20686372 	rsbcs	r6, r8, r2, ror r3
 114:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 118:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 11c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 120:	43434700 	movtmi	r4, #14080	; 0x3700
 124:	5728203a 	undefined
 128:	52416e69 	subpl	r6, r1, #1680	; 0x690
 12c:	614d204d 	cmpvs	sp, sp, asr #32
 130:	20686372 	rsbcs	r6, r8, r2, ror r3
 134:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 138:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 13c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 140:	43434700 	movtmi	r4, #14080	; 0x3700
 144:	5728203a 	undefined
 148:	52416e69 	subpl	r6, r1, #1680	; 0x690
 14c:	614d204d 	cmpvs	sp, sp, asr #32
 150:	20686372 	rsbcs	r6, r8, r2, ror r3
 154:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 158:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 15c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 160:	43434700 	movtmi	r4, #14080	; 0x3700
 164:	5728203a 	undefined
 168:	52416e69 	subpl	r6, r1, #1680	; 0x690
 16c:	614d204d 	cmpvs	sp, sp, asr #32
 170:	20686372 	rsbcs	r6, r8, r2, ror r3
 174:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 178:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 17c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 180:	43434700 	movtmi	r4, #14080	; 0x3700
 184:	5728203a 	undefined
 188:	52416e69 	subpl	r6, r1, #1680	; 0x690
 18c:	614d204d 	cmpvs	sp, sp, asr #32
 190:	20686372 	rsbcs	r6, r8, r2, ror r3
 194:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 198:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 19c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1a0:	43434700 	movtmi	r4, #14080	; 0x3700
 1a4:	5728203a 	undefined
 1a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ac:	614d204d 	cmpvs	sp, sp, asr #32
 1b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1c0:	43434700 	movtmi	r4, #14080	; 0x3700
 1c4:	5728203a 	undefined
 1c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1cc:	614d204d 	cmpvs	sp, sp, asr #32
 1d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1e0:	43434700 	movtmi	r4, #14080	; 0x3700
 1e4:	5728203a 	undefined
 1e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ec:	614d204d 	cmpvs	sp, sp, asr #32
 1f0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 200:	43434700 	movtmi	r4, #14080	; 0x3700
 204:	5728203a 	undefined
 208:	52416e69 	subpl	r6, r1, #1680	; 0x690
 20c:	614d204d 	cmpvs	sp, sp, asr #32
 210:	20686372 	rsbcs	r6, r8, r2, ror r3
 214:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 218:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 21c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 220:	43434700 	movtmi	r4, #14080	; 0x3700
 224:	5728203a 	undefined
 228:	52416e69 	subpl	r6, r1, #1680	; 0x690
 22c:	614d204d 	cmpvs	sp, sp, asr #32
 230:	20686372 	rsbcs	r6, r8, r2, ror r3
 234:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 238:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 23c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 240:	43434700 	movtmi	r4, #14080	; 0x3700
 244:	5728203a 	undefined
 248:	52416e69 	subpl	r6, r1, #1680	; 0x690
 24c:	614d204d 	cmpvs	sp, sp, asr #32
 250:	20686372 	rsbcs	r6, r8, r2, ror r3
 254:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 258:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 25c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 260:	43434700 	movtmi	r4, #14080	; 0x3700
 264:	5728203a 	undefined
 268:	52416e69 	subpl	r6, r1, #1680	; 0x690
 26c:	614d204d 	cmpvs	sp, sp, asr #32
 270:	20686372 	rsbcs	r6, r8, r2, ror r3
 274:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 278:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 27c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 280:	43434700 	movtmi	r4, #14080	; 0x3700
 284:	5728203a 	undefined
 288:	52416e69 	subpl	r6, r1, #1680	; 0x690
 28c:	614d204d 	cmpvs	sp, sp, asr #32
 290:	20686372 	rsbcs	r6, r8, r2, ror r3
 294:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 298:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 29c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 2a0:	43434700 	movtmi	r4, #14080	; 0x3700
 2a4:	5728203a 	undefined
 2a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 2ac:	614d204d 	cmpvs	sp, sp, asr #32
 2b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 2b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 2b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 2bc:	00302e33 	eorseq	r2, r0, r3, lsr lr

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	0000000c 	andeq	r0, r0, ip
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	004d0002 	subeq	r0, sp, r2
  30:	00040000 	andeq	r0, r4, r0
	...
  3c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00d10002 	sbcseq	r0, r1, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  5c:	00003218 	andeq	r3, r0, r8, lsl r2
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0ef30002 	cdpeq	0, 15, cr0, cr3, cr2, {0}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	0800634c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sp, lr}
  7c:	0000012c 	andeq	r0, r0, ip, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	14700002 	ldrbtne	r0, [r0], #-2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	08006478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp, lr}
  9c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	15dc0002 	ldrbne	r0, [ip, #2]
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08006504 	stmdaeq	r0, {r2, r8, sl, sp, lr}
  bc:	0000040c 	andeq	r0, r0, ip, lsl #8
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	1b690002 	blne	1a400dc <__Stack_Size+0x1a3fcdc>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08006910 	stmdaeq	r0, {r4, r8, fp, sp, lr}
  dc:	00000528 	andeq	r0, r0, r8, lsr #10
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	22a30002 	adccs	r0, r3, #2	; 0x2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08006e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, lr}
  fc:	00000288 	andeq	r0, r0, r8, lsl #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	28eb0002 	stmiacs	fp!, {r1}^
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
 11c:	00000384 	andeq	r0, r0, r4, lsl #7
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	31d20002 	bicscc	r0, r2, r2
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
 13c:	000000e0 	andeq	r0, r0, r0, ror #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	34190002 	ldrcc	r0, [r9], #-2
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	08007524 	stmdaeq	r0, {r2, r5, r8, sl, ip, sp, lr}
 15c:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	3cd60002 	ldclcc	0, cr0, [r6], {2}
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	080078c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp, lr}
 17c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	3ec50002 	cdpcc	0, 12, cr0, cr5, cr2, {0}
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	0800796c 	stmdaeq	r0, {r2, r3, r5, r6, r8, fp, ip, sp, lr}
 19c:	00000d88 	andeq	r0, r0, r8, lsl #27
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	600e0002 	andvs	r0, lr, r2
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	080086f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, pc}
 1bc:	000003bc 	strheq	r0, [r0], -ip
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	695e0002 	ldmdbvs	lr, {r1}^
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	08008ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, pc}
 1dc:	0000006e 	andeq	r0, r0, lr, rrx
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	6a050002 	bvs	1401fc <__Stack_Size+0x13fdfc>
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	08008b20 	stmdaeq	r0, {r5, r8, r9, fp, pc}
 1fc:	00000054 	andeq	r0, r0, r4, asr r0
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	6b0b0002 	blvs	2c021c <__Stack_Size+0x2bfe1c>
 210:	00040000 	andeq	r0, r4, r0
	...
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	6bd00002 	blvs	ff40023c <SCS_BASE+0x1f3f223c>
 230:	00040000 	andeq	r0, r4, r0
	...
 23c:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	7e440002 	cdpvc	0, 4, cr0, cr4, cr2, {0}
 250:	00040000 	andeq	r0, r4, r0
	...
 25c:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	7f8a0002 	svcvc	0x008a0002
 270:	00040000 	andeq	r0, r4, r0
	...
 27c:	000000d0 	ldrdeq	r0, [r0], -r0
	...
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	809d0002 	addshi	r0, sp, r2
 290:	00040000 	andeq	r0, r4, r0
	...
 29c:	0000009c 	muleq	r0, ip, r0
	...
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	8a420002 	bhi	10802bc <__Stack_Size+0x107febc>
 2b0:	00040000 	andeq	r0, r4, r0
	...
 2bc:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
 2c8:	00000024 	andeq	r0, r0, r4, lsr #32
 2cc:	93f40002 	mvnsls	r0, #2	; 0x2
 2d0:	00040000 	andeq	r0, r4, r0
	...
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
       0:	0000043d 	andeq	r0, r0, sp, lsr r4
       4:	00d10002 	sbcseq	r0, r1, r2
       8:	0e220000 	cdpeq	0, 2, cr0, cr2, cr0, {0}
       c:	06c50000 	strbeq	r0, [r5], r0
      10:	6c430000 	marvs	acc0, r0, r3
      14:	42726165 	rsbsmi	r6, r2, #1073741849	; 0x40000019
      18:	65666675 	strbvs	r6, [r6, #-1653]!
      1c:	36353272 	undefined
      20:	0006d900 	andeq	sp, r6, r0, lsl #18
      24:	65684300 	strbvs	r4, [r8, #-768]!
      28:	654e6b63 	strbvs	r6, [lr, #-2915]
      2c:	72724177 	rsbsvc	r4, r2, #-1073741795	; 0xc000001d
      30:	00657669 	rsbeq	r7, r5, r9, ror #12
      34:	000006f1 	strdeq	r0, [r0], -r1
      38:	42447852 	submi	r7, r4, #5373952	; 0x520000
      3c:	5f657479 	svcpl	0x00657479
      40:	004c5844 	subeq	r5, ip, r4, asr #16
      44:	0000071c 	andeq	r0, r0, ip, lsl r7
      48:	53495f5f 	movtpl	r5, #40799	; 0x9f5f
      4c:	45445f52 	strbmi	r5, [r4, #-3922]
      50:	0059414c 	subseq	r4, r9, ip, asr #2
      54:	00000730 	andeq	r0, r0, r0, lsr r7
      58:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
      5c:	73694474 	cmnvc	r9, #1946157056	; 0x74000000
      60:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
      64:	07570074 	undefined
      68:	68430000 	stmdavs	r3, {}^
      6c:	546b6365 	strbtpl	r6, [fp], #-869
      70:	4f656d69 	svcmi	0x00656d69
      74:	6f007475 	svcvs	0x00007475
      78:	6d000007 	stcvs	0, cr0, [r0, #-28]
      7c:	616c6544 	cmnvs	ip, r4, asr #10
      80:	079a0079 	undefined
      84:	79530000 	ldmdbvc	r3, {}^
      88:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
      8c:	6f435f6b 	svcvs	0x00435f6b
      90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
      94:	74617275 	strbtvc	r7, [r1], #-629
      98:	006e6f69 	rsbeq	r6, lr, r9, ror #30
      9c:	000007b0 	strheq	r0, [r0], -r0
      a0:	30447852 	subcc	r7, r4, r2, asr r8
      a4:	65746e49 	ldrbvs	r6, [r4, #-3657]!
      a8:	70757272 	rsbsvc	r7, r5, r2, ror r2
      ac:	07c60074 	undefined
      b0:	69540000 	ldmdbvs	r4, {}^
      b4:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      bc:	74707572 	ldrbtvc	r7, [r0], #-1394
      c0:	736d315f 	cmnvc	sp, #-1073741801	; 0xc0000017
      c4:	0007dc00 	andeq	sp, r7, r0, lsl #24
      c8:	6d695400 	cfstrdvs	mvd5, [r9]
      cc:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
      d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      d4:	61727567 	cmnvs	r2, r7, ror #10
      d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      dc:	00081500 	andeq	r1, r8, r0, lsl #10
      e0:	44785400 	ldrbtmi	r5, [r8], #-1024
      e4:	65747942 	ldrbvs	r7, [r4, #-2370]!
      e8:	0043505f 	subeq	r5, r3, pc, asr r0
      ec:	00000840 	andeq	r0, r0, r0, asr #16
      f0:	42447854 	submi	r7, r4, #5505024	; 0x540000
      f4:	31657479 	smccc	22345
      f8:	087b0036 	ldmdaeq	fp!, {r1, r2, r4, r5}^
      fc:	78540000 	ldmdavc	r4, {}^
     100:	726f5744 	rsbvc	r5, pc, #17825792	; 0x1100000
     104:	00363164 	eorseq	r3, r6, r4, ror #2
     108:	000008a6 	andeq	r0, r0, r6, lsr #17
     10c:	53447854 	movtpl	r7, #18516	; 0x4854
     110:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     114:	08d70067 	ldmeq	r7, {r0, r1, r2, r5, r6}^
     118:	78540000 	ldmdavc	r4, {}^
     11c:	74794244 	ldrbtvc	r4, [r9], #-580
     120:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     124:	0902004c 	stmdbeq	r2, {r2, r3, r6}
     128:	69440000 	stmdbvs	r4, {}^
     12c:	6c626173 	stfvse	f6, [r2], #-460
     130:	41535565 	cmpmi	r3, r5, ror #10
     134:	00315452 	eorseq	r5, r1, r2, asr r4
     138:	00000918 	andeq	r0, r0, r8, lsl r9
     13c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     140:	6f435f54 	svcvs	0x00435f54
     144:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     148:	74617275 	strbtvc	r7, [r1], #-629
     14c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     150:	00000962 	andeq	r0, r0, r2, ror #18
     154:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     158:	435f3154 	cmpmi	pc, #21	; 0x15
     15c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     160:	61727567 	cmnvs	r2, r7, ror #10
     164:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     168:	00098d00 	andeq	r8, r9, r0, lsl #26
     16c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     170:	6f435f4f 	svcvs	0x00435f4f
     174:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     178:	74617275 	strbtvc	r7, [r1], #-629
     17c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     180:	000009b7 	strheq	r0, [r0], -r7
     184:	4349564e 	movtmi	r5, #38478	; 0x964e
     188:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     18c:	75676966 	strbvc	r6, [r7, #-2406]!
     190:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     194:	e1006e6f 	tst	r0, pc, ror #28
     198:	52000009 	andpl	r0, r0, #9	; 0x9
     19c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     1a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     1a4:	61727567 	cmnvs	r2, r7, ror #10
     1a8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1ac:	000a0800 	andeq	r0, sl, r0, lsl #16
     1b0:	736f5000 	cmnvc	pc, #0	; 0x0
     1b4:	6f616369 	svcvs	0x00616369
     1b8:	000a4c00 	andeq	r4, sl, r0, lsl #24
     1bc:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     1c0:	0a93006e 	beq	fe4c0380 <SCS_BASE+0x1e4b2380>
     1c4:	62670000 	rsbvs	r0, r7, #0	; 0x0
     1c8:	49785270 	ldmdbmi	r8!, {r4, r5, r6, r9, ip, lr}^
     1cc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1d0:	74707572 	ldrbtvc	r7, [r0], #-1394
     1d4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     1d8:	aa007265 	bge	1cb74 <__Stack_Size+0x1c774>
     1dc:	6700000a 	strvs	r0, [r0, -sl]
     1e0:	42785262 	rsbsmi	r5, r8, #536870918	; 0x20000006
     1e4:	65666675 	strbvs	r6, [r6, #-1653]!
     1e8:	69725772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     1ec:	6f506574 	svcvs	0x00506574
     1f0:	65746e69 	ldrbvs	r6, [r4, #-3689]!
     1f4:	0ac10072 	beq	ff0403c4 <SCS_BASE+0x1f0323c4>
     1f8:	62670000 	rsbvs	r0, r7, #0	; 0x0
     1fc:	75427852 	strbvc	r7, [r2, #-2130]
     200:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     204:	64616552 	strbtvs	r6, [r1], #-1362
     208:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
     20c:	00726574 	rsbseq	r6, r2, r4, ror r5
     210:	00000ad3 	ldrdeq	r0, [r0], -r3
     214:	69547767 	ldmdbvs	r4, {r0, r1, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     218:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
     21c:	616c6544 	cmnvs	ip, r4, asr #10
     220:	0ae50079 	beq	ff94040c <SCS_BASE+0x1f93240c>
     224:	77670000 	strbvc	r0, [r7, -r0]!
     228:	43736d31 	cmnmi	r3, #3136	; 0xc40
     22c:	746e756f 	strbtvc	r7, [lr], #-1391
     230:	f7007265 	undefined instruction 0xf7007265
     234:	4200000a 	andmi	r0, r0, #10	; 0xa
     238:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
     23c:	5f657461 	svcpl	0x00657461
     240:	004c5844 	subeq	r5, ip, r4, asr #16
     244:	00000b09 	andeq	r0, r0, r9, lsl #22
     248:	64756142 	ldrbtvs	r6, [r5], #-322
     24c:	65746172 	ldrbvs	r6, [r4, #-370]!
     250:	0043505f 	subeq	r5, r3, pc, asr r0
     254:	00000b1b 	andeq	r0, r0, fp, lsl fp
     258:	31524343 	cmpcc	r2, r3, asr #6
     25c:	6c61565f 	stclvs	6, cr5, [r1], #-380
     260:	000b2d00 	andeq	r2, fp, r0, lsl #26
     264:	70616300 	rsbvc	r6, r1, r0, lsl #6
     268:	65727574 	ldrbvs	r7, [r2, #-1396]!
     26c:	000b3f00 	andeq	r3, fp, r0, lsl #30
     270:	616f4700 	cmnvs	pc, r0, lsl #14
     274:	736f506c 	cmnvc	pc, #108	; 0x6c
     278:	0b510031 	bleq	1440344 <__Stack_Size+0x143ff44>
     27c:	6f470000 	svcvs	0x00470000
     280:	6f506c61 	svcvs	0x00506c61
     284:	63003273 	movwvs	r3, #627	; 0x273
     288:	4700000b 	strmi	r0, [r0, -fp]
     28c:	506c616f 	rsbpl	r6, ip, pc, ror #2
     290:	0033736f 	eorseq	r7, r3, pc, ror #6
     294:	00000b75 	andeq	r0, r0, r5, ror fp
     298:	6c616f47 	stclvs	15, cr6, [r1], #-284
     29c:	34736f50 	ldrbtcc	r6, [r3], #-3920
     2a0:	000b8700 	andeq	r8, fp, r0, lsl #14
     2a4:	616f4700 	cmnvs	pc, r0, lsl #14
     2a8:	736f506c 	cmnvc	pc, #108	; 0x6c
     2ac:	0b990035 	bleq	fe640388 <SCS_BASE+0x1e632388>
     2b0:	6f470000 	svcvs	0x00470000
     2b4:	6f506c61 	svcvs	0x00506c61
     2b8:	ab003673 	blge	dc8c <__Stack_Size+0xd88c>
     2bc:	4700000b 	strmi	r0, [r0, -fp]
     2c0:	506c616f 	rsbpl	r6, ip, pc, ror #2
     2c4:	0037736f 	eorseq	r7, r7, pc, ror #6
     2c8:	00000bbd 	strheq	r0, [r0], -sp
     2cc:	6c616f47 	stclvs	15, cr6, [r1], #-284
     2d0:	38736f50 	ldmdacc	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     2d4:	000bcf00 	andeq	ip, fp, r0, lsl #30
     2d8:	616f4700 	cmnvs	pc, r0, lsl #14
     2dc:	736f506c 	cmnvc	pc, #108	; 0x6c
     2e0:	0be10039 	bleq	ff8403cc <SCS_BASE+0x1f8323cc>
     2e4:	6f470000 	svcvs	0x00470000
     2e8:	6f506c61 	svcvs	0x00506c61
     2ec:	00303173 	eorseq	r3, r0, r3, ror r1
     2f0:	00000bf3 	strdeq	r0, [r0], -r3
     2f4:	6c616f47 	stclvs	15, cr6, [r1], #-284
     2f8:	31736f50 	cmncc	r3, r0, asr pc
     2fc:	0c050031 	stceq	0, cr0, [r5], {49}
     300:	6f470000 	svcvs	0x00470000
     304:	6f506c61 	svcvs	0x00506c61
     308:	00323173 	eorseq	r3, r2, r3, ror r1
     30c:	00000c17 	andeq	r0, r0, r7, lsl ip
     310:	6c616f47 	stclvs	15, cr6, [r1], #-284
     314:	31736f50 	cmncc	r3, r0, asr pc
     318:	0c290033 	stceq	0, cr0, [r9], #-204
     31c:	6f470000 	svcvs	0x00470000
     320:	6f506c61 	svcvs	0x00506c61
     324:	00343173 	eorseq	r3, r4, r3, ror r1
     328:	00000c3b 	andeq	r0, r0, fp, lsr ip
     32c:	6c616f47 	stclvs	15, cr6, [r1], #-284
     330:	31736f50 	cmncc	r3, r0, asr pc
     334:	0c4d0035 	mcrreq	0, 3, r0, sp, cr5
     338:	6f470000 	svcvs	0x00470000
     33c:	6f506c61 	svcvs	0x00506c61
     340:	00363173 	eorseq	r3, r6, r3, ror r1
     344:	00000c5f 	andeq	r0, r0, pc, asr ip
     348:	6c616f47 	stclvs	15, cr6, [r1], #-284
     34c:	31736f50 	cmncc	r3, r0, asr pc
     350:	0c710037 	ldcleq	0, cr0, [r1], #-220
     354:	6f470000 	svcvs	0x00470000
     358:	6f506c61 	svcvs	0x00506c61
     35c:	00383173 	eorseq	r3, r8, r3, ror r1
     360:	00000c83 	andeq	r0, r0, r3, lsl #25
     364:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     368:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     36c:	000c9500 	andeq	r9, ip, r0, lsl #10
     370:	72507700 	subsvc	r7, r0, #0	; 0x0
     374:	6e657365 	cdpvs	3, 6, cr7, cr5, cr5, {3}
     378:	736f5074 	cmnvc	pc, #116	; 0x74
     37c:	000ca700 	andeq	sl, ip, r0, lsl #14
     380:	6c6f5600 	stclvs	6, cr5, [pc]
     384:	65676174 	strbvs	r6, [r7, #-372]!
     388:	000cb900 	andeq	fp, ip, r0, lsl #18
     38c:	31646900 	cmncc	r4, r0, lsl #18
     390:	000ccb00 	andeq	ip, ip, r0, lsl #22
     394:	32646900 	rsbcc	r6, r4, #0	; 0x0
     398:	000cdd00 	andeq	sp, ip, r0, lsl #26
     39c:	33646900 	cmncc	r4, #0	; 0x0
     3a0:	000cef00 	andeq	lr, ip, r0, lsl #30
     3a4:	34646900 	strbtcc	r6, [r4], #-2304
     3a8:	000d0100 	andeq	r0, sp, r0, lsl #2
     3ac:	35646900 	strbcc	r6, [r4, #-2304]!
     3b0:	000d1300 	andeq	r1, sp, r0, lsl #6
     3b4:	36646900 	strbtcc	r6, [r4], -r0, lsl #18
     3b8:	000d2500 	andeq	r2, sp, r0, lsl #10
     3bc:	37646900 	strbcc	r6, [r4, -r0, lsl #18]!
     3c0:	000d3700 	andeq	r3, sp, r0, lsl #14
     3c4:	38646900 	stmdacc	r4!, {r8, fp, sp, lr}^
     3c8:	000d4900 	andeq	r4, sp, r0, lsl #18
     3cc:	39646900 	stmdbcc	r4!, {r8, fp, sp, lr}^
     3d0:	000d5b00 	andeq	r5, sp, r0, lsl #22
     3d4:	31646900 	cmncc	r4, r0, lsl #18
     3d8:	0d6d0030 	stcleq	0, cr0, [sp, #-192]!
     3dc:	64690000 	strbtvs	r0, [r9]
     3e0:	7f003131 	svcvc	0x00003131
     3e4:	6900000d 	stmdbvs	r0, {r0, r2, r3}
     3e8:	00323164 	eorseq	r3, r2, r4, ror #2
     3ec:	00000d91 	muleq	r0, r1, sp
     3f0:	33316469 	teqcc	r1, #1761607680	; 0x69000000
     3f4:	000da300 	andeq	sl, sp, r0, lsl #6
     3f8:	31646900 	cmncc	r4, r0, lsl #18
     3fc:	0db50034 	ldceq	0, cr0, [r5, #208]!
     400:	64690000 	strbtvs	r0, [r9]
     404:	c7003531 	smladxgt	r0, r1, r5, r3
     408:	6900000d 	stmdbvs	r0, {r0, r2, r3}
     40c:	00363164 	eorseq	r3, r6, r4, ror #2
     410:	00000dd9 	ldrdeq	r0, [r0], -r9
     414:	37316469 	ldrcc	r6, [r1, -r9, ror #8]!
     418:	000deb00 	andeq	lr, sp, r0, lsl #22
     41c:	31646900 	cmncc	r4, r0, lsl #18
     420:	0dfd0038 	ldcleq	0, cr0, [sp, #224]!
     424:	4d620000 	stclmi	0, cr0, [r2]
     428:	6e69766f 	cdpvs	6, 6, cr7, cr9, cr15, {3}
     42c:	0e0f0067 	cdpeq	0, 0, cr0, cr15, cr7, {3}
     430:	6f430000 	svcvs	0x00430000
     434:	74536d6d 	ldrbvc	r6, [r3], #-3437
     438:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     43c:	00000000 	andeq	r0, r0, r0
     440:	00063800 	andeq	r3, r6, r0, lsl #16
     444:	f3000200 	vhsub.u8	d0, d0, d0
     448:	7d00000e 	stcvc	0, cr0, [r0, #-56]
     44c:	25000005 	strcs	r0, [r0, #-5]
     450:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     454:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
     458:	74706563 	ldrbtvc	r6, [r0], #-1379
     45c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     460:	00000038 	andeq	r0, r0, r8, lsr r0
     464:	64726148 	ldrbtvs	r6, [r2], #-328
     468:	6c756146 	ldfvse	f6, [r5], #-280
     46c:	63784574 	cmnvs	r8, #486539264	; 0x1d000000
     470:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     474:	4b006e6f 	blmi	1be38 <__Stack_Size+0x1ba38>
     478:	4d000000 	stcmi	0, cr0, [r0]
     47c:	614d6d65 	cmpvs	sp, r5, ror #26
     480:	6567616e 	strbvs	r6, [r7, #-366]!
     484:	65637845 	strbvs	r7, [r3, #-2117]!
     488:	6f697470 	svcvs	0x00697470
     48c:	005e006e 	subseq	r0, lr, lr, rrx
     490:	75420000 	strbvc	r0, [r2]
     494:	75614673 	strbvc	r4, [r1, #-1651]!
     498:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     49c:	74706563 	ldrbtvc	r6, [r0], #-1379
     4a0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     4a4:	00000071 	andeq	r0, r0, r1, ror r0
     4a8:	67617355 	undefined
     4ac:	75614665 	strbvc	r4, [r1, #-1637]!
     4b0:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     4b4:	74706563 	ldrbtvc	r6, [r0], #-1379
     4b8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     4bc:	00000084 	andeq	r0, r0, r4, lsl #1
     4c0:	75626544 	strbvc	r6, [r2, #-1348]!
     4c4:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     4c8:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     4cc:	00009700 	andeq	r9, r0, r0, lsl #14
     4d0:	43565300 	cmpmi	r6, #0	; 0x0
     4d4:	646e6148 	strbtvs	r6, [lr], #-328
     4d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4dc:	000000aa 	andeq	r0, r0, sl, lsr #1
     4e0:	646e6550 	strbtvs	r6, [lr], #-1360
     4e4:	00435653 	subeq	r5, r3, r3, asr r6
     4e8:	000000bd 	strheq	r0, [r0], -sp
     4ec:	47445757 	smlsldmi	r5, r4, r7, r7
     4f0:	5152495f 	cmppl	r2, pc, asr r9
     4f4:	646e6148 	strbtvs	r6, [lr], #-328
     4f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4fc:	000000d0 	ldrdeq	r0, [r0], -r0
     500:	5f445650 	svcpl	0x00445650
     504:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     508:	6c646e61 	stclvs	14, cr6, [r4], #-388
     50c:	e3007265 	movw	r7, #613	; 0x265
     510:	54000000 	strpl	r0, [r0]
     514:	45504d41 	ldrbmi	r4, [r0, #-3393]
     518:	52495f52 	subpl	r5, r9, #328	; 0x148
     51c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     520:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     524:	0000f600 	andeq	pc, r0, r0, lsl #12
     528:	43545200 	cmpmi	r4, #0	; 0x0
     52c:	5152495f 	cmppl	r2, pc, asr r9
     530:	646e6148 	strbtvs	r6, [lr], #-328
     534:	0072656c 	rsbseq	r6, r2, ip, ror #10
     538:	00000109 	andeq	r0, r0, r9, lsl #2
     53c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     540:	52495f48 	subpl	r5, r9, #288	; 0x120
     544:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     548:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     54c:	00011c00 	andeq	r1, r1, r0, lsl #24
     550:	43435200 	movtmi	r5, #12800	; 0x3200
     554:	5152495f 	cmppl	r2, pc, asr r9
     558:	646e6148 	strbtvs	r6, [lr], #-328
     55c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     560:	0000012f 	andeq	r0, r0, pc, lsr #2
     564:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     568:	52495f30 	subpl	r5, r9, #192	; 0xc0
     56c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     570:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     574:	00014200 	andeq	r4, r1, r0, lsl #4
     578:	54584500 	ldrbpl	r4, [r8], #-1280
     57c:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     580:	61485152 	cmpvs	r8, r2, asr r1
     584:	656c646e 	strbvs	r6, [ip, #-1134]!
     588:	01550072 	cmpeq	r5, r2, ror r0
     58c:	58450000 	stmdapl	r5, {}^
     590:	5f324954 	svcpl	0x00324954
     594:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     598:	6c646e61 	stclvs	14, cr6, [r4], #-388
     59c:	68007265 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     5a0:	45000001 	strmi	r0, [r0, #-1]
     5a4:	33495458 	movtcc	r5, #37976	; 0x9458
     5a8:	5152495f 	cmppl	r2, pc, asr r9
     5ac:	646e6148 	strbtvs	r6, [lr], #-328
     5b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5b4:	0000017b 	andeq	r0, r0, fp, ror r1
     5b8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     5bc:	52495f34 	subpl	r5, r9, #208	; 0xd0
     5c0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     5c4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     5c8:	00018f00 	andeq	r8, r1, r0, lsl #30
     5cc:	414d4400 	cmpmi	sp, r0, lsl #8
     5d0:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     5d4:	656e6e61 	strbvs	r6, [lr, #-3681]!
     5d8:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     5dc:	61485152 	cmpvs	r8, r2, asr r1
     5e0:	656c646e 	strbvs	r6, [ip, #-1134]!
     5e4:	01a30072 	undefined instruction 0x01a30072
     5e8:	4d440000 	stclmi	0, cr0, [r4]
     5ec:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     5f0:	6e6e6168 	powvsez	f6, f6, #0.0
     5f4:	5f326c65 	svcpl	0x00326c65
     5f8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5fc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     600:	b7007265 	strlt	r7, [r0, -r5, ror #4]
     604:	44000001 	strmi	r0, [r0], #-1
     608:	5f31414d 	svcpl	0x0031414d
     60c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     610:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     614:	5152495f 	cmppl	r2, pc, asr r9
     618:	646e6148 	strbtvs	r6, [lr], #-328
     61c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     620:	000001cb 	andeq	r0, r0, fp, asr #3
     624:	31414d44 	cmpcc	r1, r4, asr #26
     628:	6168435f 	cmnvs	r8, pc, asr r3
     62c:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     630:	52495f34 	subpl	r5, r9, #208	; 0xd0
     634:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     638:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     63c:	0001df00 	andeq	sp, r1, r0, lsl #30
     640:	414d4400 	cmpmi	sp, r0, lsl #8
     644:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     648:	656e6e61 	strbvs	r6, [lr, #-3681]!
     64c:	495f356c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, sl, ip, sp}^
     650:	61485152 	cmpvs	r8, r2, asr r1
     654:	656c646e 	strbvs	r6, [ip, #-1134]!
     658:	01f30072 	mvnseq	r0, r2, ror r0
     65c:	4d440000 	stclmi	0, cr0, [r4]
     660:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     664:	6e6e6168 	powvsez	f6, f6, #0.0
     668:	5f366c65 	svcpl	0x00366c65
     66c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     670:	6c646e61 	stclvs	14, cr6, [r4], #-388
     674:	07007265 	streq	r7, [r0, -r5, ror #4]
     678:	44000002 	strmi	r0, [r0], #-2
     67c:	5f31414d 	svcpl	0x0031414d
     680:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     684:	376c656e 	strbcc	r6, [ip, -lr, ror #10]!
     688:	5152495f 	cmppl	r2, pc, asr r9
     68c:	646e6148 	strbtvs	r6, [lr], #-328
     690:	0072656c 	rsbseq	r6, r2, ip, ror #10
     694:	0000021b 	andeq	r0, r0, fp, lsl r2
     698:	31434441 	cmpcc	r3, r1, asr #8
     69c:	495f325f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
     6a0:	61485152 	cmpvs	r8, r2, asr r1
     6a4:	656c646e 	strbvs	r6, [ip, #-1134]!
     6a8:	022f0072 	eoreq	r0, pc, #114	; 0x72
     6ac:	53550000 	cmppl	r5, #0	; 0x0
     6b0:	50485f42 	subpl	r5, r8, r2, asr #30
     6b4:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
     6b8:	5f58545f 	svcpl	0x0058545f
     6bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6c0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6c4:	43007265 	movwmi	r7, #613	; 0x265
     6c8:	55000002 	strpl	r0, [r0, #-2]
     6cc:	4c5f4253 	lfmmi	f4, 2, [pc], {83}
     6d0:	41435f50 	cmpmi	r3, r0, asr pc
     6d4:	58525f4e 	ldmdapl	r2, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     6d8:	52495f30 	subpl	r5, r9, #192	; 0xc0
     6dc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     6e0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     6e4:	00025700 	andeq	r5, r2, r0, lsl #14
     6e8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     6ec:	3158525f 	cmpcc	r8, pc, asr r2
     6f0:	5152495f 	cmppl	r2, pc, asr r9
     6f4:	646e6148 	strbtvs	r6, [lr], #-328
     6f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6fc:	0000026b 	andeq	r0, r0, fp, ror #4
     700:	5f4e4143 	svcpl	0x004e4143
     704:	5f454353 	svcpl	0x00454353
     708:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     70c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     710:	7f007265 	svcvc	0x00007265
     714:	45000002 	strmi	r0, [r0, #-2]
     718:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     71c:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     720:	61485152 	cmpvs	r8, r2, asr r1
     724:	656c646e 	strbvs	r6, [ip, #-1134]!
     728:	02930072 	addseq	r0, r3, #114	; 0x72
     72c:	49540000 	ldmdbmi	r4, {}^
     730:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     734:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     738:	61485152 	cmpvs	r8, r2, asr r1
     73c:	656c646e 	strbvs	r6, [ip, #-1134]!
     740:	02a70072 	adceq	r0, r7, #114	; 0x72
     744:	49540000 	ldmdbmi	r4, {}^
     748:	555f314d 	ldrbpl	r3, [pc, #-333]	; 603 <__Stack_Size+0x203>
     74c:	52495f50 	subpl	r5, r9, #320	; 0x140
     750:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     754:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     758:	0002bb00 	andeq	fp, r2, r0, lsl #22
     75c:	4d495400 	cfstrdmi	mvd5, [r9]
     760:	52545f31 	subspl	r5, r4, #196	; 0xc4
     764:	4f435f47 	svcmi	0x00435f47
     768:	52495f4d 	subpl	r5, r9, #308	; 0x134
     76c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     770:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     774:	0002cf00 	andeq	ip, r2, r0, lsl #30
     778:	4d495400 	cfstrdmi	mvd5, [r9]
     77c:	43435f31 	movtmi	r5, #16177	; 0x3f31
     780:	5152495f 	cmppl	r2, pc, asr r9
     784:	646e6148 	strbtvs	r6, [lr], #-328
     788:	0072656c 	rsbseq	r6, r2, ip, ror #10
     78c:	000002e3 	andeq	r0, r0, r3, ror #5
     790:	334d4954 	movtcc	r4, #55636	; 0xd954
     794:	5152495f 	cmppl	r2, pc, asr r9
     798:	646e6148 	strbtvs	r6, [lr], #-328
     79c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7a0:	000002f7 	strdeq	r0, [r0], -r7
     7a4:	344d4954 	strbcc	r4, [sp], #-2388
     7a8:	5152495f 	cmppl	r2, pc, asr r9
     7ac:	646e6148 	strbtvs	r6, [lr], #-328
     7b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7b4:	0000030b 	andeq	r0, r0, fp, lsl #6
     7b8:	31433249 	cmpcc	r3, r9, asr #4
     7bc:	5f56455f 	svcpl	0x0056455f
     7c0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     7c4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     7c8:	1f007265 	svcne	0x00007265
     7cc:	49000003 	stmdbmi	r0, {r0, r1}
     7d0:	5f314332 	svcpl	0x00314332
     7d4:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     7d8:	61485152 	cmpvs	r8, r2, asr r1
     7dc:	656c646e 	strbvs	r6, [ip, #-1134]!
     7e0:	03330072 	teqeq	r3, #114	; 0x72
     7e4:	32490000 	subcc	r0, r9, #0	; 0x0
     7e8:	455f3243 	ldrbmi	r3, [pc, #-579]	; 5ad <__Stack_Size+0x1ad>
     7ec:	52495f56 	subpl	r5, r9, #344	; 0x158
     7f0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     7f4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     7f8:	00034700 	andeq	r4, r3, r0, lsl #14
     7fc:	43324900 	teqmi	r2, #0	; 0x0
     800:	52455f32 	subpl	r5, r5, #200	; 0xc8
     804:	5152495f 	cmppl	r2, pc, asr r9
     808:	646e6148 	strbtvs	r6, [lr], #-328
     80c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     810:	0000035b 	andeq	r0, r0, fp, asr r3
     814:	31495053 	qdaddcc	r5, r3, r9
     818:	5152495f 	cmppl	r2, pc, asr r9
     81c:	646e6148 	strbtvs	r6, [lr], #-328
     820:	0072656c 	rsbseq	r6, r2, ip, ror #10
     824:	0000036f 	andeq	r0, r0, pc, ror #6
     828:	32495053 	subcc	r5, r9, #83	; 0x53
     82c:	5152495f 	cmppl	r2, pc, asr r9
     830:	646e6148 	strbtvs	r6, [lr], #-328
     834:	0072656c 	rsbseq	r6, r2, ip, ror #10
     838:	00000383 	andeq	r0, r0, r3, lsl #7
     83c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     840:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^
     844:	61485152 	cmpvs	r8, r2, asr r1
     848:	656c646e 	strbvs	r6, [ip, #-1134]!
     84c:	03970072 	orrseq	r0, r7, #114	; 0x72
     850:	53550000 	cmppl	r5, #0	; 0x0
     854:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     858:	5152495f 	cmppl	r2, pc, asr r9
     85c:	646e6148 	strbtvs	r6, [lr], #-328
     860:	0072656c 	rsbseq	r6, r2, ip, ror #10
     864:	000003ab 	andeq	r0, r0, fp, lsr #7
     868:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     86c:	315f3531 	cmpcc	pc, r1, lsr r5
     870:	52495f30 	subpl	r5, r9, #192	; 0xc0
     874:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     878:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     87c:	0003bf00 	andeq	fp, r3, r0, lsl #30
     880:	43545200 	cmpmi	r4, #0	; 0x0
     884:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     888:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     88c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     890:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     894:	0003d300 	andeq	sp, r3, r0, lsl #6
     898:	42535500 	subsmi	r5, r3, #0	; 0x0
     89c:	656b6157 	strbvs	r6, [fp, #-343]!
     8a0:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     8a4:	61485152 	cmpvs	r8, r2, asr r1
     8a8:	656c646e 	strbvs	r6, [ip, #-1134]!
     8ac:	03e70072 	mvneq	r0, #114	; 0x72
     8b0:	49540000 	ldmdbmi	r4, {}^
     8b4:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     8b8:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     8bc:	61485152 	cmpvs	r8, r2, asr r1
     8c0:	656c646e 	strbvs	r6, [ip, #-1134]!
     8c4:	03fb0072 	mvnseq	r0, #114	; 0x72
     8c8:	49540000 	ldmdbmi	r4, {}^
     8cc:	555f384d 	ldrbpl	r3, [pc, #-2125]	; 87 <_Minimum_Stack_Size-0x79>
     8d0:	52495f50 	subpl	r5, r9, #320	; 0x140
     8d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     8dc:	00040f00 	andeq	r0, r4, r0, lsl #30
     8e0:	4d495400 	cfstrdmi	mvd5, [r9]
     8e4:	52545f38 	subspl	r5, r4, #224	; 0xe0
     8e8:	4f435f47 	svcmi	0x00435f47
     8ec:	52495f4d 	subpl	r5, r9, #308	; 0x134
     8f0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8f4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     8f8:	00042300 	andeq	r2, r4, r0, lsl #6
     8fc:	4d495400 	cfstrdmi	mvd5, [r9]
     900:	43435f38 	movtmi	r5, #16184	; 0x3f38
     904:	5152495f 	cmppl	r2, pc, asr r9
     908:	646e6148 	strbtvs	r6, [lr], #-328
     90c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     910:	00000437 	andeq	r0, r0, r7, lsr r4
     914:	33434441 	movtcc	r4, #13377	; 0x3441
     918:	5152495f 	cmppl	r2, pc, asr r9
     91c:	646e6148 	strbtvs	r6, [lr], #-328
     920:	0072656c 	rsbseq	r6, r2, ip, ror #10
     924:	0000044b 	andeq	r0, r0, fp, asr #8
     928:	434d5346 	movtmi	r5, #54086	; 0xd346
     92c:	5152495f 	cmppl	r2, pc, asr r9
     930:	646e6148 	strbtvs	r6, [lr], #-328
     934:	0072656c 	rsbseq	r6, r2, ip, ror #10
     938:	0000045f 	andeq	r0, r0, pc, asr r4
     93c:	4f494453 	svcmi	0x00494453
     940:	5152495f 	cmppl	r2, pc, asr r9
     944:	646e6148 	strbtvs	r6, [lr], #-328
     948:	0072656c 	rsbseq	r6, r2, ip, ror #10
     94c:	00000473 	andeq	r0, r0, r3, ror r4
     950:	354d4954 	strbcc	r4, [sp, #-2388]
     954:	5152495f 	cmppl	r2, pc, asr r9
     958:	646e6148 	strbtvs	r6, [lr], #-328
     95c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     960:	00000487 	andeq	r0, r0, r7, lsl #9
     964:	33495053 	movtcc	r5, #36947	; 0x9053
     968:	5152495f 	cmppl	r2, pc, asr r9
     96c:	646e6148 	strbtvs	r6, [lr], #-328
     970:	0072656c 	rsbseq	r6, r2, ip, ror #10
     974:	0000049b 	muleq	r0, fp, r4
     978:	54524155 	ldrbpl	r4, [r2], #-341
     97c:	52495f34 	subpl	r5, r9, #208	; 0xd0
     980:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     984:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     988:	0004af00 	andeq	sl, r4, r0, lsl #30
     98c:	52415500 	subpl	r5, r1, #0	; 0x0
     990:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^
     994:	61485152 	cmpvs	r8, r2, asr r1
     998:	656c646e 	strbvs	r6, [ip, #-1134]!
     99c:	04c30072 	strbeq	r0, [r3], #114
     9a0:	49540000 	ldmdbmi	r4, {}^
     9a4:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^
     9a8:	61485152 	cmpvs	r8, r2, asr r1
     9ac:	656c646e 	strbvs	r6, [ip, #-1134]!
     9b0:	04d70072 	ldrbeq	r0, [r7], #114
     9b4:	49540000 	ldmdbmi	r4, {}^
     9b8:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^
     9bc:	61485152 	cmpvs	r8, r2, asr r1
     9c0:	656c646e 	strbvs	r6, [ip, #-1134]!
     9c4:	04eb0072 	strbteq	r0, [fp], #114
     9c8:	4d440000 	stclmi	0, cr0, [r4]
     9cc:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     9d0:	6e6e6168 	powvsez	f6, f6, #0.0
     9d4:	5f316c65 	svcpl	0x00316c65
     9d8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     9dc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9e0:	ff007265 	undefined instruction 0xff007265
     9e4:	44000004 	strmi	r0, [r0], #-4
     9e8:	5f32414d 	svcpl	0x0032414d
     9ec:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     9f0:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     9f4:	5152495f 	cmppl	r2, pc, asr r9
     9f8:	646e6148 	strbtvs	r6, [lr], #-328
     9fc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a00:	00000513 	andeq	r0, r0, r3, lsl r5
     a04:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     a08:	6168435f 	cmnvs	r8, pc, asr r3
     a0c:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     a10:	52495f33 	subpl	r5, r9, #204	; 0xcc
     a14:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a18:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a1c:	00052700 	andeq	r2, r5, r0, lsl #14
     a20:	414d4400 	cmpmi	sp, r0, lsl #8
     a24:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     a28:	656e6e61 	strbvs	r6, [lr, #-3681]!
     a2c:	355f346c 	ldrbcc	r3, [pc, #-1132]	; 5c8 <__Stack_Size+0x1c8>
     a30:	5152495f 	cmppl	r2, pc, asr r9
     a34:	646e6148 	strbtvs	r6, [lr], #-328
     a38:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a3c:	0000053b 	andeq	r0, r0, fp, lsr r5
     a40:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     a44:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^
     a48:	61485152 	cmpvs	r8, r2, asr r1
     a4c:	656c646e 	strbvs	r6, [ip, #-1134]!
     a50:	05510072 	ldrbeq	r0, [r1, #-114]
     a54:	49540000 	ldmdbmi	r4, {}^
     a58:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^
     a5c:	61485152 	cmpvs	r8, r2, asr r1
     a60:	656c646e 	strbvs	r6, [ip, #-1134]!
     a64:	05670072 	strbeq	r0, [r7, #-114]!
     a68:	79530000 	ldmdbvc	r3, {}^
     a6c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     a70:	6e61486b 	cdpvs	8, 6, cr4, cr1, cr11, {3}
     a74:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a78:	00000000 	andeq	r0, r0, r0
     a7c:	00008d00 	andeq	r8, r0, r0, lsl #26
     a80:	70000200 	andvc	r0, r0, r0, lsl #4
     a84:	6c000014 	stcvs	0, cr0, [r0], {20}
     a88:	25000001 	strcs	r0, [r0, #-1]
     a8c:	64000000 	strvs	r0, [r0]
     a90:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     a94:	745f6c61 	ldrbvc	r6, [pc], #3169	; a9c <__Stack_Size+0x69c>
     a98:	6f656d69 	svcvs	0x00656d69
     a9c:	45007475 	strmi	r7, [r0, #-1141]
     aa0:	64000000 	strvs	r0, [r0]
     aa4:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     aa8:	735f6c61 	cmpvc	pc, #24832	; 0x6100
     aac:	745f7465 	ldrbvc	r7, [pc], #1125	; ab4 <__Stack_Size+0x6b4>
     ab0:	6f656d69 	svcvs	0x00656d69
     ab4:	6e007475 	mcrvs	4, 0, r7, cr0, cr5, {3}
     ab8:	64000000 	strvs	r0, [r0]
     abc:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     ac0:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
     ac4:	00c20078 	sbceq	r0, r2, r8, ror r0
     ac8:	78640000 	stmdavc	r4!, {}^
     acc:	61685f6c 	cmnvs	r8, ip, ror #30
     ad0:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     ad4:	00010900 	andeq	r0, r1, r0, lsl #18
     ad8:	6c786400 	cfldrdvs	mvd6, [r8]
     adc:	6c61685f 	stclvs	8, cr6, [r1], #-380
     ae0:	656c635f 	strbvs	r6, [ip, #-863]!
     ae4:	1e007261 	cdpne	2, 0, cr7, cr0, cr1, {3}
     ae8:	64000001 	strvs	r0, [r0], #-1
     aec:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     af0:	635f6c61 	cmpvs	pc, #24832	; 0x6100
     af4:	65736f6c 	ldrbvs	r6, [r3, #-3948]!
     af8:	00013300 	andeq	r3, r1, r0, lsl #6
     afc:	6c786400 	cfldrdvs	mvd6, [r8]
     b00:	6c61685f 	stclvs	8, cr6, [r1], #-380
     b04:	65706f5f 	ldrbvs	r6, [r0, #-3935]!
     b08:	0000006e 	andeq	r0, r0, lr, rrx
     b0c:	024b0000 	subeq	r0, fp, #0	; 0x0
     b10:	00020000 	andeq	r0, r2, r0
     b14:	000015dc 	ldrdeq	r1, [r0], -ip
     b18:	0000058d 	andeq	r0, r0, sp, lsl #11
     b1c:	000000c3 	andeq	r0, r0, r3, asr #1
     b20:	5f6c7864 	svcpl	0x006c7864
     b24:	5f746567 	svcpl	0x00746567
     b28:	75736572 	ldrbvc	r6, [r3, #-1394]!
     b2c:	da00746c 	ble	1dce4 <__Stack_Size+0x1d8e4>
     b30:	64000000 	strvs	r0, [r0]
     b34:	735f6c78 	cmpvc	pc, #30720	; 0x7800
     b38:	745f7465 	ldrbvc	r7, [pc], #1125	; b40 <__Stack_Size+0x740>
     b3c:	63617078 	cmnvs	r1, #120	; 0x78
     b40:	5f74656b 	svcpl	0x0074656b
     b44:	fe006469 	cdp2	4, 0, cr6, cr0, cr9, {3}
     b48:	64000000 	strvs	r0, [r0]
     b4c:	735f6c78 	cmpvc	pc, #30720	; 0x7800
     b50:	745f7465 	ldrbvc	r7, [pc], #1125	; b58 <__Stack_Size+0x758>
     b54:	63617078 	cmnvs	r1, #120	; 0x78
     b58:	5f74656b 	svcpl	0x0074656b
     b5c:	74736e69 	ldrbtvc	r6, [r3], #-3689
     b60:	74637572 	strbtvc	r7, [r3], #-1394
     b64:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     b68:	00000123 	andeq	r0, r0, r3, lsr #2
     b6c:	5f6c7864 	svcpl	0x006c7864
     b70:	5f746573 	svcpl	0x00746573
     b74:	61707874 	cmnvs	r0, r4, ror r8
     b78:	74656b63 	strbtvc	r6, [r5], #-2915
     b7c:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
     b80:	74656d61 	strbtvc	r6, [r5], #-3425
     b84:	55007265 	strpl	r7, [r0, #-613]
     b88:	64000001 	strvs	r0, [r0], #-1
     b8c:	735f6c78 	cmpvc	pc, #30720	; 0x7800
     b90:	745f7465 	ldrbvc	r7, [pc], #1125	; b98 <__Stack_Size+0x798>
     b94:	63617078 	cmnvs	r1, #120	; 0x78
     b98:	5f74656b 	svcpl	0x0074656b
     b9c:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
     ba0:	7a006874 	bvc	1ad78 <__Stack_Size+0x1a978>
     ba4:	64000001 	strvs	r0, [r0], #-1
     ba8:	675f6c78 	undefined
     bac:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
     bb0:	63617078 	cmnvs	r1, #120	; 0x78
     bb4:	5f74656b 	svcpl	0x0074656b
     bb8:	6f727265 	svcvs	0x00727265
     bbc:	01a60072 	undefined instruction 0x01a60072
     bc0:	78640000 	stmdavc	r4!, {}^
     bc4:	65675f6c 	strbvs	r5, [r7, #-3948]!
     bc8:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bcc:	6b636170 	blvs	18d9194 <__Stack_Size+0x18d8d94>
     bd0:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     bd4:	74676e65 	strbtvc	r6, [r7], #-3685
     bd8:	01be0068 	undefined instruction 0x01be0068
     bdc:	78640000 	stmdavc	r4!, {}^
     be0:	65675f6c 	strbvs	r5, [r7, #-3948]!
     be4:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     be8:	6b636170 	blvs	18d91b0 <__Stack_Size+0x18d8db0>
     bec:	705f7465 	subsvc	r7, pc, r5, ror #8
     bf0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!
     bf4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     bf8:	0001eb00 	andeq	lr, r1, r0, lsl #22
     bfc:	6c786400 	cfldrdvs	mvd6, [r8]
     c00:	6b616d5f 	blvs	185c184 <__Stack_Size+0x185bd84>
     c04:	726f7765 	rsbvc	r7, pc, #26476544	; 0x1940000
     c08:	02140064 	andseq	r0, r4, #100	; 0x64
     c0c:	78640000 	stmdavc	r4!, {}^
     c10:	65675f6c 	strbvs	r5, [r7, #-3948]!
     c14:	6f6c5f74 	svcvs	0x006c5f74
     c18:	74796277 	ldrbtvc	r6, [r9], #-631
     c1c:	02360065 	eorseq	r0, r6, #101	; 0x65
     c20:	78640000 	stmdavc	r4!, {}^
     c24:	65675f6c 	strbvs	r5, [r7, #-3948]!
     c28:	69685f74 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c2c:	79626867 	stmdbvc	r2!, {r0, r1, r2, r5, r6, fp, sp, lr}^
     c30:	5c006574 	cfstr32pl	mvfx6, [r0], {116}
     c34:	64000002 	strvs	r0, [r0], #-2
     c38:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     c3c:	61705f78 	cmnvs	r0, r8, ror pc
     c40:	74656b63 	strbtvc	r6, [r5], #-2915
     c44:	0002b100 	andeq	fp, r2, r0, lsl #2
     c48:	6c786400 	cfldrdvs	mvd6, [r8]
     c4c:	5f78745f 	svcpl	0x0078745f
     c50:	6b636170 	blvs	18d9218 <__Stack_Size+0x18d8e18>
     c54:	ff007465 	undefined instruction 0xff007465
     c58:	64000002 	strvs	r0, [r0], #-2
     c5c:	745f6c78 	ldrbvc	r6, [pc], #3192	; c64 <__Stack_Size+0x864>
     c60:	5f787278 	svcpl	0x00787278
     c64:	6b636170 	blvs	18d922c <__Stack_Size+0x18d8e2c>
     c68:	14007465 	strne	r7, [r0], #-1125
     c6c:	64000003 	strvs	r0, [r0], #-3
     c70:	775f6c78 	undefined
     c74:	65746972 	ldrbvs	r6, [r4, #-2418]!
     c78:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
     c7c:	03830064 	orreq	r0, r3, #100	; 0x64
     c80:	78640000 	stmdavc	r4!, {}^
     c84:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     c88:	775f6461 	ldrbvc	r6, [pc, -r1, ror #8]
     c8c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     c90:	000003ef 	andeq	r0, r0, pc, ror #7
     c94:	5f6c7864 	svcpl	0x006c7864
     c98:	74697277 	strbtvc	r7, [r9], #-631
     c9c:	79625f65 	stmdbvc	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     ca0:	39006574 	stmdbcc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     ca4:	64000004 	strvs	r0, [r0], #-4
     ca8:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     cac:	5f646165 	svcpl	0x00646165
     cb0:	65747962 	ldrbvs	r7, [r4, #-2402]!
     cb4:	00047700 	andeq	r7, r4, r0, lsl #14
     cb8:	6c786400 	cfldrdvs	mvd6, [r8]
     cbc:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     cc0:	04a10067 	strteq	r0, [r1], #103
     cc4:	78640000 	stmdavc	r4!, {}^
     cc8:	65745f6c 	ldrbvs	r5, [r4, #-3948]!
     ccc:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
     cd0:	00657461 	rsbeq	r7, r5, r1, ror #8
     cd4:	000004b6 	strheq	r0, [r0], -r6
     cd8:	5f6c7864 	svcpl	0x006c7864
     cdc:	74696e69 	strbtvc	r6, [r9], #-3689
     ce0:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     ce4:	1000657a 	andne	r6, r0, sl, ror r5
     ce8:	67000005 	strvs	r0, [r0, -r5]
     cec:	736e4962 	cmnvc	lr, #1605632	; 0x188000
     cf0:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     cf4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     cf8:	6b636150 	blvs	18d9240 <__Stack_Size+0x18d8e40>
     cfc:	32007465 	andcc	r7, r0, #1694498816	; 0x65000000
     d00:	67000005 	strvs	r0, [r0, -r5]
     d04:	61745362 	cmnvs	r4, r2, ror #6
     d08:	50737574 	rsbspl	r7, r3, r4, ror r5
     d0c:	656b6361 	strbvs	r6, [fp, #-865]!
     d10:	05440074 	strbeq	r0, [r4, #-116]
     d14:	62670000 	rsbvs	r0, r7, #0	; 0x0
     d18:	61507852 	cmpvs	r0, r2, asr r8
     d1c:	74656b63 	strbtvc	r6, [r5], #-2915
     d20:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     d24:	56006874 	undefined
     d28:	67000005 	strvs	r0, [r0, -r5]
     d2c:	47785262 	ldrbmi	r5, [r8, -r2, ror #4]!
     d30:	654c7465 	strbvs	r7, [ip, #-1125]
     d34:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     d38:	00056800 	andeq	r6, r5, r0, lsl #16
     d3c:	43626700 	cmnmi	r2, #0	; 0x0
     d40:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
     d44:	75746174 	ldrbvc	r6, [r4, #-372]!
     d48:	057a0073 	ldrbeq	r0, [sl, #-115]!
     d4c:	69670000 	stmdbvs	r7!, {}^
     d50:	55737542 	ldrbpl	r7, [r3, #-1346]!
     d54:	676e6973 	undefined
     d58:	00000000 	andeq	r0, r0, r0
     d5c:	00026a00 	andeq	r6, r2, r0, lsl #20
     d60:	69000200 	stmdbvs	r0, {r9}
     d64:	3a00001b 	bcc	dd8 <__Stack_Size+0x9d8>
     d68:	37000007 	strcc	r0, [r0, -r7]
     d6c:	46000002 	strmi	r0, [r0], -r2
     d70:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     d74:	7465535f 	strbtvc	r5, [r5], #-863
     d78:	6574614c 	ldrbvs	r6, [r4, #-332]!
     d7c:	0079636e 	rsbseq	r6, r9, lr, ror #6
     d80:	0000025e 	andeq	r0, r0, lr, asr r2
     d84:	53414c46 	movtpl	r4, #7238	; 0x1c46
     d88:	61485f48 	cmpvs	r8, r8, asr #30
     d8c:	7943666c 	stmdbvc	r3, {r2, r3, r5, r6, r9, sl, sp, lr}^
     d90:	41656c63 	cmnmi	r5, r3, ror #24
     d94:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
     d98:	646d4373 	strbtvs	r4, [sp], #-883
     d9c:	00028500 	andeq	r8, r2, r0, lsl #10
     da0:	414c4600 	cmpmi	ip, r0, lsl #12
     da4:	505f4853 	subspl	r4, pc, r3, asr r8
     da8:	65666572 	strbvs	r6, [r6, #-1394]!
     dac:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
     db0:	65666675 	strbvs	r6, [r6, #-1653]!
     db4:	646d4372 	strbtvs	r4, [sp], #-882
     db8:	0002ac00 	andeq	sl, r2, r0, lsl #24
     dbc:	414c4600 	cmpmi	ip, r0, lsl #12
     dc0:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 575 <__Stack_Size+0x175>
     dc4:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     dc8:	02bf006b 	adcseq	r0, pc, #107	; 0x6b
     dcc:	4c460000 	marmi	acc0, r0, r6
     dd0:	5f485341 	svcpl	0x00485341
     dd4:	6b636f4c 	blvs	18dcb0c <__Stack_Size+0x18dc70c>
     dd8:	0002d200 	andeq	sp, r2, r0, lsl #4
     ddc:	414c4600 	cmpmi	ip, r0, lsl #12
     de0:	475f4853 	undefined
     de4:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
     de8:	704f7265 	subvc	r7, pc, r5, ror #4
     dec:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     df0:	65747942 	ldrbvs	r7, [r4, #-2370]!
     df4:	0002ea00 	andeq	lr, r2, r0, lsl #20
     df8:	414c4600 	cmpmi	ip, r0, lsl #12
     dfc:	475f4853 	undefined
     e00:	72577465 	subsvc	r7, r7, #1694498816	; 0x65000000
     e04:	50657469 	rsbpl	r7, r5, r9, ror #8
     e08:	65746f72 	ldrbvs	r6, [r4, #-3954]!
     e0c:	6f697463 	svcvs	0x00697463
     e10:	74704f6e 	ldrbtvc	r4, [r0], #-3950
     e14:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     e18:	00657479 	rsbeq	r7, r5, r9, ror r4
     e1c:	00000302 	andeq	r0, r0, r2, lsl #6
     e20:	53414c46 	movtpl	r4, #7238	; 0x1c46
     e24:	65475f48 	strbvs	r5, [r7, #-3912]
     e28:	61655274 	smcvs	21796
     e2c:	74754f64 	ldrbtvc	r4, [r5], #-3940
     e30:	746f7250 	strbtvc	r7, [pc], #592	; e38 <__Stack_Size+0xa38>
     e34:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     e38:	74536e6f 	ldrbvc	r6, [r3], #-3695
     e3c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     e40:	00032b00 	andeq	r2, r3, r0, lsl #22
     e44:	414c4600 	cmpmi	ip, r0, lsl #12
     e48:	475f4853 	undefined
     e4c:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
     e50:	74656665 	strbtvc	r6, [r5], #-1637
     e54:	75426863 	strbvc	r6, [r2, #-2147]
     e58:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     e5c:	74617453 	strbtvc	r7, [r1], #-1107
     e60:	54007375 	strpl	r7, [r0], #-885
     e64:	46000003 	strmi	r0, [r0], -r3
     e68:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     e6c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     e70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     e74:	03890067 	orreq	r0, r9, #103	; 0x67
     e78:	4c460000 	marmi	acc0, r0, r6
     e7c:	5f485341 	svcpl	0x00485341
     e80:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     e84:	5367616c 	cmnpl	r7, #27	; 0x1b
     e88:	75746174 	ldrbvc	r6, [r4, #-372]!
     e8c:	03c60073 	biceq	r0, r6, #115	; 0x73
     e90:	4c460000 	marmi	acc0, r0, r6
     e94:	5f485341 	svcpl	0x00485341
     e98:	61656c43 	cmnvs	r5, r3, asr #24
     e9c:	616c4672 	smcvs	50274
     ea0:	03ed0067 	mvneq	r0, #103	; 0x67
     ea4:	4c460000 	marmi	acc0, r0, r6
     ea8:	5f485341 	svcpl	0x00485341
     eac:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     eb0:	75746174 	ldrbvc	r6, [r4, #-372]!
     eb4:	040a0073 	streq	r0, [sl], #-115
     eb8:	4c460000 	marmi	acc0, r0, r6
     ebc:	5f485341 	svcpl	0x00485341
     ec0:	74696157 	strbtvc	r6, [r9], #-343
     ec4:	4c726f46 	ldclmi	15, cr6, [r2], #-280
     ec8:	4f747361 	svcmi	0x00747361
     ecc:	61726570 	cmnvs	r2, r0, ror r5
     ed0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     ed4:	00049d00 	andeq	r9, r4, r0, lsl #26
     ed8:	414c4600 	cmpmi	ip, r0, lsl #12
     edc:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 691 <__Stack_Size+0x291>
     ee0:	4f726573 	svcmi	0x00726573
     ee4:	6f697470 	svcvs	0x00697470
     ee8:	7479426e 	ldrbtvc	r4, [r9], #-622
     eec:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     ef0:	00676966 	rsbeq	r6, r7, r6, ror #18
     ef4:	000004fc 	strdeq	r0, [r0], -ip
     ef8:	53414c46 	movtpl	r4, #7238	; 0x1c46
     efc:	65525f48 	ldrbvs	r5, [r2, #-3912]
     f00:	754f6461 	strbvc	r6, [pc, #-1121]	; aa7 <__Stack_Size+0x6a7>
     f04:	6f725074 	svcvs	0x00725074
     f08:	74636574 	strbtvc	r6, [r3], #-1396
     f0c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     f10:	0000053b 	andeq	r0, r0, fp, lsr r5
     f14:	53414c46 	movtpl	r4, #7238	; 0x1c46
     f18:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
     f1c:	656c6261 	strbvs	r6, [ip, #-609]!
     f20:	74697257 	strbtvc	r7, [r9], #-599
     f24:	6f725065 	svcvs	0x00725065
     f28:	74636574 	strbtvc	r6, [r3], #-1396
     f2c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     f30:	000005ba 	strheq	r0, [r0], -sl
     f34:	53414c46 	movtpl	r4, #7238	; 0x1c46
     f38:	72505f48 	subsvc	r5, r0, #288	; 0x120
     f3c:	6172676f 	cmnvs	r2, pc, ror #14
     f40:	74704f6d 	ldrbtvc	r4, [r0], #-3949
     f44:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     f48:	44657479 	strbtmi	r7, [r5], #-1145
     f4c:	00617461 	rsbeq	r7, r1, r1, ror #8
     f50:	00000609 	andeq	r0, r0, r9, lsl #12
     f54:	53414c46 	movtpl	r4, #7238	; 0x1c46
     f58:	72505f48 	subsvc	r5, r0, #288	; 0x120
     f5c:	6172676f 	cmnvs	r2, pc, ror #14
     f60:	6c61486d 	stclvs	8, cr4, [r1], #-436
     f64:	726f5766 	rsbvc	r5, pc, #26738688	; 0x1980000
     f68:	06580064 	ldrbeq	r0, [r8], -r4, rrx
     f6c:	4c460000 	marmi	acc0, r0, r6
     f70:	5f485341 	svcpl	0x00485341
     f74:	676f7250 	undefined
     f78:	576d6172 	undefined
     f7c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     f80:	000006a7 	andeq	r0, r0, r7, lsr #13
     f84:	53414c46 	movtpl	r4, #7238	; 0x1c46
     f88:	72455f48 	subvc	r5, r5, #288	; 0x120
     f8c:	4f657361 	svcmi	0x00657361
     f90:	6f697470 	svcvs	0x00697470
     f94:	7479426e 	ldrbtvc	r4, [r9], #-622
     f98:	d4007365 	strle	r7, [r0], #-869
     f9c:	46000006 	strmi	r0, [r0], -r6
     fa0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     fa4:	6172455f 	cmnvs	r2, pc, asr r5
     fa8:	6c416573 	cfstr64vs	mvdx6, [r1], {115}
     fac:	6761506c 	strbvs	r5, [r1, -ip, rrx]!
     fb0:	01007365 	tsteq	r0, r5, ror #6
     fb4:	46000007 	strmi	r0, [r0], -r7
     fb8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     fbc:	6172455f 	cmnvs	r2, pc, asr r5
     fc0:	61506573 	cmpvs	r0, r3, ror r5
     fc4:	00006567 	andeq	r6, r0, r7, ror #10
     fc8:	77000000 	strvc	r0, [r0, -r0]
     fcc:	02000001 	andeq	r0, r0, #1	; 0x1
     fd0:	0022a300 	eoreq	sl, r2, r0, lsl #6
     fd4:	00064800 	andeq	r4, r6, r0, lsl #16
     fd8:	00022b00 	andeq	r2, r2, r0, lsl #22
     fdc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fe0:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     fe4:	bb007469 	bllt	1e190 <__Stack_Size+0x1dd90>
     fe8:	47000002 	strmi	r0, [r0, -r2]
     fec:	5f4f4950 	svcpl	0x004f4950
     ff0:	75727453 	ldrbvc	r7, [r2, #-1107]!
     ff4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     ff8:	e0007469 	and	r7, r0, r9, ror #8
     ffc:	47000002 	strmi	r0, [r0, -r2]
    1000:	5f4f4950 	svcpl	0x004f4950
    1004:	64616552 	strbtvs	r6, [r1], #-1362
    1008:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    100c:	74614474 	strbtvc	r4, [r1], #-1140
    1010:	74694261 	strbtvc	r4, [r9], #-609
    1014:	00032300 	andeq	r2, r3, r0, lsl #6
    1018:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    101c:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    1020:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1024:	44747570 	ldrbtmi	r7, [r4], #-1392
    1028:	00617461 	rsbeq	r7, r1, r1, ror #8
    102c:	00000350 	andeq	r0, r0, r0, asr r3
    1030:	4f495047 	svcmi	0x00495047
    1034:	6165525f 	cmnvs	r5, pc, asr r2
    1038:	74754f64 	ldrbtvc	r4, [r5], #-3940
    103c:	44747570 	ldrbtmi	r7, [r4], #-1392
    1040:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1044:	97007469 	strls	r7, [r0, -r9, ror #8]
    1048:	47000003 	strmi	r0, [r0, -r3]
    104c:	5f4f4950 	svcpl	0x004f4950
    1050:	64616552 	strbtvs	r6, [r1], #-1362
    1054:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1058:	61447475 	cmpvs	r4, r5, ror r4
    105c:	c4006174 	strgt	r6, [r0], #-372
    1060:	47000003 	strmi	r0, [r0, -r3]
    1064:	5f4f4950 	svcpl	0x004f4950
    1068:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    106c:	00737469 	rsbseq	r7, r3, r9, ror #8
    1070:	000003f9 	strdeq	r0, [r0], -r9
    1074:	4f495047 	svcmi	0x00495047
    1078:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    107c:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1080:	2e007374 	mcrcs	3, 0, r7, cr0, cr4, {3}
    1084:	47000004 	strmi	r0, [r0, -r4]
    1088:	5f4f4950 	svcpl	0x004f4950
    108c:	74697257 	strbtvc	r7, [r9], #-599
    1090:	74694265 	strbtvc	r4, [r9], #-613
    1094:	00047100 	andeq	r7, r4, r0, lsl #2
    1098:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    109c:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    10a0:	00657469 	rsbeq	r7, r5, r9, ror #8
    10a4:	000004a6 	andeq	r0, r0, r6, lsr #9
    10a8:	4f495047 	svcmi	0x00495047
    10ac:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    10b0:	6b636f4c 	blvs	18dcde8 <__Stack_Size+0x18dc9e8>
    10b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10b8:	e9006769 	stmdb	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    10bc:	47000004 	strmi	r0, [r0, -r4]
    10c0:	5f4f4950 	svcpl	0x004f4950
    10c4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    10c8:	74754f74 	ldrbtvc	r4, [r5], #-3956
    10cc:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
    10d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    10d4:	05300067 	ldreq	r0, [r0, #-103]!
    10d8:	50470000 	subpl	r0, r7, r0
    10dc:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 19b <_Minimum_Stack_Size+0x9b>
    10e0:	746e6576 	strbtvc	r6, [lr], #-1398
    10e4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    10e8:	6d437475 	cfstrdvs	mvd7, [r3, #-468]
    10ec:	05570064 	ldrbeq	r0, [r7, #-100]
    10f0:	50470000 	subpl	r0, r7, r0
    10f4:	505f4f49 	subspl	r4, pc, r9, asr #30
    10f8:	65526e69 	ldrbvs	r6, [r2, #-3689]
    10fc:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
    1100:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1104:	05c60067 	strbeq	r0, [r6, #103]
    1108:	50470000 	subpl	r0, r7, r0
    110c:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 1cb <_Minimum_Stack_Size+0xcb>
    1110:	4c495458 	cfstrdmi	mvd5, [r9], {88}
    1114:	43656e69 	cmnmi	r5, #1680	; 0x690
    1118:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    111c:	060d0067 	streq	r0, [sp], -r7, rrx
    1120:	50470000 	subpl	r0, r7, r0
    1124:	415f4f49 	cmpmi	pc, r9, asr #30
    1128:	444f4946 	strbmi	r4, [pc], #2374	; 1130 <__Stack_Size+0xd30>
    112c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1130:	06220074 	undefined
    1134:	50470000 	subpl	r0, r7, r0
    1138:	445f4f49 	ldrbmi	r4, [pc], #3913	; 1140 <__Stack_Size+0xd40>
    113c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1140:	00000074 	andeq	r0, r0, r4, ror r0
    1144:	035c0000 	cmpeq	ip, #0	; 0x0
    1148:	00020000 	andeq	r0, r2, r0
    114c:	000028eb 	andeq	r2, r0, fp, ror #17
    1150:	000008e7 	andeq	r0, r0, r7, ror #17
    1154:	00000310 	andeq	r0, r0, r0, lsl r3
    1158:	4349564e 	movtmi	r5, #38478	; 0x964e
    115c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1160:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1164:	00000335 	andeq	r0, r0, r5, lsr r3
    1168:	4349564e 	movtmi	r5, #38478	; 0x964e
    116c:	4243535f 	submi	r5, r3, #2080374785	; 0x7c000001
    1170:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1174:	58007469 	stmdapl	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1178:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    117c:	5f434956 	svcpl	0x00434956
    1180:	6f697250 	svcvs	0x00697250
    1184:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1188:	756f7247 	strbvc	r7, [pc, #-583]!	; f49 <__Stack_Size+0xb49>
    118c:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1190:	00676966 	rsbeq	r6, r7, r6, ror #18
    1194:	0000037f 	andeq	r0, r0, pc, ror r3
    1198:	4349564e 	movtmi	r5, #38478	; 0x964e
    119c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    11a0:	03f10074 	mvnseq	r0, #116	; 0x74
    11a4:	564e0000 	strbpl	r0, [lr], -r0
    11a8:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    11ac:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    11b0:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    11b4:	04160074 	ldreq	r0, [r6], #-116
    11b8:	564e0000 	strbpl	r0, [lr], -r0
    11bc:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    11c0:	75437465 	strbvc	r7, [r3, #-1125]
    11c4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    11c8:	6e655074 	mcrvs	0, 3, r5, cr5, cr4, {3}
    11cc:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    11d0:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    11d4:	6e6e6168 	powvsez	f6, f6, #0.0
    11d8:	2e006c65 	cdpcs	12, 0, cr6, cr0, cr5, {3}
    11dc:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    11e0:	5f434956 	svcpl	0x00434956
    11e4:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    11e8:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    11ec:	656e6e61 	strbvs	r6, [lr, #-3681]!
    11f0:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    11f4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    11f8:	53746942 	cmnpl	r4, #1081344	; 0x108000
    11fc:	75746174 	ldrbvc	r6, [r4, #-372]!
    1200:	04750073 	ldrbteq	r0, [r5], #-115
    1204:	564e0000 	strbpl	r0, [lr], -r0
    1208:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    120c:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    1210:	61684351 	cmnvs	r8, r1, asr r3
    1214:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    1218:	646e6550 	strbtvs	r6, [lr], #-1360
    121c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1220:	9c007469 	cfstrsls	mvf7, [r0], {105}
    1224:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    1228:	5f434956 	svcpl	0x00434956
    122c:	61656c43 	cmnvs	r5, r3, asr #24
    1230:	51524972 	cmppl	r2, r2, ror r9
    1234:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1238:	506c656e 	rsbpl	r6, ip, lr, ror #10
    123c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1240:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1244:	04c50074 	strbeq	r0, [r5], #116
    1248:	564e0000 	strbpl	r0, [lr], -r0
    124c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1250:	75437465 	strbvc	r7, [r3, #-1125]
    1254:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1258:	74634174 	strbtvc	r4, [r3], #-372
    125c:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    1260:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1264:	dd007265 	sfmle	f7, 4, [r0, #-404]
    1268:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    126c:	5f434956 	svcpl	0x00434956
    1270:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1274:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1278:	656e6e61 	strbvs	r6, [lr, #-3681]!
    127c:	7463416c 	strbtvc	r4, [r3], #-364
    1280:	42657669 	rsbmi	r7, r5, #110100480	; 0x6900000
    1284:	74537469 	ldrbvc	r7, [r3], #-1129
    1288:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    128c:	00052400 	andeq	r2, r5, r0, lsl #8
    1290:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1294:	65475f43 	strbvs	r5, [r7, #-3907]
    1298:	55504374 	ldrbpl	r4, [r0, #-884]
    129c:	3c004449 	cfstrscc	mvf4, [r0], {73}
    12a0:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    12a4:	5f434956 	svcpl	0x00434956
    12a8:	56746553 	undefined
    12ac:	6f746365 	svcvs	0x00746365
    12b0:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    12b4:	7300656c 	movwvc	r6, #1388	; 0x56c
    12b8:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    12bc:	5f434956 	svcpl	0x00434956
    12c0:	656e6547 	strbvs	r6, [lr, #-1351]!
    12c4:	65746172 	ldrbvs	r6, [r4, #-370]!
    12c8:	74737953 	ldrbtvc	r7, [r3], #-2387
    12cc:	65526d65 	ldrbvs	r6, [r2, #-3429]
    12d0:	00746573 	rsbseq	r6, r4, r3, ror r5
    12d4:	00000587 	andeq	r0, r0, r7, lsl #11
    12d8:	4349564e 	movtmi	r5, #38478	; 0x964e
    12dc:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    12e0:	74617265 	strbtvc	r7, [r1], #-613
    12e4:	726f4365 	rsbvc	r4, pc, #-1811939327	; 0x94000001
    12e8:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    12ec:	9b007465 	blls	1e488 <__Stack_Size+0x1e088>
    12f0:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    12f4:	5f434956 	svcpl	0x00434956
    12f8:	74737953 	ldrbtvc	r7, [r3], #-2387
    12fc:	504c6d65 	subpl	r6, ip, r5, ror #26
    1300:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1304:	d0006769 	andle	r6, r0, r9, ror #14
    1308:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    130c:	5f434956 	svcpl	0x00434956
    1310:	74737953 	ldrbtvc	r7, [r3], #-2387
    1314:	61486d65 	cmpvs	r8, r5, ror #26
    1318:	656c646e 	strbvs	r6, [ip, #-1134]!
    131c:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1320:	00676966 	rsbeq	r6, r7, r6, ror #18
    1324:	00000615 	andeq	r0, r0, r5, lsl r6
    1328:	4349564e 	movtmi	r5, #38478	; 0x964e
    132c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    1330:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1334:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1338:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    133c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1340:	6f437974 	svcvs	0x00437974
    1344:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1348:	00069800 	andeq	r9, r6, r0, lsl #16
    134c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1350:	65475f43 	strbvs	r5, [r7, #-3907]
    1354:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    1358:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    135c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1360:	65507265 	ldrbvs	r7, [r0, #-613]
    1364:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1368:	74694267 	strbtvc	r4, [r9], #-615
    136c:	74617453 	strbtvc	r7, [r1], #-1107
    1370:	ed007375 	stc	3, cr7, [r0, #-468]
    1374:	4e000006 	cdpmi	0, 0, cr0, cr0, cr6, {0}
    1378:	5f434956 	svcpl	0x00434956
    137c:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    1380:	65747379 	ldrbvs	r7, [r4, #-889]!
    1384:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1388:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    138c:	646e6550 	strbtvs	r6, [lr], #-1360
    1390:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1394:	22007469 	andcs	r7, r0, #1761607680	; 0x69000000
    1398:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
    139c:	5f434956 	svcpl	0x00434956
    13a0:	61656c43 	cmnvs	r5, r3, asr #24
    13a4:	73795372 	cmnvc	r9, #-939524095	; 0xc8000001
    13a8:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    13ac:	6c646e61 	stclvs	14, cr6, [r4], #-388
    13b0:	65507265 	ldrbvs	r7, [r0, #-613]
    13b4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    13b8:	74694267 	strbtvc	r4, [r9], #-615
    13bc:	00075700 	andeq	r5, r7, r0, lsl #14
    13c0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    13c4:	65475f43 	strbvs	r5, [r7, #-3907]
    13c8:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    13cc:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    13d0:	6c646e61 	stclvs	14, cr6, [r4], #-388
    13d4:	63417265 	movtvs	r7, #4709	; 0x1265
    13d8:	65766974 	ldrbvs	r6, [r6, #-2420]!
    13dc:	53746942 	cmnpl	r4, #1081344	; 0x108000
    13e0:	75746174 	ldrbvc	r6, [r4, #-372]!
    13e4:	07aa0073 	undefined
    13e8:	564e0000 	strbpl	r0, [lr], -r0
    13ec:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    13f0:	61467465 	cmpvs	r6, r5, ror #8
    13f4:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    13f8:	6c646e61 	stclvs	14, cr6, [r4], #-388
    13fc:	6f537265 	svcvs	0x00537265
    1400:	65637275 	strbvs	r7, [r3, #-629]!
    1404:	08070073 	stmdaeq	r7, {r0, r1, r4, r5, r6}
    1408:	564e0000 	strbpl	r0, [lr], -r0
    140c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1410:	61467465 	cmpvs	r6, r5, ror #8
    1414:	41746c75 	cmnmi	r4, r5, ror ip
    1418:	65726464 	ldrbvs	r6, [r2, #-1124]!
    141c:	50007373 	andpl	r7, r0, r3, ror r3
    1420:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    1424:	5f434956 	svcpl	0x00434956
    1428:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    142c:	50455341 	subpl	r5, r5, r1, asr #6
    1430:	69004952 	stmdbvs	r0, {r1, r4, r6, r8, fp, lr}
    1434:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    1438:	5f434956 	svcpl	0x00434956
    143c:	45534142 	ldrbmi	r4, [r3, #-322]
    1440:	43495250 	movtmi	r5, #37456	; 0x9250
    1444:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1448:	08920047 	ldmeq	r2, {r0, r1, r2, r6}
    144c:	564e0000 	strbpl	r0, [lr], -r0
    1450:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    1454:	54455345 	strbpl	r5, [r5], #-837
    1458:	4c554146 	ldfmie	f4, [r5], {70}
    145c:	53414d54 	movtpl	r4, #7508	; 0x1d54
    1460:	08a7004b 	stmiaeq	r7!, {r0, r1, r3, r6}
    1464:	564e0000 	strbpl	r0, [lr], -r0
    1468:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    146c:	41465445 	cmpmi	r6, r5, asr #8
    1470:	4d544c55 	ldclmi	12, cr4, [r4, #-340]
    1474:	004b5341 	subeq	r5, fp, r1, asr #6
    1478:	000008bc 	strheq	r0, [r0], -ip
    147c:	4349564e 	movtmi	r5, #38478	; 0x964e
    1480:	5345525f 	movtpl	r5, #21087	; 0x525f
    1484:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1488:	53414d49 	movtpl	r4, #7497	; 0x1d49
    148c:	08d1004b 	ldmeq	r1, {r0, r1, r3, r6}^
    1490:	564e0000 	strbpl	r0, [lr], -r0
    1494:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1498:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    149c:	53414d49 	movtpl	r4, #7497	; 0x1d49
    14a0:	0000004b 	andeq	r0, r0, fp, asr #32
    14a4:	00c70000 	sbceq	r0, r7, r0
    14a8:	00020000 	andeq	r0, r2, r0
    14ac:	000031d2 	ldrdeq	r3, [r0], -r2
    14b0:	00000247 	andeq	r0, r0, r7, asr #4
    14b4:	000000d3 	ldrdeq	r0, [r0], -r3
    14b8:	5f525750 	svcpl	0x00525750
    14bc:	6b636142 	blvs	18d99cc <__Stack_Size+0x18d95cc>
    14c0:	63417075 	movtvs	r7, #4213	; 0x1075
    14c4:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    14c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14cc:	000000f8 	strdeq	r0, [r0], -r8
    14d0:	5f525750 	svcpl	0x00525750
    14d4:	43445650 	movtmi	r5, #18000	; 0x4650
    14d8:	1d00646d 	cfstrsne	mvf6, [r0, #-436]
    14dc:	50000001 	andpl	r0, r0, r1
    14e0:	505f5257 	subspl	r5, pc, r7, asr r2
    14e4:	654c4456 	strbvs	r4, [ip, #-1110]
    14e8:	436c6576 	cmnmi	ip, #494927872	; 0x1d800000
    14ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    14f0:	01530067 	cmpeq	r3, r7, rrx
    14f4:	57500000 	ldrbpl	r0, [r0, -r0]
    14f8:	61575f52 	cmpvs	r7, r2, asr pc
    14fc:	7055656b 	subsvc	r6, r5, fp, ror #10
    1500:	436e6950 	cmnmi	lr, #1310720	; 0x140000
    1504:	7800646d 	stmdavc	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    1508:	50000001 	andpl	r0, r0, r1
    150c:	475f5257 	undefined
    1510:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    1514:	74536761 	ldrbvc	r6, [r3], #-1889
    1518:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    151c:	0001ae00 	andeq	sl, r1, r0, lsl #28
    1520:	52575000 	subspl	r5, r7, #0	; 0x0
    1524:	656c435f 	strbvs	r4, [ip, #-863]!
    1528:	6c467261 	sfmvs	f7, 2, [r6], {97}
    152c:	d5006761 	strle	r6, [r0, #-1889]
    1530:	50000001 	andpl	r0, r0, r1
    1534:	455f5257 	ldrbmi	r5, [pc, #-599]	; 12e5 <__Stack_Size+0xee5>
    1538:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    153c:	4e415453 	mcrmi	4, 2, r5, cr1, cr3, {2}
    1540:	4d594244 	lfmmi	f4, 2, [r9, #-272]
    1544:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1548:	000001ea 	andeq	r0, r0, sl, ror #3
    154c:	5f525750 	svcpl	0x00525750
    1550:	65746e45 	ldrbvs	r6, [r4, #-3653]!
    1554:	4f545372 	svcmi	0x00545372
    1558:	646f4d50 	strbtvs	r4, [pc], #3408	; 1560 <__Stack_Size+0x1160>
    155c:	02310065 	eorseq	r0, r1, #101	; 0x65
    1560:	57500000 	ldrbpl	r0, [r0, -r0]
    1564:	65445f52 	strbvs	r5, [r4, #-3922]
    1568:	74696e49 	strbtvc	r6, [r9], #-3657
    156c:	00000000 	andeq	r0, r0, r0
    1570:	0002c000 	andeq	ip, r2, r0
    1574:	19000200 	stmdbne	r0, {r9}
    1578:	bd000034 	stclt	0, cr0, [r0, #-208]
    157c:	14000008 	strne	r0, [r0], #-8
    1580:	52000002 	andpl	r0, r0, #2	; 0x2
    1584:	445f4343 	ldrbmi	r4, [pc], #835	; 158c <__Stack_Size+0x118c>
    1588:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    158c:	02270074 	eoreq	r0, r7, #116	; 0x74
    1590:	43520000 	cmpmi	r2, #0	; 0x0
    1594:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1598:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    159c:	00676966 	rsbeq	r6, r7, r6, ror #18
    15a0:	0000024c 	andeq	r0, r0, ip, asr #4
    15a4:	5f434352 	svcpl	0x00434352
    15a8:	74696157 	strbtvc	r6, [r9], #-343
    15ac:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    15b0:	74534553 	ldrbvc	r4, [r3], #-1363
    15b4:	55747261 	ldrbpl	r7, [r4, #-609]!
    15b8:	02f10070 	rscseq	r0, r1, #112	; 0x70
    15bc:	43520000 	cmpmi	r2, #0	; 0x0
    15c0:	64415f43 	strbvs	r5, [r1], #-3907
    15c4:	7473756a 	ldrbtvc	r7, [r3], #-1386
    15c8:	43495348 	movtmi	r5, #37704	; 0x9348
    15cc:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    15d0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    15d4:	61566e6f 	cmpvs	r6, pc, ror #28
    15d8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    15dc:	00000323 	andeq	r0, r0, r3, lsr #6
    15e0:	5f434352 	svcpl	0x00434352
    15e4:	43495348 	movtmi	r5, #37704	; 0x9348
    15e8:	4a00646d 	bmi	1a7a4 <__Stack_Size+0x1a3a4>
    15ec:	52000003 	andpl	r0, r0, #3	; 0x3
    15f0:	505f4343 	subspl	r4, pc, r3, asr #6
    15f4:	6f434c4c 	svcvs	0x00434c4c
    15f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15fc:	00039100 	andeq	r9, r3, r0, lsl #2
    1600:	43435200 	movtmi	r5, #12800	; 0x3200
    1604:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1608:	00646d43 	rsbeq	r6, r4, r3, asr #26
    160c:	000003b8 	strheq	r0, [r0], -r8
    1610:	5f434352 	svcpl	0x00434352
    1614:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1618:	6f434b4c 	svcvs	0x00434b4c
    161c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1620:	0003f100 	andeq	pc, r3, r0, lsl #2
    1624:	43435200 	movtmi	r5, #12800	; 0x3200
    1628:	7465475f 	strbtvc	r4, [r5], #-1887
    162c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1630:	6f534b4c 	svcvs	0x00534b4c
    1634:	65637275 	strbvs	r7, [r3, #-629]!
    1638:	00040900 	andeq	r0, r4, r0, lsl #18
    163c:	43435200 	movtmi	r5, #12800	; 0x3200
    1640:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1644:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1648:	00676966 	rsbeq	r6, r7, r6, ror #18
    164c:	00000442 	andeq	r0, r0, r2, asr #8
    1650:	5f434352 	svcpl	0x00434352
    1654:	4b4c4350 	blmi	131239c <__Stack_Size+0x1311f9c>
    1658:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    165c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1660:	0000047b 	andeq	r0, r0, fp, ror r4
    1664:	5f434352 	svcpl	0x00434352
    1668:	4b4c4350 	blmi	13123b0 <__Stack_Size+0x1311fb0>
    166c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1670:	00676966 	rsbeq	r6, r7, r6, ror #18
    1674:	000004b0 	strheq	r0, [r0], -r0
    1678:	5f434352 	svcpl	0x00434352
    167c:	6f435449 	svcvs	0x00435449
    1680:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1684:	0004e500 	andeq	lr, r4, r0, lsl #10
    1688:	43435200 	movtmi	r5, #12800	; 0x3200
    168c:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    1690:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1694:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1698:	050c0067 	streq	r0, [ip, #-103]
    169c:	43520000 	cmpmi	r2, #0	; 0x0
    16a0:	44415f43 	strbmi	r5, [r1], #-3907
    16a4:	4b4c4343 	blmi	13123b8 <__Stack_Size+0x1311fb8>
    16a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    16ac:	45006769 	strmi	r6, [r0, #-1897]
    16b0:	52000005 	andpl	r0, r0, #5	; 0x5
    16b4:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    16b8:	6f434553 	svcvs	0x00434553
    16bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16c0:	00056c00 	andeq	r6, r5, r0, lsl #24
    16c4:	43435200 	movtmi	r5, #12800	; 0x3200
    16c8:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    16cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16d0:	00000593 	muleq	r0, r3, r5
    16d4:	5f434352 	svcpl	0x00434352
    16d8:	43435452 	movtmi	r5, #13394	; 0x3452
    16dc:	6f434b4c 	svcvs	0x00434b4c
    16e0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16e4:	0005bc00 	andeq	fp, r5, r0, lsl #24
    16e8:	43435200 	movtmi	r5, #12800	; 0x3200
    16ec:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    16f0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    16f4:	e300646d 	movw	r6, #1133	; 0x46d
    16f8:	52000005 	andpl	r0, r0, #5	; 0x5
    16fc:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1700:	6c437465 	cfstrdvs	mvd7, [r3], {101}
    1704:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1708:	71657246 	cmnvc	r5, r6, asr #4
    170c:	00064a00 	andeq	r4, r6, r0, lsl #20
    1710:	43435200 	movtmi	r5, #12800	; 0x3200
    1714:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1718:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    171c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    1720:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1724:	7f00646d 	svcvc	0x0000646d
    1728:	52000006 	andpl	r0, r0, #6	; 0x6
    172c:	415f4343 	cmpmi	pc, r3, asr #6
    1730:	50324250 	eorspl	r4, r2, r0, asr r2
    1734:	70697265 	rsbvc	r7, r9, r5, ror #4
    1738:	6f6c4368 	svcvs	0x006c4368
    173c:	6d436b63 	vstrvs	d22, [r3, #-396]
    1740:	06b40064 	ldrteq	r0, [r4], r4, rrx
    1744:	43520000 	cmpmi	r2, #0	; 0x0
    1748:	50415f43 	subpl	r5, r1, r3, asr #30
    174c:	65503142 	ldrbvs	r3, [r0, #-322]
    1750:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1754:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1758:	646d436b 	strbtvs	r4, [sp], #-875
    175c:	0006e900 	andeq	lr, r6, r0, lsl #18
    1760:	43435200 	movtmi	r5, #12800	; 0x3200
    1764:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1768:	72655032 	rsbvc	r5, r5, #50	; 0x32
    176c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1770:	74657365 	strbtvc	r7, [r5], #-869
    1774:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1778:	0000071e 	andeq	r0, r0, lr, lsl r7
    177c:	5f434352 	svcpl	0x00434352
    1780:	31425041 	cmpcc	r2, r1, asr #32
    1784:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1788:	65526870 	ldrbvs	r6, [r2, #-2160]
    178c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1790:	5300646d 	movwpl	r6, #1133	; 0x46d
    1794:	52000007 	andpl	r0, r0, #7	; 0x7
    1798:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    179c:	756b6361 	strbvc	r6, [fp, #-865]!
    17a0:	73655270 	cmnvc	r5, #7	; 0x7
    17a4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    17a8:	077a0064 	ldrbeq	r0, [sl, -r4, rrx]!
    17ac:	43520000 	cmpmi	r2, #0	; 0x0
    17b0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    17b4:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    17b8:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    17bc:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    17c0:	65747379 	ldrbvs	r7, [r4, #-889]!
    17c4:	646d436d 	strbtvs	r4, [sp], #-877
    17c8:	0007a100 	andeq	sl, r7, r0, lsl #2
    17cc:	43435200 	movtmi	r5, #12800	; 0x3200
    17d0:	4f434d5f 	svcmi	0x00434d5f
    17d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17d8:	c8006769 	stmdagt	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    17dc:	52000007 	andpl	r0, r0, #7	; 0x7
    17e0:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    17e4:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    17e8:	74536761 	ldrbvc	r6, [r3], #-1889
    17ec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    17f0:	0007fc00 	andeq	pc, r7, r0, lsl #24
    17f4:	43435200 	movtmi	r5, #12800	; 0x3200
    17f8:	656c435f 	strbvs	r4, [ip, #-863]!
    17fc:	6c467261 	sfmvs	f7, 2, [r6], {97}
    1800:	10006761 	andne	r6, r0, r1, ror #14
    1804:	52000008 	andpl	r0, r0, #8	; 0x8
    1808:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    180c:	54497465 	strbpl	r7, [r9], #-1125
    1810:	74617453 	strbtvc	r7, [r1], #-1107
    1814:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1818:	52000008 	andpl	r0, r0, #8	; 0x8
    181c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1820:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1824:	65505449 	ldrbvs	r5, [r0, #-1097]
    1828:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    182c:	74694267 	strbtvc	r4, [r9], #-615
    1830:	00000000 	andeq	r0, r0, r0
    1834:	00009d00 	andeq	r9, r0, r0, lsl #26
    1838:	d6000200 	strle	r0, [r0], -r0, lsl #4
    183c:	ef00003c 	svc	0x0000003c
    1840:	f7000001 	undefined instruction 0xf7000001
    1844:	53000000 	movwpl	r0, #0	; 0x0
    1848:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    184c:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1850:	6f534b4c 	svcvs	0x00534b4c
    1854:	65637275 	strbvs	r7, [r3, #-629]!
    1858:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    185c:	1c006769 	stcne	7, cr6, [r0], {105}
    1860:	53000001 	movwpl	r0, #1	; 0x1
    1864:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1868:	535f6b63 	cmppl	pc, #101376	; 0x18c00
    186c:	65527465 	ldrbvs	r7, [r2, #-1125]
    1870:	64616f6c 	strbtvs	r6, [r1], #-3948
    1874:	00014100 	andeq	r4, r1, r0, lsl #2
    1878:	73795300 	cmnvc	r9, #0	; 0x0
    187c:	6b636954 	blvs	18dbdd4 <__Stack_Size+0x18db9d4>
    1880:	756f435f 	strbvc	r4, [pc, #-863]!	; 1529 <__Stack_Size+0x1129>
    1884:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1888:	00646d43 	rsbeq	r6, r4, r3, asr #26
    188c:	00000166 	andeq	r0, r0, r6, ror #2
    1890:	54737953 	ldrbtpl	r7, [r3], #-2387
    1894:	5f6b6369 	svcpl	0x006b6369
    1898:	6f435449 	svcvs	0x00435449
    189c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    18a0:	00018b00 	andeq	r8, r1, r0, lsl #22
    18a4:	73795300 	cmnvc	r9, #0	; 0x0
    18a8:	6b636954 	blvs	18dbe00 <__Stack_Size+0x18dba00>
    18ac:	7465475f 	strbtvc	r4, [r5], #-1887
    18b0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    18b4:	00726574 	rsbseq	r6, r2, r4, ror r5
    18b8:	000001a2 	andeq	r0, r0, r2, lsr #3
    18bc:	54737953 	ldrbtpl	r7, [r3], #-2387
    18c0:	5f6b6369 	svcpl	0x006b6369
    18c4:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    18c8:	5367616c 	cmnpl	r7, #27	; 0x1b
    18cc:	75746174 	ldrbvc	r6, [r4, #-372]!
    18d0:	00000073 	andeq	r0, r0, r3, ror r0
    18d4:	07ac0000 	streq	r0, [ip, r0]!
    18d8:	00020000 	andeq	r0, r2, r0
    18dc:	00003ec5 	andeq	r3, r0, r5, asr #29
    18e0:	00002149 	andeq	r2, r0, r9, asr #2
    18e4:	00000778 	andeq	r0, r0, r8, ror r7
    18e8:	5f4d4954 	svcpl	0x004d4954
    18ec:	656d6954 	strbvs	r6, [sp, #-2388]!
    18f0:	65736142 	ldrbvs	r6, [r3, #-322]!
    18f4:	74696e49 	strbtvc	r6, [r9], #-3657
    18f8:	0007b600 	andeq	fp, r7, r0, lsl #12
    18fc:	4d495400 	cfstrdmi	mvd5, [r9]
    1900:	31434f5f 	cmpcc	r3, pc, asr pc
    1904:	74696e49 	strbtvc	r6, [r9], #-3657
    1908:	00082100 	andeq	r2, r8, r0, lsl #2
    190c:	4d495400 	cfstrdmi	mvd5, [r9]
    1910:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    1914:	74696e49 	strbtvc	r6, [r9], #-3657
    1918:	00088c00 	andeq	r8, r8, r0, lsl #24
    191c:	4d495400 	cfstrdmi	mvd5, [r9]
    1920:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    1924:	74696e49 	strbtvc	r6, [r9], #-3657
    1928:	0008f700 	andeq	pc, r8, r0, lsl #14
    192c:	4d495400 	cfstrdmi	mvd5, [r9]
    1930:	34434f5f 	strbcc	r4, [r3], #-3935
    1934:	74696e49 	strbtvc	r6, [r9], #-3657
    1938:	00096200 	andeq	r6, r9, r0, lsl #4
    193c:	4d495400 	cfstrdmi	mvd5, [r9]
    1940:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1944:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1948:	00000b2e 	andeq	r0, r0, lr, lsr #22
    194c:	5f4d4954 	svcpl	0x004d4954
    1950:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    1954:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1958:	17006769 	strne	r6, [r0, -r9, ror #14]
    195c:	5400000d 	strpl	r0, [r0], #-13
    1960:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    1964:	43525444 	cmpmi	r2, #1140850688	; 0x44000000
    1968:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    196c:	0d520067 	ldcleq	0, cr0, [r2, #-412]
    1970:	49540000 	ldmdbmi	r4, {}^
    1974:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1978:	6142656d 	cmpvs	r2, sp, ror #10
    197c:	74536573 	ldrbvc	r6, [r3], #-1395
    1980:	74637572 	strbtvc	r7, [r3], #-1394
    1984:	74696e49 	strbtvc	r6, [r9], #-3657
    1988:	000d7900 	andeq	r7, sp, r0, lsl #18
    198c:	4d495400 	cfstrdmi	mvd5, [r9]
    1990:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
    1994:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    1998:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    199c:	0da00074 	stceq	0, cr0, [r0, #464]!
    19a0:	49540000 	ldmdbmi	r4, {}^
    19a4:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    19a8:	75727453 	ldrbvc	r7, [r2, #-1107]!
    19ac:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    19b0:	c7007469 	strgt	r7, [r0, -r9, ror #8]
    19b4:	5400000d 	strpl	r0, [r0], #-13
    19b8:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    19bc:	53525444 	cmppl	r2, #1140850688	; 0x44000000
    19c0:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    19c4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    19c8:	0dee0074 	stcleq	0, cr0, [lr, #464]!
    19cc:	49540000 	ldmdbmi	r4, {}^
    19d0:	6d435f4d 	stclvs	15, cr5, [r3, #-308]
    19d4:	0e230064 	cdpeq	0, 2, cr0, cr3, cr4, {3}
    19d8:	49540000 	ldmdbmi	r4, {}^
    19dc:	74435f4d 	strbvc	r5, [r3], #-3917
    19e0:	57506c72 	undefined
    19e4:	74754f4d 	ldrbtvc	r4, [r5], #-3917
    19e8:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
    19ec:	000e5800 	andeq	r5, lr, r0, lsl #16
    19f0:	4d495400 	cfstrdmi	mvd5, [r9]
    19f4:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    19f8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    19fc:	0e9b0067 	cdpeq	0, 9, cr0, cr11, cr7, {3}
    1a00:	49540000 	ldmdbmi	r4, {}^
    1a04:	65475f4d 	strbvs	r5, [r7, #-3917]
    1a08:	6172656e 	cmnvs	r2, lr, ror #10
    1a0c:	76456574 	undefined
    1a10:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1a14:	00000ed0 	ldrdeq	r0, [r0], -r0
    1a18:	5f4d4954 	svcpl	0x004d4954
    1a1c:	43414d44 	movtmi	r4, #7492	; 0x1d44
    1a20:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a24:	0f150067 	svceq	0x00150067
    1a28:	49540000 	ldmdbmi	r4, {}^
    1a2c:	4d445f4d 	stclmi	15, cr5, [r4, #-308]
    1a30:	646d4341 	strbtvs	r4, [sp], #-833
    1a34:	000f5800 	andeq	r5, pc, r0, lsl #16
    1a38:	4d495400 	cfstrdmi	mvd5, [r9]
    1a3c:	746e495f 	strbtvc	r4, [lr], #-2399
    1a40:	616e7265 	cmnvs	lr, r5, ror #4
    1a44:	6f6c436c 	svcvs	0x006c436c
    1a48:	6f436b63 	svcvs	0x00436b63
    1a4c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a50:	000f7f00 	andeq	r7, pc, r0, lsl #30
    1a54:	4d495400 	cfstrdmi	mvd5, [r9]
    1a58:	5254495f 	subspl	r4, r4, #1556480	; 0x17c000
    1a5c:	74784578 	ldrbtvc	r4, [r8], #-1400
    1a60:	616e7265 	cmnvs	lr, r5, ror #4
    1a64:	6f6c436c 	svcvs	0x006c436c
    1a68:	6f436b63 	svcvs	0x00436b63
    1a6c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1a70:	000fe400 	andeq	lr, pc, r0, lsl #8
    1a74:	4d495400 	cfstrdmi	mvd5, [r9]
    1a78:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1a7c:	65747845 	ldrbvs	r7, [r4, #-2117]!
    1a80:	6c616e72 	stclvs	14, cr6, [r1], #-456
    1a84:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1a88:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    1a8c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a90:	000010f8 	strdeq	r1, [r0], -r8
    1a94:	5f4d4954 	svcpl	0x004d4954
    1a98:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1a9c:	6b636f6c 	blvs	18dd854 <__Stack_Size+0x18dd454>
    1aa0:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1aa4:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1aa8:	00676966 	rsbeq	r6, r7, r6, ror #18
    1aac:	00001193 	muleq	r0, r3, r1
    1ab0:	5f4d4954 	svcpl	0x004d4954
    1ab4:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1ab8:	6b636f6c 	blvs	18dd870 <__Stack_Size+0x18dd470>
    1abc:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1ac0:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1ac4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ac8:	00001220 	andeq	r1, r0, r0, lsr #4
    1acc:	5f4d4954 	svcpl	0x004d4954
    1ad0:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1ad4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ad8:	125b0067 	subsne	r0, fp, #103	; 0x67
    1adc:	49540000 	ldmdbmi	r4, {}^
    1ae0:	72505f4d 	subsvc	r5, r0, #308	; 0x134
    1ae4:	61637365 	cmnvs	r3, r5, ror #6
    1ae8:	4372656c 	cmnmi	r2, #452984832	; 0x1b000000
    1aec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1af0:	129e0067 	addsne	r0, lr, #103	; 0x67
    1af4:	49540000 	ldmdbmi	r4, {}^
    1af8:	6f435f4d 	svcvs	0x00435f4d
    1afc:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    1b00:	646f4d72 	strbtvs	r4, [pc], #3442	; 1b08 <__Stack_Size+0x1708>
    1b04:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1b08:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b0c:	000012e5 	andeq	r1, r0, r5, ror #5
    1b10:	5f4d4954 	svcpl	0x004d4954
    1b14:	656c6553 	strbvs	r6, [ip, #-1363]!
    1b18:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1b1c:	54747570 	ldrbtpl	r7, [r4], #-1392
    1b20:	67676972 	undefined
    1b24:	12007265 	andne	r7, r0, #1342177286	; 0x50000006
    1b28:	54000013 	strpl	r0, [r0], #-19
    1b2c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; deb <__Stack_Size+0x9eb>
    1b30:	646f636e 	strbtvs	r6, [pc], #878	; 1b38 <__Stack_Size+0x1738>
    1b34:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    1b38:	66726574 	undefined
    1b3c:	43656361 	cmnmi	r5, #-2080374783	; 0x84000001
    1b40:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b44:	13950067 	orrsne	r0, r5, #103	; 0x67
    1b48:	49540000 	ldmdbmi	r4, {}^
    1b4c:	6f465f4d 	svcvs	0x00465f4d
    1b50:	64656372 	strbtvs	r6, [r5], #-882
    1b54:	4331434f 	teqmi	r1, #1006632961	; 0x3c000001
    1b58:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b5c:	13dc0067 	bicsne	r0, ip, #103	; 0x67
    1b60:	49540000 	ldmdbmi	r4, {}^
    1b64:	6f465f4d 	svcvs	0x00465f4d
    1b68:	64656372 	strbtvs	r6, [r5], #-882
    1b6c:	4332434f 	teqmi	r2, #1006632961	; 0x3c000001
    1b70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b74:	14210067 	strtne	r0, [r1], #-103
    1b78:	49540000 	ldmdbmi	r4, {}^
    1b7c:	6f465f4d 	svcvs	0x00465f4d
    1b80:	64656372 	strbtvs	r6, [r5], #-882
    1b84:	4333434f 	teqmi	r3, #1006632961	; 0x3c000001
    1b88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b8c:	14680067 	strbtne	r0, [r8], #-103
    1b90:	49540000 	ldmdbmi	r4, {}^
    1b94:	6f465f4d 	svcvs	0x00465f4d
    1b98:	64656372 	strbtvs	r6, [r5], #-882
    1b9c:	4334434f 	teqmi	r4, #1006632961	; 0x3c000001
    1ba0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ba4:	14ad0067 	strtne	r0, [sp], #103
    1ba8:	49540000 	ldmdbmi	r4, {}^
    1bac:	52415f4d 	subpl	r5, r1, #308	; 0x134
    1bb0:	65725052 	ldrbvs	r5, [r2, #-82]!
    1bb4:	64616f6c 	strbtvs	r6, [r1], #-3948
    1bb8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1bbc:	e2006769 	and	r6, r0, #27525120	; 0x1a40000
    1bc0:	54000014 	strpl	r0, [r0], #-20
    1bc4:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1bc8:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1bcc:	4d4f4374 	stclmi	3, cr4, [pc, #-464]
    1bd0:	00151700 	andseq	r1, r5, r0, lsl #14
    1bd4:	4d495400 	cfstrdmi	mvd5, [r9]
    1bd8:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1bdc:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    1be0:	414d4443 	cmpmi	sp, r3, asr #8
    1be4:	00154c00 	andseq	r4, r5, r0, lsl #24
    1be8:	4d495400 	cfstrdmi	mvd5, [r9]
    1bec:	5043435f 	subpl	r4, r3, pc, asr r3
    1bf0:	6f6c6572 	svcvs	0x006c6572
    1bf4:	6f436461 	svcvs	0x00436461
    1bf8:	6f72746e 	svcvs	0x0072746e
    1bfc:	1581006c 	strne	r0, [r1, #108]
    1c00:	49540000 	ldmdbmi	r4, {}^
    1c04:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1c08:	65725031 	ldrbvs	r5, [r2, #-49]!
    1c0c:	64616f6c 	strbtvs	r6, [r1], #-3948
    1c10:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c14:	c8006769 	stmdagt	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1c18:	54000015 	strpl	r0, [r0], #-21
    1c1c:	4f5f4d49 	svcmi	0x005f4d49
    1c20:	72503243 	subsvc	r3, r0, #805306372	; 0x30000004
    1c24:	616f6c65 	cmnvs	pc, r5, ror #24
    1c28:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1c2c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c30:	0000160d 	andeq	r1, r0, sp, lsl #12
    1c34:	5f4d4954 	svcpl	0x004d4954
    1c38:	5033434f 	eorspl	r4, r3, pc, asr #6
    1c3c:	6f6c6572 	svcvs	0x006c6572
    1c40:	6f436461 	svcvs	0x00436461
    1c44:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c48:	00165400 	andseq	r5, r6, r0, lsl #8
    1c4c:	4d495400 	cfstrdmi	mvd5, [r9]
    1c50:	34434f5f 	strbcc	r4, [r3], #-3935
    1c54:	6c657250 	sfmvs	f7, 2, [r5], #-320
    1c58:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    1c5c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c60:	16990067 	ldrne	r0, [r9], r7, rrx
    1c64:	49540000 	ldmdbmi	r4, {}^
    1c68:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1c6c:	73614631 	cmnvc	r1, #51380224	; 0x3100000
    1c70:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1c74:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c78:	000016e0 	andeq	r1, r0, r0, ror #13
    1c7c:	5f4d4954 	svcpl	0x004d4954
    1c80:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    1c84:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    1c88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c8c:	17250067 	strne	r0, [r5, -r7, rrx]!
    1c90:	49540000 	ldmdbmi	r4, {}^
    1c94:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1c98:	73614633 	cmnvc	r1, #53477376	; 0x3300000
    1c9c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1ca0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ca4:	0000176c 	andeq	r1, r0, ip, ror #14
    1ca8:	5f4d4954 	svcpl	0x004d4954
    1cac:	4634434f 	ldrtmi	r4, [r4], -pc, asr #6
    1cb0:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    1cb4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1cb8:	17b10067 	ldrne	r0, [r1, r7, rrx]!
    1cbc:	49540000 	ldmdbmi	r4, {}^
    1cc0:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1cc4:	4f726165 	svcmi	0x00726165
    1cc8:	65523143 	ldrbvs	r3, [r2, #-323]
    1ccc:	17f80066 	ldrbne	r0, [r8, r6, rrx]!
    1cd0:	49540000 	ldmdbmi	r4, {}^
    1cd4:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1cd8:	4f726165 	svcmi	0x00726165
    1cdc:	65523243 	ldrbvs	r3, [r2, #-579]
    1ce0:	183d0066 	ldmdane	sp!, {r1, r2, r5, r6}
    1ce4:	49540000 	ldmdbmi	r4, {}^
    1ce8:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1cec:	4f726165 	svcmi	0x00726165
    1cf0:	65523343 	ldrbvs	r3, [r2, #-835]
    1cf4:	18840066 	stmne	r4, {r1, r2, r5, r6}
    1cf8:	49540000 	ldmdbmi	r4, {}^
    1cfc:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1d00:	4f726165 	svcmi	0x00726165
    1d04:	65523443 	ldrbvs	r3, [r2, #-1091]
    1d08:	18c90066 	stmiane	r9, {r1, r2, r5, r6}^
    1d0c:	49540000 	ldmdbmi	r4, {}^
    1d10:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1d14:	6c6f5031 	stclvs	0, cr5, [pc], #-196
    1d18:	74697261 	strbtvc	r7, [r9], #-609
    1d1c:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1d20:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d24:	00001910 	andeq	r1, r0, r0, lsl r9
    1d28:	5f4d4954 	svcpl	0x004d4954
    1d2c:	4e31434f 	cdpmi	3, 3, cr4, cr1, cr15, {2}
    1d30:	616c6f50 	cmnvs	ip, r0, asr pc
    1d34:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1d38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1d3c:	57006769 	strpl	r6, [r0, -r9, ror #14]
    1d40:	54000019 	strpl	r0, [r0], #-25
    1d44:	4f5f4d49 	svcmi	0x005f4d49
    1d48:	6f503243 	svcvs	0x00503243
    1d4c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1d50:	6f437974 	svcvs	0x00437974
    1d54:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1d58:	00199c00 	andseq	r9, r9, r0, lsl #24
    1d5c:	4d495400 	cfstrdmi	mvd5, [r9]
    1d60:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    1d64:	6c6f504e 	stclvs	0, cr5, [pc], #-312
    1d68:	74697261 	strbtvc	r7, [r9], #-609
    1d6c:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1d70:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d74:	000019e1 	andeq	r1, r0, r1, ror #19
    1d78:	5f4d4954 	svcpl	0x004d4954
    1d7c:	5033434f 	eorspl	r4, r3, pc, asr #6
    1d80:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1d84:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1d88:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d8c:	1a260067 	bne	981f30 <__Stack_Size+0x981b30>
    1d90:	49540000 	ldmdbmi	r4, {}^
    1d94:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1d98:	6f504e33 	svcvs	0x00504e33
    1d9c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1da0:	6f437974 	svcvs	0x00437974
    1da4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1da8:	001a6b00 	andseq	r6, sl, r0, lsl #22
    1dac:	4d495400 	cfstrdmi	mvd5, [r9]
    1db0:	34434f5f 	strbcc	r4, [r3], #-3935
    1db4:	616c6f50 	cmnvs	ip, r0, asr pc
    1db8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1dbc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1dc0:	b0006769 	andlt	r6, r0, r9, ror #14
    1dc4:	5400001a 	strpl	r0, [r0], #-26
    1dc8:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1dcc:	6d437843 	stclvs	8, cr7, [r3, #-268]
    1dd0:	1af50064 	bne	ffd41f68 <SCS_BASE+0x1fd33f68>
    1dd4:	49540000 	ldmdbmi	r4, {}^
    1dd8:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    1ddc:	6d434e78 	stclvs	14, cr4, [r3, #-480]
    1de0:	1b3a0064 	blne	e81f78 <__Stack_Size+0xe81b78>
    1de4:	49540000 	ldmdbmi	r4, {}^
    1de8:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1dec:	7463656c 	strbtvc	r6, [r3], #-1388
    1df0:	4d78434f 	ldclmi	3, cr4, [r8, #-316]!
    1df4:	001b8500 	andseq	r8, fp, r0, lsl #10
    1df8:	4d495400 	cfstrdmi	mvd5, [r9]
    1dfc:	6470555f 	ldrbtvs	r5, [r0], #-1375
    1e00:	44657461 	strbtmi	r7, [r5], #-1121
    1e04:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1e08:	6f43656c 	svcvs	0x0043656c
    1e0c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1e10:	001bba00 	andseq	fp, fp, r0, lsl #20
    1e14:	4d495400 	cfstrdmi	mvd5, [r9]
    1e18:	6470555f 	ldrbtvs	r5, [r0], #-1375
    1e1c:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
    1e20:	65757165 	ldrbvs	r7, [r5, #-357]!
    1e24:	6f437473 	svcvs	0x00437473
    1e28:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1e2c:	001bef00 	andseq	lr, fp, r0, lsl #30
    1e30:	4d495400 	cfstrdmi	mvd5, [r9]
    1e34:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1e38:	48746365 	ldmdami	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1e3c:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    1e40:	6f736e65 	svcvs	0x00736e65
    1e44:	1c240072 	stcne	0, cr0, [r4], #-456
    1e48:	49540000 	ldmdbmi	r4, {}^
    1e4c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1e50:	7463656c 	strbtvc	r6, [r3], #-1388
    1e54:	50656e4f 	rsbpl	r6, r5, pc, asr #28
    1e58:	65736c75 	ldrbvs	r6, [r3, #-3189]!
    1e5c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1e60:	001c5b00 	andseq	r5, ip, r0, lsl #22
    1e64:	4d495400 	cfstrdmi	mvd5, [r9]
    1e68:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1e6c:	4f746365 	svcmi	0x00746365
    1e70:	75707475 	ldrbvc	r7, [r0, #-1141]!
    1e74:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1e78:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1e7c:	001c9200 	andseq	r9, ip, r0, lsl #4
    1e80:	4d495400 	cfstrdmi	mvd5, [r9]
    1e84:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1e88:	53746365 	cmnpl	r4, #-1811939327	; 0x94000001
    1e8c:	6576616c 	ldrbvs	r6, [r6, #-364]!
    1e90:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1e94:	001cc900 	andseq	ip, ip, r0, lsl #18
    1e98:	4d495400 	cfstrdmi	mvd5, [r9]
    1e9c:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1ea0:	4d746365 	ldclmi	3, cr6, [r4, #-404]!
    1ea4:	65747361 	ldrbvs	r7, [r4, #-865]!
    1ea8:	616c5372 	smcvs	50482
    1eac:	6f4d6576 	svcvs	0x004d6576
    1eb0:	00006564 	andeq	r6, r0, r4, ror #10
    1eb4:	5400001d 	strpl	r0, [r0], #-29
    1eb8:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1ebc:	6f437465 	svcvs	0x00437465
    1ec0:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    1ec4:	1d350072 	ldcne	0, cr0, [r5, #-456]!
    1ec8:	49540000 	ldmdbmi	r4, {}^
    1ecc:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1ed0:	74754174 	ldrbtvc	r4, [r5], #-372
    1ed4:	6c65726f 	sfmvs	f7, 2, [r5], #-444
    1ed8:	0064616f 	rsbeq	r6, r4, pc, ror #2
    1edc:	00001d6a 	andeq	r1, r0, sl, ror #26
    1ee0:	5f4d4954 	svcpl	0x004d4954
    1ee4:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1ee8:	61706d6f 	cmnvs	r0, pc, ror #26
    1eec:	00316572 	eorseq	r6, r1, r2, ror r5
    1ef0:	00001d9f 	muleq	r0, pc, sp
    1ef4:	5f4d4954 	svcpl	0x004d4954
    1ef8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1efc:	61706d6f 	cmnvs	r0, pc, ror #26
    1f00:	00326572 	eorseq	r6, r2, r2, ror r5
    1f04:	00001dd4 	ldrdeq	r1, [r0], -r4
    1f08:	5f4d4954 	svcpl	0x004d4954
    1f0c:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1f10:	61706d6f 	cmnvs	r0, pc, ror #26
    1f14:	00336572 	eorseq	r6, r3, r2, ror r5
    1f18:	00001e09 	andeq	r1, r0, r9, lsl #28
    1f1c:	5f4d4954 	svcpl	0x004d4954
    1f20:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1f24:	61706d6f 	cmnvs	r0, pc, ror #26
    1f28:	00346572 	eorseq	r6, r4, r2, ror r5
    1f2c:	00001e3e 	andeq	r1, r0, lr, lsr lr
    1f30:	5f4d4954 	svcpl	0x004d4954
    1f34:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1f38:	72503143 	subsvc	r3, r0, #-1073741808	; 0xc0000010
    1f3c:	61637365 	cmnvs	r3, r5, ror #6
    1f40:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1f44:	00001e62 	andeq	r1, r0, r2, ror #28
    1f48:	5f4d4954 	svcpl	0x004d4954
    1f4c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1f50:	72503243 	subsvc	r3, r0, #805306372	; 0x30000004
    1f54:	61637365 	cmnvs	r3, r5, ror #6
    1f58:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1f5c:	00001e84 	andeq	r1, r0, r4, lsl #29
    1f60:	5f4d4954 	svcpl	0x004d4954
    1f64:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1f68:	72503343 	subsvc	r3, r0, #201326593	; 0xc000001
    1f6c:	61637365 	cmnvs	r3, r5, ror #6
    1f70:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1f74:	00001ea8 	andeq	r1, r0, r8, lsr #29
    1f78:	5f4d4954 	svcpl	0x004d4954
    1f7c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1f80:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    1f84:	61637365 	cmnvs	r3, r5, ror #6
    1f88:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1f8c:	00001eca 	andeq	r1, r0, sl, asr #29
    1f90:	5f4d4954 	svcpl	0x004d4954
    1f94:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1f98:	6b636f6c 	blvs	18ddd50 <__Stack_Size+0x18dd950>
    1f9c:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    1fa0:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    1fa4:	001f0100 	andseq	r0, pc, r0, lsl #2
    1fa8:	4d495400 	cfstrdmi	mvd5, [r9]
    1fac:	7465475f 	strbtvc	r4, [r5], #-1887
    1fb0:	74706143 	ldrbtvc	r6, [r0], #-323
    1fb4:	31657275 	smccc	22309
    1fb8:	001f2e00 	andseq	r2, pc, r0, lsl #28
    1fbc:	4d495400 	cfstrdmi	mvd5, [r9]
    1fc0:	7465475f 	strbtvc	r4, [r5], #-1887
    1fc4:	74706143 	ldrbtvc	r6, [r0], #-323
    1fc8:	32657275 	rsbcc	r7, r5, #1342177287	; 0x50000007
    1fcc:	001f5b00 	andseq	r5, pc, r0, lsl #22
    1fd0:	4d495400 	cfstrdmi	mvd5, [r9]
    1fd4:	7465475f 	strbtvc	r4, [r5], #-1887
    1fd8:	74706143 	ldrbtvc	r6, [r0], #-323
    1fdc:	33657275 	cmncc	r5, #1342177287	; 0x50000007
    1fe0:	001f8800 	andseq	r8, pc, r0, lsl #16
    1fe4:	4d495400 	cfstrdmi	mvd5, [r9]
    1fe8:	7465475f 	strbtvc	r4, [r5], #-1887
    1fec:	74706143 	ldrbtvc	r6, [r0], #-323
    1ff0:	34657275 	strbtcc	r7, [r5], #-629
    1ff4:	001fb500 	andseq	fp, pc, r0, lsl #10
    1ff8:	4d495400 	cfstrdmi	mvd5, [r9]
    1ffc:	7465475f 	strbtvc	r4, [r5], #-1887
    2000:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2004:	00726574 	rsbseq	r6, r2, r4, ror r5
    2008:	00001fe2 	andeq	r1, r0, r2, ror #31
    200c:	5f4d4954 	svcpl	0x004d4954
    2010:	50746547 	rsbspl	r6, r4, r7, asr #10
    2014:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2018:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    201c:	00200f00 	eoreq	r0, r0, r0, lsl #30
    2020:	4d495400 	cfstrdmi	mvd5, [r9]
    2024:	7465475f 	strbtvc	r4, [r5], #-1887
    2028:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    202c:	74617453 	strbtvc	r7, [r1], #-1107
    2030:	56007375 	undefined
    2034:	54000020 	strpl	r0, [r0], #-32
    2038:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    203c:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2040:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2044:	00208d00 	eoreq	r8, r0, r0, lsl #26
    2048:	4d495400 	cfstrdmi	mvd5, [r9]
    204c:	7465475f 	strbtvc	r4, [r5], #-1887
    2050:	74535449 	ldrbvc	r5, [r3], #-1097
    2054:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2058:	0020ec00 	eoreq	lr, r0, r0, lsl #24
    205c:	4d495400 	cfstrdmi	mvd5, [r9]
    2060:	656c435f 	strbvs	r4, [ip, #-863]!
    2064:	54497261 	strbpl	r7, [r9], #-609
    2068:	646e6550 	strbtvs	r6, [lr], #-1360
    206c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2070:	23007469 	movwcs	r7, #1129	; 0x469
    2074:	54000021 	strpl	r0, [r0], #-33
    2078:	445f4d49 	ldrbmi	r4, [pc], #3401	; 2080 <__Stack_Size+0x1c80>
    207c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    2080:	00000074 	andeq	r0, r0, r4, ror r0
    2084:	025b0000 	subseq	r0, fp, #0	; 0x0
    2088:	00020000 	andeq	r0, r2, r0
    208c:	0000600e 	andeq	r6, r0, lr
    2090:	00000950 	andeq	r0, r0, r0, asr r9
    2094:	000002b6 	strheq	r0, [r0], -r6
    2098:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    209c:	74535f54 	ldrbvc	r5, [r3], #-3924
    20a0:	74637572 	strbtvc	r7, [r3], #-1394
    20a4:	74696e49 	strbtvc	r6, [r9], #-3657
    20a8:	0002e100 	andeq	lr, r2, r0, lsl #2
    20ac:	41535500 	cmpmi	r3, r0, lsl #10
    20b0:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    20b4:	6b636f6c 	blvs	18dde6c <__Stack_Size+0x18dda6c>
    20b8:	74696e49 	strbtvc	r6, [r9], #-3657
    20bc:	00033000 	andeq	r3, r3, r0
    20c0:	41535500 	cmpmi	r3, r0, lsl #10
    20c4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    20c8:	6b636f6c 	blvs	18dde80 <__Stack_Size+0x18dda80>
    20cc:	75727453 	ldrbvc	r7, [r2, #-1107]!
    20d0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    20d4:	57007469 	strpl	r7, [r0, -r9, ror #8]
    20d8:	55000003 	strpl	r0, [r0, #-3]
    20dc:	54524153 	ldrbpl	r4, [r2], #-339
    20e0:	646d435f 	strbtvs	r4, [sp], #-863
    20e4:	00038c00 	andeq	r8, r3, r0, lsl #24
    20e8:	41535500 	cmpmi	r3, r0, lsl #10
    20ec:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    20f0:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    20f4:	00676966 	rsbeq	r6, r7, r6, ror #18
    20f8:	0000040d 	andeq	r0, r0, sp, lsl #8
    20fc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2100:	4d445f54 	stclmi	15, cr5, [r4, #-336]
    2104:	646d4341 	strbtvs	r4, [sp], #-833
    2108:	00045000 	andeq	r5, r4, r0
    210c:	41535500 	cmpmi	r3, r0, lsl #10
    2110:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2114:	64417465 	strbvs	r7, [r1], #-1125
    2118:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    211c:	04850073 	streq	r0, [r5], #115
    2120:	53550000 	cmppl	r5, #0	; 0x0
    2124:	5f545241 	svcpl	0x00545241
    2128:	656b6157 	strbvs	r6, [fp, #-343]!
    212c:	6f437055 	svcvs	0x00437055
    2130:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2134:	0004bc00 	andeq	fp, r4, r0, lsl #24
    2138:	41535500 	cmpmi	r3, r0, lsl #10
    213c:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    2140:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2144:	57726576 	undefined
    2148:	55656b61 	strbpl	r6, [r5, #-2913]!
    214c:	646d4370 	strbtvs	r4, [sp], #-880
    2150:	0004f100 	andeq	pc, r4, r0, lsl #2
    2154:	41535500 	cmpmi	r3, r0, lsl #10
    2158:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    215c:	72424e49 	subvc	r4, r2, #1168	; 0x490
    2160:	446b6165 	strbtmi	r6, [fp], #-357
    2164:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    2168:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    216c:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    2170:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2174:	05280067 	streq	r0, [r8, #-103]!
    2178:	53550000 	cmppl	r5, #0	; 0x0
    217c:	5f545241 	svcpl	0x00545241
    2180:	434e494c 	movtmi	r4, #59724	; 0xe94c
    2184:	5d00646d 	cfstrspl	mvf6, [r0, #-436]
    2188:	55000005 	strpl	r0, [r0, #-5]
    218c:	54524153 	ldrbpl	r4, [r2], #-339
    2190:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    2194:	74614464 	strbtvc	r4, [r1], #-1124
    2198:	05940061 	ldreq	r0, [r4, #97]
    219c:	53550000 	cmppl	r5, #0	; 0x0
    21a0:	5f545241 	svcpl	0x00545241
    21a4:	65636552 	strbvs	r6, [r3, #-1362]!
    21a8:	44657669 	strbtmi	r7, [r5], #-1641
    21ac:	00617461 	rsbeq	r7, r1, r1, ror #8
    21b0:	000005c1 	andeq	r0, r0, r1, asr #11
    21b4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    21b8:	65535f54 	ldrbvs	r5, [r3, #-3924]
    21bc:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    21c0:	006b6165 	rsbeq	r6, fp, r5, ror #2
    21c4:	000005e8 	andeq	r0, r0, r8, ror #11
    21c8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    21cc:	65535f54 	ldrbvs	r5, [r3, #-3924]
    21d0:	61754774 	cmnvs	r5, r4, ror r7
    21d4:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    21d8:	1d00656d 	cfstr32ne	mvfx6, [r0, #-436]
    21dc:	55000006 	strpl	r0, [r0, #-6]
    21e0:	54524153 	ldrbpl	r4, [r2], #-339
    21e4:	7465535f 	strbtvc	r5, [r5], #-863
    21e8:	73657250 	cmnvc	r5, #5	; 0x5
    21ec:	656c6163 	strbvs	r6, [ip, #-355]!
    21f0:	06520072 	undefined
    21f4:	53550000 	cmppl	r5, #0	; 0x0
    21f8:	5f545241 	svcpl	0x00545241
    21fc:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    2200:	72614374 	rsbvc	r4, r1, #-805306367	; 0xd0000001
    2204:	646d4364 	strbtvs	r4, [sp], #-868
    2208:	00068700 	andeq	r8, r6, r0, lsl #14
    220c:	41535500 	cmpmi	r3, r0, lsl #10
    2210:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2214:	7472616d 	ldrbtvc	r6, [r2], #-365
    2218:	64726143 	ldrbtvs	r6, [r2], #-323
    221c:	4b43414e 	blmi	10d275c <__Stack_Size+0x10d235c>
    2220:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2224:	000006bc 	strheq	r0, [r0], -ip
    2228:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    222c:	61485f54 	cmpvs	r8, r4, asr pc
    2230:	7544666c 	strbvc	r6, [r4, #-1644]
    2234:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    2238:	00646d43 	rsbeq	r6, r4, r3, asr #26
    223c:	000006f1 	strdeq	r0, [r0], -r1
    2240:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2244:	72495f54 	subvc	r5, r9, #336	; 0x150
    2248:	6f434144 	svcvs	0x00434144
    224c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2250:	00072800 	andeq	r2, r7, r0, lsl #16
    2254:	41535500 	cmpmi	r3, r0, lsl #10
    2258:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    225c:	43414472 	movtmi	r4, #5234	; 0x1472
    2260:	5d00646d 	cfstrspl	mvf6, [r0, #-436]
    2264:	55000007 	strpl	r0, [r0, #-7]
    2268:	54524153 	ldrbpl	r4, [r2], #-339
    226c:	7465475f 	strbtvc	r4, [r5], #-1887
    2270:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2274:	74617453 	strbtvc	r7, [r1], #-1107
    2278:	a4007375 	strge	r7, [r0], #-885
    227c:	55000007 	strpl	r0, [r0, #-7]
    2280:	54524153 	ldrbpl	r4, [r2], #-339
    2284:	656c435f 	strbvs	r4, [ip, #-863]!
    2288:	6c467261 	sfmvs	f7, 2, [r6], {97}
    228c:	db006761 	blle	1c018 <__Stack_Size+0x1bc18>
    2290:	55000007 	strpl	r0, [r0, #-7]
    2294:	54524153 	ldrbpl	r4, [r2], #-339
    2298:	7465475f 	strbtvc	r4, [r5], #-1887
    229c:	74535449 	ldrbvc	r5, [r3], #-1097
    22a0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    22a4:	00085200 	andeq	r5, r8, r0, lsl #4
    22a8:	41535500 	cmpmi	r3, r0, lsl #10
    22ac:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    22b0:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    22b4:	65505449 	ldrbvs	r5, [r0, #-1097]
    22b8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    22bc:	74694267 	strbtvc	r4, [r9], #-615
    22c0:	0008a100 	andeq	sl, r8, r0, lsl #2
    22c4:	41535500 	cmpmi	r3, r0, lsl #10
    22c8:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    22cc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    22d0:	0000092a 	andeq	r0, r0, sl, lsr #18
    22d4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    22d8:	65445f54 	strbvs	r5, [r4, #-3924]
    22dc:	74696e49 	strbtvc	r6, [r9], #-3657
    22e0:	00000000 	andeq	r0, r0, r0
    22e4:	00003100 	andeq	r3, r0, r0, lsl #2
    22e8:	05000200 	streq	r0, [r0, #-512]
    22ec:	0600006a 	streq	r0, [r0], -sl, rrx
    22f0:	52000001 	andpl	r0, r0, #1	; 0x1
    22f4:	52000000 	andpl	r0, r0, #0	; 0x0
    22f8:	74657365 	strbtvc	r7, [r5], #-869
    22fc:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    2300:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    2304:	0000ee00 	andeq	lr, r0, r0, lsl #28
    2308:	705f6700 	subsvc	r6, pc, r0, lsl #14
    230c:	65566e66 	ldrbvs	r6, [r6, #-3686]
    2310:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    2314:	00000073 	andeq	r0, r0, r3, ror r0
    2318:	00190000 	andseq	r0, r9, r0
    231c:	00020000 	andeq	r0, r2, r0
    2320:	00006b0b 	andeq	r6, r0, fp, lsl #22
    2324:	000000c5 	andeq	r0, r0, r5, asr #1
    2328:	0000009c 	muleq	r0, ip, r0
    232c:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    2330:	00007469 	andeq	r7, r0, r9, ror #8
    2334:	17000000 	strne	r0, [r0, -r0]
    2338:	02000000 	andeq	r0, r0, #0	; 0x0
    233c:	006bd000 	rsbeq	sp, fp, r0
    2340:	00093a00 	andeq	r3, r9, r0, lsl #20
    2344:	0008ff00 	andeq	pc, r8, r0, lsl #30
    2348:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    234c:	00000074 	andeq	r0, r0, r4, ror r0
    2350:	00350000 	eorseq	r0, r5, r0
    2354:	00020000 	andeq	r0, r2, r0
    2358:	0000750a 	andeq	r7, r0, sl, lsl #10
    235c:	0000093a 	andeq	r0, r0, sl, lsr r9
    2360:	00000910 	andeq	r0, r0, r0, lsl r9
    2364:	706d695f 	rsbvc	r6, sp, pc, asr r9
    2368:	5f657275 	svcpl	0x00657275
    236c:	00727470 	rsbseq	r7, r2, r0, ror r4
    2370:	00000922 	andeq	r0, r0, r2, lsr #18
    2374:	6f6c675f 	svcvs	0x006c675f
    2378:	5f6c6162 	svcpl	0x006c6162
    237c:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    2380:	705f6572 	subsvc	r6, pc, r2, ror r5
    2384:	00007274 	andeq	r7, r0, r4, ror r2
    2388:	3a000000 	bcc	2390 <__Stack_Size+0x1f90>
    238c:	02000000 	andeq	r0, r0, #0	; 0x0
    2390:	007e4400 	rsbseq	r4, lr, r0, lsl #8
    2394:	00014600 	andeq	r4, r1, r0, lsl #12
    2398:	00008000 	andeq	r8, r0, r0
    239c:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0
    23a0:	5f636269 	svcpl	0x00636269
    23a4:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    23a8:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    23ac:	b2007961 	andlt	r7, r0, #1589248	; 0x184000
    23b0:	5f000000 	svcpl	0x00000000
    23b4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    23b8:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
    23bc:	615f7469 	cmpvs	pc, r9, ror #8
    23c0:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    23c4:	00000000 	andeq	r0, r0, r0
    23c8:	00001900 	andeq	r1, r0, r0, lsl #18
    23cc:	8a000200 	bhi	2bd4 <__Stack_Size+0x27d4>
    23d0:	1300007f 	movwne	r0, #127	; 0x7f
    23d4:	88000001 	stmdahi	r0, {r0}
    23d8:	6d000000 	stcvs	0, cr0, [r0]
    23dc:	65736d65 	ldrbvs	r6, [r3, #-3429]!
    23e0:	00000074 	andeq	r0, r0, r4, ror r0
    23e4:	00260000 	eoreq	r0, r6, r0
    23e8:	00020000 	andeq	r0, r2, r0
    23ec:	0000809d 	muleq	r0, sp, r0
    23f0:	000009a5 	andeq	r0, r0, r5, lsr #19
    23f4:	0000091e 	andeq	r0, r0, lr, lsl r9
    23f8:	65725f5f 	ldrbvs	r5, [r2, #-3935]!
    23fc:	74736967 	ldrbtvc	r6, [r3], #-2407
    2400:	655f7265 	ldrbvs	r7, [pc, #-613]	; 21a3 <__Stack_Size+0x1da3>
    2404:	70746978 	rsbsvc	r6, r4, r8, ror r9
    2408:	00636f72 	rsbeq	r6, r3, r2, ror pc
    240c:	00000000 	andeq	r0, r0, r0
    2410:	00000023 	andeq	r0, r0, r3, lsr #32
    2414:	8a420002 	bhi	1082424 <__Stack_Size+0x1082024>
    2418:	09b20000 	ldmibeq	r2!, {}
    241c:	08ff0000 	ldmeq	pc!, {}^
    2420:	5f5f0000 	svcpl	0x005f0000
    2424:	6c6c6163 	stfvse	f6, [ip], #-396
    2428:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    242c:	6f727074 	svcvs	0x00727074
    2430:	00007363 	andeq	r7, r0, r3, ror #6
    2434:	Address 0x00002434 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000049 	andeq	r0, r0, r9, asr #32
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	tsteq	r4, r0
	...
      14:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      18:	6d73612e 	ldfvse	f6, [r3, #-184]!
      1c:	5c3a6300 	ldcpl	3, cr6, [sl]
      20:	616e6977 	smcvs	59031
      24:	5c736d72 	ldclpl	13, cr6, [r3], #-456
      28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      2c:	63675c64 	cmnvs	r7, #25600	; 0x6400
      30:	75622d63 	strbvc	r2, [r2, #-3427]!
      34:	5c646c69 	stclpl	12, cr6, [r4], #-420
      38:	00636367 	rsbeq	r6, r3, r7, ror #6
      3c:	20554e47 	subscs	r4, r5, r7, asr #28
      40:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      44:	2e38312e 	rsfcsep	f3, f0, #0.5
      48:	01003035 	tsteq	r0, r5, lsr r0
      4c:	00008080 	andeq	r8, r0, r0, lsl #1
      50:	12000200 	andne	r0, r0, #0	; 0x0
      54:	04000000 	streq	r0, [r0]
      58:	00004901 	andeq	r4, r0, r1, lsl #18
	...
      64:	2f2e2e00 	svccs	0x002e2e00
      68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      70:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      74:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
      78:	6c2f302e 	stcvs	0, cr3, [pc], #-184
      7c:	6c676269 	sfmvs	f6, 2, [r7], #-420
      80:	2f73736f 	svccs	0x0073736f
      84:	2f6d7261 	svccs	0x006d7261
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	6300532e 	movwvs	r5, #814	; 0x32e
      90:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
      94:	6d72616e 	ldfvse	f6, [r2, #-440]!
      98:	75625c73 	strbvc	r5, [r2, #-3187]!
      9c:	5c646c69 	stclpl	12, cr6, [r4], #-420
      a0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      a4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      a8:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
      ac:	61652d6d 	cmnvs	r5, sp, ror #26
      b0:	6c5c6962 	mrrcvs	9, 6, r6, ip, cr2
      b4:	6c676269 	sfmvs	f6, 2, [r7], #-420
      b8:	5c73736f 	ldclpl	3, cr7, [r3], #-444
      bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
      c0:	20554e47 	subscs	r4, r5, r7, asr #28
      c4:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      c8:	2e38312e 	rsfcsep	f3, f0, #0.5
      cc:	01003035 	tsteq	r0, r5, lsr r0
      d0:	000e1e80 	andeq	r1, lr, r0, lsl #29
      d4:	26000200 	strcs	r0, [r0], -r0, lsl #4
      d8:	04000000 	streq	r0, [r0]
      dc:	00055101 	andeq	r5, r5, r1, lsl #2
      e0:	02920100 	addseq	r0, r2, #0	; 0x0
      e4:	03690000 	cmneq	r9, #0	; 0x0
      e8:	31340000 	teqcc	r4, r0
      ec:	634c0800 	movtvs	r0, #51200	; 0xc800
      f0:	00e30800 	rsceq	r0, r3, r0, lsl #16
      f4:	73020000 	movwvc	r0, #8192	; 0x2000
      f8:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
      fc:	00003017 	andeq	r3, r0, r7, lsl r0
     100:	05040300 	streq	r0, [r4, #-768]
     104:	00002dcb 	andeq	r2, r0, fp, asr #27
     108:	d8050203 	stmdale	r5, {r0, r1, r9}
     10c:	03000005 	movweq	r0, #5	; 0x5
     110:	069d0601 	ldreq	r0, [sp], r1, lsl #12
     114:	75020000 	strvc	r0, [r2]
     118:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     11c:	00005027 	andeq	r5, r0, r7, lsr #32
     120:	07040300 	streq	r0, [r4, -r0, lsl #6]
     124:	00002e45 	andeq	r2, r0, r5, asr #28
     128:	36317502 	ldrtcc	r7, [r1], -r2, lsl #10
     12c:	62280200 	eorvs	r0, r8, #0	; 0x0
     130:	03000000 	movweq	r0, #0	; 0x0
     134:	07db0702 	ldrbeq	r0, [fp, r2, lsl #14]
     138:	75020000 	strvc	r0, [r2]
     13c:	29020038 	stmdbcs	r2, {r3, r4, r5}
     140:	00000073 	andeq	r0, r0, r3, ror r0
     144:	9b080103 	blls	200558 <__Stack_Size+0x200158>
     148:	04000006 	streq	r0, [r0], #-6
     14c:	00000050 	andeq	r0, r0, r0, asr r0
     150:	00006204 	andeq	r6, r0, r4, lsl #4
     154:	02010500 	andeq	r0, r1, #0	; 0x0
     158:	00009939 	andeq	r9, r0, r9, lsr r9
     15c:	14470600 	strbne	r0, [r7], #-1536
     160:	07000000 	streq	r0, [r0, -r0]
     164:	00544553 	subseq	r4, r4, r3, asr r5
     168:	01050001 	tsteq	r5, r1
     16c:	00ae3b02 	adceq	r3, lr, r2, lsl #22
     170:	24060000 	strcs	r0, [r6]
     174:	00000004 	andeq	r0, r0, r4
     178:	00066d06 	andeq	r6, r6, r6, lsl #26
     17c:	08000100 	stmdaeq	r0, {r8}
     180:	000000ec 	andeq	r0, r0, ip, ror #1
     184:	00993b02 	addseq	r3, r9, r2, lsl #22
     188:	01050000 	tsteq	r5, r0
     18c:	00ce3e02 	sbceq	r3, lr, r2, lsl #28
     190:	11060000 	tstne	r6, r0
     194:	00000000 	andeq	r0, r0, r0
     198:	00040906 	andeq	r0, r4, r6, lsl #18
     19c:	08000100 	stmdaeq	r0, {r8}
     1a0:	00000109 	andeq	r0, r0, r9, lsl #2
     1a4:	00b93e02 	adcseq	r3, r9, r2, lsl #28
     1a8:	04090000 	streq	r0, [r9]
     1ac:	031c0a07 	tsteq	ip, #28672	; 0x7000
     1b0:	014f014f 	cmpeq	pc, pc, asr #2
     1b4:	430b0000 	movwmi	r0, #45056	; 0xb000
     1b8:	03004c52 	movweq	r4, #3154	; 0xc52
     1bc:	007a0150 	rsbseq	r0, sl, r0, asr r1
     1c0:	23020000 	movwcs	r0, #8192	; 0x2000
     1c4:	52430b00 	subpl	r0, r3, #0	; 0x0
     1c8:	51030048 	tstpl	r3, r8, asr #32
     1cc:	00007a01 	andeq	r7, r0, r1, lsl #20
     1d0:	04230200 	strteq	r0, [r3], #-512
     1d4:	5244490b 	subpl	r4, r4, #180224	; 0x2c000
     1d8:	01520300 	cmpeq	r2, r0, lsl #6
     1dc:	0000007a 	andeq	r0, r0, sl, ror r0
     1e0:	0b082302 	bleq	208df0 <__Stack_Size+0x2089f0>
     1e4:	0052444f 	subseq	r4, r2, pc, asr #8
     1e8:	7a015303 	bvc	54dfc <__Stack_Size+0x549fc>
     1ec:	02000000 	andeq	r0, r0, #0	; 0x0
     1f0:	2f0c0c23 	svccs	0x000c0c23
     1f4:	03000000 	movweq	r0, #0	; 0x0
     1f8:	007a0154 	rsbseq	r0, sl, r4, asr r1
     1fc:	23020000 	movwcs	r0, #8192	; 0x2000
     200:	52420b10 	subpl	r0, r2, #16384	; 0x4000
     204:	55030052 	strpl	r0, [r3, #-82]
     208:	00007a01 	andeq	r7, r0, r1, lsl #20
     20c:	14230200 	strtne	r0, [r3], #-512
     210:	00086a0c 	andeq	r6, r8, ip, lsl #20
     214:	01560300 	cmpeq	r6, r0, lsl #6
     218:	0000007a 	andeq	r0, r0, sl, ror r0
     21c:	00182302 	andseq	r2, r8, r2, lsl #6
     220:	0c03500a 	stceq	0, cr5, [r3], {10}
     224:	0003b002 	andeq	fp, r3, r2
     228:	52430b00 	subpl	r0, r3, #0	; 0x0
     22c:	0d030031 	stceq	0, cr0, [r3, #-196]
     230:	00007f02 	andeq	r7, r0, r2, lsl #30
     234:	00230200 	eoreq	r0, r3, r0, lsl #4
     238:	0005920c 	andeq	r9, r5, ip, lsl #4
     23c:	020e0300 	andeq	r0, lr, #0	; 0x0
     240:	00000057 	andeq	r0, r0, r7, asr r0
     244:	0b022302 	bleq	88e54 <__Stack_Size+0x88a54>
     248:	00325243 	eorseq	r5, r2, r3, asr #4
     24c:	7f020f03 	svcvc	0x00020f03
     250:	02000000 	andeq	r0, r0, #0	; 0x0
     254:	9c0c0423 	cfstrsls	mvf0, [ip], {35}
     258:	03000005 	movweq	r0, #5	; 0x5
     25c:	00570210 	subseq	r0, r7, r0, lsl r2
     260:	23020000 	movwcs	r0, #8192	; 0x2000
     264:	046b0c06 	strbteq	r0, [fp], #-3078
     268:	11030000 	tstne	r3, r0
     26c:	00007f02 	andeq	r7, r0, r2, lsl #30
     270:	08230200 	stmdaeq	r3!, {r9}
     274:	0005a60c 	andeq	sl, r5, ip, lsl #12
     278:	02120300 	andseq	r0, r2, #0	; 0x0
     27c:	00000057 	andeq	r0, r0, r7, asr r0
     280:	0c0a2302 	stceq	3, cr2, [sl], {2}
     284:	0000032c 	andeq	r0, r0, ip, lsr #6
     288:	7f021303 	svcvc	0x00021303
     28c:	02000000 	andeq	r0, r0, #0	; 0x0
     290:	b00c0c23 	andlt	r0, ip, r3, lsr #24
     294:	03000005 	movweq	r0, #5	; 0x5
     298:	00570214 	subseq	r0, r7, r4, lsl r2
     29c:	23020000 	movwcs	r0, #8192	; 0x2000
     2a0:	52530b0e 	subspl	r0, r3, #14336	; 0x3800
     2a4:	02150300 	andseq	r0, r5, #0	; 0x0
     2a8:	0000007f 	andeq	r0, r0, pc, ror r0
     2ac:	0c102302 	ldceq	3, cr2, [r0], {2}
     2b0:	000005ba 	strheq	r0, [r0], -sl
     2b4:	57021603 	strpl	r1, [r2, -r3, lsl #12]
     2b8:	02000000 	andeq	r0, r0, #0	; 0x0
     2bc:	450b1223 	strmi	r1, [fp, #-547]
     2c0:	03005247 	movweq	r5, #583	; 0x247
     2c4:	007f0217 	rsbseq	r0, pc, r7, lsl r2
     2c8:	23020000 	movwcs	r0, #8192	; 0x2000
     2cc:	05c40c14 	strbeq	r0, [r4, #3092]
     2d0:	18030000 	stmdane	r3, {}
     2d4:	00005702 	andeq	r5, r0, r2, lsl #14
     2d8:	16230200 	strtne	r0, [r3], -r0, lsl #4
     2dc:	0002580c 	andeq	r5, r2, ip, lsl #16
     2e0:	02190300 	andseq	r0, r9, #0	; 0x0
     2e4:	0000007f 	andeq	r0, r0, pc, ror r0
     2e8:	0c182302 	ldceq	3, cr2, [r8], {2}
     2ec:	000005ce 	andeq	r0, r0, lr, asr #11
     2f0:	57021a03 	strpl	r1, [r2, -r3, lsl #20]
     2f4:	02000000 	andeq	r0, r0, #0	; 0x0
     2f8:	5e0c1a23 	fmacspl	s2, s24, s7
     2fc:	03000002 	movweq	r0, #2	; 0x2
     300:	007f021b 	rsbseq	r0, pc, fp, lsl r2
     304:	23020000 	movwcs	r0, #8192	; 0x2000
     308:	08320c1c 	ldmdaeq	r2!, {r2, r3, r4, sl, fp}
     30c:	1c030000 	stcne	0, cr0, [r3], {0}
     310:	00005702 	andeq	r5, r0, r2, lsl #14
     314:	1e230200 	cdpne	2, 2, cr0, cr3, cr0, {0}
     318:	0003ef0c 	andeq	lr, r3, ip, lsl #30
     31c:	021d0300 	andseq	r0, sp, #0	; 0x0
     320:	0000007f 	andeq	r0, r0, pc, ror r0
     324:	0c202302 	stceq	3, cr2, [r0], #-8
     328:	000005e2 	andeq	r0, r0, r2, ror #11
     32c:	57021e03 	strpl	r1, [r2, -r3, lsl #28]
     330:	02000000 	andeq	r0, r0, #0	; 0x0
     334:	430b2223 	movwmi	r2, #45603	; 0xb223
     338:	0300544e 	movweq	r5, #1102	; 0x44e
     33c:	007f021f 	rsbseq	r0, pc, pc, lsl r2
     340:	23020000 	movwcs	r0, #8192	; 0x2000
     344:	05ec0c24 	strbeq	r0, [ip, #3108]!
     348:	20030000 	andcs	r0, r3, r0
     34c:	00005702 	andeq	r5, r0, r2, lsl #14
     350:	26230200 	strtcs	r0, [r3], -r0, lsl #4
     354:	4353500b 	cmpmi	r3, #11	; 0xb
     358:	02210300 	eoreq	r0, r1, #0	; 0x0
     35c:	0000007f 	andeq	r0, r0, pc, ror r0
     360:	0c282302 	stceq	3, cr2, [r8], #-8
     364:	000006e6 	andeq	r0, r0, r6, ror #13
     368:	57022203 	strpl	r2, [r2, -r3, lsl #4]
     36c:	02000000 	andeq	r0, r0, #0	; 0x0
     370:	410b2a23 	tstmi	fp, r3, lsr #20
     374:	03005252 	movweq	r5, #594	; 0x252
     378:	007f0223 	rsbseq	r0, pc, r3, lsr #4
     37c:	23020000 	movwcs	r0, #8192	; 0x2000
     380:	06f10c2c 	ldrbteq	r0, [r1], ip, lsr #24
     384:	24030000 	strcs	r0, [r3]
     388:	00005702 	andeq	r5, r0, r2, lsl #14
     38c:	2e230200 	cdpcs	2, 2, cr0, cr3, cr0, {0}
     390:	5243520b 	subpl	r5, r3, #-1342177280	; 0xb0000000
     394:	02250300 	eoreq	r0, r5, #0	; 0x0
     398:	0000007f 	andeq	r0, r0, pc, ror r0
     39c:	0c302302 	ldceq	3, cr2, [r0], #-8
     3a0:	000006fc 	strdeq	r0, [r0], -ip
     3a4:	57022603 	strpl	r2, [r2, -r3, lsl #12]
     3a8:	02000000 	andeq	r0, r0, #0	; 0x0
     3ac:	440c3223 	strmi	r3, [ip], #-547
     3b0:	03000002 	movweq	r0, #2	; 0x2
     3b4:	007f0227 	rsbseq	r0, pc, r7, lsr #4
     3b8:	23020000 	movwcs	r0, #8192	; 0x2000
     3bc:	07070c34 	smladxeq	r7, r4, ip, r0
     3c0:	28030000 	stmdacs	r3, {}
     3c4:	00005702 	andeq	r5, r0, r2, lsl #14
     3c8:	36230200 	strtcc	r0, [r3], -r0, lsl #4
     3cc:	0002490c 	andeq	r4, r2, ip, lsl #18
     3d0:	02290300 	eoreq	r0, r9, #0	; 0x0
     3d4:	0000007f 	andeq	r0, r0, pc, ror r0
     3d8:	0c382302 	ldceq	3, cr2, [r8], #-8
     3dc:	00000712 	andeq	r0, r0, r2, lsl r7
     3e0:	57022a03 	strpl	r2, [r2, -r3, lsl #20]
     3e4:	02000000 	andeq	r0, r0, #0	; 0x0
     3e8:	4e0c3a23 	fmacsmi	s6, s24, s7
     3ec:	03000002 	movweq	r0, #2	; 0x2
     3f0:	007f022b 	rsbseq	r0, pc, fp, lsr #4
     3f4:	23020000 	movwcs	r0, #8192	; 0x2000
     3f8:	071d0c3c 	undefined
     3fc:	2c030000 	stccs	0, cr0, [r3], {0}
     400:	00005702 	andeq	r5, r0, r2, lsl #14
     404:	3e230200 	cdpcc	2, 2, cr0, cr3, cr0, {0}
     408:	0002530c 	andeq	r5, r2, ip, lsl #6
     40c:	022d0300 	eoreq	r0, sp, #0	; 0x0
     410:	0000007f 	andeq	r0, r0, pc, ror r0
     414:	0c402302 	mcrreq	3, 0, r2, r0, cr2
     418:	00000728 	andeq	r0, r0, r8, lsr #14
     41c:	57022e03 	strpl	r2, [r2, -r3, lsl #28]
     420:	02000000 	andeq	r0, r0, #0	; 0x0
     424:	1e0c4223 	cdpne	2, 0, cr4, cr12, cr3, {1}
     428:	03000002 	movweq	r0, #2	; 0x2
     42c:	007f022f 	rsbseq	r0, pc, pc, lsr #4
     430:	23020000 	movwcs	r0, #8192	; 0x2000
     434:	07330c44 	ldreq	r0, [r3, -r4, asr #24]!
     438:	30030000 	andcc	r0, r3, r0
     43c:	00005702 	andeq	r5, r0, r2, lsl #14
     440:	46230200 	strtmi	r0, [r3], -r0, lsl #4
     444:	5243440b 	subpl	r4, r3, #184549376	; 0xb000000
     448:	02310300 	eorseq	r0, r1, #0	; 0x0
     44c:	0000007f 	andeq	r0, r0, pc, ror r0
     450:	0c482302 	mcrreq	3, 0, r2, r8, cr2
     454:	0000073e 	andeq	r0, r0, lr, lsr r7
     458:	57023203 	strpl	r3, [r2, -r3, lsl #4]
     45c:	02000000 	andeq	r0, r0, #0	; 0x0
     460:	060c4a23 	streq	r4, [ip], -r3, lsr #20
     464:	03000006 	movweq	r0, #6	; 0x6
     468:	007f0233 	rsbseq	r0, pc, r3, lsr r2
     46c:	23020000 	movwcs	r0, #8192	; 0x2000
     470:	07490c4c 	strbeq	r0, [r9, -ip, asr #24]
     474:	34030000 	strcc	r0, [r3]
     478:	00005702 	andeq	r5, r0, r2, lsl #14
     47c:	4e230200 	cdpmi	2, 2, cr0, cr3, cr0, {0}
     480:	031c0a00 	tsteq	ip, #0	; 0x0
     484:	048a0239 	streq	r0, [sl], #569
     488:	530b0000 	movwpl	r0, #45056	; 0xb000
     48c:	3a030052 	bcc	c05dc <__Stack_Size+0xc01dc>
     490:	00007f02 	andeq	r7, r0, r2, lsl #30
     494:	00230200 	eoreq	r0, r3, r0, lsl #4
     498:	0005920c 	andeq	r9, r5, ip, lsl #4
     49c:	023b0300 	eorseq	r0, fp, #0	; 0x0
     4a0:	00000057 	andeq	r0, r0, r7, asr r0
     4a4:	0b022302 	bleq	890b4 <__Stack_Size+0x88cb4>
     4a8:	03005244 	movweq	r5, #580	; 0x244
     4ac:	007f023c 	rsbseq	r0, pc, ip, lsr r2
     4b0:	23020000 	movwcs	r0, #8192	; 0x2000
     4b4:	059c0c04 	ldreq	r0, [ip, #3076]
     4b8:	3d030000 	stccc	0, cr0, [r3]
     4bc:	00005702 	andeq	r5, r0, r2, lsl #14
     4c0:	06230200 	strteq	r0, [r3], -r0, lsl #4
     4c4:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
     4c8:	023e0300 	eorseq	r0, lr, #0	; 0x0
     4cc:	0000007f 	andeq	r0, r0, pc, ror r0
     4d0:	0c082302 	stceq	3, cr2, [r8], {2}
     4d4:	000005a6 	andeq	r0, r0, r6, lsr #11
     4d8:	57023f03 	strpl	r3, [r2, -r3, lsl #30]
     4dc:	02000000 	andeq	r0, r0, #0	; 0x0
     4e0:	430b0a23 	movwmi	r0, #47651	; 0xba23
     4e4:	03003152 	movweq	r3, #338	; 0x152
     4e8:	007f0240 	rsbseq	r0, pc, r0, asr #4
     4ec:	23020000 	movwcs	r0, #8192	; 0x2000
     4f0:	05b00c0c 	ldreq	r0, [r0, #3084]!
     4f4:	41030000 	tstmi	r3, r0
     4f8:	00005702 	andeq	r5, r0, r2, lsl #14
     4fc:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
     500:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
     504:	02420300 	subeq	r0, r2, #0	; 0x0
     508:	0000007f 	andeq	r0, r0, pc, ror r0
     50c:	0c102302 	ldceq	3, cr2, [r0], {2}
     510:	000005ba 	strheq	r0, [r0], -sl
     514:	57024303 	strpl	r4, [r2, -r3, lsl #6]
     518:	02000000 	andeq	r0, r0, #0	; 0x0
     51c:	430b1223 	movwmi	r1, #45603	; 0xb223
     520:	03003352 	movweq	r3, #850	; 0x352
     524:	007f0244 	rsbseq	r0, pc, r4, asr #4
     528:	23020000 	movwcs	r0, #8192	; 0x2000
     52c:	05c40c14 	strbeq	r0, [r4, #3092]
     530:	45030000 	strmi	r0, [r3]
     534:	00005702 	andeq	r5, r0, r2, lsl #14
     538:	16230200 	strtne	r0, [r3], -r0, lsl #4
     53c:	00018e0c 	andeq	r8, r1, ip, lsl #28
     540:	02460300 	subeq	r0, r6, #0	; 0x0
     544:	0000007f 	andeq	r0, r0, pc, ror r0
     548:	0c182302 	ldceq	3, cr2, [r8], {2}
     54c:	000005ce 	andeq	r0, r0, lr, asr #11
     550:	57024703 	strpl	r4, [r2, -r3, lsl #14]
     554:	02000000 	andeq	r0, r0, #0	; 0x0
     558:	05001a23 	streq	r1, [r0, #-2595]
     55c:	a5230401 	strge	r0, [r3, #-1025]!
     560:	06000004 	streq	r0, [r0], -r4
     564:	00000264 	andeq	r0, r0, r4, ror #4
     568:	017e0601 	cmneq	lr, r1, lsl #12
     56c:	06020000 	streq	r0, [r2], -r0
     570:	000006ae 	andeq	r0, r0, lr, lsr #13
     574:	67080003 	strvs	r0, [r8, -r3]
     578:	04000005 	streq	r0, [r0], #-5
     57c:	00048a27 	andeq	r8, r4, r7, lsr #20
     580:	04010500 	streq	r0, [r1], #-1280
     584:	0004ea2e 	andeq	lr, r4, lr, lsr #20
     588:	05840600 	streq	r0, [r4, #1536]
     58c:	06000000 	streq	r0, [r0], -r0
     590:	0000081c 	andeq	r0, r0, ip, lsl r8
     594:	02b70604 	adcseq	r0, r7, #4194304	; 0x400000
     598:	06280000 	strteq	r0, [r8], -r0
     59c:	000002c5 	andeq	r0, r0, r5, asr #5
     5a0:	f10600c8 	cps	#8
     5a4:	14000002 	strne	r0, [r0], #-2
     5a8:	00000006 	andeq	r0, r0, r6
     5ac:	2d061000 	stccs	0, cr1, [r6]
     5b0:	1c000005 	stcne	0, cr0, [r0], {5}
     5b4:	0005f606 	andeq	pc, r5, r6, lsl #12
     5b8:	08001800 	stmdaeq	r0, {fp, ip}
     5bc:	0000063d 	andeq	r0, r0, sp, lsr r6
     5c0:	04b03604 	ldrteq	r3, [r0], #1540
     5c4:	040d0000 	streq	r0, [sp]
     5c8:	05283f04 	streq	r3, [r8, #-3844]!
     5cc:	ad0e0000 	stcge	0, cr0, [lr]
     5d0:	04000000 	streq	r0, [r0]
     5d4:	00005740 	andeq	r5, r0, r0, asr #14
     5d8:	00230200 	eoreq	r0, r3, r0, lsl #4
     5dc:	00060b0e 	andeq	r0, r6, lr, lsl #22
     5e0:	a5410400 	strbge	r0, [r1, #-1024]
     5e4:	02000004 	andeq	r0, r0, #4	; 0x4
     5e8:	550e0223 	strpl	r0, [lr, #-547]
     5ec:	04000000 	streq	r0, [r0]
     5f0:	0004ea42 	andeq	lr, r4, r2, asr #20
     5f4:	03230200 	teqeq	r3, #0	; 0x0
     5f8:	068a0800 	streq	r0, [sl], r0, lsl #16
     5fc:	43040000 	movwmi	r0, #16384	; 0x4000
     600:	000004f5 	strdeq	r0, [r0], -r5
     604:	1b05040d 	blne	141640 <__Stack_Size+0x141240>
     608:	00000574 	andeq	r0, r0, r4, ror r5
     60c:	00051d0e 	andeq	r1, r5, lr, lsl #26
     610:	691c0500 	ldmdbvs	ip, {r8, sl}
     614:	02000000 	andeq	r0, r0, #0	; 0x0
     618:	f30e0023 	vhadd.u8	d0, d14, d19
     61c:	05000007 	streq	r0, [r0, #-7]
     620:	0000691d 	andeq	r6, r0, sp, lsl r9
     624:	01230200 	teqeq	r3, r0, lsl #4
     628:	0007790e 	andeq	r7, r7, lr, lsl #18
     62c:	691e0500 	ldmdbvs	lr, {r8, sl}
     630:	02000000 	andeq	r0, r0, #0	; 0x0
     634:	190e0223 	stmdbne	lr, {r0, r1, r5, r9}
     638:	05000003 	streq	r0, [r0, #-3]
     63c:	0000ae1f 	andeq	sl, r0, pc, lsl lr
     640:	03230200 	teqeq	r3, #0	; 0x0
     644:	02290800 	eoreq	r0, r9, #0	; 0x0
     648:	20050000 	andcs	r0, r5, r0
     64c:	00000533 	andeq	r0, r0, r3, lsr r5
     650:	1c060a0d 	stcne	10, cr0, [r6], {13}
     654:	000005ce 	andeq	r0, r0, lr, asr #11
     658:	0000210e 	andeq	r2, r0, lr, lsl #2
     65c:	571d0600 	ldrpl	r0, [sp, -r0, lsl #12]
     660:	02000000 	andeq	r0, r0, #0	; 0x0
     664:	3b0e0023 	blcc	3806f8 <__Stack_Size+0x3802f8>
     668:	06000004 	streq	r0, [r0], -r4
     66c:	0000571e 	andeq	r5, r0, lr, lsl r7
     670:	02230200 	eoreq	r0, r3, #0	; 0x0
     674:	0001430e 	andeq	r4, r1, lr, lsl #6
     678:	571f0600 	ldrpl	r0, [pc, -r0, lsl #12]
     67c:	02000000 	andeq	r0, r0, #0	; 0x0
     680:	fc0e0423 	stc2	4, cr0, [lr], {35}
     684:	06000001 	streq	r0, [r0], -r1
     688:	00005720 	andeq	r5, r0, r0, lsr #14
     68c:	06230200 	strteq	r0, [r3], -r0, lsl #4
     690:	0003530e 	andeq	r5, r3, lr, lsl #6
     694:	69210600 	stmdbvs	r1!, {r9, sl}
     698:	02000000 	andeq	r0, r0, #0	; 0x0
     69c:	08000823 	stmdaeq	r0, {r0, r1, r5, fp}
     6a0:	000007ad 	andeq	r0, r0, sp, lsr #15
     6a4:	057f2206 	ldrbeq	r2, [pc, #-518]!	; 4a6 <__Stack_Size+0xa6>
     6a8:	100d0000 	andne	r0, sp, r0
     6ac:	06522606 	ldrbeq	r2, [r2], -r6, lsl #12
     6b0:	790e0000 	stmdbvc	lr, {}
     6b4:	06000005 	streq	r0, [r0], -r5
     6b8:	00005727 	andeq	r5, r0, r7, lsr #14
     6bc:	00230200 	eoreq	r0, r3, r0, lsl #4
     6c0:	00020e0e 	andeq	r0, r2, lr, lsl #28
     6c4:	57280600 	strpl	r0, [r8, -r0, lsl #12]!
     6c8:	02000000 	andeq	r0, r0, #0	; 0x0
     6cc:	5c0e0223 	sfmpl	f0, 4, [lr], {35}
     6d0:	06000006 	streq	r0, [r0], -r6
     6d4:	00005729 	andeq	r5, r0, r9, lsr #14
     6d8:	04230200 	strteq	r0, [r3], #-512
     6dc:	0001e30e 	andeq	lr, r1, lr, lsl #6
     6e0:	572a0600 	strpl	r0, [sl, -r0, lsl #12]!
     6e4:	02000000 	andeq	r0, r0, #0	; 0x0
     6e8:	8c0e0623 	stchi	6, cr0, [lr], {35}
     6ec:	06000000 	streq	r0, [r0], -r0
     6f0:	0000572b 	andeq	r5, r0, fp, lsr #14
     6f4:	08230200 	stmdaeq	r3!, {r9}
     6f8:	0003c40e 	andeq	ip, r3, lr, lsl #8
     6fc:	572c0600 	strpl	r0, [ip, -r0, lsl #12]!
     700:	02000000 	andeq	r0, r0, #0	; 0x0
     704:	650e0a23 	strvs	r0, [lr, #-2595]
     708:	06000001 	streq	r0, [r0], -r1
     70c:	0000572d 	andeq	r5, r0, sp, lsr #14
     710:	0c230200 	sfmeq	f0, 4, [r3]
     714:	0004e70e 	andeq	lr, r4, lr, lsl #14
     718:	572e0600 	strpl	r0, [lr, -r0, lsl #12]!
     71c:	02000000 	andeq	r0, r0, #0	; 0x0
     720:	08000e23 	stmdaeq	r0, {r0, r1, r5, r9, sl, fp}
     724:	00000043 	andeq	r0, r0, r3, asr #32
     728:	05d92f06 	ldrbeq	r2, [r9, #3846]
     72c:	100d0000 	andne	r0, sp, r0
     730:	06ba1b07 	ldrteq	r1, [sl], r7, lsl #22
     734:	ed0e0000 	stc	0, cr0, [lr]
     738:	07000001 	streq	r0, [r0, -r1]
     73c:	0000451c 	andeq	r4, r0, ip, lsl r5
     740:	00230200 	eoreq	r0, r3, r0, lsl #4
     744:	0001320e 	andeq	r3, r1, lr, lsl #4
     748:	571d0700 	ldrpl	r0, [sp, -r0, lsl #14]
     74c:	02000000 	andeq	r0, r0, #0	; 0x0
     750:	560e0423 	strpl	r0, [lr], -r3, lsr #8
     754:	07000001 	streq	r0, [r0, -r1]
     758:	0000571e 	andeq	r5, r0, lr, lsl r7
     75c:	06230200 	strteq	r0, [r3], -r0, lsl #4
     760:	0007940e 	andeq	r9, r7, lr, lsl #8
     764:	571f0700 	ldrpl	r0, [pc, -r0, lsl #14]
     768:	02000000 	andeq	r0, r0, #0	; 0x0
     76c:	4b0e0823 	blmi	382800 <__Stack_Size+0x382400>
     770:	07000004 	streq	r0, [r0, -r4]
     774:	00005720 	andeq	r5, r0, r0, lsr #14
     778:	0a230200 	beq	8c0f80 <__Stack_Size+0x8c0b80>
     77c:	0004700e 	andeq	r7, r4, lr
     780:	57210700 	strpl	r0, [r1, -r0, lsl #14]!
     784:	02000000 	andeq	r0, r0, #0	; 0x0
     788:	08000c23 	stmdaeq	r0, {r0, r1, r5, sl, fp}
     78c:	00000767 	andeq	r0, r0, r7, ror #14
     790:	065d2207 	ldrbeq	r2, [sp], -r7, lsl #4
     794:	010f0000 	mrseq	r0, CPSR
     798:	00000034 	andeq	r0, r0, r4, lsr r0
     79c:	01023301 	tsteq	r2, r1, lsl #6
     7a0:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     7a4:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
     7a8:	01105d01 	tsteq	r0, r1, lsl #26
     7ac:	0000042c 	andeq	r0, r0, ip, lsr #8
     7b0:	01023801 	tsteq	r2, r1, lsl #16
     7b4:	00000069 	andeq	r0, r0, r9, rrx
     7b8:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
     7bc:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     7c0:	01115d01 	tsteq	r1, r1, lsl #26
     7c4:	00000623 	andeq	r0, r0, r3, lsr #12
     7c8:	01024c01 	tsteq	r2, r1, lsl #24
     7cc:	00000069 	andeq	r0, r0, r9, rrx
     7d0:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     7d4:	08003194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp}
     7d8:	071c5d01 	ldreq	r5, [ip, -r1, lsl #26]
     7dc:	17120000 	ldrne	r0, [r2, -r0]
     7e0:	01000005 	tsteq	r0, r5
     7e4:	0069024d 	rsbeq	r0, r9, sp, asr #4
     7e8:	50010000 	andpl	r0, r1, r0
     7ec:	a1010f00 	tstge	r1, r0, lsl #30
     7f0:	01000007 	tsteq	r0, r7
     7f4:	940102be 	strls	r0, [r1], #-702
     7f8:	a8080031 	stmdage	r8, {r0, r4, r5}
     7fc:	01080031 	tsteq	r8, r1, lsr r0
     800:	4e01135d 	mcrmi	3, 0, r1, cr1, cr13, {2}
     804:	01000006 	tsteq	r0, r6
     808:	a80102d3 	stmdage	r1, {r0, r1, r4, r6, r7, r9}
     80c:	b4080031 	strlt	r0, [r8], #-49
     810:	01080031 	tsteq	r8, r1, lsr r0
     814:	0007575d 	andeq	r5, r7, sp, asr r7
     818:	00171400 	andseq	r1, r7, r0, lsl #8
     81c:	d2010000 	andle	r0, r1, #0	; 0x0
     820:	00002502 	andeq	r2, r0, r2, lsl #10
     824:	00500100 	subseq	r0, r0, r0, lsl #2
     828:	06160110 	undefined
     82c:	d8010000 	stmdale	r1, {}
     830:	00690102 	rsbeq	r0, r9, r2, lsl #2
     834:	31b40000 	undefined instruction 0x31b40000
     838:	31c80800 	biccc	r0, r8, r0, lsl #16
     83c:	5d010800 	stcpl	8, cr0, [r1]
     840:	03d40115 	bicseq	r0, r4, #1073741829	; 0x40000005
     844:	c4010000 	strgt	r0, [r1]
     848:	31c80102 	biccc	r0, r8, r2, lsl #2
     84c:	31f40800 	mvnscc	r0, r0, lsl #16
     850:	00000800 	andeq	r0, r0, r0, lsl #16
     854:	079a0000 	ldreq	r0, [sl, r0]
     858:	3c160000 	ldccc	0, cr0, [r6], {0}
     85c:	01000008 	tsteq	r0, r8
     860:	004502c3 	subeq	r0, r5, r3, asr #5
     864:	001f0000 	andseq	r0, pc, r0
     868:	17000000 	strne	r0, [r0, -r0]
     86c:	0004a501 	andeq	sl, r4, r1, lsl #10
     870:	02b50100 	adcseq	r0, r5, #0	; 0x0
     874:	0031f401 	eorseq	pc, r1, r1, lsl #8
     878:	00320a08 	eorseq	r0, r2, r8, lsl #20
     87c:	00003d08 	andeq	r3, r0, r8, lsl #26
     880:	a9011700 	stmdbge	r1, {r8, r9, sl, ip}
     884:	01000002 	tsteq	r0, r2
     888:	0c0102af 	sfmeq	f0, 4, [r1], {175}
     88c:	44080032 	strmi	r0, [r8], #-50
     890:	68080032 	stmdavs	r8, {r1, r4, r5}
     894:	17000000 	strne	r0, [r0, -r0]
     898:	00049201 	andeq	r9, r4, r1, lsl #4
     89c:	02a00100 	adceq	r0, r0, #0	; 0x0
     8a0:	00324401 	eorseq	r4, r2, r1, lsl #8
     8a4:	00329808 	eorseq	r9, r2, r8, lsl #16
     8a8:	00009308 	andeq	r9, r0, r8, lsl #6
     8ac:	3d011500 	cfstr32cc	mvfx1, [r1]
     8b0:	01000005 	tsteq	r0, r5
     8b4:	9801027b 	stmdals	r1, {r0, r1, r3, r4, r5, r6, r9}
     8b8:	28080032 	stmdacs	r8, {r1, r4, r5}
     8bc:	be080033 	mcrlt	0, 0, r0, cr8, cr3, {1}
     8c0:	15000000 	strne	r0, [r0]
     8c4:	12000008 	andne	r0, r0, #8	; 0x8
     8c8:	00000674 	andeq	r0, r0, r4, ror r6
     8cc:	ce027c01 	cdpgt	12, 0, cr7, cr2, cr1, {0}
     8d0:	02000005 	andeq	r0, r0, #5	; 0x5
     8d4:	3f126691 	svccc	0x00126691
     8d8:	01000003 	tsteq	r0, r3
     8dc:	0652027d 	undefined
     8e0:	91020000 	tstls	r2, r0
     8e4:	01150056 	tsteq	r5, r6, asr r0
     8e8:	00000275 	andeq	r0, r0, r5, ror r2
     8ec:	01027501 	tsteq	r2, r1, lsl #10
     8f0:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
     8f4:	08003348 	stmdaeq	r0, {r3, r6, r8, r9, ip, sp}
     8f8:	000000e9 	andeq	r0, r0, r9, ror #1
     8fc:	00000840 	andeq	r0, r0, r0, asr #16
     900:	00011516 	andeq	r1, r1, r6, lsl r5
     904:	02740100 	rsbseq	r0, r4, #0	; 0x0
     908:	00000069 	andeq	r0, r0, r9, rrx
     90c:	00000114 	andeq	r0, r0, r4, lsl r1
     910:	5d011500 	cfstr32pl	mvfx1, [r1]
     914:	01000005 	tsteq	r0, r5
     918:	48010267 	stmdami	r1, {r0, r1, r2, r5, r6, r9}
     91c:	70080033 	andvc	r0, r8, r3, lsr r0
     920:	32080033 	andcc	r0, r8, #51	; 0x33
     924:	7b000001 	blvc	930 <__Stack_Size+0x530>
     928:	16000008 	strne	r0, [r0], -r8
     92c:	0000023a 	andeq	r0, r0, sl, lsr r2
     930:	69026601 	stmdbvs	r2, {r0, r9, sl, sp, lr}
     934:	51000000 	tstpl	r0, r0
     938:	18000001 	stmdane	r0, {r0}
     93c:	000006a9 	andeq	r0, r0, r9, lsr #13
     940:	69026801 	stmdbvs	r2, {r0, fp, sp, lr}
     944:	6f000000 	svcvs	0x00000000
     948:	00000001 	andeq	r0, r0, r1
     94c:	03020115 	movweq	r0, #8469	; 0x2115
     950:	61010000 	tstvs	r1, r0
     954:	33700102 	cmncc	r0, #-2147483648	; 0x80000000
     958:	33840800 	orrcc	r0, r4, #0	; 0x0
     95c:	018d0800 	orreq	r0, sp, r0, lsl #16
     960:	08a60000 	stmiaeq	r6!, {}
     964:	88160000 	ldmdahi	r6, {}
     968:	01000002 	tsteq	r0, r2
     96c:	00570260 	subseq	r0, r7, r0, ror #4
     970:	01ac0000 	undefined instruction 0x01ac0000
     974:	15000000 	strne	r0, [r0]
     978:	00019d01 	andeq	r9, r1, r1, lsl #26
     97c:	025b0100 	subseq	r0, fp, #0	; 0x0
     980:	00338401 	eorseq	r8, r3, r1, lsl #8
     984:	00339e08 	eorseq	r9, r3, r8, lsl #28
     988:	0001ca08 	andeq	ip, r1, r8, lsl #20
     98c:	0008d100 	andeq	sp, r8, r0, lsl #2
     990:	02231600 	eoreq	r1, r3, #0	; 0x0
     994:	5a010000 	bpl	4099c <__Stack_Size+0x4059c>
     998:	0008d102 	andeq	sp, r8, r2, lsl #2
     99c:	0001f500 	andeq	pc, r1, r0, lsl #10
     9a0:	04190000 	ldreq	r0, [r9]
     9a4:	00000069 	andeq	r0, r0, r9, rrx
     9a8:	02e50115 	rsceq	r0, r5, #1073741829	; 0x40000005
     9ac:	40010000 	andmi	r0, r1, r0
     9b0:	33a00102 	movcc	r0, #-2147483648	; 0x80000000
     9b4:	33e40800 	mvncc	r0, #0	; 0x0
     9b8:	02130800 	andseq	r0, r3, #0	; 0x0
     9bc:	09020000 	stmdbeq	r2, {}
     9c0:	15160000 	ldrne	r0, [r6]
     9c4:	01000001 	tsteq	r0, r1
     9c8:	0069023f 	rsbeq	r0, r9, pc, lsr r2
     9cc:	02320000 	eorseq	r0, r2, #0	; 0x0
     9d0:	17000000 	strne	r0, [r0, -r0]
     9d4:	00062f01 	andeq	r2, r6, r1, lsl #30
     9d8:	022e0100 	eoreq	r0, lr, #0	; 0x0
     9dc:	0033e401 	eorseq	lr, r3, r1, lsl #8
     9e0:	0033f808 	eorseq	pc, r3, r8, lsl #16
     9e4:	00025008 	andeq	r5, r2, r8
     9e8:	bf011500 	svclt	0x00011500
     9ec:	01000006 	tsteq	r0, r6
     9f0:	f8010200 	undefined instruction 0xf8010200
     9f4:	78080033 	stmdavc	r8, {r0, r1, r4, r5}
     9f8:	7b080034 	blvc	200ad0 <__Stack_Size+0x2006d0>
     9fc:	62000002 	andvs	r0, r0, #2	; 0x2
     a00:	16000009 	strne	r0, [r0], -r9
     a04:	000004bb 	strheq	r0, [r0], -fp
     a08:	6901ff01 	stmdbvs	r1, {r0, r8, r9, sl, fp, ip, sp, lr, pc}
     a0c:	a6000000 	strge	r0, [r0], -r0
     a10:	16000002 	strne	r0, [r0], -r2
     a14:	000000b6 	strheq	r0, [r0], -r6
     a18:	4501ff01 	strmi	pc, [r1, #-3841]
     a1c:	c4000000 	strgt	r0, [r0]
     a20:	12000002 	andne	r0, r0, #2	; 0x2
     a24:	000003db 	ldrdeq	r0, [r0], -fp
     a28:	ba020201 	blt	81234 <__Stack_Size+0x80e34>
     a2c:	02000006 	andeq	r0, r0, #6	; 0x6
     a30:	15006091 	strne	r6, [r0, #-145]
     a34:	00045601 	andeq	r5, r4, r1, lsl #12
     a38:	01fb0100 	mvnseq	r0, r0, lsl #2
     a3c:	00347801 	eorseq	r7, r4, r1, lsl #16
     a40:	00348808 	eorseq	r8, r4, r8, lsl #16
     a44:	0002e208 	andeq	lr, r2, r8, lsl #4
     a48:	00098d00 	andeq	r8, r9, r0, lsl #26
     a4c:	00b61600 	adcseq	r1, r6, r0, lsl #12
     a50:	fa010000 	blx	40a58 <__Stack_Size+0x40658>
     a54:	00004501 	andeq	r4, r0, r1, lsl #10
     a58:	00030d00 	andeq	r0, r3, r0, lsl #26
     a5c:	01150000 	tsteq	r5, r0
     a60:	00000754 	andeq	r0, r0, r4, asr r7
     a64:	0101e001 	tsteq	r1, r1
     a68:	08003488 	stmdaeq	r0, {r3, r7, sl, ip, sp}
     a6c:	08003510 	stmdaeq	r0, {r4, r8, sl, ip, sp}
     a70:	0000032b 	andeq	r0, r0, fp, lsr #6
     a74:	000009b7 	strheq	r0, [r0], -r7
     a78:	0004f812 	andeq	pc, r4, r2, lsl r8
     a7c:	01e10100 	mvneq	r0, r0, lsl #2
     a80:	00000528 	andeq	r0, r0, r8, lsr #10
     a84:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     a88:	06d30115 	undefined
     a8c:	bb010000 	bllt	40a94 <__Stack_Size+0x40694>
     a90:	35100101 	ldrcc	r0, [r0, #-257]
     a94:	35620800 	strbcc	r0, [r2, #-2048]!
     a98:	03560800 	cmpeq	r6, #0	; 0x0
     a9c:	09e10000 	stmibeq	r1!, {}^
     aa0:	11120000 	tstne	r2, r0
     aa4:	01000004 	tsteq	r0, r4
     aa8:	057401bc 	ldrbeq	r0, [r4, #-444]!
     aac:	91020000 	tstls	r2, r0
     ab0:	0115006c 	tsteq	r5, ip, rrx
     ab4:	000004d5 	ldrdeq	r0, [r0], -r5
     ab8:	01017801 	tsteq	r1, r1, lsl #16
     abc:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
     ac0:	080035e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip, sp}
     ac4:	00000381 	andeq	r0, r0, r1, lsl #7
     ac8:	00000a08 	andeq	r0, r0, r8, lsl #20
     acc:	0008591a 	andeq	r5, r8, sl, lsl r9
     ad0:	01790100 	cmneq	r9, r0, lsl #2
     ad4:	000000ce 	andeq	r0, r0, lr, asr #1
     ad8:	8a011500 	bhi	45ee0 <__Stack_Size+0x45ae0>
     adc:	01000004 	tsteq	r0, r4
     ae0:	e801014b 	stmda	r1, {r0, r1, r3, r6, r8}
     ae4:	70080035 	andvc	r0, r8, r5, lsr r0
     ae8:	ac080037 	stcge	0, cr0, [r8], {55}
     aec:	45000003 	strmi	r0, [r0, #-3]
     af0:	1b00000a 	blne	b20 <__Stack_Size+0x720>
     af4:	4b010074 	blmi	40ccc <__Stack_Size+0x408cc>
     af8:	000a4501 	andeq	r4, sl, r1, lsl #10
     afc:	0003d700 	andeq	sp, r3, r0, lsl #14
     b00:	00611c00 	rsbeq	r1, r1, r0, lsl #24
     b04:	57014c01 	strpl	r4, [r1, -r1, lsl #24]
     b08:	1c000000 	stcne	0, cr0, [r0], {0}
     b0c:	4d010062 	stcmi	0, cr0, [r1, #-392]
     b10:	00005701 	andeq	r5, r0, r1, lsl #14
     b14:	041d0000 	ldreq	r0, [sp]
     b18:	746e6905 	strbtvc	r6, [lr], #-2309
     b1c:	ee011e00 	cdp	14, 0, cr1, cr1, cr0, {0}
     b20:	01000007 	tsteq	r0, r7
     b24:	0a450184 	beq	114113c <__Stack_Size+0x1140d3c>
     b28:	37700000 	ldrbcc	r0, [r0, -r0]!
     b2c:	634c0800 	movtvs	r0, #51200	; 0xc800
     b30:	03f50800 	mvnseq	r0, #0	; 0x0
     b34:	0a7c0000 	beq	1f00b3c <__Stack_Size+0x1f0073c>
     b38:	741f0000 	ldrvc	r0, [pc], #0	; b40 <__Stack_Size+0x740>
     b3c:	7c9e0100 	ldfvcs	f0, [lr], {0}
     b40:	1f00000a 	svcne	0x0000000a
     b44:	a0010078 	andge	r0, r1, r8, ror r0
     b48:	00000045 	andeq	r0, r0, r5, asr #32
     b4c:	04080300 	streq	r0, [r8], #-768
     b50:	00000815 	andeq	r0, r0, r5, lsl r8
     b54:	00006920 	andeq	r6, r0, r0, lsr #18
     b58:	000a9300 	andeq	r9, sl, r0, lsl #6
     b5c:	00d92100 	sbcseq	r2, r9, r0, lsl #2
     b60:	00ff0000 	rscseq	r0, pc, r0
     b64:	0004c022 	andeq	ip, r4, r2, lsr #32
     b68:	a52e0100 	strge	r0, [lr, #-256]!
     b6c:	0100000a 	tsteq	r0, sl
     b70:	00700305 	rsbseq	r0, r0, r5, lsl #6
     b74:	83042000 	movwhi	r2, #16384	; 0x4000
     b78:	2200000a 	andcs	r0, r0, #10	; 0xa
     b7c:	00000842 	andeq	r0, r0, r2, asr #16
     b80:	0abc2f01 	beq	fef0c78c <SCS_BASE+0x1eefe78c>
     b84:	05010000 	streq	r0, [r1]
     b88:	00017003 	andeq	r7, r1, r3
     b8c:	00690420 	rsbeq	r0, r9, r0, lsr #8
     b90:	c5220000 	strgt	r0, [r2]!
     b94:	01000007 	tsteq	r0, r7
     b98:	000abc2f 	andeq	fp, sl, pc, lsr #24
     b9c:	03050100 	movweq	r0, #20736	; 0x5100
     ba0:	20000171 	andcs	r0, r0, r1, ror r1
     ba4:	00033122 	andeq	r3, r3, r2, lsr #2
     ba8:	7a300100 	bvc	c00fb0 <__Stack_Size+0xc00bb0>
     bac:	01000000 	tsteq	r0, r0
     bb0:	01740305 	cmneq	r4, r5, lsl #6
     bb4:	0c222000 	stceq	0, cr2, [r2]
     bb8:	01000003 	tsteq	r0, r3
     bbc:	00007a30 	andeq	r7, r0, r0, lsr sl
     bc0:	03050100 	movweq	r0, #20736	; 0x5100
     bc4:	20000178 	andcs	r0, r0, r8, ror r1
     bc8:	0000fc22 	andeq	pc, r0, r2, lsr #24
     bcc:	45310100 	ldrmi	r0, [r1, #-256]!
     bd0:	01000000 	tsteq	r0, r0
     bd4:	00000305 	andeq	r0, r0, r5, lsl #6
     bd8:	fd222000 	stc2	0, cr2, [r2]
     bdc:	01000003 	tsteq	r0, r3
     be0:	00004532 	andeq	r4, r0, r2, lsr r5
     be4:	03050100 	movweq	r0, #20736	; 0x5100
     be8:	20000004 	andcs	r0, r0, r4
     bec:	00017522 	andeq	r7, r1, r2, lsr #10
     bf0:	7f330100 	svcvc	0x00330100
     bf4:	01000000 	tsteq	r0, r0
     bf8:	00080305 	andeq	r0, r8, r5, lsl #6
     bfc:	80222000 	eorhi	r2, r2, r0
     c00:	01000002 	tsteq	r0, r2
     c04:	00007a34 	andeq	r7, r0, r4, lsr sl
     c08:	03050100 	movweq	r0, #20736	; 0x5100
     c0c:	2000006c 	andcs	r0, r0, ip, rrx
     c10:	0002d322 	andeq	sp, r2, r2, lsr #6
     c14:	45360100 	ldrmi	r0, [r6, #-256]!
     c18:	01000000 	tsteq	r0, r0
     c1c:	000c0305 	andeq	r0, ip, r5, lsl #6
     c20:	5f222000 	svcpl	0x00222000
     c24:	01000000 	tsteq	r0, r0
     c28:	00004537 	andeq	r4, r0, r7, lsr r5
     c2c:	03050100 	movweq	r0, #20736	; 0x5100
     c30:	20000010 	andcs	r0, r0, r0, lsl r0
     c34:	00006822 	andeq	r6, r0, r2, lsr #16
     c38:	45380100 	ldrmi	r0, [r8, #-256]!
     c3c:	01000000 	tsteq	r0, r0
     c40:	00140305 	andseq	r0, r4, r5, lsl #6
     c44:	71222000 	teqvc	r2, r0
     c48:	01000000 	tsteq	r0, r0
     c4c:	00004539 	andeq	r4, r0, r9, lsr r5
     c50:	03050100 	movweq	r0, #20736	; 0x5100
     c54:	20000018 	andcs	r0, r0, r8, lsl r0
     c58:	00007a22 	andeq	r7, r0, r2, lsr #20
     c5c:	453a0100 	ldrmi	r0, [sl, #-256]!
     c60:	01000000 	tsteq	r0, r0
     c64:	001c0305 	andseq	r0, ip, r5, lsl #6
     c68:	83222000 	teqhi	r2, #0	; 0x0
     c6c:	01000000 	tsteq	r0, r0
     c70:	0000453b 	andeq	r4, r0, fp, lsr r5
     c74:	03050100 	movweq	r0, #20736	; 0x5100
     c78:	20000020 	andcs	r0, r0, r0, lsr #32
     c7c:	0002dc22 	andeq	sp, r2, r2, lsr #24
     c80:	453c0100 	ldrmi	r0, [ip, #-256]!
     c84:	01000000 	tsteq	r0, r0
     c88:	00240305 	eoreq	r0, r4, r5, lsl #6
     c8c:	9b222000 	blls	888c94 <__Stack_Size+0x888894>
     c90:	01000000 	tsteq	r0, r0
     c94:	0000453d 	andeq	r4, r0, sp, lsr r5
     c98:	03050100 	movweq	r0, #20736	; 0x5100
     c9c:	20000028 	andcs	r0, r0, r8, lsr #32
     ca0:	0000a422 	andeq	sl, r0, r2, lsr #8
     ca4:	453e0100 	ldrmi	r0, [lr, #-256]!
     ca8:	01000000 	tsteq	r0, r0
     cac:	002c0305 	eoreq	r0, ip, r5, lsl #6
     cb0:	1e222000 	cdpne	0, 2, cr2, cr2, cr0, {0}
     cb4:	01000001 	tsteq	r0, r1
     cb8:	0000453f 	andeq	r4, r0, pc, lsr r5
     cbc:	03050100 	movweq	r0, #20736	; 0x5100
     cc0:	20000030 	andcs	r0, r0, r0, lsr r0
     cc4:	00019322 	andeq	r9, r1, r2, lsr #6
     cc8:	45400100 	strbmi	r0, [r0, #-256]
     ccc:	01000000 	tsteq	r0, r0
     cd0:	00340305 	eorseq	r0, r4, r5, lsl #6
     cd4:	28222000 	stmdacs	r2!, {sp}
     cd8:	01000001 	tsteq	r0, r1
     cdc:	00004541 	andeq	r4, r0, r1, asr #10
     ce0:	03050100 	movweq	r0, #20736	; 0x5100
     ce4:	20000038 	andcs	r0, r0, r8, lsr r0
     ce8:	0001a722 	andeq	sl, r1, r2, lsr #14
     cec:	45420100 	strbmi	r0, [r2, #-256]
     cf0:	01000000 	tsteq	r0, r0
     cf4:	003c0305 	eorseq	r0, ip, r5, lsl #6
     cf8:	b1222000 	teqlt	r2, r0
     cfc:	01000001 	tsteq	r0, r1
     d00:	00004543 	andeq	r4, r0, r3, asr #10
     d04:	03050100 	movweq	r0, #20736	; 0x5100
     d08:	20000040 	andcs	r0, r0, r0, asr #32
     d0c:	0001bb22 	andeq	fp, r1, r2, lsr #22
     d10:	45440100 	strbmi	r0, [r4, #-256]
     d14:	01000000 	tsteq	r0, r0
     d18:	00440305 	subeq	r0, r4, r5, lsl #6
     d1c:	c5222000 	strgt	r2, [r2]!
     d20:	01000001 	tsteq	r0, r1
     d24:	00004545 	andeq	r4, r0, r5, asr #10
     d28:	03050100 	movweq	r0, #20736	; 0x5100
     d2c:	20000048 	andcs	r0, r0, r8, asr #32
     d30:	0001cf22 	andeq	ip, r1, r2, lsr #30
     d34:	45460100 	strbmi	r0, [r6, #-256]
     d38:	01000000 	tsteq	r0, r0
     d3c:	004c0305 	subeq	r0, ip, r5, lsl #6
     d40:	d9222000 	stmdble	r2!, {sp}
     d44:	01000001 	tsteq	r0, r1
     d48:	00004547 	andeq	r4, r0, r7, asr #10
     d4c:	03050100 	movweq	r0, #20736	; 0x5100
     d50:	20000050 	andcs	r0, r0, r0, asr r0
     d54:	0003f422 	andeq	pc, r3, r2, lsr #8
     d58:	57490100 	strbpl	r0, [r9, -r0, lsl #2]
     d5c:	01000000 	tsteq	r0, r0
     d60:	017c0305 	cmneq	ip, r5, lsl #6
     d64:	0b222000 	bleq	888d6c <__Stack_Size+0x88896c>
     d68:	01000005 	tsteq	r0, r5
     d6c:	0000574a 	andeq	r5, r0, sl, asr #14
     d70:	03050100 	movweq	r0, #20736	; 0x5100
     d74:	2000017e 	andcs	r0, r0, lr, ror r1
     d78:	0002a122 	andeq	sl, r2, r2, lsr #2
     d7c:	694c0100 	stmdbvs	ip, {r8}^
     d80:	01000000 	tsteq	r0, r0
     d84:	01800305 	orreq	r0, r0, r5, lsl #6
     d88:	69232000 	stmdbvs	r3!, {sp}
     d8c:	01003164 	tsteq	r0, r4, ror #2
     d90:	0000694d 	andeq	r6, r0, sp, asr #18
     d94:	03050100 	movweq	r0, #20736	; 0x5100
     d98:	20000054 	andcs	r0, r0, r4, asr r0
     d9c:	32646923 	rsbcc	r6, r4, #573440	; 0x8c000
     da0:	694e0100 	stmdbvs	lr, {r8}^
     da4:	01000000 	tsteq	r0, r0
     da8:	00550305 	subseq	r0, r5, r5, lsl #6
     dac:	69232000 	stmdbvs	r3!, {sp}
     db0:	01003364 	tsteq	r0, r4, ror #6
     db4:	0000694f 	andeq	r6, r0, pc, asr #18
     db8:	03050100 	movweq	r0, #20736	; 0x5100
     dbc:	20000056 	andcs	r0, r0, r6, asr r0
     dc0:	34646923 	strbtcc	r6, [r4], #-2339
     dc4:	69500100 	ldmdbvs	r0, {r8}^
     dc8:	01000000 	tsteq	r0, r0
     dcc:	00570305 	subseq	r0, r7, r5, lsl #6
     dd0:	69232000 	stmdbvs	r3!, {sp}
     dd4:	01003564 	tsteq	r0, r4, ror #10
     dd8:	00006951 	andeq	r6, r0, r1, asr r9
     ddc:	03050100 	movweq	r0, #20736	; 0x5100
     de0:	20000058 	andcs	r0, r0, r8, asr r0
     de4:	36646923 	strbtcc	r6, [r4], -r3, lsr #18
     de8:	69520100 	ldmdbvs	r2, {r8}^
     dec:	01000000 	tsteq	r0, r0
     df0:	00590305 	subseq	r0, r9, r5, lsl #6
     df4:	69232000 	stmdbvs	r3!, {sp}
     df8:	01003764 	tsteq	r0, r4, ror #14
     dfc:	00006953 	andeq	r6, r0, r3, asr r9
     e00:	03050100 	movweq	r0, #20736	; 0x5100
     e04:	2000005a 	andcs	r0, r0, sl, asr r0
     e08:	38646923 	stmdacc	r4!, {r0, r1, r5, r8, fp, sp, lr}^
     e0c:	69540100 	ldmdbvs	r4, {r8}^
     e10:	01000000 	tsteq	r0, r0
     e14:	005b0305 	subseq	r0, fp, r5, lsl #6
     e18:	69232000 	stmdbvs	r3!, {sp}
     e1c:	01003964 	tsteq	r0, r4, ror #18
     e20:	00006955 	andeq	r6, r0, r5, asr r9
     e24:	03050100 	movweq	r0, #20736	; 0x5100
     e28:	2000005c 	andcs	r0, r0, ip, asr r0
     e2c:	0000bf22 	andeq	fp, r0, r2, lsr #30
     e30:	69560100 	ldmdbvs	r6, {r8}^
     e34:	01000000 	tsteq	r0, r0
     e38:	005d0305 	subseq	r0, sp, r5, lsl #6
     e3c:	c4222000 	strtgt	r2, [r2]
     e40:	01000000 	tsteq	r0, r0
     e44:	00006957 	andeq	r6, r0, r7, asr r9
     e48:	03050100 	movweq	r0, #20736	; 0x5100
     e4c:	2000005e 	andcs	r0, r0, lr, asr r0
     e50:	0000c922 	andeq	ip, r0, r2, lsr #18
     e54:	69580100 	ldmdbvs	r8, {r8}^
     e58:	01000000 	tsteq	r0, r0
     e5c:	005f0305 	subseq	r0, pc, r5, lsl #6
     e60:	ce222000 	cdpgt	0, 2, cr2, cr2, cr0, {0}
     e64:	01000000 	tsteq	r0, r0
     e68:	00006959 	andeq	r6, r0, r9, asr r9
     e6c:	03050100 	movweq	r0, #20736	; 0x5100
     e70:	20000060 	andcs	r0, r0, r0, rrx
     e74:	0000d322 	andeq	sp, r0, r2, lsr #6
     e78:	695a0100 	ldmdbvs	sl, {r8}^
     e7c:	01000000 	tsteq	r0, r0
     e80:	00610305 	rsbeq	r0, r1, r5, lsl #6
     e84:	d8222000 	stmdale	r2!, {sp}
     e88:	01000000 	tsteq	r0, r0
     e8c:	0000695b 	andeq	r6, r0, fp, asr r9
     e90:	03050100 	movweq	r0, #20736	; 0x5100
     e94:	20000062 	andcs	r0, r0, r2, rrx
     e98:	0000dd22 	andeq	sp, r0, r2, lsr #26
     e9c:	695c0100 	ldmdbvs	ip, {r8}^
     ea0:	01000000 	tsteq	r0, r0
     ea4:	00630305 	rsbeq	r0, r3, r5, lsl #6
     ea8:	e2222000 	eor	r2, r2, #0	; 0x0
     eac:	01000000 	tsteq	r0, r0
     eb0:	0000695d 	andeq	r6, r0, sp, asr r9
     eb4:	03050100 	movweq	r0, #20736	; 0x5100
     eb8:	20000064 	andcs	r0, r0, r4, rrx
     ebc:	0000e722 	andeq	lr, r0, r2, lsr #14
     ec0:	695e0100 	ldmdbvs	lr, {r8}^
     ec4:	01000000 	tsteq	r0, r0
     ec8:	00650305 	rsbeq	r0, r5, r5, lsl #6
     ecc:	4e222000 	cdpmi	0, 2, cr2, cr2, cr0, {0}
     ed0:	01000001 	tsteq	r0, r1
     ed4:	0000695f 	andeq	r6, r0, pc, asr r9
     ed8:	03050100 	movweq	r0, #20736	; 0x5100
     edc:	20000181 	andcs	r0, r0, r1, lsl #3
     ee0:	000e7e22 	andeq	r7, lr, r2, lsr #28
     ee4:	695f0100 	ldmdbvs	pc, {r8}^
     ee8:	01000000 	tsteq	r0, r0
     eec:	01820305 	orreq	r0, r2, r5, lsl #6
     ef0:	79002000 	stmdbvc	r0, {sp}
     ef4:	02000005 	andeq	r0, r0, #5	; 0x5
     ef8:	00023000 	andeq	r3, r2, r0
     efc:	51010400 	tstpl	r1, r0, lsl #8
     f00:	01000005 	tsteq	r0, r5
     f04:	00000d42 	andeq	r0, r0, r2, asr #26
     f08:	00000369 	andeq	r0, r0, r9, ror #6
     f0c:	0800634c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sp, lr}
     f10:	08006478 	stmdaeq	r0, {r3, r4, r5, r6, sl, sp, lr}
     f14:	0000049d 	muleq	r0, sp, r4
     f18:	0a830102 	beq	fe0c1328 <SCS_BASE+0x1e0b3328>
     f1c:	24010000 	strcs	r0, [r1]
     f20:	00634c01 	rsbeq	r4, r3, r1, lsl #24
     f24:	00634e08 	rsbeq	r4, r3, r8, lsl #28
     f28:	025d0108 	subseq	r0, sp, #2	; 0x2
     f2c:	0008df01 	andeq	sp, r8, r1, lsl #30
     f30:	012f0100 	teqeq	pc, r0, lsl #2
     f34:	08006350 	stmdaeq	r0, {r4, r6, r8, r9, sp, lr}
     f38:	08006352 	stmdaeq	r0, {r1, r4, r6, r8, r9, sp, lr}
     f3c:	01025d01 	tsteq	r2, r1, lsl #26
     f40:	00000a70 	andeq	r0, r0, r0, ror sl
     f44:	54013e01 	strpl	r3, [r1], #-3585
     f48:	56080063 	strpl	r0, [r8], -r3, rrx
     f4c:	01080063 	tsteq	r8, r3, rrx
     f50:	6f01025d 	svcvs	0x0001025d
     f54:	01000008 	tsteq	r0, r8
     f58:	6358014d 	cmpvs	r8, #1073741843	; 0x40000013
     f5c:	635a0800 	cmpvs	sl, #0	; 0x0
     f60:	5d010800 	stcpl	8, cr0, [r1]
     f64:	0ad70102 	beq	ff5c1374 <SCS_BASE+0x1f5b3374>
     f68:	5c010000 	stcpl	0, cr0, [r1], {0}
     f6c:	00635c01 	rsbeq	r5, r3, r1, lsl #24
     f70:	00635e08 	rsbeq	r5, r3, r8, lsl #28
     f74:	025d0108 	subseq	r0, sp, #2	; 0x2
     f78:	00095001 	andeq	r5, r9, r1
     f7c:	016b0100 	cmneq	fp, r0, lsl #2
     f80:	08006360 	stmdaeq	r0, {r5, r6, r8, r9, sp, lr}
     f84:	08006362 	stmdaeq	r0, {r1, r5, r6, r8, r9, sp, lr}
     f88:	01025d01 	tsteq	r2, r1, lsl #26
     f8c:	00000a09 	andeq	r0, r0, r9, lsl #20
     f90:	64017601 	strvs	r7, [r1], #-1537
     f94:	66080063 	strvs	r0, [r8], -r3, rrx
     f98:	01080063 	tsteq	r8, r3, rrx
     f9c:	2a01025d 	bcs	41918 <__Stack_Size+0x41518>
     fa0:	0100000d 	tsteq	r0, sp
     fa4:	63680181 	cmnvs	r8, #1073741856	; 0x40000020
     fa8:	636a0800 	cmnvs	sl, #0	; 0x0
     fac:	5d010800 	stcpl	8, cr0, [r1]
     fb0:	0ce60102 	stfeqe	f0, [r6], #8
     fb4:	98010000 	stmdals	r1, {}
     fb8:	00636c01 	rsbeq	r6, r3, r1, lsl #24
     fbc:	00636e08 	rsbeq	r6, r3, r8, lsl #28
     fc0:	025d0108 	subseq	r0, sp, #2	; 0x2
     fc4:	0008d001 	andeq	sp, r8, r1
     fc8:	01a30100 	undefined instruction 0x01a30100
     fcc:	08006370 	stmdaeq	r0, {r4, r5, r6, r8, r9, sp, lr}
     fd0:	08006372 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sp, lr}
     fd4:	01025d01 	tsteq	r2, r1, lsl #26
     fd8:	00000904 	andeq	r0, r0, r4, lsl #18
     fdc:	7401ae01 	strvc	sl, [r1], #-3585
     fe0:	76080063 	strvc	r0, [r8], -r3, rrx
     fe4:	01080063 	tsteq	r8, r3, rrx
     fe8:	2601025d 	undefined
     fec:	0100000a 	tsteq	r0, sl
     ff0:	637801b9 	cmnvs	r8, #1073741870	; 0x4000002e
     ff4:	637a0800 	cmnvs	sl, #0	; 0x0
     ff8:	5d010800 	stcpl	8, cr0, [r1]
     ffc:	0ac60102 	beq	ff18140c <SCS_BASE+0x1f17340c>
    1000:	c4010000 	strgt	r0, [r1]
    1004:	00637c01 	rsbeq	r7, r3, r1, lsl #24
    1008:	00637e08 	rsbeq	r7, r3, r8, lsl #28
    100c:	025d0108 	subseq	r0, sp, #2	; 0x2
    1010:	000cae01 	andeq	sl, ip, r1, lsl #28
    1014:	01cf0100 	biceq	r0, pc, r0, lsl #2
    1018:	08006380 	stmdaeq	r0, {r7, r8, r9, sp, lr}
    101c:	08006382 	stmdaeq	r0, {r1, r7, r8, r9, sp, lr}
    1020:	01025d01 	tsteq	r2, r1, lsl #26
    1024:	000008bf 	strheq	r0, [r0], -pc
    1028:	8401da01 	strhi	sp, [r1], #-2561
    102c:	86080063 	strhi	r0, [r8], -r3, rrx
    1030:	01080063 	tsteq	r8, r3, rrx
    1034:	8701025d 	smlsdhi	r1, sp, r2, r0
    1038:	0100000b 	tsteq	r0, fp
    103c:	638801e5 	orrvs	r0, r8, #1073741881	; 0x40000039
    1040:	638a0800 	orrvs	r0, sl, #0	; 0x0
    1044:	5d010800 	stcpl	8, cr0, [r1]
    1048:	08810102 	stmeq	r1, {r1, r8}
    104c:	f0010000 	undefined instruction 0xf0010000
    1050:	00638c01 	rsbeq	r8, r3, r1, lsl #24
    1054:	00638e08 	rsbeq	r8, r3, r8, lsl #28
    1058:	025d0108 	subseq	r0, sp, #2	; 0x2
    105c:	000a9001 	andeq	r9, sl, r1
    1060:	01fb0100 	mvnseq	r0, r0, lsl #2
    1064:	08006390 	stmdaeq	r0, {r4, r7, r8, r9, sp, lr}
    1068:	08006392 	stmdaeq	r0, {r1, r4, r7, r8, r9, sp, lr}
    106c:	01035d01 	tsteq	r3, r1, lsl #26
    1070:	00000d06 	andeq	r0, r0, r6, lsl #26
    1074:	01010601 	tsteq	r1, r1, lsl #12
    1078:	08006394 	stmdaeq	r0, {r2, r4, r7, r8, r9, sp, lr}
    107c:	08006396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp, lr}
    1080:	01035d01 	tsteq	r3, r1, lsl #26
    1084:	000009f0 	strdeq	r0, [r0], -r0
    1088:	01011101 	tsteq	r1, r1, lsl #2
    108c:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
    1090:	0800639a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sp, lr}
    1094:	01035d01 	tsteq	r3, r1, lsl #26
    1098:	00000c4a 	andeq	r0, r0, sl, asr #24
    109c:	01011c01 	tsteq	r1, r1, lsl #24
    10a0:	0800639c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sp, lr}
    10a4:	0800639e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, sp, lr}
    10a8:	01035d01 	tsteq	r3, r1, lsl #26
    10ac:	0000095d 	andeq	r0, r0, sp, asr r9
    10b0:	01012701 	tsteq	r1, r1, lsl #14
    10b4:	080063a0 	stmdaeq	r0, {r5, r7, r8, r9, sp, lr}
    10b8:	080063a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sp, lr}
    10bc:	01035d01 	tsteq	r3, r1, lsl #26
    10c0:	00000b5e 	andeq	r0, r0, lr, asr fp
    10c4:	01013201 	tsteq	r1, r1, lsl #4
    10c8:	080063a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp, lr}
    10cc:	080063a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sp, lr}
    10d0:	01035d01 	tsteq	r3, r1, lsl #26
    10d4:	00000d83 	andeq	r0, r0, r3, lsl #27
    10d8:	01013d01 	tsteq	r1, r1, lsl #26
    10dc:	080063a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sp, lr}
    10e0:	080063aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sp, lr}
    10e4:	01035d01 	tsteq	r3, r1, lsl #26
    10e8:	00000b12 	andeq	r0, r0, r2, lsl fp
    10ec:	01014801 	tsteq	r1, r1, lsl #16
    10f0:	080063ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp, lr}
    10f4:	080063ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sp, lr}
    10f8:	01035d01 	tsteq	r3, r1, lsl #26
    10fc:	00000d59 	andeq	r0, r0, r9, asr sp
    1100:	01015301 	tsteq	r1, r1, lsl #6
    1104:	080063b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sp, lr}
    1108:	080063b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sp, lr}
    110c:	01035d01 	tsteq	r3, r1, lsl #26
    1110:	000008f2 	strdeq	r0, [r0], -r2
    1114:	01015f01 	tsteq	r1, r1, lsl #30
    1118:	080063b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sp, lr}
    111c:	080063b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp, lr}
    1120:	01035d01 	tsteq	r3, r1, lsl #26
    1124:	00000bfa 	strdeq	r0, [r0], -sl
    1128:	01016b01 	tsteq	r1, r1, lsl #22
    112c:	080063b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sp, lr}
    1130:	080063ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sp, lr}
    1134:	01035d01 	tsteq	r3, r1, lsl #26
    1138:	00000be0 	andeq	r0, r0, r0, ror #23
    113c:	01017701 	tsteq	r1, r1, lsl #14
    1140:	080063bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp, lr}
    1144:	080063be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sp, lr}
    1148:	01035d01 	tsteq	r3, r1, lsl #26
    114c:	0000092e 	andeq	r0, r0, lr, lsr #18
    1150:	01018201 	tsteq	r1, r1, lsl #4
    1154:	080063c0 	stmdaeq	r0, {r6, r7, r8, r9, sp, lr}
    1158:	080063c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sp, lr}
    115c:	01035d01 	tsteq	r3, r1, lsl #26
    1160:	00000b4b 	andeq	r0, r0, fp, asr #22
    1164:	01018d01 	tsteq	r1, r1, lsl #26
    1168:	080063c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sp, lr}
    116c:	080063c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sp, lr}
    1170:	01035d01 	tsteq	r3, r1, lsl #26
    1174:	00000d17 	andeq	r0, r0, r7, lsl sp
    1178:	01019801 	tsteq	r1, r1, lsl #16
    117c:	080063c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sp, lr}
    1180:	080063ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sp, lr}
    1184:	01035d01 	tsteq	r3, r1, lsl #26
    1188:	000008ab 	andeq	r0, r0, fp, lsr #17
    118c:	0101a301 	tsteq	r1, r1, lsl #6
    1190:	080063cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sp, lr}
    1194:	080063ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sp, lr}
    1198:	01035d01 	tsteq	r3, r1, lsl #26
    119c:	00000976 	andeq	r0, r0, r6, ror r9
    11a0:	0101af01 	tsteq	r1, r1, lsl #30
    11a4:	080063d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sp, lr}
    11a8:	080063d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, sp, lr}
    11ac:	01035d01 	tsteq	r3, r1, lsl #26
    11b0:	00000c96 	muleq	r0, r6, ip
    11b4:	0101bb01 	tsteq	r1, r1, lsl #22
    11b8:	080063d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sp, lr}
    11bc:	080063d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sp, lr}
    11c0:	01035d01 	tsteq	r3, r1, lsl #26
    11c4:	0000099c 	muleq	r0, ip, r9
    11c8:	0101c601 	tsteq	r1, r1, lsl #12
    11cc:	080063d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sp, lr}
    11d0:	080063da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sp, lr}
    11d4:	01035d01 	tsteq	r3, r1, lsl #26
    11d8:	00000b3b 	andeq	r0, r0, fp, lsr fp
    11dc:	0101dd01 	tsteq	r1, r1, lsl #26
    11e0:	080063dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sp, lr}
    11e4:	080063de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sp, lr}
    11e8:	01035d01 	tsteq	r3, r1, lsl #26
    11ec:	00000c86 	andeq	r0, r0, r6, lsl #25
    11f0:	0101e801 	tsteq	r1, r1, lsl #16
    11f4:	080063e0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sp, lr}
    11f8:	080063e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sp, lr}
    11fc:	01035d01 	tsteq	r3, r1, lsl #26
    1200:	00000aeb 	andeq	r0, r0, fp, ror #21
    1204:	0101f301 	tstpeq	r1, r1, lsl #6
    1208:	080063e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sp, lr}
    120c:	080063e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sp, lr}
    1210:	01035d01 	tsteq	r3, r1, lsl #26
    1214:	00000c13 	andeq	r0, r0, r3, lsl ip
    1218:	0101fe01 	tstpeq	r1, r1, lsl #28
    121c:	080063e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sp, lr}
    1220:	080063ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, r9, sp, lr}
    1224:	01035d01 	tsteq	r3, r1, lsl #26
    1228:	00000ba8 	andeq	r0, r0, r8, lsr #23
    122c:	01020901 	tsteq	r2, r1, lsl #18
    1230:	080063ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sp, lr}
    1234:	080063ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sp, lr}
    1238:	01035d01 	tsteq	r3, r1, lsl #26
    123c:	00000bbb 	strheq	r0, [r0], -fp
    1240:	01021401 	tsteq	r2, r1, lsl #8
    1244:	080063f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sp, lr}
    1248:	080063f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sp, lr}
    124c:	01035d01 	tsteq	r3, r1, lsl #26
    1250:	00000c26 	andeq	r0, r0, r6, lsr #24
    1254:	01021f01 	tsteq	r2, r1, lsl #30
    1258:	080063f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp, lr}
    125c:	080063f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sp, lr}
    1260:	01035d01 	tsteq	r3, r1, lsl #26
    1264:	00000cf6 	strdeq	r0, [r0], -r6
    1268:	01022a01 	tsteq	r2, r1, lsl #20
    126c:	080063f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp, lr}
    1270:	080063fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    1274:	01035d01 	tsteq	r3, r1, lsl #26
    1278:	00000c74 	andeq	r0, r0, r4, ror ip
    127c:	01024101 	tsteq	r2, r1, lsl #2
    1280:	080063fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    1284:	080063fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sp, lr}
    1288:	01035d01 	tsteq	r3, r1, lsl #26
    128c:	00000a14 	andeq	r0, r0, r4, lsl sl
    1290:	01024c01 	tsteq	r2, r1, lsl #24
    1294:	08006400 	stmdaeq	r0, {sl, sp, lr}
    1298:	08006402 	stmdaeq	r0, {r1, sl, sp, lr}
    129c:	01035d01 	tsteq	r3, r1, lsl #26
    12a0:	000009db 	ldrdeq	r0, [r0], -fp
    12a4:	01025701 	tsteq	r2, r1, lsl #14
    12a8:	08006404 	stmdaeq	r0, {r2, sl, sp, lr}
    12ac:	08006406 	stmdaeq	r0, {r1, r2, sl, sp, lr}
    12b0:	01035d01 	tsteq	r3, r1, lsl #26
    12b4:	00000afe 	strdeq	r0, [r0], -lr
    12b8:	01026201 	tsteq	r2, r1, lsl #4
    12bc:	08006408 	stmdaeq	r0, {r3, sl, sp, lr}
    12c0:	0800640a 	stmdaeq	r0, {r1, r3, sl, sp, lr}
    12c4:	01035d01 	tsteq	r3, r1, lsl #26
    12c8:	00000aa1 	andeq	r0, r0, r1, lsr #21
    12cc:	01026d01 	tsteq	r2, r1, lsl #26
    12d0:	0800640c 	stmdaeq	r0, {r2, r3, sl, sp, lr}
    12d4:	0800640e 	stmdaeq	r0, {r1, r2, r3, sl, sp, lr}
    12d8:	01035d01 	tsteq	r3, r1, lsl #26
    12dc:	00000c36 	andeq	r0, r0, r6, lsr ip
    12e0:	01027801 	tsteq	r2, r1, lsl #16
    12e4:	08006410 	stmdaeq	r0, {r4, sl, sp, lr}
    12e8:	08006412 	stmdaeq	r0, {r1, r4, sl, sp, lr}
    12ec:	01035d01 	tsteq	r3, r1, lsl #26
    12f0:	00000989 	andeq	r0, r0, r9, lsl #19
    12f4:	01028401 	tsteq	r2, r1, lsl #8
    12f8:	08006414 	stmdaeq	r0, {r2, r4, sl, sp, lr}
    12fc:	08006416 	stmdaeq	r0, {r1, r2, r4, sl, sp, lr}
    1300:	01035d01 	tsteq	r3, r1, lsl #26
    1304:	00000916 	andeq	r0, r0, r6, lsl r9
    1308:	01029001 	tsteq	r2, r1
    130c:	08006418 	stmdaeq	r0, {r3, r4, sl, sp, lr}
    1310:	0800641a 	stmdaeq	r0, {r1, r3, r4, sl, sp, lr}
    1314:	01035d01 	tsteq	r3, r1, lsl #26
    1318:	000009af 	andeq	r0, r0, pc, lsr #19
    131c:	01029b01 	tsteq	r2, r1, lsl #22
    1320:	0800641c 	stmdaeq	r0, {r2, r3, r4, sl, sp, lr}
    1324:	0800641e 	stmdaeq	r0, {r1, r2, r3, r4, sl, sp, lr}
    1328:	01035d01 	tsteq	r3, r1, lsl #26
    132c:	00000b98 	muleq	r0, r8, fp
    1330:	0102a601 	tsteq	r2, r1, lsl #12
    1334:	08006420 	stmdaeq	r0, {r5, sl, sp, lr}
    1338:	08006422 	stmdaeq	r0, {r1, r5, sl, sp, lr}
    133c:	01035d01 	tsteq	r3, r1, lsl #26
    1340:	00000b77 	andeq	r0, r0, r7, ror fp
    1344:	0102b101 	tsteq	r2, r1, lsl #2
    1348:	08006424 	stmdaeq	r0, {r2, r5, sl, sp, lr}
    134c:	08006426 	stmdaeq	r0, {r1, r2, r5, sl, sp, lr}
    1350:	01035d01 	tsteq	r3, r1, lsl #26
    1354:	00000ab6 	strheq	r0, [r0], -r6
    1358:	0102bc01 	tsteq	r2, r1, lsl #24
    135c:	08006428 	stmdaeq	r0, {r3, r5, sl, sp, lr}
    1360:	0800642a 	stmdaeq	r0, {r1, r3, r5, sl, sp, lr}
    1364:	01035d01 	tsteq	r3, r1, lsl #26
    1368:	00000a35 	andeq	r0, r0, r5, lsr sl
    136c:	0102c701 	tsteq	r2, r1, lsl #14
    1370:	0800642c 	stmdaeq	r0, {r2, r3, r5, sl, sp, lr}
    1374:	0800642e 	stmdaeq	r0, {r1, r2, r3, r5, sl, sp, lr}
    1378:	01035d01 	tsteq	r3, r1, lsl #26
    137c:	00000b2b 	andeq	r0, r0, fp, lsr #22
    1380:	0102d201 	tsteq	r2, r1, lsl #4
    1384:	08006430 	stmdaeq	r0, {r4, r5, sl, sp, lr}
    1388:	08006432 	stmdaeq	r0, {r1, r4, r5, sl, sp, lr}
    138c:	01035d01 	tsteq	r3, r1, lsl #26
    1390:	00000c63 	andeq	r0, r0, r3, ror #24
    1394:	0102dd01 	tsteq	r2, r1, lsl #26
    1398:	08006434 	stmdaeq	r0, {r2, r4, r5, sl, sp, lr}
    139c:	08006436 	stmdaeq	r0, {r1, r2, r4, r5, sl, sp, lr}
    13a0:	01035d01 	tsteq	r3, r1, lsl #26
    13a4:	00000d72 	andeq	r0, r0, r2, ror sp
    13a8:	0102e801 	tsteq	r2, r1, lsl #16
    13ac:	08006438 	stmdaeq	r0, {r3, r4, r5, sl, sp, lr}
    13b0:	0800643a 	stmdaeq	r0, {r1, r3, r4, r5, sl, sp, lr}
    13b4:	01035d01 	tsteq	r3, r1, lsl #26
    13b8:	00000d32 	andeq	r0, r0, r2, lsr sp
    13bc:	0102f301 	tstpeq	r2, r1, lsl #6
    13c0:	0800643c 	stmdaeq	r0, {r2, r3, r4, r5, sl, sp, lr}
    13c4:	0800643e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, sp, lr}
    13c8:	01035d01 	tsteq	r3, r1, lsl #26
    13cc:	00000cd6 	ldrdeq	r0, [r0], -r6
    13d0:	0102fe01 	tstpeq	r2, r1, lsl #28
    13d4:	08006440 	stmdaeq	r0, {r6, sl, sp, lr}
    13d8:	08006442 	stmdaeq	r0, {r1, r6, sl, sp, lr}
    13dc:	01035d01 	tsteq	r3, r1, lsl #26
    13e0:	00000cbd 	strheq	r0, [r0], -sp
    13e4:	01030901 	tsteq	r3, r1, lsl #18
    13e8:	08006444 	stmdaeq	r0, {r2, r6, sl, sp, lr}
    13ec:	08006446 	stmdaeq	r0, {r1, r2, r6, sl, sp, lr}
    13f0:	01035d01 	tsteq	r3, r1, lsl #26
    13f4:	00000892 	muleq	r0, r2, r8
    13f8:	01031401 	tsteq	r3, r1, lsl #8
    13fc:	08006448 	stmdaeq	r0, {r3, r6, sl, sp, lr}
    1400:	0800644a 	stmdaeq	r0, {r1, r3, r6, sl, sp, lr}
    1404:	01035d01 	tsteq	r3, r1, lsl #26
    1408:	000009c2 	andeq	r0, r0, r2, asr #19
    140c:	01031f01 	tsteq	r3, r1, lsl #30
    1410:	0800644c 	stmdaeq	r0, {r2, r3, r6, sl, sp, lr}
    1414:	0800644e 	stmdaeq	r0, {r1, r2, r3, r6, sl, sp, lr}
    1418:	01035d01 	tsteq	r3, r1, lsl #26
    141c:	00000a45 	andeq	r0, r0, r5, asr #20
    1420:	01032b01 	tsteq	r3, r1, lsl #22
    1424:	08006450 	stmdaeq	r0, {r4, r6, sl, sp, lr}
    1428:	08006452 	stmdaeq	r0, {r1, r4, r6, sl, sp, lr}
    142c:	01045d01 	tsteq	r4, r1, lsl #26
    1430:	00000bce 	andeq	r0, r0, lr, asr #23
    1434:	01023501 	tsteq	r2, r1, lsl #10
    1438:	08006454 	stmdaeq	r0, {r2, r4, r6, sl, sp, lr}
    143c:	08006460 	stmdaeq	r0, {r5, r6, sl, sp, lr}
    1440:	00000420 	andeq	r0, r0, r0, lsr #8
    1444:	0a600104 	beq	180185c <__Stack_Size+0x180145c>
    1448:	d1010000 	tstle	r1, r0
    144c:	64600101 	strbtvs	r0, [r0], #-257
    1450:	646c0800 	strbtvs	r0, [ip], #-2048
    1454:	044b0800 	strbeq	r0, [fp], #-2048
    1458:	01050000 	tsteq	r5, r0
    145c:	00000941 	andeq	r0, r0, r1, asr #18
    1460:	6c018c01 	stcvs	12, cr8, [r1], {1}
    1464:	78080064 	stmdavc	r8, {r2, r5, r6}
    1468:	76080064 	strvc	r0, [r8], -r4, rrx
    146c:	00000004 	andeq	r0, r0, r4
    1470:	00000168 	andeq	r0, r0, r8, ror #2
    1474:	02980002 	addseq	r0, r8, #2	; 0x2
    1478:	01040000 	tsteq	r4, r0
    147c:	00000551 	andeq	r0, r0, r1, asr r5
    1480:	000dfa01 	andeq	pc, sp, r1, lsl #20
    1484:	00036900 	andeq	r6, r3, r0, lsl #18
    1488:	00647800 	rsbeq	r7, r4, r0, lsl #16
    148c:	00650408 	rsbeq	r0, r5, r8, lsl #8
    1490:	0005f608 	andeq	pc, r5, r8, lsl #12
    1494:	cd010200 	sfmgt	f0, 4, [r1]
    1498:	0100000d 	tsteq	r0, sp
    149c:	003e0148 	eorseq	r0, lr, r8, asr #2
    14a0:	64780000 	ldrbtvs	r0, [r8]
    14a4:	64840800 	strvs	r0, [r4], #2048
    14a8:	04a10800 	strteq	r0, [r1], #2048
    14ac:	04030000 	streq	r0, [r3]
    14b0:	746e6905 	strbtvc	r6, [lr], #-2309
    14b4:	dd010400 	cfstrsle	mvf0, [r1]
    14b8:	0100000d 	tsteq	r0, sp
    14bc:	6484013f 	strvs	r0, [r4], #319
    14c0:	64980800 	ldrvs	r0, [r8], #2048
    14c4:	04cc0800 	strbeq	r0, [ip], #2048
    14c8:	006e0000 	rsbeq	r0, lr, r0
    14cc:	c2050000 	andgt	r0, r5, #0	; 0x0
    14d0:	0100000d 	tsteq	r0, sp
    14d4:	00003e3e 	andeq	r3, r0, lr, lsr lr
    14d8:	0004f700 	andeq	pc, r4, r0, lsl #14
    14dc:	01060000 	tsteq	r6, r0
    14e0:	00000e1e 	andeq	r0, r0, lr, lsl lr
    14e4:	3e012d01 	cdpcc	13, 0, cr2, cr1, cr1, {0}
    14e8:	98000000 	stmdals	r0, {}
    14ec:	be080064 	cdplt	0, 0, cr0, cr8, cr4, {3}
    14f0:	15080064 	strne	r0, [r8, #-100]
    14f4:	b5000005 	strlt	r0, [r0, #-5]
    14f8:	05000000 	streq	r0, [r0]
    14fc:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1500:	00b52c01 	adcseq	r2, r5, r1, lsl #24
    1504:	05340000 	ldreq	r0, [r4]!
    1508:	14050000 	strne	r0, [r5]
    150c:	0100000e 	tsteq	r0, lr
    1510:	00003e2c 	andeq	r3, r0, ip, lsr #28
    1514:	00055200 	andeq	r5, r5, r0, lsl #4
    1518:	00690700 	rsbeq	r0, r9, r0, lsl #14
    151c:	00bb3301 	adcseq	r3, fp, r1, lsl #6
    1520:	54010000 	strpl	r0, [r1]
    1524:	bb040800 	bllt	10352c <__Stack_Size+0x10312c>
    1528:	09000000 	stmdbeq	r0, {}
    152c:	069b0801 	ldreq	r0, [fp], r1, lsl #16
    1530:	01060000 	tsteq	r6, r0
    1534:	00000d9c 	muleq	r0, ip, sp
    1538:	3e011f01 	cdpcc	15, 0, cr1, cr1, cr1, {0}
    153c:	c0000000 	andgt	r0, r0, r0
    1540:	dc080064 	stcle	0, cr0, [r8], {100}
    1544:	70080064 	andvc	r0, r8, r4, rrx
    1548:	09000005 	stmdbeq	r0, {r0, r2}
    154c:	05000001 	streq	r0, [r0, #-1]
    1550:	00000e0c 	andeq	r0, r0, ip, lsl #28
    1554:	00b51e01 	adcseq	r1, r5, r1, lsl #28
    1558:	058f0000 	streq	r0, [pc, #0]	; 1560 <__Stack_Size+0x1160>
    155c:	14050000 	strne	r0, [r5]
    1560:	0100000e 	tsteq	r0, lr
    1564:	00003e1e 	andeq	r3, r0, lr, lsl lr
    1568:	0005ad00 	andeq	sl, r5, r0, lsl #26
    156c:	00690700 	rsbeq	r0, r9, r0, lsl #14
    1570:	00bb2501 	adcseq	r2, fp, r1, lsl #10
    1574:	54010000 	strpl	r0, [r1]
    1578:	b4010a00 	strlt	r0, [r1], #-2560
    157c:	0100000d 	tsteq	r0, sp
    1580:	64dc0118 	ldrbvs	r0, [ip], #280
    1584:	64e80800 	strbtvs	r0, [r8], #2048
    1588:	05cb0800 	strbeq	r0, [fp, #2048]
    158c:	010a0000 	tsteq	sl, r0
    1590:	00000e29 	andeq	r0, r0, r9, lsr #28
    1594:	e8011001 	stmda	r1, {r0, ip}
    1598:	f4080064 	vst4.16	{d0-d3}, [r8, :128], r4
    159c:	f6080064 	undefined instruction 0xf6080064
    15a0:	0b000005 	bleq	15bc <__Stack_Size+0x11bc>
    15a4:	000da701 	andeq	sl, sp, r1, lsl #14
    15a8:	01050100 	tsteq	r5, r0, lsl #2
    15ac:	0000003e 	andeq	r0, r0, lr, lsr r0
    15b0:	080064f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, sp, lr}
    15b4:	08006504 	stmdaeq	r0, {r2, r8, sl, sp, lr}
    15b8:	00000621 	andeq	r0, r0, r1, lsr #12
    15bc:	000df105 	andeq	pc, sp, r5, lsl #2
    15c0:	3e040100 	adfccs	f0, f4, f0
    15c4:	4c000000 	stcmi	0, cr0, [r0], {0}
    15c8:	05000006 	streq	r0, [r0, #-6]
    15cc:	000000b6 	strheq	r0, [r0], -r6
    15d0:	003e0401 	eorseq	r0, lr, r1, lsl #8
    15d4:	065f0000 	ldrbeq	r0, [pc], -r0
    15d8:	00000000 	andeq	r0, r0, r0
    15dc:	00000589 	andeq	r0, r0, r9, lsl #11
    15e0:	035c0002 	cmpeq	ip, #2	; 0x2
    15e4:	01040000 	tsteq	r4, r0
    15e8:	00000551 	andeq	r0, r0, r1, asr r5
    15ec:	000f2801 	andeq	r2, pc, r1, lsl #16
    15f0:	00036900 	andeq	r6, r3, r0, lsl #18
    15f4:	00650400 	rsbeq	r0, r5, r0, lsl #8
    15f8:	00691008 	rsbeq	r1, r9, r8
    15fc:	00066708 	andeq	r6, r6, r8, lsl #14
    1600:	db010200 	blle	41e08 <__Stack_Size+0x41a08>
    1604:	0100000e 	tsteq	r0, lr
    1608:	5101011c 	tstpl	r1, ip, lsl r1
    160c:	01000000 	tsteq	r0, r0
    1610:	00000051 	andeq	r0, r0, r1, asr r0
    1614:	000e7703 	andeq	r7, lr, r3, lsl #14
    1618:	011b0100 	tsteq	fp, r0, lsl #2
    161c:	00000051 	andeq	r0, r0, r1, asr r0
    1620:	00101104 	andseq	r1, r0, r4, lsl #2
    1624:	011d0100 	tsteq	sp, r0, lsl #2
    1628:	00000058 	andeq	r0, r0, r8, asr r0
    162c:	05040500 	streq	r0, [r4, #-1280]
    1630:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1634:	db070206 	blle	1c1e54 <__Stack_Size+0x1c1a54>
    1638:	02000007 	andeq	r0, r0, #7	; 0x7
    163c:	000ea101 	andeq	sl, lr, r1, lsl #2
    1640:	01240100 	teqeq	r4, r0, lsl #2
    1644:	00005101 	andeq	r5, r0, r1, lsl #2
    1648:	008b0100 	addeq	r0, fp, r0, lsl #2
    164c:	77030000 	strvc	r0, [r3, -r0]
    1650:	0100000e 	tsteq	r0, lr
    1654:	00510123 	subseq	r0, r1, r3, lsr #2
    1658:	11040000 	tstne	r4, r0
    165c:	01000010 	tsteq	r0, r0, lsl r0
    1660:	00580125 	subseq	r0, r8, r5, lsr #2
    1664:	02000000 	andeq	r0, r0, #0	; 0x0
    1668:	000fbe01 	andeq	fp, pc, r1, lsl #28
    166c:	01120100 	tsteq	r2, r0, lsl #2
    1670:	00005101 	andeq	r5, r0, r1, lsl #2
    1674:	00c30100 	sbceq	r0, r3, r0, lsl #2
    1678:	e3030000 	movw	r0, #12288	; 0x3000
    167c:	0100000e 	tsteq	r0, lr
    1680:	00510111 	subseq	r0, r1, r1, lsl r1
    1684:	a9030000 	stmdbge	r3, {}
    1688:	0100000e 	tsteq	r0, lr
    168c:	00510111 	subseq	r0, r1, r1, lsl r1
    1690:	77040000 	strvc	r0, [r4, -r0]
    1694:	0100000e 	tsteq	r0, lr
    1698:	00580113 	subseq	r0, r8, r3, lsl r1
    169c:	07000000 	streq	r0, [r0, -r0]
    16a0:	000f9401 	andeq	r9, pc, r1, lsl #8
    16a4:	01e70100 	mvneq	r0, r0, lsl #2
    16a8:	00000051 	andeq	r0, r0, r1, asr r0
    16ac:	08006504 	stmdaeq	r0, {r2, r8, sl, sp, lr}
    16b0:	08006510 	stmdaeq	r0, {r4, r8, sl, sp, lr}
    16b4:	01085d01 	tsteq	r8, r1, lsl #26
    16b8:	00000f62 	andeq	r0, r0, r2, ror #30
    16bc:	1001ec01 	andne	lr, r1, r1, lsl #24
    16c0:	1c080065 	stcne	0, cr0, [r8], {101}
    16c4:	01080065 	tsteq	r8, r5, rrx
    16c8:	0000fe5d 	andeq	pc, r0, sp, asr lr
    16cc:	64690900 	strbtvs	r0, [r9], #-2304
    16d0:	51eb0100 	mvnpl	r0, r0, lsl #2
    16d4:	01000000 	tsteq	r0, r0
    16d8:	01080050 	qaddeq	r0, r0, r8
    16dc:	00000ff4 	strdeq	r0, [r0], -r4
    16e0:	1c01f101 	stfned	f7, [r1], {1}
    16e4:	28080065 	stmdacs	r8, {r0, r2, r5, r6}
    16e8:	01080065 	tsteq	r8, r5, rrx
    16ec:	0001235d 	andeq	r2, r1, sp, asr r3
    16f0:	10050a00 	andne	r0, r5, r0, lsl #20
    16f4:	f0010000 	undefined instruction 0xf0010000
    16f8:	00000051 	andeq	r0, r0, r1, asr r0
    16fc:	08005001 	stmdaeq	r0, {r0, ip, lr}
    1700:	000ec001 	andeq	ip, lr, r1
    1704:	01f60100 	mvnseq	r0, r0, lsl #2
    1708:	08006528 	stmdaeq	r0, {r3, r5, r8, sl, sp, lr}
    170c:	08006534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp, lr}
    1710:	01555d01 	cmpeq	r5, r1, lsl #26
    1714:	230a0000 	movwcs	r0, #40960	; 0xa000
    1718:	01000010 	tsteq	r0, r0, lsl r0
    171c:	000051f5 	strdeq	r5, [r0], -r5
    1720:	0a500100 	beq	1401b28 <__Stack_Size+0x1401728>
    1724:	0000313d 	andeq	r3, r0, sp, lsr r1
    1728:	0051f501 	subseq	pc, r1, r1, lsl #10
    172c:	51010000 	tstpl	r1, r0
    1730:	4a010800 	bmi	43738 <__Stack_Size+0x43338>
    1734:	0100000f 	tsteq	r0, pc
    1738:	653401fb 	ldrvs	r0, [r4, #-507]!
    173c:	65400800 	strbvs	r0, [r0, #-2048]
    1740:	5d010800 	stcpl	8, cr0, [r1]
    1744:	0000017a 	andeq	r0, r0, sl, ror r1
    1748:	000e9a0a 	andeq	r9, lr, sl, lsl #20
    174c:	51fa0100 	mvnspl	r0, r0, lsl #2
    1750:	01000000 	tsteq	r0, r0
    1754:	010b0050 	qaddeq	r0, r0, fp
    1758:	00000f02 	andeq	r0, r0, r2, lsl #30
    175c:	01010001 	tsteq	r1, r1
    1760:	00000051 	andeq	r0, r0, r1, asr r0
    1764:	08006540 	stmdaeq	r0, {r6, r8, sl, sp, lr}
    1768:	08006554 	stmdaeq	r0, {r2, r4, r6, r8, sl, sp, lr}
    176c:	01a65d01 	undefined instruction 0x01a65d01
    1770:	160c0000 	strne	r0, [ip], -r0
    1774:	01000010 	tsteq	r0, r0, lsl r0
    1778:	000051ff 	strdeq	r5, [r0], -pc
    177c:	00067200 	andeq	r7, r6, r0, lsl #4
    1780:	010d0000 	tsteq	sp, r0
    1784:	00000e89 	andeq	r0, r0, r9, lsl #29
    1788:	01010801 	tsteq	r1, r1, lsl #16
    178c:	00000051 	andeq	r0, r0, r1, asr r0
    1790:	08006554 	stmdaeq	r0, {r2, r4, r6, r8, sl, sp, lr}
    1794:	08006560 	stmdaeq	r0, {r5, r6, r8, sl, sp, lr}
    1798:	010b5d01 	tsteq	fp, r1, lsl #26
    179c:	00000fcb 	andeq	r0, r0, fp, asr #31
    17a0:	01010d01 	tsteq	r1, r1, lsl #26
    17a4:	00000051 	andeq	r0, r0, r1, asr r0
    17a8:	08006560 	stmdaeq	r0, {r5, r6, r8, sl, sp, lr}
    17ac:	0800656c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    17b0:	01eb5d01 	mvneq	r5, r1, lsl #26
    17b4:	230e0000 	movwcs	r0, #57344	; 0xe000
    17b8:	01000010 	tsteq	r0, r0, lsl r0
    17bc:	0051010c 	subseq	r0, r1, ip, lsl #2
    17c0:	06850000 	streq	r0, [r5], r0
    17c4:	0f000000 	svceq	0x00000000
    17c8:	0000008b 	andeq	r0, r0, fp, lsl #1
    17cc:	0800656c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    17d0:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    17d4:	02145d01 	andseq	r5, r4, #64	; 0x40
    17d8:	9e100000 	wxorls	wr0, wr0, wr0
    17dc:	98000000 	stmdals	r0, {}
    17e0:	11000006 	tstne	r0, r6
    17e4:	000000aa 	andeq	r0, r0, sl, lsr #1
    17e8:	b6125101 	ldrlt	r5, [r2], -r1, lsl #2
    17ec:	00000000 	andeq	r0, r0, r0
    17f0:	0000250f 	andeq	r2, r0, pc, lsl #10
    17f4:	00657400 	rsbeq	r7, r5, r0, lsl #8
    17f8:	00657808 	rsbeq	r7, r5, r8, lsl #16
    17fc:	365d0108 	ldrbcc	r0, [sp], -r8, lsl #2
    1800:	10000002 	andne	r0, r0, r2
    1804:	00000038 	andeq	r0, r0, r8, lsr r0
    1808:	000006ab 	andeq	r0, r0, fp, lsr #13
    180c:	00004412 	andeq	r4, r0, r2, lsl r4
    1810:	5f0f0000 	svcpl	0x000f0000
    1814:	78000000 	stmdavc	r0, {}
    1818:	80080065 	andhi	r0, r8, r5, rrx
    181c:	01080065 	tsteq	r8, r5, rrx
    1820:	00025c5d 	andeq	r5, r2, sp, asr ip
    1824:	00721000 	rsbseq	r1, r2, r0
    1828:	06be0000 	ldrteq	r0, [lr], r0
    182c:	7e130000 	wxorvc	wr0, wr3, wr0
    1830:	d1000000 	tstle	r0, r0
    1834:	00000006 	andeq	r0, r0, r6
    1838:	0eeb0114 	mcreq	1, 7, r0, cr11, cr4, {0}
    183c:	6c010000 	stcvs	0, cr0, [r1], {0}
    1840:	00658001 	rsbeq	r8, r5, r1
    1844:	0066e808 	rsbeq	lr, r6, r8, lsl #16
    1848:	0006e408 	andeq	lr, r6, r8, lsl #8
    184c:	0002aa00 	andeq	sl, r2, r0, lsl #20
    1850:	00691500 	rsbeq	r1, r9, r0, lsl #10
    1854:	02aa6d01 	adceq	r6, sl, #64	; 0x40
    1858:	070f0000 	streq	r0, [pc, -r0]
    185c:	6a150000 	bvs	541864 <__Stack_Size+0x541464>
    1860:	aa6d0100 	bge	1b41c68 <__Stack_Size+0x1b41868>
    1864:	59000002 	stmdbpl	r0, {r1}
    1868:	16000007 	strne	r0, [r0], -r7
    186c:	0000101d 	andeq	r1, r0, sp, lsl r0
    1870:	02aa6d01 	adceq	r6, sl, #64	; 0x40
    1874:	f9170000 	undefined instruction 0xf9170000
    1878:	0100000e 	tsteq	r0, lr
    187c:	0002aa6e 	andeq	sl, r2, lr, ror #20
    1880:	00078d00 	andeq	r8, r7, r0, lsl #26
    1884:	01060000 	tsteq	r6, r0
    1888:	00069b08 	andeq	r9, r6, r8, lsl #22
    188c:	48011400 	stmdami	r1, {sl, ip}
    1890:	0100000e 	tsteq	r0, lr
    1894:	66e80129 	strbtvs	r0, [r8], r9, lsr #2
    1898:	67ac0800 	strvs	r0, [ip, r0, lsl #16]!
    189c:	07ab0800 	streq	r0, [fp, r0, lsl #16]!
    18a0:	02ff0000 	rscseq	r0, pc, #0	; 0x0
    18a4:	69150000 	ldmdbvs	r5, {}
    18a8:	aa2a0100 	bge	a81cb0 <__Stack_Size+0xa818b0>
    18ac:	d6000002 	strle	r0, [r0], -r2
    18b0:	18000007 	stmdane	r0, {r0, r1, r2}
    18b4:	00000f40 	andeq	r0, r0, r0, asr #30
    18b8:	02aa2b01 	adceq	r2, sl, #1024	; 0x400
    18bc:	54010000 	strpl	r0, [r1]
    18c0:	000f3c16 	andeq	r3, pc, r6, lsl ip
    18c4:	aa2b0100 	bge	ac1ccc <__Stack_Size+0xac18cc>
    18c8:	17000002 	strne	r0, [r0, -r2]
    18cc:	00000ef9 	strdeq	r0, [r0], -r9
    18d0:	02aa2c01 	adceq	r2, sl, #256	; 0x100
    18d4:	07f40000 	ldrbeq	r0, [r4, r0]!
    18d8:	19000000 	stmdbne	r0, {}
    18dc:	000fae01 	andeq	sl, pc, r1, lsl #28
    18e0:	01d60100 	bicseq	r0, r6, r0, lsl #2
    18e4:	080067ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp, lr}
    18e8:	080067cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, sp, lr}
    18ec:	00000807 	andeq	r0, r0, r7, lsl #16
    18f0:	0f19011a 	svceq	0x0019011a
    18f4:	66010000 	strvs	r0, [r1], -r0
    18f8:	67cc0101 	strbvs	r0, [ip, r1, lsl #2]
    18fc:	68040800 	stmdavs	r4, {fp}
    1900:	08260800 	stmdaeq	r6!, {fp}
    1904:	03830000 	orreq	r0, r3, #0	; 0x0
    1908:	691b0000 	ldmdbvs	fp, {}
    190c:	65010064 	strvs	r0, [r1, #-100]
    1910:	00005101 	andeq	r5, r0, r1, lsl #2
    1914:	00085100 	andeq	r5, r8, r0, lsl #2
    1918:	16bd0e00 	ldrtne	r0, [sp], r0, lsl #28
    191c:	65010000 	strvs	r0, [r1]
    1920:	00005101 	andeq	r5, r0, r1, lsl #2
    1924:	00086f00 	andeq	r6, r8, r0, lsl #30
    1928:	313d0e00 	teqcc	sp, r0, lsl #28
    192c:	65010000 	strvs	r0, [r1]
    1930:	00005101 	andeq	r5, r0, r1, lsl #2
    1934:	00088d00 	andeq	r8, r8, r0, lsl #26
    1938:	00251c00 	eoreq	r1, r5, r0, lsl #24
    193c:	67de0000 	ldrbvs	r0, [lr, r0]
    1940:	67e20800 	strbvs	r0, [r2, r0, lsl #16]!
    1944:	6c010800 	stcvs	8, cr0, [r1], {0}
    1948:	02271d01 	eoreq	r1, r7, #64	; 0x40
    194c:	de1e0000 	wxorle	wr0, wr14, wr0
    1950:	e2080067 	and	r0, r8, #103	; 0x67
    1954:	12080067 	andne	r0, r8, #103	; 0x67
    1958:	00000044 	andeq	r0, r0, r4, asr #32
    195c:	1f000000 	svcne	0x00000000
    1960:	000e6e01 	andeq	r6, lr, r1, lsl #28
    1964:	01540100 	cmpeq	r4, r0, lsl #2
    1968:	00005101 	andeq	r5, r0, r1, lsl #2
    196c:	00680400 	rsbeq	r0, r8, r0, lsl #8
    1970:	00684008 	rsbeq	r4, r8, r8
    1974:	0008b608 	andeq	fp, r8, r8, lsl #12
    1978:	0003ef00 	andeq	lr, r3, r0, lsl #30
    197c:	64691b00 	strbtvs	r1, [r9], #-2816
    1980:	01530100 	cmpeq	r3, r0, lsl #2
    1984:	00000051 	andeq	r0, r0, r1, asr r0
    1988:	000008e1 	andeq	r0, r0, r1, ror #17
    198c:	0016bd0e 	andseq	fp, r6, lr, lsl #26
    1990:	01530100 	cmpeq	r3, r0, lsl #2
    1994:	00000051 	andeq	r0, r0, r1, asr r0
    1998:	000008ff 	strdeq	r0, [r0], -pc
    199c:	00008b1c 	andeq	r8, r0, ip, lsl fp
    19a0:	00682200 	rsbeq	r2, r8, r0, lsl #4
    19a4:	00682e08 	rsbeq	r2, r8, r8, lsl #28
    19a8:	01620108 	cmneq	r2, r8, lsl #2
    19ac:	0002071d 	andeq	r0, r2, sp, lsl r7
    19b0:	01fe1d00 	mvnseq	r1, r0, lsl #26
    19b4:	221e0000 	andscs	r0, lr, #0	; 0x0
    19b8:	2e080068 	cdpcs	0, 0, cr0, cr8, cr8, {3}
    19bc:	13080068 	movwne	r0, #32872	; 0x8068
    19c0:	000000b6 	strheq	r0, [r0], -r6
    19c4:	0000091d 	andeq	r0, r0, sp, lsl r9
    19c8:	1a000000 	bne	19d0 <__Stack_Size+0x15d0>
    19cc:	000f7601 	andeq	r7, pc, r1, lsl #12
    19d0:	01470100 	cmpeq	r7, r0, lsl #2
    19d4:	00684001 	rsbeq	r4, r8, r1
    19d8:	00687008 	rsbeq	r7, r8, r8
    19dc:	00093008 	andeq	r3, r9, r8
    19e0:	00043900 	andeq	r3, r4, r0, lsl #18
    19e4:	64691b00 	strbtvs	r1, [r9], #-2816
    19e8:	01460100 	cmpeq	r6, r0, lsl #2
    19ec:	00000051 	andeq	r0, r0, r1, asr r0
    19f0:	0000095b 	andeq	r0, r0, fp, asr r9
    19f4:	0016bd0e 	andseq	fp, r6, lr, lsl #26
    19f8:	01460100 	cmpeq	r6, r0, lsl #2
    19fc:	00000051 	andeq	r0, r0, r1, asr r0
    1a00:	00000979 	andeq	r0, r0, r9, ror r9
    1a04:	00313d0e 	eorseq	r3, r1, lr, lsl #26
    1a08:	01460100 	cmpeq	r6, r0, lsl #2
    1a0c:	00000051 	andeq	r0, r0, r1, asr r0
    1a10:	00000997 	muleq	r0, r7, r9
    1a14:	b2011f00 	andlt	r1, r1, #0	; 0x0
    1a18:	0100000e 	tsteq	r0, lr
    1a1c:	51010138 	tstpl	r1, r8, lsr r1
    1a20:	70000000 	andvc	r0, r0, r0
    1a24:	a8080068 	stmdage	r8, {r3, r5, r6}
    1a28:	c0080068 	andgt	r0, r8, r8, rrx
    1a2c:	77000009 	strvc	r0, [r0, -r9]
    1a30:	1b000004 	blne	1a48 <__Stack_Size+0x1648>
    1a34:	01006469 	tsteq	r0, r9, ror #8
    1a38:	00510137 	subseq	r0, r1, r7, lsr r1
    1a3c:	09eb0000 	stmibeq	fp!, {}^
    1a40:	bd0e0000 	stclt	0, cr0, [lr]
    1a44:	01000016 	tsteq	r0, r6, lsl r0
    1a48:	00510137 	subseq	r0, r1, r7, lsr r1
    1a4c:	0a090000 	beq	241a54 <__Stack_Size+0x241654>
    1a50:	1a000000 	bne	1a58 <__Stack_Size+0x1658>
    1a54:	000e5601 	andeq	r5, lr, r1, lsl #12
    1a58:	012d0100 	teqeq	sp, r0, lsl #2
    1a5c:	0068a801 	rsbeq	sl, r8, r1, lsl #16
    1a60:	0068d008 	rsbeq	sp, r8, r8
    1a64:	000a2708 	andeq	r2, sl, r8, lsl #14
    1a68:	0004a100 	andeq	sl, r4, r0, lsl #2
    1a6c:	64691b00 	strbtvs	r1, [r9], #-2816
    1a70:	012c0100 	teqeq	ip, r0, lsl #2
    1a74:	00000051 	andeq	r0, r0, r1, asr r0
    1a78:	00000a52 	andeq	r0, r0, r2, asr sl
    1a7c:	45011900 	strmi	r1, [r1, #-2304]
    1a80:	01000010 	tsteq	r0, r0, lsl r0
    1a84:	68d00124 	ldmvs	r0, {r2, r5, r8}^
    1a88:	68dc0800 	ldmvs	ip, {fp}^
    1a8c:	0a700800 	beq	1c03a94 <__Stack_Size+0x1c03694>
    1a90:	01200000 	teqeq	r0, r0
    1a94:	00000e5f 	andeq	r0, r0, pc, asr lr
    1a98:	51011401 	tstpl	r1, r1, lsl #8
    1a9c:	dc000000 	stcle	0, cr0, [r0], {0}
    1aa0:	10080068 	andne	r0, r8, r8, rrx
    1aa4:	9b080069 	blls	201c50 <__Stack_Size+0x201850>
    1aa8:	fd00000a 	stc2	0, cr0, [r0, #-40]
    1aac:	0c000004 	stceq	0, cr0, [r0], {4}
    1ab0:	00000df1 	strdeq	r0, [r0], -r1
    1ab4:	00511301 	subseq	r1, r1, r1, lsl #6
    1ab8:	0ac60000 	beq	ff181ac0 <SCS_BASE+0x1f173ac0>
    1abc:	3d0c0000 	stccc	0, cr0, [ip]
    1ac0:	01000010 	tsteq	r0, r0, lsl r0
    1ac4:	00005113 	andeq	r5, r0, r3, lsl r1
    1ac8:	000ad900 	andeq	sp, sl, r0, lsl #18
    1acc:	00b61600 	adcseq	r1, r6, r0, lsl #12
    1ad0:	15010000 	strne	r0, [r1]
    1ad4:	00000051 	andeq	r0, r0, r1, asr r0
    1ad8:	02aa2100 	adceq	r2, sl, #0	; 0x0
    1adc:	050d0000 	streq	r0, [sp]
    1ae0:	0d220000 	stceq	0, cr0, [r2]
    1ae4:	9f000005 	svcls	0x00000005
    1ae8:	07042300 	streq	r2, [r4, -r0, lsl #6]
    1aec:	00102924 	andseq	r2, r0, r4, lsr #18
    1af0:	fd0b0100 	stc2	1, cr0, [fp]
    1af4:	01000004 	tsteq	r0, r4
    1af8:	01840305 	orreq	r0, r4, r5, lsl #6
    1afc:	aa212000 	bge	849b04 <__Stack_Size+0x849704>
    1b00:	32000002 	andcc	r0, r0, #2	; 0x2
    1b04:	22000005 	andcs	r0, r0, #5	; 0x5
    1b08:	0000050d 	andeq	r0, r0, sp, lsl #10
    1b0c:	85240045 	strhi	r0, [r4, #-69]!
    1b10:	0100000f 	tsteq	r0, pc
    1b14:	0005220c 	andeq	r2, r5, ip, lsl #4
    1b18:	03050100 	movweq	r0, #20736	; 0x5100
    1b1c:	20000224 	andcs	r0, r0, r4, lsr #4
    1b20:	000e3724 	andeq	r3, lr, r4, lsr #14
    1b24:	aa0d0100 	bge	341f2c <__Stack_Size+0x341b2c>
    1b28:	01000002 	tsteq	r0, r2
    1b2c:	026a0305 	rsbeq	r0, sl, #335544320	; 0x14000000
    1b30:	e6242000 	strt	r2, [r4], -r0
    1b34:	0100000f 	tsteq	r0, pc
    1b38:	0002aa0e 	andeq	sl, r2, lr, lsl #20
    1b3c:	03050100 	movweq	r0, #20736	; 0x5100
    1b40:	2000026b 	andcs	r0, r0, fp, ror #4
    1b44:	000e7c24 	andeq	r7, lr, r4, lsr #24
    1b48:	510f0100 	tstpl	pc, r0, lsl #2
    1b4c:	01000000 	tsteq	r0, r0
    1b50:	00680305 	rsbeq	r0, r8, r5, lsl #6
    1b54:	a3242000 	teqge	r4, #0	; 0x0
    1b58:	0100000f 	tsteq	r0, pc
    1b5c:	00005110 	andeq	r5, r0, r0, lsl r1
    1b60:	03050100 	movweq	r0, #20736	; 0x5100
    1b64:	2000026c 	andcs	r0, r0, ip, ror #4
    1b68:	00073600 	andeq	r3, r7, r0, lsl #12
    1b6c:	89000200 	stmdbhi	r0, {r9}
    1b70:	04000005 	streq	r0, [r0], #-5
    1b74:	00055101 	andeq	r5, r5, r1, lsl #2
    1b78:	11e80100 	mvnne	r0, r0, lsl #2
    1b7c:	03690000 	cmneq	r9, #0	; 0x0
    1b80:	69100000 	ldmdbvs	r0, {}
    1b84:	6e380800 	cdpvs	8, 3, cr0, cr8, cr0, {0}
    1b88:	07ad0800 	streq	r0, [sp, r0, lsl #16]!
    1b8c:	04020000 	streq	r0, [r2]
    1b90:	002dcb05 	eoreq	ip, sp, r5, lsl #22
    1b94:	05020200 	streq	r0, [r2, #-512]
    1b98:	000005d8 	ldrdeq	r0, [r0], -r8
    1b9c:	9d060102 	stflss	f0, [r6, #-8]
    1ba0:	03000006 	movweq	r0, #6	; 0x6
    1ba4:	00323375 	eorseq	r3, r2, r5, ror r3
    1ba8:	00452702 	subeq	r2, r5, r2, lsl #14
    1bac:	04020000 	streq	r0, [r2]
    1bb0:	002e4507 	eoreq	r4, lr, r7, lsl #10
    1bb4:	31750300 	cmncc	r5, r0, lsl #6
    1bb8:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    1bbc:	00000057 	andeq	r0, r0, r7, asr r0
    1bc0:	db070202 	blle	1c23d0 <__Stack_Size+0x1c1fd0>
    1bc4:	03000007 	movweq	r0, #7	; 0x7
    1bc8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    1bcc:	00006829 	andeq	r6, r0, r9, lsr #16
    1bd0:	08010200 	stmdaeq	r1, {r9}
    1bd4:	0000069b 	muleq	r0, fp, r6
    1bd8:	00004504 	andeq	r4, r0, r4, lsl #10
    1bdc:	00570400 	subseq	r0, r7, r0, lsl #8
    1be0:	01050000 	tsteq	r5, r0
    1be4:	008e3902 	addeq	r3, lr, r2, lsl #18
    1be8:	47060000 	strmi	r0, [r6, -r0]
    1bec:	00000014 	andeq	r0, r0, r4, lsl r0
    1bf0:	54455307 	strbpl	r5, [r5], #-775
    1bf4:	08000100 	stmdaeq	r0, {r8}
    1bf8:	00001d9a 	muleq	r0, sl, sp
    1bfc:	00793902 	rsbseq	r3, r9, r2, lsl #18
    1c00:	01050000 	tsteq	r5, r0
    1c04:	00ae3b02 	adceq	r3, lr, r2, lsl #22
    1c08:	24060000 	strcs	r0, [r6]
    1c0c:	00000004 	andeq	r0, r0, r4
    1c10:	00066d06 	andeq	r6, r6, r6, lsl #26
    1c14:	08000100 	stmdaeq	r0, {r8}
    1c18:	000000ec 	andeq	r0, r0, ip, ror #1
    1c1c:	00993b02 	addseq	r3, r9, r2, lsl #22
    1c20:	04090000 	streq	r0, [r9]
    1c24:	03240a07 	teqeq	r4, #28672	; 0x7000
    1c28:	014a010d 	cmpeq	sl, sp, lsl #2
    1c2c:	410b0000 	tstmi	fp, r0
    1c30:	03005243 	movweq	r5, #579	; 0x243
    1c34:	006f010e 	rsbeq	r0, pc, lr, lsl #2
    1c38:	23020000 	movwcs	r0, #8192	; 0x2000
    1c3c:	11690c00 	cmnne	r9, r0, lsl #24
    1c40:	0f030000 	svceq	0x00030000
    1c44:	00006f01 	andeq	r6, r0, r1, lsl #30
    1c48:	04230200 	strteq	r0, [r3], #-512
    1c4c:	0011660c 	andseq	r6, r1, ip, lsl #12
    1c50:	01100300 	tsteq	r0, r0, lsl #6
    1c54:	0000006f 	andeq	r0, r0, pc, rrx
    1c58:	0b082302 	bleq	20a868 <__Stack_Size+0x20a468>
    1c5c:	03005253 	movweq	r5, #595	; 0x253
    1c60:	006f0111 	rsbeq	r0, pc, r1, lsl r1
    1c64:	23020000 	movwcs	r0, #8192	; 0x2000
    1c68:	52430b0c 	subpl	r0, r3, #12288	; 0x3000
    1c6c:	01120300 	tsteq	r2, r0, lsl #6
    1c70:	0000006f 	andeq	r0, r0, pc, rrx
    1c74:	0b102302 	bleq	40a884 <__Stack_Size+0x40a484>
    1c78:	03005241 	movweq	r5, #577	; 0x241
    1c7c:	006f0113 	rsbeq	r0, pc, r3, lsl r1
    1c80:	23020000 	movwcs	r0, #8192	; 0x2000
    1c84:	13af0c14 	undefined instruction 0x13af0c14
    1c88:	14030000 	strne	r0, [r3]
    1c8c:	00006f01 	andeq	r6, r0, r1, lsl #30
    1c90:	18230200 	stmdane	r3!, {r9}
    1c94:	52424f0b 	subpl	r4, r2, #44	; 0x2c
    1c98:	01150300 	tsteq	r5, r0, lsl #6
    1c9c:	0000006f 	andeq	r0, r0, pc, rrx
    1ca0:	0c1c2302 	ldceq	3, cr2, [ip], {2}
    1ca4:	000010f3 	strdeq	r1, [r0], -r3
    1ca8:	6f011603 	svcvs	0x00011603
    1cac:	02000000 	andeq	r0, r0, #0	; 0x0
    1cb0:	0a002023 	beq	9d44 <__Stack_Size+0x9944>
    1cb4:	011a0310 	tsteq	sl, r0, lsl r3
    1cb8:	000001cc 	andeq	r0, r0, ip, asr #3
    1cbc:	5044520b 	subpl	r5, r4, fp, lsl #4
    1cc0:	011b0300 	tsteq	fp, r0, lsl #6
    1cc4:	00000074 	andeq	r0, r0, r4, ror r0
    1cc8:	0c002302 	stceq	3, cr2, [r0], {2}
    1ccc:	00001377 	andeq	r1, r0, r7, ror r3
    1cd0:	74011c03 	strvc	r1, [r1], #-3075
    1cd4:	02000000 	andeq	r0, r0, #0	; 0x0
    1cd8:	7c0c0223 	sfmvc	f0, 4, [ip], {35}
    1cdc:	03000013 	movweq	r0, #19	; 0x13
    1ce0:	0074011d 	rsbseq	r0, r4, sp, lsl r1
    1ce4:	23020000 	movwcs	r0, #8192	; 0x2000
    1ce8:	13820c04 	orrne	r0, r2, #1024	; 0x400
    1cec:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    1cf0:	00007401 	andeq	r7, r0, r1, lsl #8
    1cf4:	06230200 	strteq	r0, [r3], -r0, lsl #4
    1cf8:	00112f0c 	andseq	r2, r1, ip, lsl #30
    1cfc:	011f0300 	tsteq	pc, r0, lsl #6
    1d00:	00000074 	andeq	r0, r0, r4, ror r0
    1d04:	0c082302 	stceq	3, cr2, [r8], {2}
    1d08:	00001134 	andeq	r1, r0, r4, lsr r1
    1d0c:	74012003 	strvc	r2, [r1], #-3
    1d10:	02000000 	andeq	r0, r0, #0	; 0x0
    1d14:	390c0a23 	stmdbcc	ip, {r0, r1, r5, r9, fp}
    1d18:	03000011 	movweq	r0, #17	; 0x11
    1d1c:	00740121 	rsbseq	r0, r4, r1, lsr #2
    1d20:	23020000 	movwcs	r0, #8192	; 0x2000
    1d24:	113e0c0c 	teqne	lr, ip, lsl #24
    1d28:	22030000 	andcs	r0, r3, #0	; 0x0
    1d2c:	00007401 	andeq	r7, r0, r1, lsl #8
    1d30:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    1d34:	04010500 	streq	r0, [r1], #-1280
    1d38:	0001f31d 	andeq	pc, r1, sp, lsl r3
    1d3c:	12570600 	subsne	r0, r7, #0	; 0x0
    1d40:	06010000 	streq	r0, [r1], -r0
    1d44:	000011c4 	andeq	r1, r0, r4, asr #3
    1d48:	10a10602 	adcne	r0, r1, r2, lsl #12
    1d4c:	06030000 	streq	r0, [r3], -r0
    1d50:	00001248 	andeq	r1, r0, r8, asr #4
    1d54:	126c0604 	rsbne	r0, ip, #4194304	; 0x400000
    1d58:	00050000 	andeq	r0, r5, r0
    1d5c:	00111908 	andseq	r1, r1, r8, lsl #18
    1d60:	cc230400 	cfstrsgt	mvf0, [r3]
    1d64:	0d000001 	stceq	0, cr0, [r0, #-4]
    1d68:	0012cc01 	andseq	ip, r2, r1, lsl #24
    1d6c:	03400100 	movteq	r0, #256	; 0x100
    1d70:	0001f301 	andeq	pc, r1, r1, lsl #6
    1d74:	021e0100 	andseq	r0, lr, #0	; 0x0
    1d78:	a10e0000 	tstge	lr, r0
    1d7c:	01000011 	tsteq	r0, r1, lsl r0
    1d80:	01f30341 	mvnseq	r0, r1, asr #6
    1d84:	0f000000 	svceq	0x00000000
    1d88:	000010ed 	andeq	r1, r0, sp, ror #1
    1d8c:	01038601 	tsteq	r3, r1, lsl #12
    1d90:	00023701 	andeq	r3, r2, r1, lsl #14
    1d94:	00691000 	rsbeq	r1, r9, r0
    1d98:	6f038701 	svcvs	0x00038701
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	12f80111 	rscsne	r0, r8, #1073741828	; 0x40000004
    1da4:	57010000 	strpl	r0, [r1, -r0]
    1da8:	00691001 	rsbeq	r1, r9, r1
    1dac:	00692808 	rsbeq	r2, r9, r8, lsl #16
    1db0:	5e5d0108 	rdfple	f0, f5, #0.0
    1db4:	12000002 	andne	r0, r0, #2	; 0x2
    1db8:	000010c1 	andeq	r1, r0, r1, asr #1
    1dbc:	003a5601 	eorseq	r5, sl, r1, lsl #12
    1dc0:	0aec0000 	beq	ffb01dc8 <SCS_BASE+0x1faf3dc8>
    1dc4:	11000000 	tstne	r0, r0
    1dc8:	00130901 	andseq	r0, r3, r1, lsl #18
    1dcc:	016b0100 	cmneq	fp, r0, lsl #2
    1dd0:	08006928 	stmdaeq	r0, {r3, r5, r8, fp, sp, lr}
    1dd4:	08006940 	stmdaeq	r0, {r6, r8, fp, sp, lr}
    1dd8:	02855d01 	addeq	r5, r5, #64	; 0x40
    1ddc:	b6120000 	ldrlt	r0, [r2], -r0
    1de0:	01000012 	tsteq	r0, r2, lsl r0
    1de4:	00003a6a 	andeq	r3, r0, sl, ror #20
    1de8:	000aff00 	andeq	pc, sl, r0, lsl #30
    1dec:	01110000 	tsteq	r1, r0
    1df0:	0000120c 	andeq	r1, r0, ip, lsl #4
    1df4:	40017f01 	andmi	r7, r1, r1, lsl #30
    1df8:	58080069 	stmdapl	r8, {r0, r3, r5, r6}
    1dfc:	01080069 	tsteq	r8, r9, rrx
    1e00:	0002ac5d 	andeq	sl, r2, sp, asr ip
    1e04:	13d31200 	bicsne	r1, r3, #0	; 0x0
    1e08:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    1e0c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1e10:	00000b12 	andeq	r0, r0, r2, lsl fp
    1e14:	f8011300 	undefined instruction 0xf8011300
    1e18:	01000010 	tsteq	r0, r0, lsl r0
    1e1c:	69580191 	ldmdbvs	r8, {r0, r4, r7, r8}^
    1e20:	69700800 	ldmdbvs	r0!, {fp}^
    1e24:	5d010800 	stcpl	8, cr0, [r1]
    1e28:	11d30113 	bicsne	r0, r3, r3, lsl r1
    1e2c:	9f010000 	svcls	0x00010000
    1e30:	00697001 	rsbeq	r7, r9, r1
    1e34:	00698008 	rsbeq	r8, r9, r8
    1e38:	145d0108 	ldrbne	r0, [sp], #-264
    1e3c:	00133e01 	andseq	r3, r3, r1, lsl #28
    1e40:	02970100 	addseq	r0, r7, #0	; 0x0
    1e44:	00003a01 	andeq	r3, r0, r1, lsl #20
    1e48:	00698000 	rsbeq	r8, r9, r0
    1e4c:	00698c08 	rsbeq	r8, r9, r8, lsl #24
    1e50:	145d0108 	ldrbne	r0, [sp], #-264
    1e54:	00114301 	andseq	r4, r1, r1, lsl #6
    1e58:	02a40100 	adceq	r0, r4, #0	; 0x0
    1e5c:	00003a01 	andeq	r3, r0, r1, lsl #20
    1e60:	00698c00 	rsbeq	r8, r9, r0, lsl #24
    1e64:	00699808 	rsbeq	r9, r9, r8, lsl #16
    1e68:	155d0108 	ldrbne	r0, [sp, #-264]
    1e6c:	00128201 	andseq	r8, r2, r1, lsl #4
    1e70:	02b20100 	adcseq	r0, r2, #0	; 0x0
    1e74:	00008e01 	andeq	r8, r0, r1, lsl #28
    1e78:	00699800 	rsbeq	r9, r9, r0, lsl #16
    1e7c:	0069a808 	rsbeq	sl, r9, r8, lsl #16
    1e80:	2b5d0108 	blcs	17422a8 <__Stack_Size+0x1741ea8>
    1e84:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1e88:	00001093 	muleq	r0, r3, r0
    1e8c:	8e02b301 	cdphi	3, 0, cr11, cr2, cr1, {0}
    1e90:	00000000 	andeq	r0, r0, r0
    1e94:	10cf0115 	sbcne	r0, pc, r5, lsl r1
    1e98:	c8010000 	stmdagt	r1, {}
    1e9c:	008e0102 	addeq	r0, lr, r2, lsl #2
    1ea0:	69a80000 	stmibvs	r8!, {}
    1ea4:	69b80800 	ldmibvs	r8!, {fp}
    1ea8:	5d010800 	stcpl	8, cr0, [r1]
    1eac:	00000354 	andeq	r0, r0, r4, asr r3
    1eb0:	0011ad0e 	andseq	sl, r1, lr, lsl #26
    1eb4:	02c90100 	sbceq	r0, r9, #0	; 0x0
    1eb8:	0000008e 	andeq	r0, r0, lr, lsl #1
    1ebc:	53011600 	movwpl	r1, #5632	; 0x1600
    1ec0:	01000010 	tsteq	r0, r0, lsl r0
    1ec4:	b80102e3 	stmdalt	r1, {r0, r1, r5, r6, r7, r9}
    1ec8:	d4080069 	strle	r0, [r8], #-105
    1ecc:	01080069 	tsteq	r8, r9, rrx
    1ed0:	0003895d 	andeq	r8, r3, sp, asr r9
    1ed4:	13941700 	orrsne	r1, r4, #0	; 0x0
    1ed8:	e2010000 	and	r0, r1, #0	; 0x0
    1edc:	00004c02 	andeq	r4, r0, r2, lsl #24
    1ee0:	17500100 	ldrbne	r0, [r0, -r0, lsl #2]
    1ee4:	00001126 	andeq	r1, r0, r6, lsr #2
    1ee8:	ae02e201 	cdpge	2, 0, cr14, cr2, cr1, {0}
    1eec:	01000000 	tsteq	r0, r0
    1ef0:	01150051 	tsteq	r5, r1, asr r0
    1ef4:	00001224 	andeq	r1, r0, r4, lsr #4
    1ef8:	01030201 	tsteq	r3, r1, lsl #4
    1efc:	0000008e 	andeq	r0, r0, lr, lsl #1
    1f00:	080069d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, sp, lr}
    1f04:	080069f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, sp, lr}
    1f08:	03c65d01 	biceq	r5, r6, #64	; 0x40
    1f0c:	6c180000 	ldcvs	0, cr0, [r8], {0}
    1f10:	01000013 	tsteq	r0, r3, lsl r0
    1f14:	004c0301 	subeq	r0, ip, r1, lsl #6
    1f18:	0b250000 	bleq	941f20 <__Stack_Size+0x941b20>
    1f1c:	ad190000 	ldcge	0, cr0, [r9]
    1f20:	01000011 	tsteq	r0, r1, lsl r0
    1f24:	008e0303 	addeq	r0, lr, r3, lsl #6
    1f28:	0b430000 	bleq	10c1f30 <__Stack_Size+0x10c1b30>
    1f2c:	16000000 	strne	r0, [r0], -r0
    1f30:	00123801 	andseq	r3, r2, r1, lsl #16
    1f34:	032f0100 	teqeq	pc, #0	; 0x0
    1f38:	0069f401 	rsbeq	pc, r9, r1, lsl #8
    1f3c:	006a0008 	rsbeq	r0, sl, r8
    1f40:	ed5d0108 	ldfe	f0, [sp, #-32]
    1f44:	17000003 	strne	r0, [r0, -r3]
    1f48:	0000136c 	andeq	r1, r0, ip, ror #6
    1f4c:	4c032e01 	stcmi	14, cr2, [r3], {1}
    1f50:	01000000 	tsteq	r0, r0
    1f54:	fe1a0050 	mrc2	0, 0, r0, cr10, cr0, {2}
    1f58:	00000001 	andeq	r0, r0, r1
    1f5c:	2c08006a 	stccs	0, cr0, [r8], {106}
    1f60:	0108006a 	tsteq	r8, sl, rrx
    1f64:	00040a5d 	andeq	r0, r4, sp, asr sl
    1f68:	02111b00 	andseq	r1, r1, #0	; 0x0
    1f6c:	0b610000 	bleq	1841f74 <__Stack_Size+0x1841b74>
    1f70:	1c000000 	stcne	0, cr0, [r0], {0}
    1f74:	0013b801 	andseq	fp, r3, r1, lsl #16
    1f78:	03670100 	cmneq	r7, #0	; 0x0
    1f7c:	0001f301 	andeq	pc, r1, r1, lsl #6
    1f80:	006a2c00 	rsbeq	r2, sl, r0, lsl #24
    1f84:	006ac008 	rsbeq	ip, sl, r8
    1f88:	000b8a08 	andeq	r8, fp, r8, lsl #20
    1f8c:	00049d00 	andeq	r9, r4, r0, lsl #26
    1f90:	127a1800 	rsbsne	r1, sl, #0	; 0x0
    1f94:	66010000 	strvs	r0, [r1], -r0
    1f98:	00003a03 	andeq	r3, r0, r3, lsl #20
    1f9c:	000bb500 	andeq	fp, fp, r0, lsl #10
    1fa0:	11a61900 	undefined instruction 0x11a61900
    1fa4:	68010000 	stmdavs	r1, {}
    1fa8:	0001f303 	andeq	pc, r1, r3, lsl #6
    1fac:	000bd300 	andeq	sp, fp, r0, lsl #6
    1fb0:	01fe1d00 	mvnseq	r1, r0, lsl #26
    1fb4:	00200000 	eoreq	r0, r0, r0
    1fb8:	6b010000 	blvs	41fc0 <__Stack_Size+0x41bc0>
    1fbc:	00046403 	andeq	r6, r4, r3, lsl #8
    1fc0:	00401e00 	subeq	r1, r0, r0, lsl #28
    1fc4:	111f0000 	tstne	pc, r0
    1fc8:	00000002 	andeq	r0, r0, r2
    1fcc:	021e1d00 	andseq	r1, lr, #0	; 0x0
    1fd0:	00600000 	rsbeq	r0, r0, r0
    1fd4:	70010000 	andvc	r0, r1, r0
    1fd8:	00048403 	andeq	r8, r4, r3, lsl #8
    1fdc:	00781e00 	rsbseq	r1, r8, r0, lsl #28
    1fe0:	2c1b0000 	ldccs	0, cr0, [fp], {0}
    1fe4:	fc000002 	stc2	0, cr0, [r0], {2}
    1fe8:	0000000b 	andeq	r0, r0, fp
    1fec:	01fe2000 	mvnseq	r2, r0
    1ff0:	00900000 	addseq	r0, r0, r0
    1ff4:	71010000 	tstvc	r1, r0
    1ff8:	00a81e03 	adceq	r1, r8, r3, lsl #28
    1ffc:	111f0000 	tstne	pc, r0
    2000:	00000002 	andeq	r0, r0, r2
    2004:	011c0000 	tsteq	ip, r0
    2008:	0000116e 	andeq	r1, r0, lr, ror #2
    200c:	01026b01 	tsteq	r2, r1, lsl #22
    2010:	000001f3 	strdeq	r0, [r0], -r3
    2014:	08006ac0 	stmdaeq	r0, {r6, r7, r9, fp, sp, lr}
    2018:	08006b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, sp, lr}
    201c:	00000c4c 	andeq	r0, r0, ip, asr #24
    2020:	000004fc 	strdeq	r0, [r0], -ip
    2024:	00106218 	andseq	r6, r0, r8, lsl r2
    2028:	026a0100 	rsbeq	r0, sl, #0	; 0x0
    202c:	0000004c 	andeq	r0, r0, ip, asr #32
    2030:	00000c77 	andeq	r0, r0, r7, ror ip
    2034:	00107418 	andseq	r7, r0, r8, lsl r4
    2038:	026a0100 	rsbeq	r0, sl, #0	; 0x0
    203c:	0000004c 	andeq	r0, r0, ip, asr #32
    2040:	00000c95 	muleq	r0, r5, ip
    2044:	0012a318 	andseq	sl, r2, r8, lsl r3
    2048:	026a0100 	rsbeq	r0, sl, #0	; 0x0
    204c:	0000004c 	andeq	r0, r0, ip, asr #32
    2050:	00000cb3 	strheq	r0, [r0], -r3
    2054:	0011a619 	andseq	sl, r1, r9, lsl r6
    2058:	026c0100 	rsbeq	r0, ip, #0	; 0x0
    205c:	000001f3 	strdeq	r0, [r0], -r3
    2060:	00000cd1 	ldrdeq	r0, [r0], -r1
    2064:	89011c00 	stmdbhi	r1, {sl, fp, ip}
    2068:	01000011 	tsteq	r0, r1, lsl r0
    206c:	f301021a 	vqsub.u8	d0, d1, d10
    2070:	1c000001 	stcne	0, cr0, [r0], {1}
    2074:	b808006b 	stmdalt	r8, {r0, r1, r3, r5, r6}
    2078:	ef08006b 	svc	0x0008006b
    207c:	3b00000c 	blcc	20b4 <__Stack_Size+0x1cb4>
    2080:	18000005 	stmdane	r0, {r0, r2}
    2084:	00001126 	andeq	r1, r0, r6, lsr #2
    2088:	ae021901 	cdpge	9, 0, cr1, cr2, cr1, {0}
    208c:	1a000000 	bne	2094 <__Stack_Size+0x1c94>
    2090:	1900000d 	stmdbne	r0, {r0, r2, r3}
    2094:	000011a6 	andeq	r1, r0, r6, lsr #3
    2098:	f3021b01 	vqrdmulh.s<illegal width 8>	d1, d2, d1
    209c:	38000001 	stmdacc	r0, {r0}
    20a0:	0000000d 	andeq	r0, r0, sp
    20a4:	12dc011c 	sbcsne	r0, ip, #7	; 0x7
    20a8:	cb010000 	blgt	420b0 <__Stack_Size+0x41cb0>
    20ac:	01f30101 	mvnseq	r0, r1, lsl #2
    20b0:	6bb80000 	blvs	fee020b8 <SCS_BASE+0x1edf40b8>
    20b4:	6c780800 	ldclvs	8, cr0, [r8]
    20b8:	0d610800 	stcleq	8, cr0, [r1]
    20bc:	05ba0000 	ldreq	r0, [sl]!
    20c0:	88180000 	ldmdahi	r8, {}
    20c4:	01000013 	tsteq	r0, r3, lsl r0
    20c8:	003a01ca 	eorseq	r0, sl, sl, asr #3
    20cc:	0d800000 	stceq	0, cr0, [r0]
    20d0:	ac190000 	ldcge	0, cr0, [r9], {0}
    20d4:	01000012 	tsteq	r0, r2, lsl r0
    20d8:	004c01cc 	subeq	r0, ip, ip, asr #3
    20dc:	0d9e0000 	ldceq	0, cr0, [lr]
    20e0:	62190000 	andsvs	r0, r9, #0	; 0x0
    20e4:	01000012 	tsteq	r0, r2, lsl r0
    20e8:	004c01cc 	subeq	r0, ip, ip, asr #3
    20ec:	0ddd0000 	ldcleq	0, cr0, [sp]
    20f0:	6a190000 	bvs	6420f8 <__Stack_Size+0x641cf8>
    20f4:	01000010 	tsteq	r0, r0, lsl r0
    20f8:	004c01cc 	subeq	r0, ip, ip, asr #3
    20fc:	0dfb0000 	ldcleq	0, cr0, [fp]
    2100:	de190000 	wxorle	wr0, wr9, wr0
    2104:	01000011 	tsteq	r0, r1, lsl r0
    2108:	004c01cc 	subeq	r0, ip, ip, asr #3
    210c:	0e190000 	wxoreq	wr0, wr9, wr0
    2110:	a6190000 	ldrge	r0, [r9], -r0
    2114:	01000011 	tsteq	r0, r1, lsl r0
    2118:	01f301ce 	mvnseq	r0, lr, asr #3
    211c:	0e370000 	cdpeq	0, 3, cr0, cr7, cr0, {0}
    2120:	1c000000 	stcne	0, cr0, [r0], {0}
    2124:	00132201 	andseq	r2, r3, r1, lsl #4
    2128:	019a0100 	orrseq	r0, sl, r0, lsl #2
    212c:	0001f301 	andeq	pc, r1, r1, lsl #6
    2130:	006c7800 	rsbeq	r7, ip, r0, lsl #16
    2134:	006cbc08 	rsbeq	fp, ip, r8, lsl #24
    2138:	000e7608 	andeq	r7, lr, r8, lsl #12
    213c:	00060900 	andeq	r0, r6, r0, lsl #18
    2140:	2bf11800 	blcs	ffc48148 <SCS_BASE+0x1fc3a148>
    2144:	99010000 	stmdbls	r1, {}
    2148:	00003a01 	andeq	r3, r0, r1, lsl #20
    214c:	000e9500 	andeq	r9, lr, r0, lsl #10
    2150:	12b11800 	adcsne	r1, r1, #0	; 0x0
    2154:	99010000 	stmdbls	r1, {}
    2158:	00005e01 	andeq	r5, r0, r1, lsl #28
    215c:	000eb300 	andeq	fp, lr, r0, lsl #6
    2160:	11a61900 	undefined instruction 0x11a61900
    2164:	9b010000 	blls	4216c <__Stack_Size+0x41d6c>
    2168:	0001f301 	andeq	pc, r1, r1, lsl #6
    216c:	000ed100 	andeq	sp, lr, r0, lsl #2
    2170:	011c0000 	tsteq	ip, r0
    2174:	00001356 	andeq	r1, r0, r6, asr r3
    2178:	01017201 	tsteq	r1, r1, lsl #4
    217c:	000001f3 	strdeq	r0, [r0], -r3
    2180:	08006cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, sp, lr}
    2184:	08006cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, sp, lr}
    2188:	00000eef 	andeq	r0, r0, pc, ror #29
    218c:	00000658 	andeq	r0, r0, r8, asr r6
    2190:	002bf118 	eoreq	pc, fp, r8, lsl r1
    2194:	01710100 	cmneq	r1, r0, lsl #2
    2198:	0000003a 	andeq	r0, r0, sl, lsr r0
    219c:	00000f0e 	andeq	r0, r0, lr, lsl #30
    21a0:	0012b118 	andseq	fp, r2, r8, lsl r1
    21a4:	01710100 	cmneq	r1, r0, lsl #2
    21a8:	0000004c 	andeq	r0, r0, ip, asr #32
    21ac:	00000f2c 	andeq	r0, r0, ip, lsr #30
    21b0:	0011a619 	andseq	sl, r1, r9, lsl r6
    21b4:	01730100 	cmneq	r3, r0, lsl #2
    21b8:	000001f3 	strdeq	r0, [r0], -r3
    21bc:	00000f4a 	andeq	r0, r0, sl, asr #30
    21c0:	9d011c00 	stcls	12, cr1, [r1]
    21c4:	01000013 	tsteq	r0, r3, lsl r0
    21c8:	f3010137 	veor	d0, d1, d23
    21cc:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    21d0:	3c08006c 	stccc	0, cr0, [r8], {108}
    21d4:	6808006d 	stmdavs	r8, {r0, r2, r3, r5, r6}
    21d8:	a700000f 	strge	r0, [r0, -pc]
    21dc:	18000006 	stmdane	r0, {r1, r2}
    21e0:	00002bf1 	strdeq	r2, [r0], -r1
    21e4:	3a013601 	bcc	4f9f0 <__Stack_Size+0x4f5f0>
    21e8:	87000000 	strhi	r0, [r0, -r0]
    21ec:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    21f0:	000012b1 	strheq	r1, [r0], -r1
    21f4:	3a013601 	bcc	4fa00 <__Stack_Size+0x4f600>
    21f8:	a5000000 	strge	r0, [r0]
    21fc:	1900000f 	stmdbne	r0, {r0, r1, r2, r3}
    2200:	000011a6 	andeq	r1, r0, r6, lsr #3
    2204:	f3013801 	vsub.i8	d3, d1, d1
    2208:	c3000001 	movwgt	r0, #1	; 0x1
    220c:	0000000f 	andeq	r0, r0, pc
    2210:	107c0121 	rsbsne	r0, ip, r1, lsr #2
    2214:	f8010000 	undefined instruction 0xf8010000
    2218:	0001f301 	andeq	pc, r1, r1, lsl #6
    221c:	006d3c00 	rsbeq	r3, sp, r0, lsl #24
    2220:	006db408 	rsbeq	fp, sp, r8, lsl #8
    2224:	000fec08 	andeq	lr, pc, r8, lsl #24
    2228:	0006d400 	andeq	sp, r6, r0, lsl #8
    222c:	11a62200 	undefined instruction 0x11a62200
    2230:	f9010000 	undefined instruction 0xf9010000
    2234:	000001f3 	strdeq	r0, [r0], -r3
    2238:	0000100b 	andeq	r1, r0, fp
    223c:	05012100 	streq	r2, [r1, #-256]
    2240:	01000011 	tsteq	r0, r1, lsl r0
    2244:	01f301d5 	ldrsbeq	r0, [r3, #21]!
    2248:	6db40000 	ldcvs	0, cr0, [r4]
    224c:	6df00800 	ldclvs	8, cr0, [r0]
    2250:	10340800 	eorsne	r0, r4, r0, lsl #16
    2254:	07010000 	streq	r0, [r1, -r0]
    2258:	a6220000 	strtge	r0, [r2], -r0
    225c:	01000011 	tsteq	r0, r1, lsl r0
    2260:	0001f3d6 	ldrdeq	pc, [r1], -r6
    2264:	00105300 	andseq	r5, r0, r0, lsl #6
    2268:	01230000 	teqeq	r3, r0
    226c:	000010b1 	strheq	r1, [r0], -r1
    2270:	f301ae01 	vcge.f32	d10, d1, d1
    2274:	f0000001 	undefined instruction 0xf0000001
    2278:	3808006d 	stmdacc	r8, {r0, r2, r3, r5, r6}
    227c:	7108006e 	tstvc	r8, lr, rrx
    2280:	12000010 	andne	r0, r0, #16	; 0x10
    2284:	000011b7 	strheq	r1, [r0], -r7
    2288:	003aad01 	eorseq	sl, sl, r1, lsl #26
    228c:	109c0000 	addsne	r0, ip, r0
    2290:	a6220000 	strtge	r0, [r2], -r0
    2294:	01000011 	tsteq	r0, r1, lsl r0
    2298:	0001f3af 	andeq	pc, r1, pc, lsr #7
    229c:	0010ba00 	andseq	fp, r0, r0, lsl #20
    22a0:	44000000 	strmi	r0, [r0]
    22a4:	02000006 	andeq	r0, r0, #6	; 0x6
    22a8:	0007a500 	andeq	sl, r7, r0, lsl #10
    22ac:	51010400 	tstpl	r1, r0, lsl #8
    22b0:	01000005 	tsteq	r0, r5
    22b4:	00001479 	andeq	r1, r0, r9, ror r4
    22b8:	00000369 	andeq	r0, r0, r9, ror #6
    22bc:	08006e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, lr}
    22c0:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
    22c4:	000009d0 	ldrdeq	r0, [r0], -r0
    22c8:	cb050402 	blgt	1432d8 <__Stack_Size+0x142ed8>
    22cc:	0200002d 	andeq	r0, r0, #45	; 0x2d
    22d0:	05d80502 	ldrbeq	r0, [r8, #1282]
    22d4:	01020000 	tsteq	r2, r0
    22d8:	00069d06 	andeq	r9, r6, r6, lsl #26
    22dc:	33750300 	cmncc	r5, #0	; 0x0
    22e0:	27020032 	smladxcs	r2, r2, r0, r0
    22e4:	00000045 	andeq	r0, r0, r5, asr #32
    22e8:	45070402 	strmi	r0, [r7, #-1026]
    22ec:	0300002e 	movweq	r0, #46	; 0x2e
    22f0:	00363175 	eorseq	r3, r6, r5, ror r1
    22f4:	00572802 	subseq	r2, r7, r2, lsl #16
    22f8:	02020000 	andeq	r0, r2, #0	; 0x0
    22fc:	0007db07 	andeq	sp, r7, r7, lsl #22
    2300:	38750300 	ldmdacc	r5!, {r8, r9}^
    2304:	68290200 	stmdavs	r9!, {r9}
    2308:	02000000 	andeq	r0, r0, #0	; 0x0
    230c:	069b0801 	ldreq	r0, [fp], r1, lsl #16
    2310:	45040000 	strmi	r0, [r4]
    2314:	05000000 	streq	r0, [r0]
    2318:	893b0201 	ldmdbhi	fp!, {r0, r9}
    231c:	06000000 	streq	r0, [r0], -r0
    2320:	00000424 	andeq	r0, r0, r4, lsr #8
    2324:	066d0600 	strbteq	r0, [sp], -r0, lsl #12
    2328:	00010000 	andeq	r0, r1, r0
    232c:	0000ec07 	andeq	lr, r0, r7, lsl #24
    2330:	743b0200 	ldrtvc	r0, [fp], #-512
    2334:	08000000 	stmdaeq	r0, {}
    2338:	1c090704 	stcne	7, cr0, [r9], {4}
    233c:	0a014f03 	beq	55f50 <__Stack_Size+0x55b50>
    2340:	0a000001 	beq	234c <__Stack_Size+0x1f4c>
    2344:	004c5243 	subeq	r5, ip, r3, asr #4
    2348:	6f015003 	svcvs	0x00015003
    234c:	02000000 	andeq	r0, r0, #0	; 0x0
    2350:	430a0023 	movwmi	r0, #40995	; 0xa023
    2354:	03004852 	movweq	r4, #2130	; 0x852
    2358:	006f0151 	rsbeq	r0, pc, r1, asr r1
    235c:	23020000 	movwcs	r0, #8192	; 0x2000
    2360:	44490a04 	strbmi	r0, [r9], #-2564
    2364:	52030052 	andpl	r0, r3, #82	; 0x52
    2368:	00006f01 	andeq	r6, r0, r1, lsl #30
    236c:	08230200 	stmdaeq	r3!, {r9}
    2370:	52444f0a 	subpl	r4, r4, #40	; 0x28
    2374:	01530300 	cmpeq	r3, r0, lsl #6
    2378:	0000006f 	andeq	r0, r0, pc, rrx
    237c:	0b0c2302 	bleq	30af8c <__Stack_Size+0x30ab8c>
    2380:	0000002f 	andeq	r0, r0, pc, lsr #32
    2384:	6f015403 	svcvs	0x00015403
    2388:	02000000 	andeq	r0, r0, #0	; 0x0
    238c:	420a1023 	andmi	r1, sl, #35	; 0x23
    2390:	03005252 	movweq	r5, #594	; 0x252
    2394:	006f0155 	rsbeq	r0, pc, r5, asr r1
    2398:	23020000 	movwcs	r0, #8192	; 0x2000
    239c:	086a0b14 	stmdaeq	sl!, {r2, r4, r8, r9, fp}^
    23a0:	56030000 	strpl	r0, [r3], -r0
    23a4:	00006f01 	andeq	r6, r0, r1, lsl #30
    23a8:	18230200 	stmdane	r3!, {r9}
    23ac:	13e80c00 	mvnne	r0, #0	; 0x0
    23b0:	57030000 	strpl	r0, [r3, -r0]
    23b4:	00009701 	andeq	r9, r0, r1, lsl #14
    23b8:	03180900 	tsteq	r8, #0	; 0x0
    23bc:	014d015a 	cmpeq	sp, sl, asr r1
    23c0:	c70b0000 	strgt	r0, [fp, -r0]
    23c4:	03000015 	movweq	r0, #21	; 0x15
    23c8:	006f015b 	rsbeq	r0, pc, fp, asr r1
    23cc:	23020000 	movwcs	r0, #8192	; 0x2000
    23d0:	15ac0b00 	strne	r0, [ip, #2816]!
    23d4:	5c030000 	stcpl	0, cr0, [r3], {0}
    23d8:	00006f01 	andeq	r6, r0, r1, lsl #30
    23dc:	04230200 	strteq	r0, [r3], #-512
    23e0:	0014720b 	andseq	r7, r4, fp, lsl #4
    23e4:	015d0300 	cmpeq	sp, r0, lsl #6
    23e8:	0000015d 	andeq	r0, r0, sp, asr r1
    23ec:	00082302 	andeq	r2, r8, r2, lsl #6
    23f0:	0000450d 	andeq	r4, r0, sp, lsl #10
    23f4:	00015d00 	andeq	r5, r1, r0, lsl #26
    23f8:	00940e00 	addseq	r0, r4, r0, lsl #28
    23fc:	00030000 	andeq	r0, r3, r0
    2400:	00014d04 	andeq	r4, r1, r4, lsl #26
    2404:	04010500 	streq	r0, [r1], #-1280
    2408:	00017d23 	andeq	r7, r1, r3, lsr #26
    240c:	02640600 	rsbeq	r0, r4, #0	; 0x0
    2410:	06010000 	streq	r0, [r1], -r0
    2414:	0000017e 	andeq	r0, r0, lr, ror r1
    2418:	06ae0602 	strteq	r0, [lr], r2, lsl #12
    241c:	00030000 	andeq	r0, r3, r0
    2420:	00056707 	andeq	r6, r5, r7, lsl #14
    2424:	62270400 	eorvs	r0, r7, #0	; 0x0
    2428:	05000001 	streq	r0, [r0, #-1]
    242c:	c22e0401 	eorgt	r0, lr, #16777216	; 0x1000000
    2430:	06000001 	streq	r0, [r0], -r1
    2434:	00000584 	andeq	r0, r0, r4, lsl #11
    2438:	081c0600 	ldmdaeq	ip, {r9, sl}
    243c:	06040000 	streq	r0, [r4], -r0
    2440:	000002b7 	strheq	r0, [r0], -r7
    2444:	02c50628 	sbceq	r0, r5, #41943040	; 0x2800000
    2448:	00c80000 	sbceq	r0, r8, r0
    244c:	0002f106 	andeq	pc, r2, r6, lsl #2
    2450:	00061400 	andeq	r1, r6, r0, lsl #8
    2454:	10000000 	andne	r0, r0, r0
    2458:	00052d06 	andeq	r2, r5, r6, lsl #26
    245c:	f6061c00 	undefined instruction 0xf6061c00
    2460:	18000005 	stmdane	r0, {r0, r2}
    2464:	063d0700 	ldrteq	r0, [sp], -r0, lsl #14
    2468:	36040000 	strcc	r0, [r4], -r0
    246c:	00000188 	andeq	r0, r0, r8, lsl #3
    2470:	3f04040f 	svccc	0x0004040f
    2474:	00000200 	andeq	r0, r0, r0, lsl #4
    2478:	0000ad10 	andeq	sl, r0, r0, lsl sp
    247c:	4c400400 	cfstrdmi	mvd0, [r0], {0}
    2480:	02000000 	andeq	r0, r0, #0	; 0x0
    2484:	0b100023 	bleq	402518 <__Stack_Size+0x402118>
    2488:	04000006 	streq	r0, [r0], #-6
    248c:	00017d41 	andeq	r7, r1, r1, asr #26
    2490:	02230200 	eoreq	r0, r3, #0	; 0x0
    2494:	00005510 	andeq	r5, r0, r0, lsl r5
    2498:	c2420400 	subgt	r0, r2, #0	; 0x0
    249c:	02000001 	andeq	r0, r0, #1	; 0x1
    24a0:	07000323 	streq	r0, [r0, -r3, lsr #6]
    24a4:	0000068a 	andeq	r0, r0, sl, lsl #13
    24a8:	01cd4304 	biceq	r4, sp, r4, lsl #6
    24ac:	01050000 	tsteq	r5, r0
    24b0:	02204704 	eoreq	r4, r0, #1048576	; 0x100000
    24b4:	43060000 	movwmi	r0, #24576	; 0x6000
    24b8:	00000014 	andeq	r0, r0, r4, lsl r0
    24bc:	0013fc06 	andseq	pc, r3, r6, lsl #24
    24c0:	07000100 	streq	r0, [r0, -r0, lsl #2]
    24c4:	000015a2 	andeq	r1, r0, r2, lsr #11
    24c8:	020b4904 	andeq	r4, fp, #65536	; 0x10000
    24cc:	01110000 	tsteq	r1, r0
    24d0:	00001468 	andeq	r1, r0, r8, ror #8
    24d4:	38017d01 	stmdacc	r1, {r0, r8, sl, fp, ip, sp, lr}
    24d8:	de08006e 	cdple	0, 0, cr0, cr8, cr14, {3}
    24dc:	d808006e 	stmdale	r8, {r1, r2, r3, r5, r6}
    24e0:	af000010 	svcge	0x00000010
    24e4:	12000002 	andne	r0, r0, #2	; 0x2
    24e8:	000015b1 	strheq	r1, [r0], -r1
    24ec:	02af7c01 	adceq	r7, pc, #256	; 0x100
    24f0:	50010000 	andpl	r0, r1, r0
    24f4:	0015b713 	andseq	fp, r5, r3, lsl r7
    24f8:	b57c0100 	ldrblt	r0, [ip, #-256]!
    24fc:	03000002 	movweq	r0, #2	; 0x2
    2500:	14000011 	strne	r0, [r0], #-17
    2504:	00001516 	andeq	r1, r0, r6, lsl r5
    2508:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    250c:	57010000 	strpl	r0, [r1, -r0]
    2510:	00157314 	andseq	r7, r5, r4, lsl r3
    2514:	3a7e0100 	bcc	1f8291c <__Stack_Size+0x1f8251c>
    2518:	01000000 	tsteq	r0, r0
    251c:	13f5145c 	mvnsne	r1, #1543503872	; 0x5c000000
    2520:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    2524:	0000003a 	andeq	r0, r0, sl, lsr r0
    2528:	70155101 	andsvc	r5, r5, r1, lsl #2
    252c:	0100736f 	tsteq	r0, pc, ror #6
    2530:	00003a7e 	andeq	r3, r0, lr, ror sl
    2534:	00112c00 	andseq	r2, r1, r0, lsl #24
    2538:	14f81400 	ldrbtne	r1, [r8], #1024
    253c:	7f010000 	svcvc	0x00010000
    2540:	0000003a 	andeq	r0, r0, sl, lsr r0
    2544:	9c165401 	cfldrsls	mvf5, [r6], {1}
    2548:	01000014 	tsteq	r0, r4, lsl r0
    254c:	00003a7f 	andeq	r3, r0, pc, ror sl
    2550:	04170000 	ldreq	r0, [r7]
    2554:	0000010a 	andeq	r0, r0, sl, lsl #2
    2558:	02000417 	andeq	r0, r0, #385875968	; 0x17000000
    255c:	01180000 	tsteq	r8, r0
    2560:	0000142c 	andeq	r1, r0, ip, lsr #8
    2564:	e001e601 	and	lr, r1, r1, lsl #12
    2568:	f008006e 	undefined instruction 0xf008006e
    256c:	0108006e 	tsteq	r8, lr, rrx
    2570:	0002e05d 	andeq	lr, r2, sp, asr r0
    2574:	15b71200 	ldrne	r1, [r7, #512]!
    2578:	e5010000 	str	r0, [r1]
    257c:	000002b5 	strheq	r0, [r0], -r5
    2580:	19005001 	stmdbne	r0, {r0, ip, lr}
    2584:	0014e201 	andseq	lr, r4, r1, lsl #4
    2588:	01f70100 	mvnseq	r0, r0, lsl #2
    258c:	0000005e 	andeq	r0, r0, lr, asr r0
    2590:	08006ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, sp, lr}
    2594:	08006efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, lr}
    2598:	03235d01 	teqeq	r3, #64	; 0x40
    259c:	b1130000 	tstlt	r3, r0
    25a0:	01000015 	tsteq	r0, r5, lsl r0
    25a4:	0002aff6 	strdeq	sl, [r2], -r6
    25a8:	00116000 	andseq	r6, r1, r0
    25ac:	00ad1200 	adceq	r1, sp, r0, lsl #4
    25b0:	f6010000 	undefined instruction 0xf6010000
    25b4:	0000004c 	andeq	r0, r0, ip, asr #32
    25b8:	ad165101 	ldfges	f5, [r6, #-4]
    25bc:	01000011 	tsteq	r0, r1, lsl r0
    25c0:	00005ef8 	strdeq	r5, [r0], -r8
    25c4:	011a0000 	tsteq	sl, r0
    25c8:	00001545 	andeq	r1, r0, r5, asr #10
    25cc:	01011101 	tsteq	r1, r1, lsl #2
    25d0:	0000004c 	andeq	r0, r0, ip, asr #32
    25d4:	08006efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, lr}
    25d8:	08006f02 	stmdaeq	r0, {r1, r8, r9, sl, fp, sp, lr}
    25dc:	03505d01 	cmpeq	r0, #64	; 0x40
    25e0:	b11b0000 	tstlt	fp, r0
    25e4:	01000015 	tsteq	r0, r5, lsl r0
    25e8:	02af0110 	adceq	r0, pc, #4	; 0x4
    25ec:	11730000 	cmnne	r3, r0
    25f0:	1a000000 	bne	25f8 <__Stack_Size+0x21f8>
    25f4:	0015cc01 	andseq	ip, r5, r1, lsl #24
    25f8:	01220100 	teqeq	r2, r0, lsl #2
    25fc:	00005e01 	andeq	r5, r0, r1, lsl #28
    2600:	006f0400 	rsbeq	r0, pc, r0, lsl #8
    2604:	006f1008 	rsbeq	r1, pc, r8
    2608:	975d0108 	ldrbls	r0, [sp, -r8, lsl #2]
    260c:	1b000003 	blne	2620 <__Stack_Size+0x2220>
    2610:	000015b1 	strheq	r1, [r0], -r1
    2614:	af012101 	svcge	0x00012101
    2618:	86000002 	strhi	r0, [r0], -r2
    261c:	1c000011 	stcne	0, cr0, [r0], {17}
    2620:	000000ad 	andeq	r0, r0, sp, lsr #1
    2624:	4c012101 	stfmis	f2, [r1], {1}
    2628:	01000000 	tsteq	r0, r0
    262c:	11ad1d51 	undefined instruction 0x11ad1d51
    2630:	23010000 	movwcs	r0, #4096	; 0x1000
    2634:	00005e01 	andeq	r5, r0, r1, lsl #28
    2638:	011a0000 	tsteq	sl, r0
    263c:	00001404 	andeq	r1, r0, r4, lsl #8
    2640:	01013c01 	tsteq	r1, r1, lsl #24
    2644:	0000004c 	andeq	r0, r0, ip, asr #32
    2648:	08006f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, sp, lr}
    264c:	08006f16 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl, fp, sp, lr}
    2650:	03c45d01 	biceq	r5, r4, #64	; 0x40
    2654:	b11b0000 	tstlt	fp, r0
    2658:	01000015 	tsteq	r0, r5, lsl r0
    265c:	02af013b 	adceq	r0, pc, #-1073741810	; 0xc000000e
    2660:	11990000 	orrsne	r0, r9, r0
    2664:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2668:	00145b01 	andseq	r5, r4, r1, lsl #22
    266c:	014e0100 	cmpeq	lr, r0, lsl #2
    2670:	006f1801 	rsbeq	r1, pc, r1, lsl #16
    2674:	006f1c08 	rsbeq	r1, pc, r8, lsl #24
    2678:	f95d0108 	undefined instruction 0xf95d0108
    267c:	1c000003 	stcne	0, cr0, [r0], {3}
    2680:	000015b1 	strheq	r1, [r0], -r1
    2684:	af014d01 	svcge	0x00014d01
    2688:	01000002 	tsteq	r0, r2
    268c:	00ad1c50 	adceq	r1, sp, r0, asr ip
    2690:	4d010000 	stcmi	0, cr0, [r1]
    2694:	00004c01 	andeq	r4, r0, r1, lsl #24
    2698:	00510100 	subseq	r0, r1, r0, lsl #2
    269c:	14ff011e 	ldrbtne	r0, [pc], #286	; 26a4 <__Stack_Size+0x22a4>
    26a0:	61010000 	tstvs	r1, r0
    26a4:	6f1c0101 	svcvs	0x001c0101
    26a8:	6f200800 	svcvs	0x00200800
    26ac:	5d010800 	stcpl	8, cr0, [r1]
    26b0:	0000042e 	andeq	r0, r0, lr, lsr #8
    26b4:	0015b11c 	andseq	fp, r5, ip, lsl r1
    26b8:	01600100 	cmneq	r0, r0, lsl #2
    26bc:	000002af 	andeq	r0, r0, pc, lsr #5
    26c0:	ad1c5001 	ldcge	0, cr5, [ip, #-4]
    26c4:	01000000 	tsteq	r0, r0
    26c8:	004c0160 	subeq	r0, ip, r0, ror #2
    26cc:	51010000 	tstpl	r1, r0
    26d0:	4d011e00 	stcmi	14, cr1, [r1]
    26d4:	01000014 	tsteq	r0, r4, lsl r0
    26d8:	20010177 	andcs	r0, r1, r7, ror r1
    26dc:	2a08006f 	bcs	2028a0 <__Stack_Size+0x2024a0>
    26e0:	0108006f 	tsteq	r8, pc, rrx
    26e4:	0004715d 	andeq	r7, r4, sp, asr r1
    26e8:	15b11c00 	ldrne	r1, [r1, #3072]!
    26ec:	76010000 	strvc	r0, [r1], -r0
    26f0:	0002af01 	andeq	sl, r2, r1, lsl #30
    26f4:	1c500100 	ldfnee	f0, [r0], {0}
    26f8:	000000ad 	andeq	r0, r0, sp, lsr #1
    26fc:	4c017601 	stcmi	6, cr7, [r1], {1}
    2700:	01000000 	tsteq	r0, r0
    2704:	143c1c51 	ldrtne	r1, [ip], #-3153
    2708:	76010000 	strvc	r0, [r1], -r0
    270c:	00022001 	andeq	r2, r2, r1
    2710:	00520100 	subseq	r0, r2, r0, lsl #2
    2714:	157e011e 	ldrbne	r0, [lr, #-286]!
    2718:	91010000 	tstls	r1, r0
    271c:	6f2c0101 	svcvs	0x002c0101
    2720:	6f300800 	svcvs	0x00300800
    2724:	5d010800 	stcpl	8, cr0, [r1]
    2728:	000004a6 	andeq	r0, r0, r6, lsr #9
    272c:	0015b11c 	andseq	fp, r5, ip, lsl r1
    2730:	01900100 	orrseq	r0, r0, r0, lsl #2
    2734:	000002af 	andeq	r0, r0, pc, lsr #5
    2738:	0e1c5001 	wxoreq	wr5, wr12, wr1
    273c:	01000015 	tsteq	r0, r5, lsl r0
    2740:	004c0190 	umaaleq	r0, ip, r0, r1
    2744:	51010000 	tstpl	r1, r0
    2748:	60011e00 	andvs	r1, r1, r0, lsl #28
    274c:	01000015 	tsteq	r0, r5, lsl r0
    2750:	300101a3 	andcc	r0, r1, r3, lsr #3
    2754:	4008006f 	andmi	r0, r8, pc, rrx
    2758:	0108006f 	tsteq	r8, pc, rrx
    275c:	0004e95d 	andeq	lr, r4, sp, asr r9
    2760:	15b11c00 	ldrne	r1, [r1, #3072]!
    2764:	a2010000 	andge	r0, r1, #0	; 0x0
    2768:	0002af01 	andeq	sl, r2, r1, lsl #30
    276c:	1c500100 	ldfnee	f0, [r0], {0}
    2770:	000000ad 	andeq	r0, r0, sp, lsr #1
    2774:	4c01a201 	sfmmi	f2, 1, [r1], {1}
    2778:	01000000 	tsteq	r0, r0
    277c:	6d741f51 	ldclvs	15, cr1, [r4, #-324]!
    2780:	a4010070 	strge	r0, [r1], #-112
    2784:	00003a01 	andeq	r3, r0, r1, lsl #20
    2788:	00530100 	subseq	r0, r3, r0, lsl #2
    278c:	14c0011e 	strbne	r0, [r0], #286
    2790:	c4010000 	strgt	r0, [r1]
    2794:	6f400101 	svcvs	0x00400101
    2798:	6f600800 	svcvs	0x00600800
    279c:	5d010800 	stcpl	8, cr0, [r1]
    27a0:	00000530 	andeq	r0, r0, r0, lsr r5
    27a4:	0014a41c 	andseq	sl, r4, ip, lsl r4
    27a8:	01c30100 	biceq	r0, r3, r0, lsl #2
    27ac:	0000005e 	andeq	r0, r0, lr, asr r0
    27b0:	361b5001 	ldrcc	r5, [fp], -r1
    27b4:	01000015 	tsteq	r0, r5, lsl r0
    27b8:	005e01c3 	subseq	r0, lr, r3, asr #3
    27bc:	11ac0000 	undefined instruction 0x11ac0000
    27c0:	f8200000 	undefined instruction 0xf8200000
    27c4:	01000014 	tsteq	r0, r4, lsl r0
    27c8:	003a01c5 	eorseq	r0, sl, r5, asr #3
    27cc:	11bf0000 	undefined instruction 0x11bf0000
    27d0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    27d4:	00141801 	andseq	r1, r4, r1, lsl #16
    27d8:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    27dc:	006f6001 	rsbeq	r6, pc, r1
    27e0:	006f6c08 	rsbeq	r6, pc, r8, lsl #24
    27e4:	575d0108 	ldrbpl	r0, [sp, -r8, lsl #2]
    27e8:	1c000005 	stcne	0, cr0, [r0], {5}
    27ec:	00001126 	andeq	r1, r0, r6, lsr #2
    27f0:	8901dc01 	stmdbhi	r1, {r0, sl, fp, ip, lr, pc}
    27f4:	01000000 	tsteq	r0, r0
    27f8:	01210050 	qsubeq	r0, r0, r1
    27fc:	00001522 	andeq	r1, r0, r2, lsr #10
    2800:	01020801 	tsteq	r2, r1, lsl #16
    2804:	08006f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    2808:	08006fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, sp, lr}
    280c:	000011fe 	strdeq	r1, [r0], -lr
    2810:	000005c6 	andeq	r0, r0, r6, asr #11
    2814:	0014d71c 	andseq	sp, r4, ip, lsl r7
    2818:	02070100 	andeq	r0, r7, #0	; 0x0
    281c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2820:	261b5001 	ldrcs	r5, [fp], -r1
    2824:	01000011 	tsteq	r0, r1, lsl r0
    2828:	00890207 	addeq	r0, r9, r7, lsl #4
    282c:	121d0000 	andsne	r0, sp, #0	; 0x0
    2830:	741f0000 	ldrvc	r0, [pc], #0	; 2838 <__Stack_Size+0x2438>
    2834:	0100706d 	tsteq	r0, sp, rrx
    2838:	003a0209 	eorseq	r0, sl, r9, lsl #4
    283c:	54010000 	strpl	r0, [r1]
    2840:	0015891d 	andseq	r8, r5, sp, lsl r9
    2844:	02090100 	andeq	r0, r9, #0	; 0x0
    2848:	0000003a 	andeq	r0, r0, sl, lsr r0
    284c:	0014f820 	andseq	pc, r4, r0, lsr #16
    2850:	02090100 	andeq	r0, r9, #0	; 0x0
    2854:	0000003a 	andeq	r0, r0, sl, lsr r0
    2858:	0000123b 	andeq	r1, r0, fp, lsr r2
    285c:	0015581d 	andseq	r5, r5, sp, lsl r8
    2860:	02090100 	andeq	r0, r9, #0	; 0x0
    2864:	0000003a 	andeq	r0, r0, sl, lsr r0
    2868:	8e012100 	adfhis	f2, f1, f0
    286c:	01000015 	tsteq	r0, r5, lsl r0
    2870:	cc01023a 	sfmgt	f0, 4, [r1], {58}
    2874:	0008006f 	andeq	r0, r8, pc, rrx
    2878:	7a080070 	bvc	202a40 <__Stack_Size+0x202640>
    287c:	0d000012 	stceq	0, cr0, [r0, #-72]
    2880:	1b000006 	blne	28a0 <__Stack_Size+0x24a0>
    2884:	000014a4 	andeq	r1, r0, r4, lsr #9
    2888:	5e023901 	cdppl	9, 0, cr3, cr2, cr1, {0}
    288c:	99000000 	stmdbls	r0, {}
    2890:	1b000012 	blne	28e0 <__Stack_Size+0x24e0>
    2894:	00001536 	andeq	r1, r0, r6, lsr r5
    2898:	5e023901 	cdppl	9, 0, cr3, cr2, cr1, {0}
    289c:	ac000000 	stcge	0, cr0, [r0], {0}
    28a0:	22000012 	andcs	r0, r0, #18	; 0x12
    28a4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    28a8:	3a023b01 	bcc	914b4 <__Stack_Size+0x910b4>
    28ac:	00000000 	andeq	r0, r0, r0
    28b0:	15e30123 	strbne	r0, [r3, #291]!
    28b4:	6c010000 	stcvs	0, cr0, [r1], {0}
    28b8:	00700001 	rsbseq	r0, r0, r1
    28bc:	00701808 	rsbseq	r1, r0, r8, lsl #16
    28c0:	0012bf08 	andseq	fp, r2, r8, lsl #30
    28c4:	b4012400 	strlt	r2, [r1], #-1024
    28c8:	01000014 	tsteq	r0, r4, lsl r0
    28cc:	70180134 	andsvc	r0, r8, r4, lsr r1
    28d0:	70c00800 	sbcvc	r0, r0, r0, lsl #16
    28d4:	12ea0800 	rscne	r0, sl, #0	; 0x0
    28d8:	b1130000 	tstlt	r3, r0
    28dc:	01000015 	tsteq	r0, r5, lsl r0
    28e0:	0002af33 	andeq	sl, r2, r3, lsr pc
    28e4:	00131500 	andseq	r1, r3, r0, lsl #10
    28e8:	e3000000 	movw	r0, #0	; 0x0
    28ec:	02000008 	andeq	r0, r0, #8	; 0x8
    28f0:	0009ca00 	andeq	ip, r9, r0, lsl #20
    28f4:	51010400 	tstpl	r1, r0, lsl #8
    28f8:	01000005 	tsteq	r0, r5
    28fc:	000016e6 	andeq	r1, r0, r6, ror #13
    2900:	00000369 	andeq	r0, r0, r9, ror #6
    2904:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
    2908:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
    290c:	00000b48 	andeq	r0, r0, r8, asr #22
    2910:	cb050402 	blgt	143920 <__Stack_Size+0x143520>
    2914:	0200002d 	andeq	r0, r0, #45	; 0x2d
    2918:	05d80502 	ldrbeq	r0, [r8, #1282]
    291c:	01020000 	tsteq	r2, r0
    2920:	00069d06 	andeq	r9, r6, r6, lsl #26
    2924:	33750300 	cmncc	r5, #0	; 0x0
    2928:	27020032 	smladxcs	r2, r2, r0, r0
    292c:	00000045 	andeq	r0, r0, r5, asr #32
    2930:	45070402 	strmi	r0, [r7, #-1026]
    2934:	0300002e 	movweq	r0, #46	; 0x2e
    2938:	00363175 	eorseq	r3, r6, r5, ror r1
    293c:	00572802 	subseq	r2, r7, r2, lsl #16
    2940:	02020000 	andeq	r0, r2, #0	; 0x0
    2944:	0007db07 	andeq	sp, r7, r7, lsl #22
    2948:	38750300 	ldmdacc	r5!, {r8, r9}^
    294c:	68290200 	stmdavs	r9!, {r9}
    2950:	02000000 	andeq	r0, r0, #0	; 0x0
    2954:	069b0801 	ldreq	r0, [fp], r1, lsl #16
    2958:	45040000 	strmi	r0, [r4]
    295c:	05000000 	streq	r0, [r0]
    2960:	0000006f 	andeq	r0, r0, pc, rrx
    2964:	39020106 	stmdbcc	r2, {r1, r2, r8}
    2968:	0000008e 	andeq	r0, r0, lr, lsl #1
    296c:	00144707 	andseq	r4, r4, r7, lsl #14
    2970:	53080000 	movwpl	r0, #32768	; 0x8000
    2974:	01005445 	tsteq	r0, r5, asr #8
    2978:	1b940900 	blne	fe504d80 <SCS_BASE+0x1e4f6d80>
    297c:	39020000 	stmdbcc	r2, {}
    2980:	00000079 	andeq	r0, r0, r9, ror r0
    2984:	3b020106 	blcc	82da4 <__Stack_Size+0x829a4>
    2988:	000000ae 	andeq	r0, r0, lr, lsr #1
    298c:	00042407 	andeq	r2, r4, r7, lsl #8
    2990:	6d070000 	stcvs	0, cr0, [r7]
    2994:	01000006 	tsteq	r0, r6
    2998:	00ec0900 	rsceq	r0, ip, r0, lsl #18
    299c:	3b020000 	blcc	829a4 <__Stack_Size+0x825a4>
    29a0:	00000099 	muleq	r0, r9, r0
    29a4:	0b07040a 	bleq	1c39d4 <__Stack_Size+0x1c35d4>
    29a8:	8203033c 	andhi	r0, r3, #-268435456	; 0xf0000000
    29ac:	00017501 	andeq	r7, r1, r1, lsl #10
    29b0:	18e50c00 	stmiane	r5!, {sl, fp}^
    29b4:	83030000 	movwhi	r0, #12288	; 0x3000
    29b8:	00018501 	andeq	r8, r1, r1, lsl #10
    29bc:	00230200 	eoreq	r0, r3, r0, lsl #4
    29c0:	0005920c 	andeq	r9, r5, ip, lsl #4
    29c4:	01840300 	orreq	r0, r4, r0, lsl #6
    29c8:	0000018a 	andeq	r0, r0, sl, lsl #3
    29cc:	0c082302 	stceq	3, cr2, [r8], {2}
    29d0:	000018a9 	andeq	r1, r0, r9, lsr #17
    29d4:	9a018503 	bls	63de8 <__Stack_Size+0x639e8>
    29d8:	03000001 	movweq	r0, #1	; 0x1
    29dc:	0c018023 	stceq	0, cr8, [r1], {35}
    29e0:	0000176e 	andeq	r1, r0, lr, ror #14
    29e4:	8a018603 	bhi	641f8 <__Stack_Size+0x63df8>
    29e8:	03000001 	movweq	r0, #1	; 0x1
    29ec:	0c018823 	stceq	8, cr8, [r1], {35}
    29f0:	000018bf 	strheq	r1, [r0], -pc
    29f4:	9f018703 	svcls	0x00018703
    29f8:	03000001 	movweq	r0, #1	; 0x1
    29fc:	0c028023 	stceq	0, cr8, [r2], {35}
    2a00:	000005a6 	andeq	r0, r0, r6, lsr #11
    2a04:	8a018803 	bhi	64a18 <__Stack_Size+0x64618>
    2a08:	03000001 	movweq	r0, #1	; 0x1
    2a0c:	0c028823 	stceq	8, cr8, [r2], {35}
    2a10:	0000182e 	andeq	r1, r0, lr, lsr #16
    2a14:	a4018903 	strge	r8, [r1], #-2307
    2a18:	03000001 	movweq	r0, #1	; 0x1
    2a1c:	0c038023 	stceq	0, cr8, [r3], {35}
    2a20:	000005b0 	strheq	r0, [r0], -r0
    2a24:	8a018a03 	bhi	65238 <__Stack_Size+0x64e38>
    2a28:	03000001 	movweq	r0, #1	; 0x1
    2a2c:	0c038823 	stceq	8, cr8, [r3], {35}
    2a30:	000015f3 	strdeq	r1, [r0], -r3
    2a34:	a9018b03 	stmdbge	r1, {r0, r1, r8, r9, fp, pc}
    2a38:	03000001 	movweq	r0, #1	; 0x1
    2a3c:	0c048023 	stceq	0, cr8, [r4], {35}
    2a40:	000005ba 	strheq	r0, [r0], -sl
    2a44:	ae018c03 	cdpge	12, 0, cr8, cr1, cr3, {0}
    2a48:	03000001 	movweq	r0, #1	; 0x1
    2a4c:	0d048823 	stceq	8, cr8, [r4, #-140]
    2a50:	00525049 	subseq	r5, r2, r9, asr #32
    2a54:	ce018d03 	cdpgt	13, 0, cr8, cr1, cr3, {0}
    2a58:	03000001 	movweq	r0, #1	; 0x1
    2a5c:	00068023 	andeq	r8, r6, r3, lsr #32
    2a60:	0000450e 	andeq	r4, r0, lr, lsl #10
    2a64:	00018500 	andeq	r8, r1, r0, lsl #10
    2a68:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    2a6c:	00010000 	andeq	r0, r1, r0
    2a70:	00017504 	andeq	r7, r1, r4, lsl #10
    2a74:	003a0e00 	eorseq	r0, sl, r0, lsl #28
    2a78:	019a0000 	orrseq	r0, sl, r0
    2a7c:	b90f0000 	stmdblt	pc, {}
    2a80:	1d000000 	stcne	0, cr0, [r0]
    2a84:	01750400 	cmneq	r5, r0, lsl #8
    2a88:	75040000 	strvc	r0, [r4]
    2a8c:	04000001 	streq	r0, [r0], #-1
    2a90:	00000175 	andeq	r0, r0, r5, ror r1
    2a94:	00017504 	andeq	r7, r1, r4, lsl #10
    2a98:	003a0e00 	eorseq	r0, sl, r0, lsl #28
    2a9c:	01be0000 	undefined instruction 0x01be0000
    2aa0:	b90f0000 	stmdblt	pc, {}
    2aa4:	3d000000 	stccc	0, cr0, [r0]
    2aa8:	00450e00 	subeq	r0, r5, r0, lsl #28
    2aac:	01ce0000 	biceq	r0, lr, r0
    2ab0:	b90f0000 	stmdblt	pc, {}
    2ab4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2ab8:	01be0400 	undefined instruction 0x01be0400
    2abc:	40100000 	andsmi	r0, r0, r0
    2ac0:	af019103 	svcge	0x00019103
    2ac4:	0c000002 	stceq	0, cr0, [r0], {2}
    2ac8:	00001711 	andeq	r1, r0, r1, lsl r7
    2acc:	74019203 	strvc	r9, [r1], #-515
    2ad0:	02000000 	andeq	r0, r0, #0	; 0x0
    2ad4:	690c0023 	stmdbvs	ip, {r0, r1, r5}
    2ad8:	03000017 	movweq	r0, #23	; 0x17
    2adc:	006f0193 	mlseq	pc, r3, r1, r0
    2ae0:	23020000 	movwcs	r0, #8192	; 0x2000
    2ae4:	18ba0c04 	ldmne	sl!, {r2, sl, fp}
    2ae8:	94030000 	strls	r0, [r3]
    2aec:	00006f01 	andeq	r6, r0, r1, lsl #30
    2af0:	08230200 	stmdaeq	r3!, {r9}
    2af4:	0018140c 	andseq	r1, r8, ip, lsl #8
    2af8:	01950300 	orrseq	r0, r5, r0, lsl #6
    2afc:	0000006f 	andeq	r0, r0, pc, rrx
    2b00:	0d0c2302 	stceq	3, cr2, [ip, #-8]
    2b04:	00524353 	subseq	r4, r2, r3, asr r3
    2b08:	6f019603 	svcvs	0x00019603
    2b0c:	02000000 	andeq	r0, r0, #0	; 0x0
    2b10:	430d1023 	movwmi	r1, #53283	; 0xd023
    2b14:	03005243 	movweq	r5, #579	; 0x243
    2b18:	006f0197 	mlseq	pc, r7, r1, r0
    2b1c:	23020000 	movwcs	r0, #8192	; 0x2000
    2b20:	183d0c14 	ldmdane	sp!, {r2, r4, sl, fp}
    2b24:	98030000 	stmdals	r3, {}
    2b28:	0002bf01 	andeq	fp, r2, r1, lsl #30
    2b2c:	18230200 	stmdane	r3!, {r9}
    2b30:	0018420c 	andseq	r4, r8, ip, lsl #4
    2b34:	01990300 	orrseq	r0, r9, r0, lsl #6
    2b38:	0000006f 	andeq	r0, r0, pc, rrx
    2b3c:	0c242302 	stceq	3, cr2, [r4], #-8
    2b40:	000017ef 	andeq	r1, r0, pc, ror #15
    2b44:	6f019a03 	svcvs	0x00019a03
    2b48:	02000000 	andeq	r0, r0, #0	; 0x0
    2b4c:	c90c2823 	stmdbgt	ip, {r0, r1, r5, fp, sp}
    2b50:	03000018 	movweq	r0, #24	; 0x18
    2b54:	006f019b 	mlseq	pc, fp, r1, r0
    2b58:	23020000 	movwcs	r0, #8192	; 0x2000
    2b5c:	18c40c2c 	stmiane	r4, {r2, r3, r5, sl, fp}^
    2b60:	9c030000 	stcls	0, cr0, [r3], {0}
    2b64:	00006f01 	andeq	r6, r0, r1, lsl #30
    2b68:	30230200 	eorcc	r0, r3, r0, lsl #4
    2b6c:	0018580c 	andseq	r5, r8, ip, lsl #16
    2b70:	019d0300 	orrseq	r0, sp, r0, lsl #6
    2b74:	0000006f 	andeq	r0, r0, pc, rrx
    2b78:	0c342302 	ldceq	3, cr2, [r4], #-8
    2b7c:	000017c6 	andeq	r1, r0, r6, asr #15
    2b80:	6f019e03 	svcvs	0x00019e03
    2b84:	02000000 	andeq	r0, r0, #0	; 0x0
    2b88:	e00c3823 	and	r3, ip, r3, lsr #16
    2b8c:	03000018 	movweq	r0, #24	; 0x18
    2b90:	006f019f 	mlseq	pc, pc, r1, r0
    2b94:	23020000 	movwcs	r0, #8192	; 0x2000
    2b98:	450e003c 	strmi	r0, [lr, #-60]
    2b9c:	bf000000 	svclt	0x00000000
    2ba0:	0f000002 	svceq	0x00000002
    2ba4:	000000b9 	strheq	r0, [r0], -r9
    2ba8:	af040002 	svcge	0x00040002
    2bac:	11000002 	tstne	r0, r2
    2bb0:	051b0404 	ldreq	r0, [fp, #-1028]
    2bb4:	12000003 	andne	r0, r0, #3	; 0x3
    2bb8:	0000051d 	andeq	r0, r0, sp, lsl r5
    2bbc:	005e1c04 	subseq	r1, lr, r4, lsl #24
    2bc0:	23020000 	movwcs	r0, #8192	; 0x2000
    2bc4:	07f31200 	ldrbeq	r1, [r3, r0, lsl #4]!
    2bc8:	1d040000 	stcne	0, cr0, [r4]
    2bcc:	0000005e 	andeq	r0, r0, lr, asr r0
    2bd0:	12012302 	andne	r2, r1, #134217728	; 0x8000000
    2bd4:	00000779 	andeq	r0, r0, r9, ror r7
    2bd8:	005e1e04 	subseq	r1, lr, r4, lsl #28
    2bdc:	23020000 	movwcs	r0, #8192	; 0x2000
    2be0:	03191202 	tsteq	r9, #536870912	; 0x20000000
    2be4:	1f040000 	svcne	0x00040000
    2be8:	000000ae 	andeq	r0, r0, lr, lsr #1
    2bec:	00032302 	andeq	r2, r3, r2, lsl #6
    2bf0:	00022909 	andeq	r2, r2, r9, lsl #18
    2bf4:	c4200400 	strtgt	r0, [r0], #-1024
    2bf8:	13000002 	movwne	r0, #2	; 0x2
    2bfc:	001a1601 	andseq	r1, sl, r1, lsl #12
    2c00:	01250100 	teqeq	r5, r0, lsl #2
    2c04:	080070c0 	stmdaeq	r0, {r6, r7, ip, sp, lr}
    2c08:	080070f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, ip, sp, lr}
    2c0c:	03355d01 	teqeq	r5, #64	; 0x40
    2c10:	23140000 	tstcs	r4, #0	; 0x0
    2c14:	01000010 	tsteq	r0, r0, lsl r0
    2c18:	00003a26 	andeq	r3, r0, r6, lsr #20
    2c1c:	00520100 	subseq	r0, r2, r0, lsl #2
    2c20:	19a30113 	stmibne	r3!, {r0, r1, r4, r8}
    2c24:	3c010000 	stccc	0, cr0, [r1], {0}
    2c28:	0070f401 	rsbseq	pc, r0, r1, lsl #8
    2c2c:	00712408 	rsbseq	r2, r1, r8, lsl #8
    2c30:	585d0108 	ldmdapl	sp, {r3, r8}^
    2c34:	15000003 	strne	r0, [r0, #-3]
    2c38:	00001023 	andeq	r1, r0, r3, lsr #32
    2c3c:	003a3d01 	eorseq	r3, sl, r1, lsl #26
    2c40:	13000000 	movwne	r0, #0	; 0x0
    2c44:	001a2201 	andseq	r2, sl, r1, lsl #4
    2c48:	01620100 	cmneq	r2, r0, lsl #2
    2c4c:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    2c50:	08007138 	stmdaeq	r0, {r3, r4, r5, r8, ip, sp, lr}
    2c54:	037f5d01 	cmneq	pc, #64	; 0x40
    2c58:	17160000 	ldrne	r0, [r6, -r0]
    2c5c:	01000017 	tsteq	r0, r7, lsl r0
    2c60:	00003a61 	andeq	r3, r0, r1, ror #20
    2c64:	00133400 	andseq	r3, r3, r0, lsl #8
    2c68:	01170000 	tsteq	r7, r0
    2c6c:	00001833 	andeq	r1, r0, r3, lsr r8
    2c70:	38017501 	stmdacc	r1, {r0, r8, sl, ip, sp, lr}
    2c74:	b4080071 	strlt	r0, [r8], #-113
    2c78:	47080071 	smlsdxmi	r8, r1, r0, r0
    2c7c:	eb000013 	bl	2cd0 <__Stack_Size+0x28d0>
    2c80:	16000003 	strne	r0, [r0], -r3
    2c84:	00001617 	andeq	r1, r0, r7, lsl r6
    2c88:	03eb7401 	mvneq	r7, #16777216	; 0x1000000
    2c8c:	13660000 	cmnne	r6, #0	; 0x0
    2c90:	ae180000 	wxorge	wr0, wr8, wr0
    2c94:	01000018 	tsteq	r0, r8, lsl r0
    2c98:	00003a76 	andeq	r3, r0, r6, ror sl
    2c9c:	00138400 	andseq	r8, r3, r0, lsl #8
    2ca0:	14f81800 	ldrbtne	r1, [r8], #2048
    2ca4:	76010000 	strvc	r0, [r1], -r0
    2ca8:	0000003a 	andeq	r0, r0, sl, lsr r0
    2cac:	000013ad 	andeq	r1, r0, sp, lsr #7
    2cb0:	00155818 	andseq	r5, r5, r8, lsl r8
    2cb4:	3a760100 	bcc	1d830bc <__Stack_Size+0x1d82cbc>
    2cb8:	cb000000 	blgt	2cc0 <__Stack_Size+0x28c0>
    2cbc:	15000013 	strne	r0, [r0, #-19]
    2cc0:	0000169f 	muleq	r0, pc, r6
    2cc4:	003a7701 	eorseq	r7, sl, r1, lsl #14
    2cc8:	5e150000 	wxorpl	wr0, wr5, wr0
    2ccc:	01000018 	tsteq	r0, r8, lsl r0
    2cd0:	00003a77 	andeq	r3, r0, r7, ror sl
    2cd4:	04190000 	ldreq	r0, [r9]
    2cd8:	00000305 	andeq	r0, r0, r5, lsl #6
    2cdc:	18990113 	ldmne	r9, {r0, r1, r4, r8}
    2ce0:	a9010000 	stmdbge	r1, {}
    2ce4:	0071b401 	rsbseq	fp, r1, r1, lsl #8
    2ce8:	0071c008 	rsbseq	ip, r1, r8
    2cec:	165d0108 	ldrbne	r0, [sp], -r8, lsl #2
    2cf0:	1a000004 	bne	2d08 <__Stack_Size+0x2908>
    2cf4:	00001617 	andeq	r1, r0, r7, lsl r6
    2cf8:	03eba801 	mvneq	sl, #65536	; 0x10000
    2cfc:	50010000 	andpl	r0, r1, r0
    2d00:	27011b00 	strcs	r1, [r1, -r0, lsl #22]
    2d04:	01000016 	tsteq	r0, r6, lsl r0
    2d08:	4c010106 	stfmis	f0, [r1], {6}
    2d0c:	c0000000 	andgt	r0, r0, r0
    2d10:	d8080071 	stmdale	r8, {r0, r4, r5, r6}
    2d14:	01080071 	tsteq	r8, r1, ror r0
    2d18:	80011c5d 	andhi	r1, r1, sp, asr ip
    2d1c:	01000019 	tsteq	r0, r9, lsl r0
    2d20:	8e010113 	mcrhi	1, 0, r0, cr1, cr3, {0}
    2d24:	d8000000 	stmdale	r0, {}
    2d28:	fc080071 	stc2	0, cr0, [r8], {113}
    2d2c:	01080071 	tsteq	r8, r1, ror r0
    2d30:	0004755d 	andeq	r7, r4, sp, asr r5
    2d34:	051d1d00 	ldreq	r1, [sp, #-3328]
    2d38:	12010000 	andne	r0, r1, #0	; 0x0
    2d3c:	00005e01 	andeq	r5, r0, r1, lsl #28
    2d40:	0013de00 	andseq	sp, r3, r0, lsl #28
    2d44:	1a3b1e00 	bne	eca54c <__Stack_Size+0xeca14c>
    2d48:	14010000 	strne	r0, [r1]
    2d4c:	00008e01 	andeq	r8, r0, r1, lsl #28
    2d50:	6d741f00 	ldclvs	15, cr1, [r4]
    2d54:	15010070 	strne	r0, [r1, #-112]
    2d58:	00003a01 	andeq	r3, r0, r1, lsl #20
    2d5c:	00520100 	subseq	r0, r2, r0, lsl #2
    2d60:	17cb0120 	strbne	r0, [fp, r0, lsr #2]
    2d64:	2f010000 	svccs	0x00010000
    2d68:	71fc0101 	mvnsvc	r0, r1, lsl #2
    2d6c:	72080800 	andvc	r0, r8, #0	; 0x0
    2d70:	5d010800 	stcpl	8, cr0, [r1]
    2d74:	0000049c 	muleq	r0, ip, r4
    2d78:	00051d21 	andeq	r1, r5, r1, lsr #26
    2d7c:	012e0100 	teqeq	lr, r0, lsl #2
    2d80:	0000005e 	andeq	r0, r0, lr, asr r0
    2d84:	20005001 	andcs	r5, r0, r1
    2d88:	0015f801 	andseq	pc, r5, r1, lsl #16
    2d8c:	013e0100 	teqeq	lr, r0, lsl #2
    2d90:	00720801 	rsbseq	r0, r2, r1, lsl #16
    2d94:	00722008 	rsbseq	r2, r2, r8
    2d98:	c55d0108 	ldrbgt	r0, [sp, #-264]
    2d9c:	1d000004 	stcne	0, cr0, [r0, #-16]
    2da0:	0000051d 	andeq	r0, r0, sp, lsl r5
    2da4:	5e013d01 	cdppl	13, 0, cr3, cr1, cr1, {0}
    2da8:	f1000000 	cps	#0
    2dac:	00000013 	andeq	r0, r0, r3, lsl r0
    2db0:	173e011b 	undefined
    2db4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2db8:	004c0101 	subeq	r0, ip, r1, lsl #2
    2dbc:	72200000 	eorvc	r0, r0, #0	; 0x0
    2dc0:	72300800 	eorsvc	r0, r0, #0	; 0x0
    2dc4:	5d010800 	stcpl	8, cr0, [r1]
    2dc8:	19f4011c 	ldmibne	r4!, {r2, r3, r4, r8}^
    2dcc:	5b010000 	blpl	42dd4 <__Stack_Size+0x429d4>
    2dd0:	008e0101 	addeq	r0, lr, r1, lsl #2
    2dd4:	72300000 	eorsvc	r0, r0, #0	; 0x0
    2dd8:	72540800 	subsvc	r0, r4, #0	; 0x0
    2ddc:	5d010800 	stcpl	8, cr0, [r1]
    2de0:	00000524 	andeq	r0, r0, r4, lsr #10
    2de4:	00051d1d 	andeq	r1, r5, sp, lsl sp
    2de8:	015a0100 	cmpeq	sl, r0, lsl #2
    2dec:	0000005e 	andeq	r0, r0, lr, asr r0
    2df0:	00001404 	andeq	r1, r0, r4, lsl #8
    2df4:	0019cb1e 	andseq	ip, r9, lr, lsl fp
    2df8:	015c0100 	cmpeq	ip, r0, lsl #2
    2dfc:	0000008e 	andeq	r0, r0, lr, lsl #1
    2e00:	706d741f 	rsbvc	r7, sp, pc, lsl r4
    2e04:	015d0100 	cmpeq	sp, r0, lsl #2
    2e08:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e0c:	1b005201 	blne	17618 <__Stack_Size+0x17218>
    2e10:	00170901 	andseq	r0, r7, r1, lsl #18
    2e14:	01780100 	cmneq	r8, r0, lsl #2
    2e18:	00003a01 	andeq	r3, r0, r1, lsl #20
    2e1c:	00725400 	rsbseq	r5, r2, r0, lsl #8
    2e20:	00726008 	rsbseq	r6, r2, r8
    2e24:	205d0108 	subscs	r0, sp, r8, lsl #2
    2e28:	00181a01 	andseq	r1, r8, r1, lsl #20
    2e2c:	018a0100 	orreq	r0, sl, r0, lsl #2
    2e30:	00726001 	rsbseq	r6, r2, r1
    2e34:	00727408 	rsbseq	r7, r2, r8, lsl #8
    2e38:	735d0108 	cmpvc	sp, #2	; 0x2
    2e3c:	21000005 	tstcs	r0, r5
    2e40:	000019be 	strheq	r1, [r0], -lr
    2e44:	3a018901 	bcc	65250 <__Stack_Size+0x64e50>
    2e48:	01000000 	tsteq	r0, r0
    2e4c:	18921d50 	ldmne	r2, {r4, r6, r8, sl, fp, ip}
    2e50:	89010000 	stmdbhi	r1, {}
    2e54:	00003a01 	andeq	r3, r0, r1, lsl #20
    2e58:	00141700 	andseq	r1, r4, r0, lsl #14
    2e5c:	01220000 	teqeq	r2, r0
    2e60:	00001686 	andeq	r1, r0, r6, lsl #13
    2e64:	01019a01 	tsteq	r1, r1, lsl #20
    2e68:	08007274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    2e6c:	08007284 	stmdaeq	r0, {r2, r7, r9, ip, sp, lr}
    2e70:	01225d01 	teqeq	r2, r1, lsl #26
    2e74:	00001777 	andeq	r1, r0, r7, ror r7
    2e78:	0101a601 	tsteq	r1, r1, lsl #12
    2e7c:	08007284 	stmdaeq	r0, {r2, r7, r9, ip, sp, lr}
    2e80:	08007294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp, lr}
    2e84:	01205d01 	teqeq	r0, r1, lsl #26
    2e88:	0000187e 	andeq	r1, r0, lr, ror r8
    2e8c:	0101b901 	tsteq	r1, r1, lsl #18
    2e90:	08007294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp, lr}
    2e94:	080072b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, sp, lr}
    2e98:	05d05d01 	ldrbeq	r5, [r0, #3329]
    2e9c:	e7210000 	str	r0, [r1, -r0]!
    2ea0:	01000019 	tsteq	r0, r9, lsl r0
    2ea4:	005e01b8 	ldrheq	r0, [lr], #-24
    2ea8:	50010000 	andpl	r0, r1, r0
    2eac:	00112621 	andseq	r2, r1, r1, lsr #12
    2eb0:	01b80100 	undefined instruction 0x01b80100
    2eb4:	000000ae 	andeq	r0, r0, lr, lsr #1
    2eb8:	20005101 	andcs	r5, r0, r1, lsl #2
    2ebc:	00186501 	andseq	r6, r8, r1, lsl #10
    2ec0:	01d70100 	bicseq	r0, r7, r0, lsl #2
    2ec4:	0072b001 	rsbseq	fp, r2, r1
    2ec8:	0072d808 	rsbseq	sp, r2, r8, lsl #16
    2ecc:	155d0108 	ldrbne	r0, [sp, #-264]
    2ed0:	1d000006 	stcne	0, cr0, [r0, #-24]
    2ed4:	0000175b 	andeq	r1, r0, fp, asr r7
    2ed8:	3a01d601 	bcc	786e4 <__Stack_Size+0x782e4>
    2edc:	2a000000 	bcs	2ee4 <__Stack_Size+0x2ae4>
    2ee0:	21000014 	tstcs	r0, r4, lsl r0
    2ee4:	00001126 	andeq	r1, r0, r6, lsr #2
    2ee8:	ae01d601 	cfmadd32ge	mvax0, mvfx13, mvfx1, mvfx1
    2eec:	01000000 	tsteq	r0, r0
    2ef0:	14f82351 	ldrbtne	r2, [r8], #849
    2ef4:	d8010000 	stmdale	r1, {}
    2ef8:	00003a01 	andeq	r3, r0, r1, lsl #20
    2efc:	00500100 	subseq	r0, r0, r0, lsl #2
    2f00:	16c50124 	strbne	r0, [r5], r4, lsr #2
    2f04:	00010000 	andeq	r0, r1, r0
    2f08:	72d80102 	sbcsvc	r0, r8, #-2147483648	; 0x80000000
    2f0c:	73300800 	teqvc	r0, #0	; 0x0
    2f10:	143d0800 	ldrtne	r0, [sp], #-2048
    2f14:	06980000 	ldreq	r0, [r8], r0
    2f18:	5b1d0000 	blpl	742f20 <__Stack_Size+0x742b20>
    2f1c:	01000017 	tsteq	r0, r7, lsl r0
    2f20:	003a01fe 	ldrshteq	r0, [sl], -lr
    2f24:	145c0000 	ldrbne	r0, [ip]
    2f28:	601d0000 	andsvs	r0, sp, r0
    2f2c:	01000019 	tsteq	r0, r9, lsl r0
    2f30:	005e01fe 	ldrsheq	r0, [lr], #-30
    2f34:	146f0000 	strbtne	r0, [pc], #0	; 2f3c <__Stack_Size+0x2b3c>
    2f38:	5d1d0000 	ldcpl	0, cr0, [sp]
    2f3c:	01000016 	tsteq	r0, r6, lsl r0
    2f40:	005e01ff 	ldrsheq	r0, [lr], #-31
    2f44:	14820000 	strne	r0, [r2]
    2f48:	89250000 	stmdbhi	r5!, {}
    2f4c:	01000015 	tsteq	r0, r5, lsl r0
    2f50:	003a0201 	eorseq	r0, sl, r1, lsl #4
    2f54:	14950000 	ldrne	r0, [r5]
    2f58:	061e0000 	ldreq	r0, [lr], -r0
    2f5c:	01000019 	tsteq	r0, r9, lsl r0
    2f60:	003a0201 	eorseq	r0, sl, r1, lsl #4
    2f64:	db1e0000 	blle	782f6c <__Stack_Size+0x782b6c>
    2f68:	01000019 	tsteq	r0, r9, lsl r0
    2f6c:	003a0201 	eorseq	r0, sl, r1, lsl #4
    2f70:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    2f74:	01000018 	tsteq	r0, r8, lsl r0
    2f78:	003a0202 	eorseq	r0, sl, r2, lsl #4
    2f7c:	14a80000 	strtne	r0, [r8]
    2f80:	1c000000 	stcne	0, cr0, [r0], {0}
    2f84:	00190b01 	andseq	r0, r9, r1, lsl #22
    2f88:	02290100 	eoreq	r0, r9, #0	; 0x0
    2f8c:	00008e01 	andeq	r8, r0, r1, lsl #28
    2f90:	00733000 	rsbseq	r3, r3, r0
    2f94:	00735008 	rsbseq	r5, r3, r8
    2f98:	ed5d0108 	ldfe	f0, [sp, #-32]
    2f9c:	1d000006 	stcne	0, cr0, [r0, #-24]
    2fa0:	0000175b 	andeq	r1, r0, fp, asr r7
    2fa4:	3a022801 	bcc	8cfb0 <__Stack_Size+0x8cbb0>
    2fa8:	d1000000 	tstle	r0, r0
    2fac:	1e000014 	mcrne	0, 0, r0, cr0, cr4, {0}
    2fb0:	000011ad 	andeq	r1, r0, sp, lsr #3
    2fb4:	8e022a01 	fmacshi	s4, s4, s2
    2fb8:	26000000 	strcs	r0, [r0], -r0
    2fbc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    2fc0:	3a022b01 	bcc	8dbcc <__Stack_Size+0x8d7cc>
    2fc4:	25000000 	strcs	r0, [r0]
    2fc8:	000017e8 	andeq	r1, r0, r8, ror #15
    2fcc:	3a022b01 	bcc	8dbd8 <__Stack_Size+0x8d7d8>
    2fd0:	e4000000 	str	r0, [r0]
    2fd4:	00000014 	andeq	r0, r0, r4, lsl r0
    2fd8:	17f40120 	ldrbne	r0, [r4, r0, lsr #2]!
    2fdc:	4f010000 	svcmi	0x00010000
    2fe0:	73500102 	cmpvc	r0, #-2147483648	; 0x80000000
    2fe4:	73680800 	cmnvc	r8, #0	; 0x0
    2fe8:	5d010800 	stcpl	8, cr0, [r1]
    2fec:	00000722 	andeq	r0, r0, r2, lsr #14
    2ff0:	00175b1d 	andseq	r5, r7, sp, lsl fp
    2ff4:	024e0100 	subeq	r0, lr, #0	; 0x0
    2ff8:	0000003a 	andeq	r0, r0, sl, lsr r0
    2ffc:	00001502 	andeq	r1, r0, r2, lsl #10
    3000:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    3004:	02500100 	subseq	r0, r0, #0	; 0x0
    3008:	0000003a 	andeq	r0, r0, sl, lsr r0
    300c:	31012000 	tstcc	r1, r0
    3010:	01000019 	tsteq	r0, r9, lsl r0
    3014:	68010267 	stmdavs	r1, {r0, r1, r2, r5, r6, r9}
    3018:	80080073 	andhi	r0, r8, r3, ror r0
    301c:	01080073 	tsteq	r8, r3, ror r0
    3020:	0007575d 	andeq	r5, r7, sp, asr r7
    3024:	175b1d00 	ldrbne	r1, [fp, -r0, lsl #26]
    3028:	66010000 	strvs	r0, [r1], -r0
    302c:	00003a02 	andeq	r3, r0, r2, lsl #20
    3030:	00151500 	andseq	r1, r5, r0, lsl #10
    3034:	6d742600 	ldclvs	6, cr2, [r4]
    3038:	68010070 	stmdavs	r1, {r4, r5, r6}
    303c:	00003a02 	andeq	r3, r0, r2, lsl #20
    3040:	011c0000 	tsteq	ip, r0
    3044:	0000178e 	andeq	r1, r0, lr, lsl #15
    3048:	01028501 	tsteq	r2, r1, lsl #10
    304c:	0000008e 	andeq	r0, r0, lr, lsl #1
    3050:	08007380 	stmdaeq	r0, {r7, r8, r9, ip, sp, lr}
    3054:	080073a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp, lr}
    3058:	07aa5d01 	streq	r5, [sl, r1, lsl #26]!
    305c:	5b1d0000 	blpl	743064 <__Stack_Size+0x742c64>
    3060:	01000017 	tsteq	r0, r7, lsl r0
    3064:	003a0284 	eorseq	r0, sl, r4, lsl #5
    3068:	15280000 	strne	r0, [r8]!
    306c:	ad1e0000 	ldcge	0, cr0, [lr]
    3070:	01000011 	tsteq	r0, r1, lsl r0
    3074:	008e0286 	addeq	r0, lr, r6, lsl #5
    3078:	74260000 	strtvc	r0, [r6]
    307c:	0100706d 	tsteq	r0, sp, rrx
    3080:	003a0288 	eorseq	r0, sl, r8, lsl #5
    3084:	e8230000 	stmda	r3!, {}
    3088:	01000017 	tsteq	r0, r7, lsl r0
    308c:	003a0288 	eorseq	r0, sl, r8, lsl #5
    3090:	53010000 	movwpl	r0, #4096	; 0x1000
    3094:	ea011c00 	b	4a09c <__Stack_Size+0x49c9c>
    3098:	01000018 	tsteq	r0, r8, lsl r0
    309c:	3a0102ad 	bcc	43b58 <__Stack_Size+0x43758>
    30a0:	a0000000 	andge	r0, r0, r0
    30a4:	e4080073 	str	r0, [r8], #-115
    30a8:	01080073 	tsteq	r8, r3, ror r0
    30ac:	0008075d 	andeq	r0, r8, sp, asr r7
    30b0:	175b1d00 	ldrbne	r1, [fp, -r0, lsl #26]
    30b4:	ac010000 	stcge	0, cr0, [r1], {0}
    30b8:	00003a02 	andeq	r3, r0, r2, lsl #20
    30bc:	00153b00 	andseq	r3, r5, r0, lsl #22
    30c0:	19532500 	ldmdbne	r3, {r8, sl, sp}^
    30c4:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    30c8:	00003a02 	andeq	r3, r0, r2, lsl #20
    30cc:	00156400 	andseq	r6, r5, r0, lsl #8
    30d0:	14f82500 	ldrbtne	r2, [r8], #1280
    30d4:	af010000 	svcge	0x00010000
    30d8:	00003a02 	andeq	r3, r0, r2, lsl #20
    30dc:	00158d00 	andseq	r8, r5, r0, lsl #26
    30e0:	17e82500 	strbne	r2, [r8, r0, lsl #10]!
    30e4:	af010000 	svcge	0x00010000
    30e8:	00003a02 	andeq	r3, r0, r2, lsl #20
    30ec:	0015b600 	andseq	fp, r5, r0, lsl #12
    30f0:	011c0000 	tsteq	ip, r0
    30f4:	00001648 	andeq	r1, r0, r8, asr #12
    30f8:	0102db01 	tsteq	r2, r1, lsl #22
    30fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    3100:	080073e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, sp, lr}
    3104:	080073f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
    3108:	08505d01 	ldmdaeq	r0, {r0, r8, sl, fp, ip, lr}^
    310c:	5b1d0000 	blpl	743114 <__Stack_Size+0x742d14>
    3110:	01000017 	tsteq	r0, r7, lsl r0
    3114:	003a02da 	ldrsbteq	r0, [sl], -sl
    3118:	15d40000 	ldrbne	r0, [r4]
    311c:	b8250000 	stmdalt	r5!, {}
    3120:	01000016 	tsteq	r0, r6, lsl r0
    3124:	003a02dc 	ldrsbteq	r0, [sl], -ip
    3128:	15e70000 	strbne	r0, [r7]!
    312c:	74260000 	strtvc	r0, [r6]
    3130:	0100706d 	tsteq	r0, sp, rrx
    3134:	003a02dd 	ldrsbteq	r0, [sl], -sp
    3138:	27000000 	strcs	r0, [r0, -r0]
    313c:	00184801 	andseq	r4, r8, r1, lsl #16
    3140:	01fa0100 	mvnseq	r0, r0, lsl #2
    3144:	0000003a 	andeq	r0, r0, sl, lsr r0
    3148:	080073f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
    314c:	08007404 	stmdaeq	r0, {r2, sl, ip, sp, lr}
    3150:	000015fa 	strdeq	r1, [r0], -sl
    3154:	17b30117 	undefined
    3158:	eb010000 	bl	43160 <__Stack_Size+0x42d60>
    315c:	00740401 	rsbseq	r0, r4, r1, lsl #8
    3160:	00741208 	rsbseq	r1, r4, r8, lsl #4
    3164:	00162508 	andseq	r2, r6, r8, lsl #10
    3168:	00089200 	andeq	r9, r8, r0, lsl #4
    316c:	19b21600 	ldmibne	r2!, {r9, sl, ip}
    3170:	ea010000 	b	43178 <__Stack_Size+0x42d78>
    3174:	0000003a 	andeq	r0, r0, sl, lsr r0
    3178:	00001650 	andeq	r1, r0, r0, asr r6
    317c:	2a012800 	bcs	4d184 <__Stack_Size+0x4cd84>
    3180:	01000017 	tsteq	r0, r7, lsl r0
    3184:	741401dd 	ldrvc	r0, [r4], #-477
    3188:	74200800 	strtvc	r0, [r0], #-2048
    318c:	16630800 	strbtne	r0, [r3], -r0, lsl #16
    3190:	01280000 	teqeq	r8, r0
    3194:	000018ce 	andeq	r1, r0, lr, asr #17
    3198:	2001d101 	andcs	sp, r1, r1, lsl #2
    319c:	2c080074 	stccs	0, cr0, [r8], {116}
    31a0:	8e080074 	mcrhi	0, 0, r0, cr8, cr4, {3}
    31a4:	28000016 	stmdacs	r0, {r1, r2, r4}
    31a8:	0016a601 	andseq	sl, r6, r1, lsl #12
    31ac:	01c50100 	biceq	r0, r5, r0, lsl #2
    31b0:	0800742c 	stmdaeq	r0, {r2, r3, r5, sl, ip, sp, lr}
    31b4:	08007438 	stmdaeq	r0, {r3, r4, r5, sl, ip, sp, lr}
    31b8:	000016b9 	strheq	r1, [r0], -r9
    31bc:	16760128 	ldrbtne	r0, [r6], -r8, lsr #2
    31c0:	b9010000 	stmdblt	r1, {}
    31c4:	00743801 	rsbseq	r3, r4, r1, lsl #16
    31c8:	00744408 	rsbseq	r4, r4, r8, lsl #8
    31cc:	0016e408 	andseq	lr, r6, r8, lsl #8
    31d0:	02430000 	subeq	r0, r3, #0	; 0x0
    31d4:	00020000 	andeq	r0, r2, r0
    31d8:	00000c23 	andeq	r0, r0, r3, lsr #24
    31dc:	05510104 	ldrbeq	r0, [r1, #-260]
    31e0:	a9010000 	stmdbge	r1, {}
    31e4:	6900001a 	stmdbvs	r0, {r1, r3, r4}
    31e8:	44000003 	strmi	r0, [r0], #-3
    31ec:	24080074 	strcs	r0, [r8], #-116
    31f0:	f2080075 	vqadd.s8	q0, q4, <illegal reg q10.5>
    31f4:	0200000c 	andeq	r0, r0, #12	; 0xc
    31f8:	2dcb0504 	cfstr64cs	mvdx0, [fp, #16]
    31fc:	02020000 	andeq	r0, r2, #0	; 0x0
    3200:	0005d805 	andeq	sp, r5, r5, lsl #16
    3204:	06010200 	streq	r0, [r1], -r0, lsl #4
    3208:	0000069d 	muleq	r0, sp, r6
    320c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    3210:	45270200 	strmi	r0, [r7, #-512]!
    3214:	02000000 	andeq	r0, r0, #0	; 0x0
    3218:	2e450704 	cdpcs	7, 4, cr0, cr5, cr4, {0}
    321c:	02020000 	andeq	r0, r2, #0	; 0x0
    3220:	0007db07 	andeq	sp, r7, r7, lsl #22
    3224:	38750300 	ldmdacc	r5!, {r8, r9}^
    3228:	5d290200 	sfmpl	f0, 4, [r9]
    322c:	02000000 	andeq	r0, r0, #0	; 0x0
    3230:	069b0801 	ldreq	r0, [fp], r1, lsl #16
    3234:	45040000 	strmi	r0, [r4]
    3238:	05000000 	streq	r0, [r0]
    323c:	7e390201 	cdpvc	2, 3, cr0, cr9, cr1, {0}
    3240:	06000000 	streq	r0, [r0], -r0
    3244:	00001447 	andeq	r1, r0, r7, asr #8
    3248:	45530700 	ldrbmi	r0, [r3, #-1792]
    324c:	00010054 	andeq	r0, r1, r4, asr r0
    3250:	001d9a08 	andseq	r9, sp, r8, lsl #20
    3254:	69390200 	ldmdbvs	r9!, {r9}
    3258:	05000000 	streq	r0, [r0]
    325c:	9e3b0201 	cdpls	2, 3, cr0, cr11, cr1, {0}
    3260:	06000000 	streq	r0, [r0], -r0
    3264:	00000424 	andeq	r0, r0, r4, lsr #8
    3268:	066d0600 	strbteq	r0, [sp], -r0, lsl #12
    326c:	00010000 	andeq	r0, r1, r0
    3270:	0000ec08 	andeq	lr, r0, r8, lsl #24
    3274:	893b0200 	ldmdbhi	fp!, {r9}
    3278:	09000000 	stmdbeq	r0, {}
    327c:	080a0704 	stmdaeq	sl, {r2, r8, r9, sl}
    3280:	d301a403 	movwle	sl, #5123	; 0x1403
    3284:	0b000000 	bleq	328c <__Stack_Size+0x2e8c>
    3288:	03005243 	movweq	r5, #579	; 0x243
    328c:	006401a5 	rsbeq	r0, r4, r5, lsr #3
    3290:	23020000 	movwcs	r0, #8192	; 0x2000
    3294:	53430b00 	movtpl	r0, #15104	; 0x3b00
    3298:	a6030052 	undefined
    329c:	00006401 	andeq	r6, r0, r1, lsl #8
    32a0:	04230200 	strteq	r0, [r3], #-512
    32a4:	10010c00 	andne	r0, r1, r0, lsl #24
    32a8:	0100001b 	tsteq	r0, fp, lsl r0
    32ac:	74440152 	strbvc	r0, [r4], #-338
    32b0:	74500800 	ldrbvc	r0, [r0], #-2048
    32b4:	5d010800 	stcpl	8, cr0, [r1]
    32b8:	000000f8 	strdeq	r0, [r0], -r8
    32bc:	0011260d 	andseq	r2, r1, sp, lsl #12
    32c0:	9e510100 	rdflss	f0, f1, f0
    32c4:	01000000 	tsteq	r0, r0
    32c8:	010c0050 	qaddeq	r0, r0, ip
    32cc:	00001a9e 	muleq	r0, lr, sl
    32d0:	50016201 	andpl	r6, r1, r1, lsl #4
    32d4:	5c080074 	stcpl	0, cr0, [r8], {116}
    32d8:	01080074 	tsteq	r8, r4, ror r0
    32dc:	00011d5d 	andeq	r1, r1, sp, asr sp
    32e0:	11260d00 	teqne	r6, r0, lsl #26
    32e4:	61010000 	tstvs	r1, r0
    32e8:	0000009e 	muleq	r0, lr, r0
    32ec:	0c005001 	stceq	0, cr5, [r0], {1}
    32f0:	001acb01 	andseq	ip, sl, r1, lsl #22
    32f4:	017b0100 	cmneq	fp, r0, lsl #2
    32f8:	0800745c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp, lr}
    32fc:	08007470 	stmdaeq	r0, {r4, r5, r6, sl, ip, sp, lr}
    3300:	01535d01 	cmpeq	r3, r1, lsl #26
    3304:	880e0000 	stmdahi	lr, {}
    3308:	0100001a 	tsteq	r0, sl, lsl r0
    330c:	00003a7a 	andeq	r3, r0, sl, ror sl
    3310:	00170f00 	andseq	r0, r7, r0, lsl #30
    3314:	14f80f00 	ldrbtne	r0, [r8], #3840
    3318:	7c010000 	stcvc	0, cr0, [r1], {0}
    331c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3320:	00001722 	andeq	r1, r0, r2, lsr #14
    3324:	24010c00 	strcs	r0, [r1], #-3072
    3328:	0100001b 	tsteq	r0, fp, lsl r0
    332c:	74700196 	ldrbtvc	r0, [r0], #-406
    3330:	747c0800 	ldrbtvc	r0, [ip], #-2048
    3334:	5d010800 	stcpl	8, cr0, [r1]
    3338:	00000178 	andeq	r0, r0, r8, ror r1
    333c:	0011260d 	andseq	r2, r1, sp, lsl #12
    3340:	9e950100 	fmllss	f0, f5, f0
    3344:	01000000 	tsteq	r0, r0
    3348:	01100050 	tsteq	r0, r0, asr r0
    334c:	00001ade 	ldrdeq	r1, [r0], -lr
    3350:	7e01f301 	cdpvc	3, 0, cr15, cr1, cr1, {0}
    3354:	7c000000 	stcvc	0, cr0, [r0], {0}
    3358:	90080074 	andls	r0, r8, r4, ror r0
    335c:	01080074 	tsteq	r8, r4, ror r0
    3360:	0001ae5d 	andeq	sl, r1, sp, asr lr
    3364:	1a950e00 	bne	fe546b6c <SCS_BASE+0x1e538b6c>
    3368:	f2010000 	vhadd.s8	d0, d1, d0
    336c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3370:	00001740 	andeq	r1, r0, r0, asr #14
    3374:	0011ad11 	andseq	sl, r1, r1, lsl sp
    3378:	7ef40100 	cdpvc	1, 15, cr0, cr4, cr0, {0}
    337c:	00000000 	andeq	r0, r0, r0
    3380:	1a610112 	bne	18437d0 <__Stack_Size+0x18433d0>
    3384:	11010000 	tstne	r1, r0
    3388:	74900101 	ldrvc	r0, [r0], #257
    338c:	74a00800 	strtvc	r0, [r0], #2048
    3390:	5d010800 	stcpl	8, cr0, [r1]
    3394:	000001d5 	ldrdeq	r0, [r0], -r5
    3398:	001a9513 	andseq	r9, sl, r3, lsl r5
    339c:	01100100 	tsteq	r0, r0, lsl #2
    33a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    33a4:	14005001 	strne	r5, [r0], #-1
    33a8:	001a4c01 	andseq	r4, sl, r1, lsl #24
    33ac:	01d90100 	bicseq	r0, r9, r0, lsl #2
    33b0:	080074a0 	stmdaeq	r0, {r5, r7, sl, ip, sp, lr}
    33b4:	080074d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, ip, sp, lr}
    33b8:	00001753 	andeq	r1, r0, r3, asr r7
    33bc:	1af00115 	bne	ffc03818 <SCS_BASE+0x1fbf5818>
    33c0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    33c4:	0074d401 	rsbseq	sp, r4, r1, lsl #8
    33c8:	00750c08 	rsbseq	r0, r5, r8, lsl #24
    33cc:	00177e08 	andseq	r7, r7, r8, lsl #28
    33d0:	00023100 	andeq	r3, r2, r0, lsl #2
    33d4:	1a7a0e00 	bne	1e86bdc <__Stack_Size+0x1e867dc>
    33d8:	ad010000 	stcge	0, cr0, [r1]
    33dc:	0000003a 	andeq	r0, r0, sl, lsr r0
    33e0:	000017a9 	andeq	r1, r0, r9, lsr #15
    33e4:	001b020e 	andseq	r0, fp, lr, lsl #4
    33e8:	53ad0100 	undefined instruction 0x53ad0100
    33ec:	bc000000 	stclt	0, cr0, [r0], {0}
    33f0:	0f000017 	svceq	0x00000017
    33f4:	000014f8 	strdeq	r1, [r0], -r8
    33f8:	003aaf01 	eorseq	sl, sl, r1, lsl #30
    33fc:	17da0000 	ldrbne	r0, [sl, r0]
    3400:	14000000 	strne	r0, [r0]
    3404:	001a6f01 	andseq	r6, sl, r1, lsl #30
    3408:	01440100 	cmpeq	r4, r0, lsl #2
    340c:	0800750c 	stmdaeq	r0, {r2, r3, r8, sl, ip, sp, lr}
    3410:	08007524 	stmdaeq	r0, {r2, r5, r8, sl, ip, sp, lr}
    3414:	00001803 	andeq	r1, r0, r3, lsl #16
    3418:	0008b900 	andeq	fp, r8, r0, lsl #18
    341c:	63000200 	movwvs	r0, #512	; 0x200
    3420:	0400000d 	streq	r0, [r0], #-13
    3424:	00055101 	andeq	r5, r5, r1, lsl #2
    3428:	1ea20100 	fdvnes	f0, f2, f0
    342c:	03690000 	cmneq	r9, #0	; 0x0
    3430:	75240000 	strvc	r0, [r4]!
    3434:	78c80800 	stmiavc	r8, {fp}^
    3438:	0dc80800 	stcleq	8, cr0, [r8]
    343c:	04020000 	streq	r0, [r2]
    3440:	002dcb05 	eoreq	ip, sp, r5, lsl #22
    3444:	05020200 	streq	r0, [r2, #-512]
    3448:	000005d8 	ldrdeq	r0, [r0], -r8
    344c:	9d060102 	stflss	f0, [r6, #-8]
    3450:	03000006 	movweq	r0, #6	; 0x6
    3454:	00323375 	eorseq	r3, r2, r5, ror r3
    3458:	00452702 	subeq	r2, r5, r2, lsl #14
    345c:	04020000 	streq	r0, [r2]
    3460:	002e4507 	eoreq	r4, lr, r7, lsl #10
    3464:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3468:	000007db 	ldrdeq	r0, [r0], -fp
    346c:	00387503 	eorseq	r7, r8, r3, lsl #10
    3470:	005d2902 	subseq	r2, sp, r2, lsl #18
    3474:	01020000 	tsteq	r2, r0
    3478:	00069b08 	andeq	r9, r6, r8, lsl #22
    347c:	00450400 	subeq	r0, r5, r0, lsl #8
    3480:	01050000 	tsteq	r5, r0
    3484:	007e3902 	rsbseq	r3, lr, r2, lsl #18
    3488:	47060000 	strmi	r0, [r6, -r0]
    348c:	00000014 	andeq	r0, r0, r4, lsl r0
    3490:	54455307 	strbpl	r5, [r5], #-775
    3494:	08000100 	stmdaeq	r0, {r8}
    3498:	00001d9a 	muleq	r0, sl, sp
    349c:	00693902 	rsbeq	r3, r9, r2, lsl #18
    34a0:	94080000 	strls	r0, [r8]
    34a4:	0200001b 	andeq	r0, r0, #27	; 0x1b
    34a8:	00006939 	andeq	r6, r0, r9, lsr r9
    34ac:	02010500 	andeq	r0, r1, #0	; 0x0
    34b0:	0000a93b 	andeq	sl, r0, fp, lsr r9
    34b4:	04240600 	strteq	r0, [r4], #-1536
    34b8:	06000000 	streq	r0, [r0], -r0
    34bc:	0000066d 	andeq	r0, r0, sp, ror #12
    34c0:	ec080001 	stc	0, cr0, [r8], {1}
    34c4:	02000000 	andeq	r0, r0, #0	; 0x0
    34c8:	0000943b 	andeq	r9, r0, fp, lsr r4
    34cc:	02010500 	andeq	r0, r1, #0	; 0x0
    34d0:	0000c93e 	andeq	ip, r0, lr, lsr r9
    34d4:	00110600 	andseq	r0, r1, r0, lsl #12
    34d8:	06000000 	streq	r0, [r0], -r0
    34dc:	00000409 	andeq	r0, r0, r9, lsl #8
    34e0:	09080001 	stmdbeq	r8, {r0}
    34e4:	02000001 	andeq	r0, r0, #1	; 0x1
    34e8:	0000b43e 	andeq	fp, r0, lr, lsr r4
    34ec:	07040900 	streq	r0, [r4, -r0, lsl #18]
    34f0:	ab03280a 	blge	cd520 <__Stack_Size+0xcd120>
    34f4:	00017601 	andeq	r7, r1, r1, lsl #12
    34f8:	52430b00 	subpl	r0, r3, #0	; 0x0
    34fc:	01ac0300 	undefined instruction 0x01ac0300
    3500:	00000064 	andeq	r0, r0, r4, rrx
    3504:	0c002302 	stceq	3, cr2, [r0], {2}
    3508:	00001bf9 	strdeq	r1, [r0], -r9
    350c:	6401ad03 	strvs	sl, [r1], #-3331
    3510:	02000000 	andeq	r0, r0, #0	; 0x0
    3514:	430b0423 	movwmi	r0, #46115	; 0xb423
    3518:	03005249 	movweq	r5, #585	; 0x249
    351c:	006401ae 	rsbeq	r0, r4, lr, lsr #3
    3520:	23020000 	movwcs	r0, #8192	; 0x2000
    3524:	1cb80c08 	ldcne	12, cr0, [r8], #32
    3528:	af030000 	svcge	0x00030000
    352c:	00006401 	andeq	r6, r0, r1, lsl #8
    3530:	0c230200 	sfmeq	f0, 4, [r3]
    3534:	001b350c 	andseq	r3, fp, ip, lsl #10
    3538:	01b00300 	lslseq	r0, r0, #6
    353c:	00000064 	andeq	r0, r0, r4, rrx
    3540:	0c102302 	ldceq	3, cr2, [r0], {2}
    3544:	00001cda 	ldrdeq	r1, [r0], -sl
    3548:	6401b103 	strvs	fp, [r1], #-259
    354c:	02000000 	andeq	r0, r0, #0	; 0x0
    3550:	120c1423 	andne	r1, ip, #587202560	; 0x23000000
    3554:	0300001d 	movweq	r0, #29	; 0x1d
    3558:	006401b2 	strhteq	r0, [r4], #-18
    355c:	23020000 	movwcs	r0, #8192	; 0x2000
    3560:	1c0d0c18 	stcne	12, cr0, [sp], {24}
    3564:	b3030000 	movwlt	r0, #12288	; 0x3000
    3568:	00006401 	andeq	r6, r0, r1, lsl #8
    356c:	1c230200 	sfmne	f0, 4, [r3]
    3570:	001b9d0c 	andseq	r9, fp, ip, lsl #26
    3574:	01b40300 	undefined instruction 0x01b40300
    3578:	00000064 	andeq	r0, r0, r4, rrx
    357c:	0b202302 	bleq	80c18c <__Stack_Size+0x80bd8c>
    3580:	00525343 	subseq	r5, r2, r3, asr #6
    3584:	6401b503 	strvs	fp, [r1], #-1283
    3588:	02000000 	andeq	r0, r0, #0	; 0x0
    358c:	0d002423 	cfstrseq	mvf2, [r0, #-140]
    3590:	c51a0414 	ldrgt	r0, [sl, #-1044]
    3594:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3598:	00001df8 	strdeq	r1, [r0], -r8
    359c:	003a1b04 	eorseq	r1, sl, r4, lsl #22
    35a0:	23020000 	movwcs	r0, #8192	; 0x2000
    35a4:	1bfe0e00 	blne	fff86dac <SCS_BASE+0x1ff78dac>
    35a8:	1c040000 	stcne	0, cr0, [r4], {0}
    35ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    35b0:	0e042302 	cdpeq	3, 0, cr2, cr4, cr2, {0}
    35b4:	00001e61 	andeq	r1, r0, r1, ror #28
    35b8:	003a1d04 	eorseq	r1, sl, r4, lsl #26
    35bc:	23020000 	movwcs	r0, #8192	; 0x2000
    35c0:	1e140e08 	cdpne	14, 1, cr0, cr4, cr8, {0}
    35c4:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    35c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    35cc:	0e0c2302 	cdpeq	3, 0, cr2, cr12, cr2, {0}
    35d0:	00001d5a 	andeq	r1, r0, sl, asr sp
    35d4:	003a1f04 	eorseq	r1, sl, r4, lsl #30
    35d8:	23020000 	movwcs	r0, #8192	; 0x2000
    35dc:	c6080010 	undefined
    35e0:	0400001b 	streq	r0, [r0], #-27
    35e4:	00017620 	andeq	r7, r1, r0, lsr #12
    35e8:	93010f00 	movwls	r0, #7936	; 0x1f00
    35ec:	0100001d 	tsteq	r0, sp, lsl r0
    35f0:	7e0103de 	mcrvc	3, 0, r0, cr1, cr14, {6}
    35f4:	01000000 	tsteq	r0, r0
    35f8:	00000214 	andeq	r0, r0, r4, lsl r2
    35fc:	001d6b10 	andseq	r6, sp, r0, lsl fp
    3600:	03dd0100 	bicseq	r0, sp, #0	; 0x0
    3604:	00000053 	andeq	r0, r0, r3, asr r0
    3608:	706d7411 	rsbvc	r7, sp, r1, lsl r4
    360c:	03df0100 	bicseq	r0, pc, #0	; 0x0
    3610:	0000003a 	andeq	r0, r0, sl, lsr r0
    3614:	001cf112 	andseq	pc, ip, r2, lsl r1
    3618:	03e00100 	mvneq	r0, #0	; 0x0
    361c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3620:	0011ad12 	andseq	sl, r1, r2, lsl sp
    3624:	03e10100 	mvneq	r0, #0	; 0x0
    3628:	0000007e 	andeq	r0, r0, lr, ror r0
    362c:	29011300 	stmdbcs	r1, {r8, r9, ip}
    3630:	0100001c 	tsteq	r0, ip, lsl r0
    3634:	7524017d 	strvc	r0, [r4, #-381]!
    3638:	75640800 	strbvc	r0, [r4, #-2048]!
    363c:	5d010800 	stcpl	8, cr0, [r1]
    3640:	1dea0114 	stfnee	f0, [sl, #80]!
    3644:	a0010000 	andge	r0, r1, r0
    3648:	00756401 	rsbseq	r6, r5, r1, lsl #8
    364c:	00759808 	rsbseq	r9, r5, r8, lsl #16
    3650:	4c5d0108 	ldfmie	f0, [sp], {8}
    3654:	15000002 	strne	r0, [r0, #-2]
    3658:	00001e48 	andeq	r1, r0, r8, asr #28
    365c:	003a9f01 	eorseq	r9, sl, r1, lsl #30
    3660:	50010000 	andpl	r0, r1, r0
    3664:	34011600 	strcc	r1, [r1], #-1536
    3668:	0100001c 	tsteq	r0, ip, lsl r0
    366c:	00c901c7 	sbceq	r0, r9, r7, asr #3
    3670:	75980000 	ldrvc	r0, [r8]
    3674:	75c80800 	strbvc	r0, [r8, #2048]
    3678:	18220800 	stmdane	r2!, {fp}
    367c:	02f10000 	rscseq	r0, r1, #0	; 0x0
    3680:	1a170000 	bne	5c3688 <__Stack_Size+0x5c3288>
    3684:	0100001d 	tsteq	r0, sp, lsl r0
    3688:	000064c8 	andeq	r6, r0, r8, asr #9
    368c:	00184100 	andseq	r4, r8, r0, lsl #2
    3690:	11a61800 	undefined instruction 0x11a61800
    3694:	c9010000 	stmdbgt	r1, {}
    3698:	000000c9 	andeq	r0, r0, r9, asr #1
    369c:	001de018 	andseq	lr, sp, r8, lsl r0
    36a0:	7eca0100 	polvce	f0, f2, f0
    36a4:	19000000 	stmdbne	r0, {}
    36a8:	000001d0 	ldrdeq	r0, [r0], -r0
    36ac:	0800759c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    36b0:	000000c8 	andeq	r0, r0, r8, asr #1
    36b4:	02becf01 	adcseq	ip, lr, #4	; 0x4
    36b8:	e31a0000 	tst	sl, #0	; 0x0
    36bc:	1b000001 	blne	36c8 <__Stack_Size+0x32c8>
    36c0:	000000e0 	andeq	r0, r0, r0, ror #1
    36c4:	0001ef1c 	andeq	lr, r1, ip, lsl pc
    36c8:	01fb1d00 	mvnseq	r1, r0, lsl #26
    36cc:	52010000 	andpl	r0, r1, #0	; 0x0
    36d0:	0002071c 	andeq	r0, r2, ip, lsl r7
    36d4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    36d8:	000001d0 	ldrdeq	r0, [r0], -r0
    36dc:	080075b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, ip, sp, lr}
    36e0:	080075c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, sp, lr}
    36e4:	e31ad401 	tst	sl, #16777216	; 0x1000000
    36e8:	1f000001 	svcne	0x00000001
    36ec:	080075b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sl, ip, sp, lr}
    36f0:	080075c0 	stmdaeq	r0, {r6, r7, r8, sl, ip, sp, lr}
    36f4:	0001ef1c 	andeq	lr, r1, ip, lsl pc
    36f8:	01fb2000 	mvnseq	r2, r0
    36fc:	186c0000 	stmdane	ip!, {}^
    3700:	071c0000 	ldreq	r0, [ip, -r0]
    3704:	00000002 	andeq	r0, r0, r2
    3708:	01140000 	tsteq	r4, r0
    370c:	00001d3c 	andeq	r1, r0, ip, lsr sp
    3710:	c801ea01 	stmdagt	r1, {r0, r9, fp, sp, lr, pc}
    3714:	dc080075 	stcle	0, cr0, [r8], {117}
    3718:	01080075 	tsteq	r8, r5, ror r0
    371c:	0003235d 	andeq	r2, r3, sp, asr r3
    3720:	1d461500 	cfstr64ne	mvdx1, [r6]
    3724:	e9010000 	stmdb	r1, {}
    3728:	00000053 	andeq	r0, r0, r3, asr r0
    372c:	f8215001 	undefined instruction 0xf8215001
    3730:	01000014 	tsteq	r0, r4, lsl r0
    3734:	00003aeb 	andeq	r3, r0, fp, ror #21
    3738:	00530100 	subseq	r0, r3, r0, lsl #2
    373c:	1efc0122 	cdpne	1, 15, cr0, cr12, cr2, {1}
    3740:	07010000 	streq	r0, [r1, -r0]
    3744:	75dc0101 	ldrbvc	r0, [ip, #257]
    3748:	75e80800 	strbvc	r0, [r8, #2048]!
    374c:	5d010800 	stcpl	8, cr0, [r1]
    3750:	0000034a 	andeq	r0, r0, sl, asr #6
    3754:	00112623 	andseq	r2, r1, r3, lsr #12
    3758:	01060100 	tsteq	r6, r0, lsl #2
    375c:	000000a9 	andeq	r0, r0, r9, lsr #1
    3760:	22005001 	andcs	r5, r0, #1	; 0x1
    3764:	001c7201 	andseq	r7, ip, r1, lsl #4
    3768:	01200100 	teqeq	r0, r0, lsl #2
    376c:	0075e801 	rsbseq	lr, r5, r1, lsl #16
    3770:	0075fc08 	rsbseq	pc, r5, r8, lsl #24
    3774:	915d0108 	cmpls	sp, r8, lsl #2
    3778:	24000003 	strcs	r0, [r0], #-3
    377c:	00001d74 	andeq	r1, r0, r4, ror sp
    3780:	3a011f01 	bcc	4b38c <__Stack_Size+0x4af8c>
    3784:	7f000000 	svcvc	0x00000000
    3788:	23000018 	movwcs	r0, #24	; 0x18
    378c:	00001bd8 	ldrdeq	r1, [r0], -r8
    3790:	3a011f01 	bcc	4b39c <__Stack_Size+0x4af9c>
    3794:	01000000 	tsteq	r0, r0
    3798:	14f82551 	ldrbtne	r2, [r8], #1361
    379c:	21010000 	tstcs	r1, r0
    37a0:	00003a01 	andeq	r3, r0, r1, lsl #20
    37a4:	00189200 	andseq	r9, r8, r0, lsl #4
    37a8:	01220000 	teqeq	r2, r0
    37ac:	00001bbb 	strheq	r1, [r0], -fp
    37b0:	01013d01 	tsteq	r1, r1, lsl #26
    37b4:	080075fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
    37b8:	08007608 	stmdaeq	r0, {r3, r9, sl, ip, sp, lr}
    37bc:	03b85d01 	undefined instruction 0x03b85d01
    37c0:	26230000 	strtcs	r0, [r3], -r0
    37c4:	01000011 	tsteq	r0, r1, lsl r0
    37c8:	00a9013c 	adceq	r0, r9, ip, lsr r1
    37cc:	50010000 	andpl	r0, r1, r0
    37d0:	82012200 	andhi	r2, r1, #0	; 0x0
    37d4:	0100001d 	tsteq	r0, sp, lsl r0
    37d8:	08010150 	stmdaeq	r1, {r4, r6, r8}
    37dc:	1c080076 	stcne	0, cr0, [r8], {118}
    37e0:	01080076 	tsteq	r8, r6, ror r0
    37e4:	0003f15d 	andeq	pc, r3, sp, asr r1
    37e8:	1e502400 	cdpne	4, 5, cr2, cr0, cr0, {0}
    37ec:	4f010000 	svcmi	0x00010000
    37f0:	00003a01 	andeq	r3, r0, r1, lsl #20
    37f4:	0018b000 	andseq	fp, r8, r0
    37f8:	14f82500 	ldrbtne	r2, [r8], #1280
    37fc:	51010000 	tstpl	r1, r0
    3800:	00003a01 	andeq	r3, r0, r1, lsl #20
    3804:	0018c300 	andseq	ip, r8, r0, lsl #6
    3808:	01260000 	teqeq	r6, r0
    380c:	00001ca4 	andeq	r1, r0, r4, lsr #25
    3810:	01016e01 	tsteq	r1, r1, lsl #28
    3814:	00000053 	andeq	r0, r0, r3, asr r0
    3818:	0800761c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, sp, lr}
    381c:	0800762c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, sp, lr}
    3820:	01225d01 	teqeq	r2, r1, lsl #26
    3824:	00001eed 	andeq	r1, r0, sp, ror #29
    3828:	01018501 	tsteq	r1, r1, lsl #10
    382c:	0800762c 	stmdaeq	r0, {r2, r3, r5, r9, sl, ip, sp, lr}
    3830:	08007640 	stmdaeq	r0, {r6, r9, sl, ip, sp, lr}
    3834:	04425d01 	strbeq	r5, [r2], #-3329
    3838:	d5240000 	strle	r0, [r4]!
    383c:	0100001d 	tsteq	r0, sp, lsl r0
    3840:	003a0184 	eorseq	r0, sl, r4, lsl #3
    3844:	18e10000 	stmiane	r1!, {}^
    3848:	f8250000 	undefined instruction 0xf8250000
    384c:	01000014 	tsteq	r0, r4, lsl r0
    3850:	003a0186 	eorseq	r0, sl, r6, lsl #3
    3854:	18f40000 	ldmne	r4!, {}^
    3858:	22000000 	andcs	r0, r0, #0	; 0x0
    385c:	001ce101 	andseq	lr, ip, r1, lsl #2
    3860:	01a60100 	undefined instruction 0x01a60100
    3864:	00764001 	rsbseq	r4, r6, r1
    3868:	00765408 	rsbseq	r5, r6, r8, lsl #8
    386c:	7b5d0108 	blvc	1743c94 <__Stack_Size+0x1743894>
    3870:	24000004 	strcs	r0, [r0], #-4
    3874:	00001b3e 	andeq	r1, r0, lr, lsr fp
    3878:	3a01a501 	bcc	6cc84 <__Stack_Size+0x6c884>
    387c:	12000000 	andne	r0, r0, #0	; 0x0
    3880:	25000019 	strcs	r0, [r0, #-25]
    3884:	000014f8 	strdeq	r1, [r0], -r8
    3888:	3a01a701 	bcc	6d494 <__Stack_Size+0x6d094>
    388c:	25000000 	strcs	r0, [r0]
    3890:	00000019 	andeq	r0, r0, r9, lsl r0
    3894:	1f240122 	svcne	0x00240122
    3898:	c7010000 	strgt	r0, [r1, -r0]
    389c:	76540101 	ldrbvc	r0, [r4], -r1, lsl #2
    38a0:	76680800 	strbtvc	r0, [r8], -r0, lsl #16
    38a4:	5d010800 	stcpl	8, cr0, [r1]
    38a8:	000004b0 	strheq	r0, [r0], -r0
    38ac:	001b3e23 	andseq	r3, fp, r3, lsr #28
    38b0:	01c60100 	biceq	r0, r6, r0, lsl #2
    38b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    38b8:	f8275001 	undefined instruction 0xf8275001
    38bc:	01000014 	tsteq	r0, r4, lsl r0
    38c0:	003a01c8 	eorseq	r0, sl, r8, asr #3
    38c4:	53010000 	movwpl	r0, #4096	; 0x1000
    38c8:	24012200 	strcs	r2, [r1], #-512
    38cc:	0100001e 	tsteq	r0, lr, lsl r0
    38d0:	680101ea 	stmdavs	r1, {r1, r3, r5, r6, r7, r8}
    38d4:	84080076 	strhi	r0, [r8], #-118
    38d8:	01080076 	tsteq	r8, r6, ror r0
    38dc:	0004e55d 	andeq	lr, r4, sp, asr r5
    38e0:	1f0f2300 	svcne	0x000f2300
    38e4:	e9010000 	stmdb	r1, {}
    38e8:	00005301 	andeq	r5, r0, r1, lsl #6
    38ec:	23500100 	cmpcs	r0, #0	; 0x0
    38f0:	00001126 	andeq	r1, r0, r6, lsr #2
    38f4:	a901e901 	stmdbge	r1, {r0, r8, fp, sp, lr, pc}
    38f8:	01000000 	tsteq	r0, r0
    38fc:	01220051 	qsubeq	r0, r1, r2
    3900:	00001c88 	andeq	r1, r0, r8, lsl #25
    3904:	01020901 	tsteq	r2, r1, lsl #18
    3908:	08007684 	stmdaeq	r0, {r2, r7, r9, sl, ip, sp, lr}
    390c:	08007690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp, lr}
    3910:	050c5d01 	streq	r5, [ip, #-3329]
    3914:	b6230000 	strtlt	r0, [r3], -r0
    3918:	0100001d 	tsteq	r0, sp, lsl r0
    391c:	003a0208 	eorseq	r0, sl, r8, lsl #4
    3920:	50010000 	andpl	r0, r1, r0
    3924:	47012200 	strmi	r2, [r1, -r0, lsl #4]
    3928:	0100001b 	tsteq	r0, fp, lsl r0
    392c:	9001021e 	andls	r0, r1, lr, lsl r2
    3930:	a4080076 	strge	r0, [r8], #-118
    3934:	01080076 	tsteq	r8, r6, ror r0
    3938:	0005455d 	andeq	r4, r5, sp, asr r5
    393c:	1bb12400 	blne	fec4c944 <SCS_BASE+0x1ec3e944>
    3940:	1d010000 	stcne	0, cr0, [r1]
    3944:	00003a02 	andeq	r3, r0, r2, lsl #20
    3948:	00194300 	andseq	r4, r9, r0, lsl #6
    394c:	14f82500 	ldrbtne	r2, [r8], #1280
    3950:	1f010000 	svcne	0x00010000
    3954:	00003a02 	andeq	r3, r0, r2, lsl #20
    3958:	00195600 	andseq	r5, r9, r0, lsl #12
    395c:	01220000 	teqeq	r2, r0
    3960:	00001e71 	andeq	r1, r0, r1, ror lr
    3964:	01023d01 	tsteq	r2, r1, lsl #26
    3968:	080076a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, ip, sp, lr}
    396c:	080076c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip, sp, lr}
    3970:	056c5d01 	strbeq	r5, [ip, #-3329]!
    3974:	85230000 	strhi	r0, [r3]!
    3978:	0100001b 	tsteq	r0, fp, lsl r0
    397c:	0053023c 	subseq	r0, r3, ip, lsr r2
    3980:	50010000 	andpl	r0, r1, r0
    3984:	99012200 	stmdbls	r1, {r9, sp}
    3988:	0100001c 	tsteq	r0, ip, lsl r0
    398c:	c4010264 	strgt	r0, [r1], #-612
    3990:	d0080076 	andle	r0, r8, r6, ror r0
    3994:	01080076 	tsteq	r8, r6, ror r0
    3998:	0005935d 	andeq	r9, r5, sp, asr r3
    399c:	11262300 	teqne	r6, r0, lsl #6
    39a0:	63010000 	movwvs	r0, #4096	; 0x1000
    39a4:	0000a902 	andeq	sl, r0, r2, lsl #18
    39a8:	00500100 	subseq	r0, r0, r0, lsl #2
    39ac:	1da50122 	stfnes	f0, [r5, #136]!
    39b0:	7a010000 	bvc	439b8 <__Stack_Size+0x435b8>
    39b4:	76d00102 	ldrbvc	r0, [r0], r2, lsl #2
    39b8:	76e00800 	strbtvc	r0, [r0], r0, lsl #16
    39bc:	5d010800 	stcpl	8, cr0, [r1]
    39c0:	000005bc 	strheq	r0, [r0], -ip
    39c4:	001c4a24 	andseq	r4, ip, r4, lsr #20
    39c8:	02790100 	rsbseq	r0, r9, #0	; 0x0
    39cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    39d0:	00001974 	andeq	r1, r0, r4, ror r9
    39d4:	c4012200 	strgt	r2, [r1], #-512
    39d8:	0100001e 	tsteq	r0, lr, lsl r0
    39dc:	e001028d 	and	r0, r1, sp, lsl #5
    39e0:	ec080076 	stc	0, cr0, [r8], {118}
    39e4:	01080076 	tsteq	r8, r6, ror r0
    39e8:	0005e35d 	andeq	lr, r5, sp, asr r3
    39ec:	11262300 	teqne	r6, r0, lsl #6
    39f0:	8c010000 	stchi	0, cr0, [r1], {0}
    39f4:	0000a902 	andeq	sl, r0, r2, lsl #18
    39f8:	00500100 	subseq	r0, r0, r0, lsl #2
    39fc:	1e900122 	fmlnesp	f0, f0, f2
    3a00:	9d010000 	stcls	0, cr0, [r1]
    3a04:	76ec0102 	strbtvc	r0, [ip], r2, lsl #2
    3a08:	77a40800 	strvc	r0, [r4, r0, lsl #16]!
    3a0c:	5d010800 	stcpl	8, cr0, [r1]
    3a10:	00000644 	andeq	r0, r0, r4, asr #12
    3a14:	001e0924 	andseq	r0, lr, r4, lsr #18
    3a18:	029c0100 	addseq	r0, ip, #0	; 0x0
    3a1c:	00000644 	andeq	r0, r0, r4, asr #12
    3a20:	00001987 	andeq	r1, r0, r7, lsl #19
    3a24:	706d7428 	rsbvc	r7, sp, r8, lsr #8
    3a28:	029e0100 	addseq	r0, lr, #0	; 0x0
    3a2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3a30:	000019a5 	andeq	r1, r0, r5, lsr #19
    3a34:	001c8025 	andseq	r8, ip, r5, lsr #32
    3a38:	029e0100 	addseq	r0, lr, #0	; 0x0
    3a3c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3a40:	000019d9 	ldrdeq	r1, [r0], -r9
    3a44:	001cd012 	andseq	sp, ip, r2, lsl r0
    3a48:	029e0100 	addseq	r0, lr, #0	; 0x0
    3a4c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3a50:	001c1512 	andseq	r1, ip, r2, lsl r5
    3a54:	029e0100 	addseq	r0, lr, #0	; 0x0
    3a58:	0000003a 	andeq	r0, r0, sl, lsr r0
    3a5c:	c5042900 	strgt	r2, [r4, #-2304]
    3a60:	22000001 	andcs	r0, r0, #1	; 0x1
    3a64:	001be301 	andseq	lr, fp, r1, lsl #6
    3a68:	03010100 	movweq	r0, #4352	; 0x1100
    3a6c:	0077a401 	rsbseq	sl, r7, r1, lsl #8
    3a70:	0077c008 	rsbseq	ip, r7, r8
    3a74:	7f5d0108 	svcvc	0x005d0108
    3a78:	23000006 	movwcs	r0, #6	; 0x6
    3a7c:	00001f16 	andeq	r1, r0, r6, lsl pc
    3a80:	3a030001 	bcc	c3a8c <__Stack_Size+0xc368c>
    3a84:	01000000 	tsteq	r0, r0
    3a88:	11262350 	teqne	r6, r0, asr r3
    3a8c:	00010000 	andeq	r0, r1, r0
    3a90:	0000a903 	andeq	sl, r0, r3, lsl #18
    3a94:	00510100 	subseq	r0, r1, r0, lsl #2
    3a98:	1e310122 	rsfnesp	f0, f1, f2
    3a9c:	22010000 	andcs	r0, r1, #0	; 0x0
    3aa0:	77c00103 	strbvc	r0, [r0, r3, lsl #2]
    3aa4:	77dc0800 	ldrbvc	r0, [ip, r0, lsl #16]
    3aa8:	5d010800 	stcpl	8, cr0, [r1]
    3aac:	000006b4 	strheq	r0, [r0], -r4
    3ab0:	001ba223 	andseq	sl, fp, r3, lsr #4
    3ab4:	03210100 	teqeq	r1, #0	; 0x0
    3ab8:	0000003a 	andeq	r0, r0, sl, lsr r0
    3abc:	26235001 	strtcs	r5, [r3], -r1
    3ac0:	01000011 	tsteq	r0, r1, lsl r0
    3ac4:	00a90321 	adceq	r0, r9, r1, lsr #6
    3ac8:	51010000 	tstpl	r1, r0
    3acc:	fb012200 	blx	4c2d6 <__Stack_Size+0x4bed6>
    3ad0:	0100001c 	tsteq	r0, ip, lsl r0
    3ad4:	dc010344 	stcle	3, cr0, [r1], {68}
    3ad8:	f8080077 	undefined instruction 0xf8080077
    3adc:	01080077 	tsteq	r8, r7, ror r0
    3ae0:	0006e95d 	andeq	lr, r6, sp, asr r9
    3ae4:	1cc12300 	stclne	3, cr2, [r1], {0}
    3ae8:	43010000 	movwmi	r0, #4096	; 0x1000
    3aec:	00003a03 	andeq	r3, r0, r3, lsl #20
    3af0:	23500100 	cmpcs	r0, #0	; 0x0
    3af4:	00001126 	andeq	r1, r0, r6, lsr #2
    3af8:	a9034301 	stmdbge	r3, {r0, r8, r9, lr}
    3afc:	01000000 	tsteq	r0, r0
    3b00:	01220051 	qsubeq	r0, r1, r2
    3b04:	00001b6e 	andeq	r1, r0, lr, ror #22
    3b08:	01036401 	tsteq	r3, r1, lsl #8
    3b0c:	080077f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
    3b10:	08007814 	stmdaeq	r0, {r2, r4, fp, ip, sp, lr}
    3b14:	071e5d01 	ldreq	r5, [lr, -r1, lsl #26]
    3b18:	a2230000 	eorge	r0, r3, #0	; 0x0
    3b1c:	0100001b 	tsteq	r0, fp, lsl r0
    3b20:	003a0363 	eorseq	r0, sl, r3, ror #6
    3b24:	50010000 	andpl	r0, r1, r0
    3b28:	00112623 	andseq	r2, r1, r3, lsr #12
    3b2c:	03630100 	cmneq	r3, #0	; 0x0
    3b30:	000000a9 	andeq	r0, r0, r9, lsr #1
    3b34:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    3b38:	001c5b01 	andseq	r5, ip, r1, lsl #22
    3b3c:	03850100 	orreq	r0, r5, #0	; 0x0
    3b40:	00781401 	rsbseq	r1, r8, r1, lsl #8
    3b44:	00783008 	rsbseq	r3, r8, r8
    3b48:	535d0108 	cmppl	sp, #2	; 0x2
    3b4c:	23000007 	movwcs	r0, #7	; 0x7
    3b50:	00001cc1 	andeq	r1, r0, r1, asr #25
    3b54:	3a038401 	bcc	e4b60 <__Stack_Size+0xe4760>
    3b58:	01000000 	tsteq	r0, r0
    3b5c:	11262350 	teqne	r6, r0, asr r3
    3b60:	84010000 	strhi	r0, [r1]
    3b64:	0000a903 	andeq	sl, r0, r3, lsl #18
    3b68:	00510100 	subseq	r0, r1, r0, lsl #2
    3b6c:	1d290122 	stfnes	f0, [r9, #-136]!
    3b70:	9d010000 	stcls	0, cr0, [r1]
    3b74:	78300103 	ldmdavc	r0!, {r0, r1, r8}
    3b78:	783c0800 	ldmdavc	ip!, {fp}
    3b7c:	5d010800 	stcpl	8, cr0, [r1]
    3b80:	0000077a 	andeq	r0, r0, sl, ror r7
    3b84:	00112623 	andseq	r2, r1, r3, lsr #12
    3b88:	039c0100 	orrseq	r0, ip, #0	; 0x0
    3b8c:	000000a9 	andeq	r0, r0, r9, lsr #1
    3b90:	22005001 	andcs	r5, r0, #1	; 0x1
    3b94:	001ed201 	andseq	sp, lr, r1, lsl #4
    3b98:	03ad0100 	undefined instruction 0x03ad0100
    3b9c:	00783c01 	rsbseq	r3, r8, r1, lsl #24
    3ba0:	00784808 	rsbseq	r4, r8, r8, lsl #16
    3ba4:	a15d0108 	cmpge	sp, r8, lsl #2
    3ba8:	23000007 	movwcs	r0, #7	; 0x7
    3bac:	00001126 	andeq	r1, r0, r6, lsr #2
    3bb0:	a903ac01 	stmdbge	r3, {r0, sl, fp, sp, pc}
    3bb4:	01000000 	tsteq	r0, r0
    3bb8:	01220050 	qsubeq	r0, r0, r2
    3bbc:	00001c1b 	andeq	r1, r0, fp, lsl ip
    3bc0:	0103c201 	tsteq	r3, r1, lsl #4
    3bc4:	08007848 	stmdaeq	r0, {r3, r6, fp, ip, sp, lr}
    3bc8:	08007854 	stmdaeq	r0, {r2, r4, r6, fp, ip, sp, lr}
    3bcc:	07c85d01 	strbeq	r5, [r8, r1, lsl #26]
    3bd0:	07230000 	streq	r0, [r3, -r0]!
    3bd4:	0100001f 	tsteq	r0, pc, lsl r0
    3bd8:	005303c1 	subseq	r0, r3, r1, asr #7
    3bdc:	50010000 	andpl	r0, r1, r0
    3be0:	01d02a00 	bicseq	r2, r0, r0, lsl #20
    3be4:	78540000 	ldmdavc	r4, {}^
    3be8:	78980800 	ldmvc	r8, {fp}
    3bec:	5d010800 	stcpl	8, cr0, [r1]
    3bf0:	000007fc 	strdeq	r0, [r0], -ip
    3bf4:	0001e32b 	andeq	lr, r1, fp, lsr #6
    3bf8:	0019f700 	andseq	pc, r9, r0, lsl #14
    3bfc:	01ef2000 	mvneq	r2, r0
    3c00:	1a0a0000 	bne	283c08 <__Stack_Size+0x283808>
    3c04:	fb200000 	blx	803c0e <__Stack_Size+0x80380e>
    3c08:	33000001 	movwcc	r0, #1	; 0x1
    3c0c:	1c00001a 	stcne	0, cr0, [r0], {26}
    3c10:	00000207 	andeq	r0, r0, r7, lsl #4
    3c14:	c7012c00 	strgt	r2, [r1, -r0, lsl #24]
    3c18:	0100001d 	tsteq	r0, sp, lsl r0
    3c1c:	98010411 	stmdals	r1, {r0, r4, sl}
    3c20:	a8080078 	stmdage	r8, {r3, r4, r5, r6}
    3c24:	01080078 	tsteq	r8, r8, ror r0
    3c28:	8d012d5d 	stchi	13, cr2, [r1, #-372]
    3c2c:	0100001b 	tsteq	r0, fp, lsl r0
    3c30:	89010425 	stmdbhi	r1, {r0, r2, r5, sl}
    3c34:	a8000000 	stmdage	r0, {}
    3c38:	bc080078 	stclt	0, cr0, [r8], {120}
    3c3c:	01080078 	tsteq	r8, r8, ror r0
    3c40:	0008495d 	andeq	r4, r8, sp, asr r9
    3c44:	1f0f2400 	svcne	0x000f2400
    3c48:	24010000 	strcs	r0, [r1]
    3c4c:	00005304 	andeq	r5, r0, r4, lsl #6
    3c50:	001a5c00 	andseq	r5, sl, r0, lsl #24
    3c54:	11ad1200 	undefined instruction 0x11ad1200
    3c58:	26010000 	strcs	r0, [r1], -r0
    3c5c:	00008904 	andeq	r8, r0, r4, lsl #18
    3c60:	01220000 	teqeq	r2, r0
    3c64:	00001b58 	andeq	r1, r0, r8, asr fp
    3c68:	01044801 	tsteq	r4, r1, lsl #16
    3c6c:	080078bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, sp, lr}
    3c70:	080078c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, sp, lr}
    3c74:	08705d01 	ldmdaeq	r0!, {r0, r8, sl, fp, ip, lr}^
    3c78:	0f230000 	svceq	0x00230000
    3c7c:	0100001f 	tsteq	r0, pc, lsl r0
    3c80:	00530447 	subseq	r0, r3, r7, asr #8
    3c84:	50010000 	andpl	r0, r1, r0
    3c88:	005d2e00 	subseq	r2, sp, r0, lsl #28
    3c8c:	08800000 	stmeq	r0, {}
    3c90:	d42f0000 	strtle	r0, [pc], #0	; 3c98 <__Stack_Size+0x3898>
    3c94:	0f000000 	svceq	0x00000000
    3c98:	1e7f2100 	rpwnee	f2, f7, f0
    3c9c:	6f010000 	svcvs	0x00010000
    3ca0:	00000891 	muleq	r0, r1, r8
    3ca4:	8b740305 	blhi	1d048c0 <__Stack_Size+0x1d044c0>
    3ca8:	70300800 	eorsvc	r0, r0, r0, lsl #16
    3cac:	2e000008 	cdpcs	0, 0, cr0, cr0, cr8, {0}
    3cb0:	0000005d 	andeq	r0, r0, sp, asr r0
    3cb4:	000008a6 	andeq	r0, r0, r6, lsr #17
    3cb8:	0000d42f 	andeq	sp, r0, pc, lsr #8
    3cbc:	21000300 	tstcs	r0, r0, lsl #6
    3cc0:	00001f34 	andeq	r1, r0, r4, lsr pc
    3cc4:	08b77001 	ldmeq	r7!, {r0, ip, sp, lr}
    3cc8:	03050000 	movweq	r0, #20480	; 0x5000
    3ccc:	08008b84 	stmdaeq	r0, {r2, r7, r8, r9, fp, pc}
    3cd0:	00089630 	andeq	r9, r8, r0, lsr r6
    3cd4:	01eb0000 	mvneq	r0, r0
    3cd8:	00020000 	andeq	r0, r2, r0
    3cdc:	00000ffe 	strdeq	r0, [r0], -lr
    3ce0:	05510104 	ldrbeq	r0, [r1, #-260]
    3ce4:	90010000 	andls	r0, r1, r0
    3ce8:	6900001f 	stmdbvs	r0, {r0, r1, r2, r3, r4}
    3cec:	c8000003 	stmdagt	r0, {r0, r1}
    3cf0:	6c080078 	stcvs	0, cr0, [r8], {120}
    3cf4:	80080079 	andhi	r0, r8, r9, ror r0
    3cf8:	0200000f 	andeq	r0, r0, #15	; 0xf
    3cfc:	2dcb0504 	cfstr64cs	mvdx0, [fp, #16]
    3d00:	02020000 	andeq	r0, r2, #0	; 0x0
    3d04:	0005d805 	andeq	sp, r5, r5, lsl #16
    3d08:	06010200 	streq	r0, [r1], -r0, lsl #4
    3d0c:	0000069d 	muleq	r0, sp, r6
    3d10:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    3d14:	45270200 	strmi	r0, [r7, #-512]!
    3d18:	02000000 	andeq	r0, r0, #0	; 0x0
    3d1c:	2e450704 	cdpcs	7, 4, cr0, cr5, cr4, {0}
    3d20:	02020000 	andeq	r0, r2, #0	; 0x0
    3d24:	0007db07 	andeq	sp, r7, r7, lsl #22
    3d28:	38750300 	ldmdacc	r5!, {r8, r9}^
    3d2c:	5d290200 	sfmpl	f0, 4, [r9]
    3d30:	02000000 	andeq	r0, r0, #0	; 0x0
    3d34:	069b0801 	ldreq	r0, [fp], r1, lsl #16
    3d38:	45040000 	strmi	r0, [r4]
    3d3c:	05000000 	streq	r0, [r0]
    3d40:	00000064 	andeq	r0, r0, r4, rrx
    3d44:	39020106 	stmdbcc	r2, {r1, r2, r8}
    3d48:	00000083 	andeq	r0, r0, r3, lsl #1
    3d4c:	00144707 	andseq	r4, r4, r7, lsl #14
    3d50:	53080000 	movwpl	r0, #32768	; 0x8000
    3d54:	01005445 	tsteq	r0, r5, asr #8
    3d58:	1d9a0900 	ldcne	9, cr0, [sl]
    3d5c:	39020000 	stmdbcc	r2, {}
    3d60:	0000006e 	andeq	r0, r0, lr, rrx
    3d64:	3b020106 	blcc	84184 <__Stack_Size+0x83d84>
    3d68:	000000a3 	andeq	r0, r0, r3, lsr #1
    3d6c:	00042407 	andeq	r2, r4, r7, lsl #8
    3d70:	6d070000 	stcvs	0, cr0, [r7]
    3d74:	01000006 	tsteq	r0, r6
    3d78:	00ec0900 	rsceq	r0, ip, r0, lsl #18
    3d7c:	3b020000 	blcc	83d84 <__Stack_Size+0x83984>
    3d80:	0000008e 	andeq	r0, r0, lr, lsl #1
    3d84:	0b07040a 	bleq	1c4db4 <__Stack_Size+0x1c49b4>
    3d88:	02030310 	andeq	r0, r3, #1073741824	; 0x40000000
    3d8c:	000000f7 	strdeq	r0, [r0], -r7
    3d90:	001fb60c 	andseq	fp, pc, ip, lsl #12
    3d94:	02040300 	andeq	r0, r4, #0	; 0x0
    3d98:	00000064 	andeq	r0, r0, r4, rrx
    3d9c:	0c002302 	stceq	3, cr2, [r0], {2}
    3da0:	00001ff6 	strdeq	r1, [r0], -r6
    3da4:	64020503 	strvs	r0, [r2], #-1283
    3da8:	02000000 	andeq	r0, r0, #0	; 0x0
    3dac:	560d0423 	strpl	r0, [sp], -r3, lsr #8
    3db0:	03004c41 	movweq	r4, #3137	; 0xc41
    3db4:	00640206 	rsbeq	r0, r4, r6, lsl #4
    3db8:	23020000 	movwcs	r0, #8192	; 0x2000
    3dbc:	1f8a0c08 	svcne	0x008a0c08
    3dc0:	07030000 	streq	r0, [r3, -r0]
    3dc4:	00006902 	andeq	r6, r0, r2, lsl #18
    3dc8:	0c230200 	sfmeq	f0, 4, [r3]
    3dcc:	de010e00 	cdple	14, 0, cr0, cr1, cr0, {0}
    3dd0:	0100001f 	tsteq	r0, pc, lsl r0
    3dd4:	78c8012c 	stmiavc	r8, {r2, r3, r5, r8}^
    3dd8:	78e40800 	stmiavc	r4!, {fp}^
    3ddc:	5d010800 	stcpl	8, cr0, [r1]
    3de0:	0000011c 	andeq	r0, r0, ip, lsl r1
    3de4:	001ffb0f 	andseq	pc, pc, pc, lsl #22
    3de8:	3a2b0100 	bcc	ac41f0 <__Stack_Size+0xac3df0>
    3dec:	01000000 	tsteq	r0, r0
    3df0:	010e0050 	qaddeq	r0, r0, lr
    3df4:	00001f55 	andeq	r1, r0, r5, asr pc
    3df8:	e4014301 	str	r4, [r1], #-769
    3dfc:	f0080078 	undefined instruction 0xf0080078
    3e00:	01080078 	tsteq	r8, r8, ror r0
    3e04:	0001415d 	andeq	r4, r1, sp, asr r1
    3e08:	1f600f00 	svcne	0x00600f00
    3e0c:	42010000 	andmi	r0, r1, #0	; 0x0
    3e10:	0000003a 	andeq	r0, r0, sl, lsr r0
    3e14:	0e005001 	cdpeq	0, 0, cr5, cr0, cr1, {0}
    3e18:	001fbb01 	andseq	fp, pc, r1, lsl #22
    3e1c:	01560100 	cmpeq	r6, r0, lsl #2
    3e20:	080078f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, ip, sp, lr}
    3e24:	0800791c 	stmdaeq	r0, {r2, r3, r4, r8, fp, ip, sp, lr}
    3e28:	01665d01 	cmneq	r6, r1, lsl #26
    3e2c:	ce0f0000 	cdpgt	0, 0, cr0, cr15, cr0, {0}
    3e30:	0100001f 	tsteq	r0, pc, lsl r0
    3e34:	00003a55 	andeq	r3, r0, r5, asr sl
    3e38:	00500100 	subseq	r0, r0, r0, lsl #2
    3e3c:	200d010e 	andcs	r0, sp, lr, lsl #2
    3e40:	71010000 	tstvc	r1, r0
    3e44:	00791c01 	rsbseq	r1, r9, r1, lsl #24
    3e48:	00793808 	rsbseq	r3, r9, r8, lsl #16
    3e4c:	8b5d0108 	blhi	1744274 <__Stack_Size+0x1743e74>
    3e50:	0f000001 	svceq	0x00000001
    3e54:	00001126 	andeq	r1, r0, r6, lsr #2
    3e58:	00a37001 	adceq	r7, r3, r1
    3e5c:	50010000 	andpl	r0, r1, r0
    3e60:	42011000 	andmi	r1, r1, #0	; 0x0
    3e64:	0100001f 	tsteq	r0, pc, lsl r0
    3e68:	003a0187 	eorseq	r0, sl, r7, lsl #3
    3e6c:	79380000 	ldmdbvc	r8!, {}
    3e70:	79440800 	stmdbvc	r4, {fp}^
    3e74:	5d010800 	stcpl	8, cr0, [r1]
    3e78:	1f670111 	svcne	0x00670111
    3e7c:	97010000 	strls	r0, [r1, -r0]
    3e80:	00008301 	andeq	r8, r0, r1, lsl #6
    3e84:	00794400 	rsbseq	r4, r9, r0, lsl #8
    3e88:	00796c08 	rsbseq	r6, r9, r8, lsl #24
    3e8c:	125d0108 	subsne	r0, sp, #2	; 0x2
    3e90:	00001f7d 	andeq	r1, r0, sp, ror pc
    3e94:	00539601 	subseq	r9, r3, r1, lsl #12
    3e98:	1a6f0000 	bne	1bc3ea0 <__Stack_Size+0x1bc3aa0>
    3e9c:	f1130000 	undefined instruction 0xf1130000
    3ea0:	0100001c 	tsteq	r0, ip, lsl r0
    3ea4:	00003a98 	muleq	r0, r8, sl
    3ea8:	001a8d00 	andseq	r8, sl, r0, lsl #26
    3eac:	6d741400 	cfldrdvs	mvd1, [r4]
    3eb0:	98010070 	stmdals	r1, {r4, r5, r6}
    3eb4:	0000003a 	andeq	r0, r0, sl, lsr r0
    3eb8:	0011ad15 	andseq	sl, r1, r5, lsl sp
    3ebc:	83990100 	orrshi	r0, r9, #0	; 0x0
    3ec0:	00000000 	andeq	r0, r0, r0
    3ec4:	00214500 	eoreq	r4, r1, r0, lsl #10
    3ec8:	24000200 	strcs	r0, [r0], #-512
    3ecc:	04000011 	streq	r0, [r0], #-17
    3ed0:	00055101 	andeq	r5, r5, r1, lsl #2
    3ed4:	23850100 	orrcs	r0, r5, #0	; 0x0
    3ed8:	03690000 	cmneq	r9, #0	; 0x0
    3edc:	796c0000 	stmdbvc	ip!, {}^
    3ee0:	86f40800 	ldrbthi	r0, [r4], r0, lsl #16
    3ee4:	103d0800 	eorsne	r0, sp, r0, lsl #16
    3ee8:	04020000 	streq	r0, [r2]
    3eec:	002dcb05 	eoreq	ip, sp, r5, lsl #22
    3ef0:	05020200 	streq	r0, [r2, #-512]
    3ef4:	000005d8 	ldrdeq	r0, [r0], -r8
    3ef8:	9d060102 	stflss	f0, [r6, #-8]
    3efc:	02000006 	andeq	r0, r0, #6	; 0x6
    3f00:	2e450704 	cdpcs	7, 4, cr0, cr5, cr4, {0}
    3f04:	75030000 	strvc	r0, [r3]
    3f08:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    3f0c:	00004c28 	andeq	r4, r0, r8, lsr #24
    3f10:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3f14:	000007db 	ldrdeq	r0, [r0], -fp
    3f18:	00387503 	eorseq	r7, r8, r3, lsl #10
    3f1c:	005d2902 	subseq	r2, sp, r2, lsl #18
    3f20:	01020000 	tsteq	r2, r0
    3f24:	00069b08 	andeq	r9, r6, r8, lsl #22
    3f28:	004c0400 	subeq	r0, ip, r0, lsl #8
    3f2c:	01050000 	tsteq	r5, r0
    3f30:	007e3902 	rsbseq	r3, lr, r2, lsl #18
    3f34:	47060000 	strmi	r0, [r6, -r0]
    3f38:	00000014 	andeq	r0, r0, r4, lsl r0
    3f3c:	54455307 	strbpl	r5, [r5], #-775
    3f40:	08000100 	stmdaeq	r0, {r8}
    3f44:	00001d9a 	muleq	r0, sl, sp
    3f48:	00693902 	rsbeq	r3, r9, r2, lsl #18
    3f4c:	94080000 	strls	r0, [r8]
    3f50:	0200001b 	andeq	r0, r0, #27	; 0x1b
    3f54:	00006939 	andeq	r6, r0, r9, lsr r9
    3f58:	02010500 	andeq	r0, r1, #0	; 0x0
    3f5c:	0000a93b 	andeq	sl, r0, fp, lsr r9
    3f60:	04240600 	strteq	r0, [r4], #-1536
    3f64:	06000000 	streq	r0, [r0], -r0
    3f68:	0000066d 	andeq	r0, r0, sp, ror #12
    3f6c:	ec080001 	stc	0, cr0, [r8], {1}
    3f70:	02000000 	andeq	r0, r0, #0	; 0x0
    3f74:	0000943b 	andeq	r9, r0, fp, lsr r4
    3f78:	07040900 	streq	r0, [r4, -r0, lsl #18]
    3f7c:	0c03500a 	stceq	0, cr5, [r3], {10}
    3f80:	00031802 	andeq	r1, r3, r2, lsl #16
    3f84:	52430b00 	subpl	r0, r3, #0	; 0x0
    3f88:	0d030031 	stceq	0, cr0, [r3, #-196]
    3f8c:	00006402 	andeq	r6, r0, r2, lsl #8
    3f90:	00230200 	eoreq	r0, r3, r0, lsl #4
    3f94:	0005920c 	andeq	r9, r5, ip, lsl #4
    3f98:	020e0300 	andeq	r0, lr, #0	; 0x0
    3f9c:	00000041 	andeq	r0, r0, r1, asr #32
    3fa0:	0b022302 	bleq	8cbb0 <__Stack_Size+0x8c7b0>
    3fa4:	00325243 	eorseq	r5, r2, r3, asr #4
    3fa8:	64020f03 	strvs	r0, [r2], #-3843
    3fac:	02000000 	andeq	r0, r0, #0	; 0x0
    3fb0:	9c0c0423 	cfstrsls	mvf0, [ip], {35}
    3fb4:	03000005 	movweq	r0, #5	; 0x5
    3fb8:	00410210 	subeq	r0, r1, r0, lsl r2
    3fbc:	23020000 	movwcs	r0, #8192	; 0x2000
    3fc0:	046b0c06 	strbteq	r0, [fp], #-3078
    3fc4:	11030000 	tstne	r3, r0
    3fc8:	00006402 	andeq	r6, r0, r2, lsl #8
    3fcc:	08230200 	stmdaeq	r3!, {r9}
    3fd0:	0005a60c 	andeq	sl, r5, ip, lsl #12
    3fd4:	02120300 	andseq	r0, r2, #0	; 0x0
    3fd8:	00000041 	andeq	r0, r0, r1, asr #32
    3fdc:	0c0a2302 	stceq	3, cr2, [sl], {2}
    3fe0:	0000032c 	andeq	r0, r0, ip, lsr #6
    3fe4:	64021303 	strvs	r1, [r2], #-771
    3fe8:	02000000 	andeq	r0, r0, #0	; 0x0
    3fec:	b00c0c23 	andlt	r0, ip, r3, lsr #24
    3ff0:	03000005 	movweq	r0, #5	; 0x5
    3ff4:	00410214 	subeq	r0, r1, r4, lsl r2
    3ff8:	23020000 	movwcs	r0, #8192	; 0x2000
    3ffc:	52530b0e 	subspl	r0, r3, #14336	; 0x3800
    4000:	02150300 	andseq	r0, r5, #0	; 0x0
    4004:	00000064 	andeq	r0, r0, r4, rrx
    4008:	0c102302 	ldceq	3, cr2, [r0], {2}
    400c:	000005ba 	strheq	r0, [r0], -sl
    4010:	41021603 	tstmi	r2, r3, lsl #12
    4014:	02000000 	andeq	r0, r0, #0	; 0x0
    4018:	450b1223 	strmi	r1, [fp, #-547]
    401c:	03005247 	movweq	r5, #583	; 0x247
    4020:	00640217 	rsbeq	r0, r4, r7, lsl r2
    4024:	23020000 	movwcs	r0, #8192	; 0x2000
    4028:	05c40c14 	strbeq	r0, [r4, #3092]
    402c:	18030000 	stmdane	r3, {}
    4030:	00004102 	andeq	r4, r0, r2, lsl #2
    4034:	16230200 	strtne	r0, [r3], -r0, lsl #4
    4038:	0002580c 	andeq	r5, r2, ip, lsl #16
    403c:	02190300 	andseq	r0, r9, #0	; 0x0
    4040:	00000064 	andeq	r0, r0, r4, rrx
    4044:	0c182302 	ldceq	3, cr2, [r8], {2}
    4048:	000005ce 	andeq	r0, r0, lr, asr #11
    404c:	41021a03 	tstmi	r2, r3, lsl #20
    4050:	02000000 	andeq	r0, r0, #0	; 0x0
    4054:	5e0c1a23 	fmacspl	s2, s24, s7
    4058:	03000002 	movweq	r0, #2	; 0x2
    405c:	0064021b 	rsbeq	r0, r4, fp, lsl r2
    4060:	23020000 	movwcs	r0, #8192	; 0x2000
    4064:	08320c1c 	ldmdaeq	r2!, {r2, r3, r4, sl, fp}
    4068:	1c030000 	stcne	0, cr0, [r3], {0}
    406c:	00004102 	andeq	r4, r0, r2, lsl #2
    4070:	1e230200 	cdpne	2, 2, cr0, cr3, cr0, {0}
    4074:	0003ef0c 	andeq	lr, r3, ip, lsl #30
    4078:	021d0300 	andseq	r0, sp, #0	; 0x0
    407c:	00000064 	andeq	r0, r0, r4, rrx
    4080:	0c202302 	stceq	3, cr2, [r0], #-8
    4084:	000005e2 	andeq	r0, r0, r2, ror #11
    4088:	41021e03 	tstmi	r2, r3, lsl #28
    408c:	02000000 	andeq	r0, r0, #0	; 0x0
    4090:	430b2223 	movwmi	r2, #45603	; 0xb223
    4094:	0300544e 	movweq	r5, #1102	; 0x44e
    4098:	0064021f 	rsbeq	r0, r4, pc, lsl r2
    409c:	23020000 	movwcs	r0, #8192	; 0x2000
    40a0:	05ec0c24 	strbeq	r0, [ip, #3108]!
    40a4:	20030000 	andcs	r0, r3, r0
    40a8:	00004102 	andeq	r4, r0, r2, lsl #2
    40ac:	26230200 	strtcs	r0, [r3], -r0, lsl #4
    40b0:	4353500b 	cmpmi	r3, #11	; 0xb
    40b4:	02210300 	eoreq	r0, r1, #0	; 0x0
    40b8:	00000064 	andeq	r0, r0, r4, rrx
    40bc:	0c282302 	stceq	3, cr2, [r8], #-8
    40c0:	000006e6 	andeq	r0, r0, r6, ror #13
    40c4:	41022203 	tstmi	r2, r3, lsl #4
    40c8:	02000000 	andeq	r0, r0, #0	; 0x0
    40cc:	410b2a23 	tstmi	fp, r3, lsr #20
    40d0:	03005252 	movweq	r5, #594	; 0x252
    40d4:	00640223 	rsbeq	r0, r4, r3, lsr #4
    40d8:	23020000 	movwcs	r0, #8192	; 0x2000
    40dc:	06f10c2c 	ldrbteq	r0, [r1], ip, lsr #24
    40e0:	24030000 	strcs	r0, [r3]
    40e4:	00004102 	andeq	r4, r0, r2, lsl #2
    40e8:	2e230200 	cdpcs	2, 2, cr0, cr3, cr0, {0}
    40ec:	5243520b 	subpl	r5, r3, #-1342177280	; 0xb0000000
    40f0:	02250300 	eoreq	r0, r5, #0	; 0x0
    40f4:	00000064 	andeq	r0, r0, r4, rrx
    40f8:	0c302302 	ldceq	3, cr2, [r0], #-8
    40fc:	000006fc 	strdeq	r0, [r0], -ip
    4100:	41022603 	tstmi	r2, r3, lsl #12
    4104:	02000000 	andeq	r0, r0, #0	; 0x0
    4108:	440c3223 	strmi	r3, [ip], #-547
    410c:	03000002 	movweq	r0, #2	; 0x2
    4110:	00640227 	rsbeq	r0, r4, r7, lsr #4
    4114:	23020000 	movwcs	r0, #8192	; 0x2000
    4118:	07070c34 	smladxeq	r7, r4, ip, r0
    411c:	28030000 	stmdacs	r3, {}
    4120:	00004102 	andeq	r4, r0, r2, lsl #2
    4124:	36230200 	strtcc	r0, [r3], -r0, lsl #4
    4128:	0002490c 	andeq	r4, r2, ip, lsl #18
    412c:	02290300 	eoreq	r0, r9, #0	; 0x0
    4130:	00000064 	andeq	r0, r0, r4, rrx
    4134:	0c382302 	ldceq	3, cr2, [r8], #-8
    4138:	00000712 	andeq	r0, r0, r2, lsl r7
    413c:	41022a03 	tstmi	r2, r3, lsl #20
    4140:	02000000 	andeq	r0, r0, #0	; 0x0
    4144:	4e0c3a23 	fmacsmi	s6, s24, s7
    4148:	03000002 	movweq	r0, #2	; 0x2
    414c:	0064022b 	rsbeq	r0, r4, fp, lsr #4
    4150:	23020000 	movwcs	r0, #8192	; 0x2000
    4154:	071d0c3c 	undefined
    4158:	2c030000 	stccs	0, cr0, [r3], {0}
    415c:	00004102 	andeq	r4, r0, r2, lsl #2
    4160:	3e230200 	cdpcc	2, 2, cr0, cr3, cr0, {0}
    4164:	0002530c 	andeq	r5, r2, ip, lsl #6
    4168:	022d0300 	eoreq	r0, sp, #0	; 0x0
    416c:	00000064 	andeq	r0, r0, r4, rrx
    4170:	0c402302 	mcrreq	3, 0, r2, r0, cr2
    4174:	00000728 	andeq	r0, r0, r8, lsr #14
    4178:	41022e03 	tstmi	r2, r3, lsl #28
    417c:	02000000 	andeq	r0, r0, #0	; 0x0
    4180:	1e0c4223 	cdpne	2, 0, cr4, cr12, cr3, {1}
    4184:	03000002 	movweq	r0, #2	; 0x2
    4188:	0064022f 	rsbeq	r0, r4, pc, lsr #4
    418c:	23020000 	movwcs	r0, #8192	; 0x2000
    4190:	07330c44 	ldreq	r0, [r3, -r4, asr #24]!
    4194:	30030000 	andcc	r0, r3, r0
    4198:	00004102 	andeq	r4, r0, r2, lsl #2
    419c:	46230200 	strtmi	r0, [r3], -r0, lsl #4
    41a0:	5243440b 	subpl	r4, r3, #184549376	; 0xb000000
    41a4:	02310300 	eorseq	r0, r1, #0	; 0x0
    41a8:	00000064 	andeq	r0, r0, r4, rrx
    41ac:	0c482302 	mcrreq	3, 0, r2, r8, cr2
    41b0:	0000073e 	andeq	r0, r0, lr, lsr r7
    41b4:	41023203 	tstmi	r2, r3, lsl #4
    41b8:	02000000 	andeq	r0, r0, #0	; 0x0
    41bc:	060c4a23 	streq	r4, [ip], -r3, lsr #20
    41c0:	03000006 	movweq	r0, #6	; 0x6
    41c4:	00640233 	rsbeq	r0, r4, r3, lsr r2
    41c8:	23020000 	movwcs	r0, #8192	; 0x2000
    41cc:	07490c4c 	strbeq	r0, [r9, -ip, asr #24]
    41d0:	34030000 	strcc	r0, [r3]
    41d4:	00004102 	andeq	r4, r0, r2, lsl #2
    41d8:	4e230200 	cdpmi	2, 2, cr0, cr3, cr0, {0}
    41dc:	22940d00 	addscs	r0, r4, #0	; 0x0
    41e0:	35030000 	strcc	r0, [r3]
    41e4:	0000b702 	andeq	fp, r0, r2, lsl #14
    41e8:	040a0e00 	streq	r0, [sl], #-3584
    41ec:	0003731c 	andeq	r7, r3, ip, lsl r3
    41f0:	00210f00 	eoreq	r0, r1, r0, lsl #30
    41f4:	1d040000 	stcne	0, cr0, [r4]
    41f8:	00000041 	andeq	r0, r0, r1, asr #32
    41fc:	0f002302 	svceq	0x00002302
    4200:	0000043b 	andeq	r0, r0, fp, lsr r4
    4204:	00411e04 	subeq	r1, r1, r4, lsl #28
    4208:	23020000 	movwcs	r0, #8192	; 0x2000
    420c:	01430f02 	cmpeq	r3, r2, lsl #30
    4210:	1f040000 	svcne	0x00040000
    4214:	00000041 	andeq	r0, r0, r1, asr #32
    4218:	0f042302 	svceq	0x00042302
    421c:	000001fc 	strdeq	r0, [r0], -ip
    4220:	00412004 	subeq	r2, r1, r4
    4224:	23020000 	movwcs	r0, #8192	; 0x2000
    4228:	03530f06 	cmpeq	r3, #24	; 0x18
    422c:	21040000 	tstcs	r4, r0
    4230:	00000053 	andeq	r0, r0, r3, asr r0
    4234:	00082302 	andeq	r2, r8, r2, lsl #6
    4238:	0007ad08 	andeq	sl, r7, r8, lsl #26
    423c:	24220400 	strtcs	r0, [r2], #-1024
    4240:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    4244:	f7260410 	undefined instruction 0xf7260410
    4248:	0f000003 	svceq	0x00000003
    424c:	00000579 	andeq	r0, r0, r9, ror r5
    4250:	00412704 	subeq	r2, r1, r4, lsl #14
    4254:	23020000 	movwcs	r0, #8192	; 0x2000
    4258:	020e0f00 	andeq	r0, lr, #0	; 0x0
    425c:	28040000 	stmdacs	r4, {}
    4260:	00000041 	andeq	r0, r0, r1, asr #32
    4264:	0f022302 	svceq	0x00022302
    4268:	0000065c 	andeq	r0, r0, ip, asr r6
    426c:	00412904 	subeq	r2, r1, r4, lsl #18
    4270:	23020000 	movwcs	r0, #8192	; 0x2000
    4274:	01e30f04 	mvneq	r0, r4, lsl #30
    4278:	2a040000 	bcs	104280 <__Stack_Size+0x103e80>
    427c:	00000041 	andeq	r0, r0, r1, asr #32
    4280:	0f062302 	svceq	0x00062302
    4284:	0000008c 	andeq	r0, r0, ip, lsl #1
    4288:	00412b04 	subeq	r2, r1, r4, lsl #22
    428c:	23020000 	movwcs	r0, #8192	; 0x2000
    4290:	03c40f08 	biceq	r0, r4, #32	; 0x20
    4294:	2c040000 	stccs	0, cr0, [r4], {0}
    4298:	00000041 	andeq	r0, r0, r1, asr #32
    429c:	0f0a2302 	svceq	0x000a2302
    42a0:	00000165 	andeq	r0, r0, r5, ror #2
    42a4:	00412d04 	subeq	r2, r1, r4, lsl #26
    42a8:	23020000 	movwcs	r0, #8192	; 0x2000
    42ac:	04e70f0c 	strbteq	r0, [r7], #3852
    42b0:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    42b4:	00000041 	andeq	r0, r0, r1, asr #32
    42b8:	000e2302 	andeq	r2, lr, r2, lsl #6
    42bc:	00004308 	andeq	r4, r0, r8, lsl #6
    42c0:	7e2f0400 	cdpvc	4, 2, cr0, cr15, cr0, {0}
    42c4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    42c8:	5133040a 	teqpl	r3, sl, lsl #8
    42cc:	0f000004 	svceq	0x00000004
    42d0:	000026ad 	andeq	r2, r0, sp, lsr #13
    42d4:	00413404 	subeq	r3, r1, r4, lsl #8
    42d8:	23020000 	movwcs	r0, #8192	; 0x2000
    42dc:	279d0f00 	ldrcs	r0, [sp, r0, lsl #30]
    42e0:	35040000 	strcc	r0, [r4]
    42e4:	00000041 	andeq	r0, r0, r1, asr #32
    42e8:	0f022302 	svceq	0x00022302
    42ec:	00002738 	andeq	r2, r0, r8, lsr r7
    42f0:	00413604 	subeq	r3, r1, r4, lsl #12
    42f4:	23020000 	movwcs	r0, #8192	; 0x2000
    42f8:	247d0f04 	ldrbtcs	r0, [sp], #-3844
    42fc:	37040000 	strcc	r0, [r4, -r0]
    4300:	00000041 	andeq	r0, r0, r1, asr #32
    4304:	0f062302 	svceq	0x00062302
    4308:	0000297a 	andeq	r2, r0, sl, ror r9
    430c:	00413804 	subeq	r3, r1, r4, lsl #16
    4310:	23020000 	movwcs	r0, #8192	; 0x2000
    4314:	06080008 	streq	r0, [r8], -r8
    4318:	04000021 	streq	r0, [r0], #-33
    431c:	00040239 	andeq	r0, r4, r9, lsr r2
    4320:	040e0e00 	streq	r0, [lr], #-3584
    4324:	0004c73d 	andeq	ip, r4, sp, lsr r7
    4328:	278f0f00 	strcs	r0, [pc, r0, lsl #30]
    432c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    4330:	00000041 	andeq	r0, r0, r1, asr #32
    4334:	0f002302 	svceq	0x00002302
    4338:	0000227f 	andeq	r2, r0, pc, ror r2
    433c:	00413f04 	subeq	r3, r1, r4, lsl #30
    4340:	23020000 	movwcs	r0, #8192	; 0x2000
    4344:	24420f02 	strbcs	r0, [r2], #-3842
    4348:	40040000 	andmi	r0, r4, r0
    434c:	00000041 	andeq	r0, r0, r1, asr #32
    4350:	0f042302 	svceq	0x00042302
    4354:	00002894 	muleq	r0, r4, r8
    4358:	00414104 	subeq	r4, r1, r4, lsl #2
    435c:	23020000 	movwcs	r0, #8192	; 0x2000
    4360:	252c0f06 	strcs	r0, [ip, #-3846]!
    4364:	42040000 	andmi	r0, r4, #0	; 0x0
    4368:	00000041 	andeq	r0, r0, r1, asr #32
    436c:	0f082302 	svceq	0x00082302
    4370:	000023e9 	andeq	r2, r0, r9, ror #7
    4374:	00414304 	subeq	r4, r1, r4, lsl #6
    4378:	23020000 	movwcs	r0, #8192	; 0x2000
    437c:	28200f0a 	stmdacs	r0!, {r1, r3, r8, r9, sl, fp}
    4380:	44040000 	strmi	r0, [r4]
    4384:	00000041 	andeq	r0, r0, r1, asr #32
    4388:	000c2302 	andeq	r2, ip, r2, lsl #6
    438c:	0024d408 	eoreq	sp, r4, r8, lsl #8
    4390:	5c450400 	cfstrdpl	mvd0, [r5], {0}
    4394:	10000004 	andne	r0, r0, r4
    4398:	00265c01 	eoreq	r5, r6, r1, lsl #24
    439c:	04b30100 	ldrteq	r0, [r3], #256
    43a0:	051e0101 	ldreq	r0, [lr, #-257]
    43a4:	37110000 	ldrcc	r0, [r1, -r0]
    43a8:	01000022 	tsteq	r0, r2, lsr #32
    43ac:	051e04b1 	ldreq	r0, [lr, #-1201]
    43b0:	3b110000 	blcc	4443b8 <__Stack_Size+0x443fb8>
    43b4:	01000021 	tsteq	r0, r1, lsr #32
    43b8:	004104b1 	strheq	r0, [r1], #-65
    43bc:	13110000 	tstne	r1, #0	; 0x0
    43c0:	01000029 	tsteq	r0, r9, lsr #32
    43c4:	004104b1 	strheq	r0, [r1], #-65
    43c8:	c7110000 	ldrgt	r0, [r1, -r0]
    43cc:	01000024 	tsteq	r0, r4, lsr #32
    43d0:	004104b2 	strheq	r0, [r1], #-66
    43d4:	1d120000 	ldcne	0, cr0, [r2]
    43d8:	01000022 	tsteq	r0, r2, lsr #32
    43dc:	004104b4 	strheq	r0, [r1], #-68
    43e0:	13000000 	movwne	r0, #0	; 0x0
    43e4:	00031804 	andeq	r1, r3, r4, lsl #16
    43e8:	a1011000 	tstge	r1, r0
    43ec:	01000029 	tsteq	r0, r9, lsr #32
    43f0:	01010519 	tsteq	r1, r9, lsl r5
    43f4:	00000558 	andeq	r0, r0, r8, asr r5
    43f8:	00223711 	eoreq	r3, r2, r1, lsl r7
    43fc:	05180100 	ldreq	r0, [r8, #-256]
    4400:	0000051e 	andeq	r0, r0, lr, lsl r5
    4404:	00211811 	eoreq	r1, r1, r1, lsl r8
    4408:	05180100 	ldreq	r0, [r8, #-256]
    440c:	00000041 	andeq	r0, r0, r1, asr #32
    4410:	00221d12 	eoreq	r1, r2, r2, lsl sp
    4414:	051a0100 	ldreq	r0, [sl, #-256]
    4418:	00000041 	andeq	r0, r0, r1, asr #32
    441c:	20e81400 	rsccs	r1, r8, r0, lsl #8
    4420:	1d010000 	stcne	0, cr0, [r1]
    4424:	bb01010c 	bllt	4485c <__Stack_Size+0x4445c>
    4428:	11000005 	tstne	r0, r5
    442c:	00002237 	andeq	r2, r0, r7, lsr r2
    4430:	1e0c1b01 	fmacdne	d1, d12, d1
    4434:	11000005 	tstne	r0, r5
    4438:	0000279d 	muleq	r0, sp, r7
    443c:	410c1b01 	tstmi	ip, r1, lsl #22
    4440:	11000000 	tstne	r0, r0
    4444:	00002738 	andeq	r2, r0, r8, lsr r7
    4448:	410c1b01 	tstmi	ip, r1, lsl #22
    444c:	11000000 	tstne	r0, r0
    4450:	0000297a 	andeq	r2, r0, sl, ror r9
    4454:	410c1c01 	tstmi	ip, r1, lsl #24
    4458:	12000000 	andne	r0, r0, #0	; 0x0
    445c:	0000269b 	muleq	r0, fp, r6
    4460:	410c1e01 	tstmi	ip, r1, lsl #28
    4464:	12000000 	andne	r0, r0, #0	; 0x0
    4468:	000023ba 	strheq	r2, [r0], -sl
    446c:	410c1e01 	tstmi	ip, r1, lsl #28
    4470:	15000000 	strne	r0, [r0]
    4474:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4478:	410c1e01 	tstmi	ip, r1, lsl #28
    447c:	00000000 	andeq	r0, r0, r0
    4480:	0022c414 	eoreq	ip, r2, r4, lsl r4
    4484:	0bef0100 	bleq	ffbc488c <SCS_BASE+0x1fbb688c>
    4488:	06120101 	ldreq	r0, [r2], -r1, lsl #2
    448c:	37110000 	ldrcc	r0, [r1, -r0]
    4490:	01000022 	tsteq	r0, r2, lsr #32
    4494:	051e0bed 	ldreq	r0, [lr, #-3053]
    4498:	9d110000 	ldcls	0, cr0, [r1]
    449c:	01000027 	tsteq	r0, r7, lsr #32
    44a0:	00410bed 	subeq	r0, r1, sp, ror #23
    44a4:	38110000 	ldmdacc	r1, {}
    44a8:	01000027 	tsteq	r0, r7, lsr #32
    44ac:	00410bed 	subeq	r0, r1, sp, ror #23
    44b0:	7a110000 	bvc	4444b8 <__Stack_Size+0x4440b8>
    44b4:	01000029 	tsteq	r0, r9, lsr #32
    44b8:	00410bee 	subeq	r0, r1, lr, ror #23
    44bc:	9b120000 	blls	4844c4 <__Stack_Size+0x4840c4>
    44c0:	01000026 	tsteq	r0, r6, lsr #32
    44c4:	00410bf0 	strdeq	r0, [r1], #-176
    44c8:	ba120000 	blt	4844d0 <__Stack_Size+0x4840d0>
    44cc:	01000023 	tsteq	r0, r3, lsr #32
    44d0:	00410bf0 	strdeq	r0, [r1], #-176
    44d4:	10000000 	andne	r0, r0, r0
    44d8:	00270801 	eoreq	r0, r7, r1, lsl #16
    44dc:	0a6b0100 	beq	1ac48e4 <__Stack_Size+0x1ac44e4>
    44e0:	063a0101 	ldrteq	r0, [sl], -r1, lsl #2
    44e4:	37110000 	ldrcc	r0, [r1, -r0]
    44e8:	01000022 	tsteq	r0, r2, lsr #32
    44ec:	051e0a6a 	ldreq	r0, [lr, #-2666]
    44f0:	81110000 	tsthi	r1, r0
    44f4:	01000026 	tsteq	r0, r6, lsr #32
    44f8:	00410a6a 	subeq	r0, r1, sl, ror #20
    44fc:	10000000 	andne	r0, r0, r0
    4500:	00250f01 	eoreq	r0, r5, r1, lsl #30
    4504:	0a870100 	beq	fe1c490c <SCS_BASE+0x1e1b690c>
    4508:	06620101 	strbteq	r0, [r2], -r1, lsl #2
    450c:	37110000 	ldrcc	r0, [r1, -r0]
    4510:	01000022 	tsteq	r0, r2, lsr #32
    4514:	051e0a86 	ldreq	r0, [lr, #-2694]
    4518:	81110000 	tsthi	r1, r0
    451c:	01000026 	tsteq	r0, r6, lsr #32
    4520:	00410a86 	subeq	r0, r1, r6, lsl #21
    4524:	14000000 	strne	r0, [r0]
    4528:	0000259a 	muleq	r0, sl, r5
    452c:	010c4d01 	tsteq	ip, r1, lsl #26
    4530:	0006c501 	andeq	ip, r6, r1, lsl #10
    4534:	22371100 	eorscs	r1, r7, #0	; 0x0
    4538:	4b010000 	blmi	44540 <__Stack_Size+0x44140>
    453c:	00051e0c 	andeq	r1, r5, ip, lsl #28
    4540:	279d1100 	ldrcs	r1, [sp, r0, lsl #2]
    4544:	4b010000 	blmi	4454c <__Stack_Size+0x4414c>
    4548:	0000410c 	andeq	r4, r0, ip, lsl #2
    454c:	27381100 	ldrcs	r1, [r8, -r0, lsl #2]!
    4550:	4b010000 	blmi	44558 <__Stack_Size+0x44158>
    4554:	0000410c 	andeq	r4, r0, ip, lsl #2
    4558:	297a1100 	ldmdbcs	sl!, {r8, ip}^
    455c:	4c010000 	stcmi	0, cr0, [r1], {0}
    4560:	0000410c 	andeq	r4, r0, ip, lsl #2
    4564:	26a41200 	strtcs	r1, [r4], r0, lsl #4
    4568:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    456c:	0000410c 	andeq	r4, r0, ip, lsl #2
    4570:	23ba1200 	undefined instruction 0x23ba1200
    4574:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    4578:	0000410c 	andeq	r4, r0, ip, lsl #2
    457c:	6d741500 	cfldr64vs	mvdx1, [r4]
    4580:	4e010070 	mcrmi	0, 0, r0, cr1, cr0, {3}
    4584:	0000410c 	andeq	r4, r0, ip, lsl #2
    4588:	01100000 	tsteq	r0, r0
    458c:	00002724 	andeq	r2, r0, r4, lsr #14
    4590:	010aa301 	tsteq	sl, r1, lsl #6
    4594:	0006ed01 	andeq	lr, r6, r1, lsl #26
    4598:	22371100 	eorscs	r1, r7, #0	; 0x0
    459c:	a2010000 	andge	r0, r1, #0	; 0x0
    45a0:	00051e0a 	andeq	r1, r5, sl, lsl #28
    45a4:	26811100 	strcs	r1, [r1], r0, lsl #2
    45a8:	a2010000 	andge	r0, r1, #0	; 0x0
    45ac:	0000410a 	andeq	r4, r0, sl, lsl #2
    45b0:	89140000 	ldmdbhi	r4, {}
    45b4:	01000028 	tsteq	r0, r8, lsr #32
    45b8:	01010c7c 	tsteq	r1, ip, ror ip
    45bc:	00000750 	andeq	r0, r0, r0, asr r7
    45c0:	00223711 	eoreq	r3, r2, r1, lsl r7
    45c4:	0c7a0100 	ldfeqe	f0, [sl]
    45c8:	0000051e 	andeq	r0, r0, lr, lsl r5
    45cc:	00279d11 	eoreq	r9, r7, r1, lsl sp
    45d0:	0c7a0100 	ldfeqe	f0, [sl]
    45d4:	00000041 	andeq	r0, r0, r1, asr #32
    45d8:	00273811 	eoreq	r3, r7, r1, lsl r8
    45dc:	0c7a0100 	ldfeqe	f0, [sl]
    45e0:	00000041 	andeq	r0, r0, r1, asr #32
    45e4:	00297a11 	eoreq	r7, r9, r1, lsl sl
    45e8:	0c7b0100 	ldfeqe	f0, [fp]
    45ec:	00000041 	andeq	r0, r0, r1, asr #32
    45f0:	0026a412 	eoreq	sl, r6, r2, lsl r4
    45f4:	0c7d0100 	ldfeqe	f0, [sp]
    45f8:	00000041 	andeq	r0, r0, r1, asr #32
    45fc:	0023ba12 	eoreq	fp, r3, r2, lsl sl
    4600:	0c7d0100 	ldfeqe	f0, [sp]
    4604:	00000041 	andeq	r0, r0, r1, asr #32
    4608:	706d7415 	rsbvc	r7, sp, r5, lsl r4
    460c:	0c7d0100 	ldfeqe	f0, [sp]
    4610:	00000041 	andeq	r0, r0, r1, asr #32
    4614:	5d011000 	stcpl	0, cr1, [r1]
    4618:	01000022 	tsteq	r0, r2, lsr #32
    461c:	01010abf 	strheq	r0, [r1, -pc]
    4620:	00000778 	andeq	r0, r0, r8, ror r7
    4624:	00223711 	eoreq	r3, r2, r1, lsl r7
    4628:	0abe0100 	beq	fef84a30 <SCS_BASE+0x1ef76a30>
    462c:	0000051e 	andeq	r0, r0, lr, lsl r5
    4630:	00268111 	eoreq	r8, r6, r1, lsl r1
    4634:	0abe0100 	beq	fef84a3c <SCS_BASE+0x1ef76a3c>
    4638:	00000041 	andeq	r0, r0, r1, asr #32
    463c:	4f011600 	svcmi	0x00011600
    4640:	01000025 	tsteq	r0, r5, lsr #32
    4644:	796c01c7 	stmdbvc	ip!, {r0, r1, r2, r6, r7, r8}^
    4648:	79c00800 	stmibvc	r0, {fp}^
    464c:	1aab0800 	bne	feac6654 <SCS_BASE+0x1eab8654>
    4650:	07b00000 	ldreq	r0, [r0, r0]!
    4654:	37170000 	ldrcc	r0, [r7, -r0]
    4658:	01000022 	tsteq	r0, r2, lsr #32
    465c:	00051ec6 	andeq	r1, r5, r6, asr #29
    4660:	001aca00 	andseq	ip, sl, r0, lsl #20
    4664:	24131700 	ldrcs	r1, [r3], #-1792
    4668:	c6010000 	strgt	r0, [r1], -r0
    466c:	000007b0 	strheq	r0, [r0], -r0
    4670:	00001ae9 	andeq	r1, r0, r9, ror #21
    4674:	73041300 	movwvc	r1, #17152	; 0x4300
    4678:	16000003 	strne	r0, [r0], -r3
    467c:	0021dc01 	eoreq	sp, r1, r1, lsl #24
    4680:	01ee0100 	mvneq	r0, r0, lsl #2
    4684:	080079c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp, lr}
    4688:	08007a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp, lr}
    468c:	00001b07 	andeq	r1, r0, r7, lsl #22
    4690:	0000081b 	andeq	r0, r0, fp, lsl r8
    4694:	00223717 	eoreq	r3, r2, r7, lsl r7
    4698:	1eed0100 	cdpne	1, 14, cr0, cr13, cr0, {0}
    469c:	32000005 	andcc	r0, r0, #5	; 0x5
    46a0:	1700001b 	smladne	r0, fp, r0, r0
    46a4:	00002625 	andeq	r2, r0, r5, lsr #12
    46a8:	081bed01 	ldmdaeq	fp, {r0, r8, sl, fp, sp, lr, pc}
    46ac:	1b510000 	blne	14446b4 <__Stack_Size+0x14442b4>
    46b0:	60180000 	andsvs	r0, r8, r0
    46b4:	01000027 	tsteq	r0, r7, lsr #32
    46b8:	000041ef 	andeq	r4, r0, pc, ror #3
    46bc:	001b6f00 	andseq	r6, fp, r0, lsl #30
    46c0:	23ba1800 	undefined instruction 0x23ba1800
    46c4:	ef010000 	svc	0x00010000
    46c8:	00000041 	andeq	r0, r0, r1, asr #32
    46cc:	00001b8d 	andeq	r1, r0, sp, lsl #23
    46d0:	00294518 	eoreq	r4, r9, r8, lsl r5
    46d4:	41ef0100 	mvnmi	r0, r0, lsl #2
    46d8:	e2000000 	and	r0, r0, #0	; 0x0
    46dc:	0000001b 	andeq	r0, r0, fp, lsl r0
    46e0:	03f70413 	mvnseq	r0, #318767104	; 0x13000000
    46e4:	01190000 	tsteq	r9, r0
    46e8:	000022a0 	andeq	r2, r0, r0, lsr #5
    46ec:	01014901 	tsteq	r1, r1, lsl #18
    46f0:	08007a70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp, lr}
    46f4:	08007b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, ip, sp, lr}
    46f8:	00001c16 	andeq	r1, r0, r6, lsl ip
    46fc:	0000088c 	andeq	r0, r0, ip, lsl #17
    4700:	0022371a 	eoreq	r3, r2, sl, lsl r7
    4704:	01480100 	cmpeq	r8, r0, lsl #2
    4708:	0000051e 	andeq	r0, r0, lr, lsl r5
    470c:	00001c41 	andeq	r1, r0, r1, asr #24
    4710:	0026251a 	eoreq	r2, r6, sl, lsl r5
    4714:	01480100 	cmpeq	r8, r0, lsl #2
    4718:	0000081b 	andeq	r0, r0, fp, lsl r8
    471c:	00001c60 	andeq	r1, r0, r0, ror #24
    4720:	0027601b 	eoreq	r6, r7, fp, lsl r0
    4724:	014a0100 	cmpeq	sl, r0, lsl #2
    4728:	00000041 	andeq	r0, r0, r1, asr #32
    472c:	00001c7e 	andeq	r1, r0, lr, ror ip
    4730:	0023ba1b 	eoreq	fp, r3, fp, lsl sl
    4734:	014a0100 	cmpeq	sl, r0, lsl #2
    4738:	00000041 	andeq	r0, r0, r1, asr #32
    473c:	00001ca7 	andeq	r1, r0, r7, lsr #25
    4740:	0029451b 	eoreq	r4, r9, fp, lsl r5
    4744:	014a0100 	cmpeq	sl, r0, lsl #2
    4748:	00000041 	andeq	r0, r0, r1, asr #32
    474c:	00001cf1 	strdeq	r1, [r0], -r1
    4750:	a1011900 	tstge	r1, r0, lsl #18
    4754:	01000028 	tsteq	r0, r8, lsr #32
    4758:	280101a5 	stmdacs	r1, {r0, r2, r5, r7, r8}
    475c:	dc08007b 	stcle	0, cr0, [r8], {123}
    4760:	2508007b 	strcs	r0, [r8, #-123]
    4764:	f700001d 	undefined instruction 0xf700001d
    4768:	1a000008 	bne	4790 <__Stack_Size+0x4390>
    476c:	00002237 	andeq	r2, r0, r7, lsr r2
    4770:	1e01a401 	cdpne	4, 0, cr10, cr1, cr1, {0}
    4774:	50000005 	andpl	r0, r0, r5
    4778:	1a00001d 	bne	47f4 <__Stack_Size+0x43f4>
    477c:	00002625 	andeq	r2, r0, r5, lsr #12
    4780:	1b01a401 	blne	6d78c <__Stack_Size+0x6d38c>
    4784:	6f000008 	svcvs	0x00000008
    4788:	1b00001d 	blne	4804 <__Stack_Size+0x4404>
    478c:	00002760 	andeq	r2, r0, r0, ror #14
    4790:	4101a601 	tstmi	r1, r1, lsl #12
    4794:	8d000000 	stchi	0, cr0, [r0]
    4798:	1b00001d 	blne	4814 <__Stack_Size+0x4414>
    479c:	000023ba 	strheq	r2, [r0], -sl
    47a0:	4101a601 	tstmi	r1, r1, lsl #12
    47a4:	ab000000 	blge	47ac <__Stack_Size+0x43ac>
    47a8:	1b00001d 	blne	4824 <__Stack_Size+0x4424>
    47ac:	00002945 	andeq	r2, r0, r5, asr #18
    47b0:	4101a601 	tstmi	r1, r1, lsl #12
    47b4:	f5000000 	undefined instruction 0xf5000000
    47b8:	0000001d 	andeq	r0, r0, sp, lsl r0
    47bc:	25f60119 	ldrbcs	r0, [r6, #281]!
    47c0:	01010000 	tsteq	r1, r0
    47c4:	7bdc0102 	blvc	ff704bd4 <SCS_BASE+0x1f6f6bd4>
    47c8:	7c700800 	ldclvc	8, cr0, [r0]
    47cc:	1e290800 	cdpne	8, 2, cr0, cr9, cr0, {0}
    47d0:	09620000 	stmdbeq	r2!, {}^
    47d4:	371a0000 	ldrcc	r0, [sl, -r0]
    47d8:	01000022 	tsteq	r0, r2, lsr #32
    47dc:	051e0200 	ldreq	r0, [lr, #-512]
    47e0:	1e540000 	cdpne	0, 5, cr0, cr4, cr0, {0}
    47e4:	251a0000 	ldrcs	r0, [sl]
    47e8:	01000026 	tsteq	r0, r6, lsr #32
    47ec:	081b0200 	ldmdaeq	fp, {r9}
    47f0:	1e730000 	cdpne	0, 7, cr0, cr3, cr0, {0}
    47f4:	601b0000 	andsvs	r0, fp, r0
    47f8:	01000027 	tsteq	r0, r7, lsr #32
    47fc:	00410202 	subeq	r0, r1, r2, lsl #4
    4800:	1e910000 	cdpne	0, 9, cr0, cr1, cr0, {0}
    4804:	ba1b0000 	blt	6c480c <__Stack_Size+0x6c440c>
    4808:	01000023 	tsteq	r0, r3, lsr #32
    480c:	00410202 	subeq	r0, r1, r2, lsl #4
    4810:	1eba0000 	cdpne	0, 11, cr0, cr10, cr0, {0}
    4814:	451b0000 	ldrmi	r0, [fp]
    4818:	01000029 	tsteq	r0, r9, lsr #32
    481c:	00410202 	subeq	r0, r1, r2, lsl #4
    4820:	1eef0000 	cdpne	0, 14, cr0, cr15, cr0, {0}
    4824:	19000000 	stmdbne	r0, {}
    4828:	00296f01 	eoreq	r6, r9, r1, lsl #30
    482c:	024a0100 	subeq	r0, sl, #0	; 0x0
    4830:	007c7001 	rsbseq	r7, ip, r1
    4834:	007ddc08 	rsbseq	sp, sp, r8, lsl #24
    4838:	001f1808 	andseq	r1, pc, r8, lsl #16
    483c:	000b2800 	andeq	r2, fp, r0, lsl #16
    4840:	22371a00 	eorscs	r1, r7, #0	; 0x0
    4844:	49010000 	stmdbmi	r1, {}
    4848:	00051e02 	andeq	r1, r5, r2, lsl #28
    484c:	001f3700 	andseq	r3, pc, r0, lsl #14
    4850:	25891a00 	strcs	r1, [r9, #2560]
    4854:	49010000 	stmdbmi	r1, {}
    4858:	000b2802 	andeq	r2, fp, r2, lsl #16
    485c:	001f5500 	andseq	r5, pc, r0, lsl #10
    4860:	05bb1c00 	ldreq	r1, [fp, #3072]!
    4864:	00f80000 	rscseq	r0, r8, r0
    4868:	56010000 	strpl	r0, [r1], -r0
    486c:	0009d902 	andeq	sp, r9, r2, lsl #18
    4870:	05ed1d00 	strbeq	r1, [sp, #3328]!
    4874:	e11d0000 	tst	sp, r0
    4878:	1d000005 	stcne	0, cr0, [r0, #-20]
    487c:	000005d5 	ldrdeq	r0, [r0], -r5
    4880:	0005c91d 	andeq	ip, r5, sp, lsl r9
    4884:	01181e00 	tsteq	r8, r0, lsl #28
    4888:	f91f0000 	undefined instruction 0xf91f0000
    488c:	73000005 	movwvc	r0, #5	; 0x5
    4890:	1f00001f 	svcne	0x0000001f
    4894:	00000605 	andeq	r0, r0, r5, lsl #12
    4898:	00001f86 	andeq	r1, r0, r6, lsl #31
    489c:	12200000 	eorne	r0, r0, #0	; 0x0
    48a0:	b6000006 	strlt	r0, [r0], -r6
    48a4:	3808007c 	stmdacc	r8, {r2, r3, r4, r5, r6}
    48a8:	01000001 	tsteq	r0, r1
    48ac:	09f8025b 	ldmibeq	r8!, {r0, r1, r3, r4, r6, r9}^
    48b0:	2d1d0000 	ldccs	0, cr0, [sp]
    48b4:	1d000006 	stcne	0, cr0, [r0, #-24]
    48b8:	00000621 	andeq	r0, r0, r1, lsr #12
    48bc:	05581c00 	ldrbeq	r1, [r8, #-3072]
    48c0:	01500000 	cmpeq	r0, r0
    48c4:	60010000 	andvs	r0, r1, r0
    48c8:	000a3a02 	andeq	r3, sl, r2, lsl #20
    48cc:	058a1d00 	streq	r1, [sl, #3328]
    48d0:	7e1d0000 	wxorvc	wr0, wr13, wr0
    48d4:	1d000005 	stcne	0, cr0, [r0, #-20]
    48d8:	00000572 	andeq	r0, r0, r2, ror r5
    48dc:	0005661d 	andeq	r6, r5, sp, lsl r6
    48e0:	01701e00 	cmneq	r0, r0, lsl #28
    48e4:	961f0000 	ldrls	r0, [pc], -r0
    48e8:	99000005 	stmdbls	r0, {r0, r2}
    48ec:	1f00001f 	svcne	0x0000001f
    48f0:	000005a2 	andeq	r0, r0, r2, lsr #11
    48f4:	00001fc2 	andeq	r1, r0, r2, asr #31
    48f8:	0005ae21 	andeq	sl, r5, r1, lsr #28
    48fc:	20000000 	andcs	r0, r0, r0
    4900:	0000063a 	andeq	r0, r0, sl, lsr r6
    4904:	08007d12 	stmdaeq	r0, {r1, r4, r8, sl, fp, ip, sp, lr}
    4908:	00000190 	muleq	r0, r0, r1
    490c:	59026501 	stmdbpl	r2, {r0, r8, sl, sp, lr}
    4910:	1d00000a 	stcne	0, cr0, [r0, #-40]
    4914:	00000655 	andeq	r0, r0, r5, asr r6
    4918:	0006491d 	andeq	r4, r6, sp, lsl r9
    491c:	62220000 	eorvs	r0, r2, #0	; 0x0
    4920:	3a000006 	bcc	4940 <__Stack_Size+0x4540>
    4924:	7008007d 	andvc	r0, r8, sp, ror r0
    4928:	0108007d 	tsteq	r8, sp, ror r0
    492c:	0aa3026a 	beq	fe8c52dc <SCS_BASE+0x1e8b72dc>
    4930:	941d0000 	ldrls	r0, [sp]
    4934:	1d000006 	stcne	0, cr0, [r0, #-24]
    4938:	00000688 	andeq	r0, r0, r8, lsl #13
    493c:	00067c1d 	andeq	r7, r6, sp, lsl ip
    4940:	06701d00 	ldrbteq	r1, [r0], -r0, lsl #26
    4944:	3a230000 	bcc	8c494c <__Stack_Size+0x8c454c>
    4948:	7008007d 	andvc	r0, r8, sp, ror r0
    494c:	1f08007d 	svcne	0x0008007d
    4950:	000006a0 	andeq	r0, r0, r0, lsr #13
    4954:	00001fd5 	ldrdeq	r1, [r0], -r5
    4958:	0006ac1f 	andeq	sl, r6, pc, lsl ip
    495c:	001fe800 	andseq	lr, pc, r0, lsl #16
    4960:	06b82100 	ldrteq	r2, [r8], r0, lsl #2
    4964:	00000000 	andeq	r0, r0, r0
    4968:	0006c520 	andeq	ip, r6, r0, lsr #10
    496c:	007d7000 	rsbseq	r7, sp, r0
    4970:	0001a808 	andeq	sl, r1, r8, lsl #16
    4974:	026f0100 	rsbeq	r0, pc, #0	; 0x0
    4978:	00000ac2 	andeq	r0, r0, r2, asr #21
    497c:	0006e01d 	andeq	lr, r6, sp, lsl r0
    4980:	06d41d00 	ldrbeq	r1, [r4], r0, lsl #26
    4984:	22000000 	andcs	r0, r0, #0	; 0x0
    4988:	000006ed 	andeq	r0, r0, sp, ror #13
    498c:	08007d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp, ip, sp, lr}
    4990:	08007dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp, lr}
    4994:	0c027401 	cfstrseq	mvf7, [r2], {1}
    4998:	1d00000b 	stcne	0, cr0, [r0, #-44]
    499c:	0000071f 	andeq	r0, r0, pc, lsl r7
    49a0:	0007131d 	andeq	r1, r7, sp, lsl r3
    49a4:	07071d00 	streq	r1, [r7, -r0, lsl #26]
    49a8:	fb1d0000 	blx	7449b2 <__Stack_Size+0x7445b2>
    49ac:	23000006 	movwcs	r0, #6	; 0x6
    49b0:	08007d86 	stmdaeq	r0, {r1, r2, r7, r8, sl, fp, ip, sp, lr}
    49b4:	08007dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, sp, lr}
    49b8:	00072b1f 	andeq	r2, r7, pc, lsl fp
    49bc:	001ffb00 	andseq	pc, pc, r0, lsl #22
    49c0:	07371f00 	ldreq	r1, [r7, -r0, lsl #30]!
    49c4:	200e0000 	andcs	r0, lr, r0
    49c8:	43210000 	teqmi	r1, #0	; 0x0
    49cc:	00000007 	andeq	r0, r0, r7
    49d0:	07502400 	ldrbeq	r2, [r0, -r0, lsl #8]
    49d4:	7dc00000 	stclvc	0, cr0, [r0]
    49d8:	01c00800 	biceq	r0, r0, r0, lsl #16
    49dc:	79010000 	stmdbvc	r1, {}
    49e0:	076b1d02 	strbeq	r1, [fp, -r2, lsl #26]!
    49e4:	5f1d0000 	svcpl	0x001d0000
    49e8:	00000007 	andeq	r0, r0, r7
    49ec:	51041300 	tstpl	r4, r0, lsl #6
    49f0:	19000004 	stmdbne	r0, {r2}
    49f4:	00292601 	eoreq	r2, r9, r1, lsl #12
    49f8:	028b0100 	addeq	r0, fp, #0	; 0x0
    49fc:	007ddc01 	rsbseq	sp, sp, r1, lsl #24
    4a00:	007f3608 	rsbseq	r3, pc, r8, lsl #12
    4a04:	00202108 	eoreq	r2, r0, r8, lsl #2
    4a08:	000d1700 	andeq	r1, sp, r0, lsl #14
    4a0c:	22372500 	eorscs	r2, r7, #0	; 0x0
    4a10:	8a010000 	bhi	44a18 <__Stack_Size+0x44618>
    4a14:	00051e02 	andeq	r1, r5, r2, lsl #28
    4a18:	1a500100 	bne	1404e20 <__Stack_Size+0x1404a20>
    4a1c:	00002589 	andeq	r2, r0, r9, lsl #11
    4a20:	28028a01 	stmdacs	r2, {r0, r9, fp, pc}
    4a24:	4000000b 	andmi	r0, r0, fp
    4a28:	26000020 	strcs	r0, [r0], -r0, lsr #32
    4a2c:	000027bf 	strheq	r2, [r0], -pc
    4a30:	41028c01 	tstmi	r2, r1, lsl #24
    4a34:	01000000 	tsteq	r0, r0
    4a38:	26dc2657 	undefined
    4a3c:	8d010000 	stchi	0, cr0, [r1]
    4a40:	00004102 	andeq	r4, r0, r2, lsl #2
    4a44:	22560100 	subscs	r0, r6, #0	; 0x0
    4a48:	000005bb 	strheq	r0, [r0], -fp
    4a4c:	08007e00 	stmdaeq	r0, {r9, sl, fp, ip, sp, lr}
    4a50:	08007e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip, sp, lr}
    4a54:	c702a901 	strgt	sl, [r2, -r1, lsl #18]
    4a58:	1d00000b 	stcne	0, cr0, [r0, #-44]
    4a5c:	000005ed 	andeq	r0, r0, sp, ror #11
    4a60:	0005e11d 	andeq	lr, r5, sp, lsl r1
    4a64:	05d51d00 	ldrbeq	r1, [r5, #3328]
    4a68:	c91d0000 	ldmdbgt	sp, {}
    4a6c:	23000005 	movwcs	r0, #5	; 0x5
    4a70:	08007e00 	stmdaeq	r0, {r9, sl, fp, ip, sp, lr}
    4a74:	08007e32 	stmdaeq	r0, {r1, r4, r5, r9, sl, fp, ip, sp, lr}
    4a78:	0005f91f 	andeq	pc, r5, pc, lsl r9
    4a7c:	00205e00 	eoreq	r5, r0, r0, lsl #28
    4a80:	06051f00 	streq	r1, [r5], -r0, lsl #30
    4a84:	20710000 	rsbscs	r0, r1, r0
    4a88:	00000000 	andeq	r0, r0, r0
    4a8c:	00061220 	andeq	r1, r6, r0, lsr #4
    4a90:	007e3200 	rsbseq	r3, lr, r0, lsl #4
    4a94:	0001d808 	andeq	sp, r1, r8, lsl #16
    4a98:	02ad0100 	adceq	r0, sp, #0	; 0x0
    4a9c:	00000be6 	andeq	r0, r0, r6, ror #23
    4aa0:	00062d1d 	andeq	r2, r6, sp, lsl sp
    4aa4:	06211d00 	strteq	r1, [r1], -r0, lsl #26
    4aa8:	22000000 	andcs	r0, r0, #0	; 0x0
    4aac:	00000558 	andeq	r0, r0, r8, asr r5
    4ab0:	08007e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, sp, lr}
    4ab4:	08007e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp, lr}
    4ab8:	3002b001 	andcc	fp, r2, r1
    4abc:	1d00000c 	stcne	0, cr0, [r0, #-48]
    4ac0:	0000058a 	andeq	r0, r0, sl, lsl #11
    4ac4:	00057e1d 	andeq	r7, r5, sp, lsl lr
    4ac8:	05721d00 	ldrbeq	r1, [r2, #-3328]!
    4acc:	661d0000 	ldrvs	r0, [sp], -r0
    4ad0:	23000005 	movwcs	r0, #5	; 0x5
    4ad4:	08007e4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, ip, sp, lr}
    4ad8:	08007e80 	stmdaeq	r0, {r7, r9, sl, fp, ip, sp, lr}
    4adc:	0005961f 	andeq	r9, r5, pc, lsl r6
    4ae0:	00208400 	eoreq	r8, r0, r0, lsl #8
    4ae4:	05a21f00 	streq	r1, [r2, #3840]!
    4ae8:	20a20000 	adccs	r0, r2, r0
    4aec:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    4af0:	00000005 	andeq	r0, r0, r5
    4af4:	063a2200 	ldrteq	r2, [sl], -r0, lsl #4
    4af8:	7e800000 	cdpvc	0, 8, cr0, cr0, cr0, {0}
    4afc:	7e980800 	cdpvc	8, 9, cr0, cr8, cr0, {0}
    4b00:	b3010800 	movwlt	r0, #6144	; 0x1800
    4b04:	000c4f02 	andeq	r4, ip, r2, lsl #30
    4b08:	06551d00 	ldrbeq	r1, [r5], -r0, lsl #26
    4b0c:	491d0000 	ldmdbmi	sp, {}
    4b10:	00000006 	andeq	r0, r0, r6
    4b14:	00055822 	andeq	r5, r5, r2, lsr #16
    4b18:	007e9800 	rsbseq	r9, lr, r0, lsl #16
    4b1c:	007ed208 	rsbseq	sp, lr, r8, lsl #4
    4b20:	02b80108 	adcseq	r0, r8, #2	; 0x2
    4b24:	00000c99 	muleq	r0, r9, ip
    4b28:	00058a1d 	andeq	r8, r5, sp, lsl sl
    4b2c:	057e1d00 	ldrbeq	r1, [lr, #-3328]!
    4b30:	721d0000 	andsvc	r0, sp, #0	; 0x0
    4b34:	1d000005 	stcne	0, cr0, [r0, #-20]
    4b38:	00000566 	andeq	r0, r0, r6, ror #10
    4b3c:	007e9823 	rsbseq	r9, lr, r3, lsr #16
    4b40:	007ed208 	rsbseq	sp, lr, r8, lsl #4
    4b44:	05961f08 	ldreq	r1, [r6, #3848]
    4b48:	20c00000 	sbccs	r0, r0, r0
    4b4c:	a21f0000 	andsge	r0, pc, #0	; 0x0
    4b50:	e9000005 	stmdb	r0, {r0, r2}
    4b54:	21000020 	tstcs	r0, r0, lsr #32
    4b58:	000005ae 	andeq	r0, r0, lr, lsr #11
    4b5c:	3a200000 	bcc	804b64 <__Stack_Size+0x804764>
    4b60:	d2000006 	andle	r0, r0, #6	; 0x6
    4b64:	f008007e 	undefined instruction 0xf008007e
    4b68:	01000001 	tsteq	r0, r1
    4b6c:	0cb802bc 	lfmeq	f0, 4, [r8], #752
    4b70:	551d0000 	ldrpl	r0, [sp]
    4b74:	1d000006 	stcne	0, cr0, [r0, #-24]
    4b78:	00000649 	andeq	r0, r0, r9, asr #12
    4b7c:	05bb2200 	ldreq	r2, [fp, #512]!
    4b80:	7eee0000 	cdpvc	0, 14, cr0, cr14, cr0, {0}
    4b84:	7f200800 	svcvc	0x00200800
    4b88:	bf010800 	svclt	0x00010800
    4b8c:	000cfb02 	andeq	pc, ip, r2, lsl #22
    4b90:	05ed1d00 	strbeq	r1, [sp, #3328]!
    4b94:	e11d0000 	tst	sp, r0
    4b98:	1d000005 	stcne	0, cr0, [r0, #-20]
    4b9c:	000005d5 	ldrdeq	r0, [r0], -r5
    4ba0:	0005c91d 	andeq	ip, r5, sp, lsl r9
    4ba4:	7eee2300 	cdpvc	3, 14, cr2, cr14, cr0, {0}
    4ba8:	7f200800 	svcvc	0x00200800
    4bac:	f91f0800 	undefined instruction 0xf91f0800
    4bb0:	fc000005 	stc2	0, cr0, [r0], {5}
    4bb4:	27000020 	strcs	r0, [r0, -r0, lsr #32]
    4bb8:	00000605 	andeq	r0, r0, r5, lsl #12
    4bbc:	00005201 	andeq	r5, r0, r1, lsl #4
    4bc0:	00061228 	andeq	r1, r6, r8, lsr #4
    4bc4:	007f2000 	rsbseq	r2, pc, r0
    4bc8:	007f3408 	rsbseq	r3, pc, r8, lsl #8
    4bcc:	02c20108 	sbceq	r0, r2, #2	; 0x2
    4bd0:	00062d1d 	andeq	r2, r6, sp, lsl sp
    4bd4:	06211d00 	strteq	r1, [r1], -r0, lsl #26
    4bd8:	00000000 	andeq	r0, r0, r0
    4bdc:	27d20129 	ldrbcs	r0, [r2, r9, lsr #2]
    4be0:	d2010000 	andle	r0, r1, #0	; 0x0
    4be4:	7f380102 	svcvc	0x00380102
    4be8:	7f5a0800 	svcvc	0x005a0800
    4bec:	5d010800 	stcpl	8, cr0, [r1]
    4bf0:	00000d4c 	andeq	r0, r0, ip, asr #26
    4bf4:	00223725 	eoreq	r3, r2, r5, lsr #14
    4bf8:	02d10100 	sbcseq	r0, r1, #0	; 0x0
    4bfc:	0000051e 	andeq	r0, r0, lr, lsl r5
    4c00:	a7255001 	strge	r5, [r5, -r1]!
    4c04:	01000023 	tsteq	r0, r3, lsr #32
    4c08:	0d4c02d1 	sfmeq	f0, 2, [ip, #-836]
    4c0c:	51010000 	tstpl	r1, r0
    4c10:	c7041300 	strgt	r1, [r4, -r0, lsl #6]
    4c14:	29000004 	stmdbcs	r0, {r2}
    4c18:	00285101 	eoreq	r5, r8, r1, lsl #2
    4c1c:	02ef0100 	rsceq	r0, pc, #0	; 0x0
    4c20:	007f5c01 	rsbseq	r5, pc, r1, lsl #24
    4c24:	007f7208 	rsbseq	r7, pc, r8, lsl #4
    4c28:	795d0108 	ldmdbvc	sp, {r3, r8}^
    4c2c:	2500000d 	strcs	r0, [r0, #-13]
    4c30:	00002413 	andeq	r2, r0, r3, lsl r4
    4c34:	b002ee01 	andlt	lr, r2, r1, lsl #28
    4c38:	01000007 	tsteq	r0, r7
    4c3c:	01290050 	qsubeq	r0, r0, r9
    4c40:	0000218d 	andeq	r2, r0, sp, lsl #3
    4c44:	01030101 	tsteq	r3, r1, lsl #2
    4c48:	08007f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
    4c4c:	08007f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, sp, lr}
    4c50:	0da05d01 	stceq	13, cr5, [r0, #4]!
    4c54:	25250000 	strcs	r0, [r5]!
    4c58:	01000026 	tsteq	r0, r6, lsr #32
    4c5c:	081b0300 	ldmdaeq	fp, {r8, r9}
    4c60:	50010000 	andpl	r0, r1, r0
    4c64:	46012900 	strmi	r2, [r1], -r0, lsl #18
    4c68:	01000020 	tsteq	r0, r0, lsr #32
    4c6c:	8c010316 	stchi	3, cr0, [r1], {22}
    4c70:	a408007f 	strge	r0, [r8], #-127
    4c74:	0108007f 	tsteq	r8, pc, ror r0
    4c78:	000dc75d 	andeq	ip, sp, sp, asr r7
    4c7c:	25892500 	strcs	r2, [r9, #1280]
    4c80:	15010000 	strne	r0, [r1]
    4c84:	000b2803 	andeq	r2, fp, r3, lsl #16
    4c88:	00500100 	subseq	r0, r0, r0, lsl #2
    4c8c:	28da0129 	ldmcs	sl, {r0, r3, r5, r8}^
    4c90:	28010000 	stmdacs	r1, {}
    4c94:	7fa40103 	svcvc	0x00a40103
    4c98:	7fb80800 	svcvc	0x00b80800
    4c9c:	5d010800 	stcpl	8, cr0, [r1]
    4ca0:	00000dee 	andeq	r0, r0, lr, ror #27
    4ca4:	0023a725 	eoreq	sl, r3, r5, lsr #14
    4ca8:	03270100 	teqeq	r7, #0	; 0x0
    4cac:	00000d4c 	andeq	r0, r0, ip, asr #26
    4cb0:	29005001 	stmdbcs	r0, {r0, ip, lr}
    4cb4:	00296701 	eoreq	r6, r9, r1, lsl #14
    4cb8:	033d0100 	teqeq	sp, #0	; 0x0
    4cbc:	007fb801 	rsbseq	fp, pc, r1, lsl #16
    4cc0:	007fd208 	rsbseq	sp, pc, r8, lsl #4
    4cc4:	235d0108 	cmpcs	sp, #2	; 0x2
    4cc8:	2500000e 	strcs	r0, [r0, #-14]
    4ccc:	00002237 	andeq	r2, r0, r7, lsr r2
    4cd0:	1e033c01 	cdpne	12, 0, cr3, cr3, cr1, {0}
    4cd4:	01000005 	tsteq	r0, r5
    4cd8:	11262550 	teqne	r6, r0, asr r5
    4cdc:	3c010000 	stccc	0, cr0, [r1], {0}
    4ce0:	0000a903 	andeq	sl, r0, r3, lsl #18
    4ce4:	00510100 	subseq	r0, r1, r0, lsl #2
    4ce8:	27ac0129 	strcs	r0, [ip, r9, lsr #2]!
    4cec:	58010000 	stmdapl	r1, {}
    4cf0:	7fd40103 	svcvc	0x00d40103
    4cf4:	7ff00800 	svcvc	0x00f00800
    4cf8:	5d010800 	stcpl	8, cr0, [r1]
    4cfc:	00000e58 	andeq	r0, r0, r8, asr lr
    4d00:	00223725 	eoreq	r3, r2, r5, lsr #14
    4d04:	03570100 	cmpeq	r7, #0	; 0x0
    4d08:	0000051e 	andeq	r0, r0, lr, lsl r5
    4d0c:	26255001 	strtcs	r5, [r5], -r1
    4d10:	01000011 	tsteq	r0, r1, lsl r0
    4d14:	00a90357 	adceq	r0, r9, r7, asr r3
    4d18:	51010000 	tstpl	r1, r0
    4d1c:	68012900 	stmdavs	r1, {r8, fp, sp}
    4d20:	01000028 	tsteq	r0, r8, lsr #32
    4d24:	f001037e 	undefined instruction 0xf001037e
    4d28:	0808007f 	stmdaeq	r8, {r0, r1, r2, r3, r4, r5, r6}
    4d2c:	01080080 	smlabbeq	r8, r0, r0, r0
    4d30:	000e9b5d 	andeq	r9, lr, sp, asr fp
    4d34:	22372500 	eorscs	r2, r7, #0	; 0x0
    4d38:	7d010000 	stcvc	0, cr0, [r1]
    4d3c:	00051e03 	andeq	r1, r5, r3, lsl #28
    4d40:	25500100 	ldrbcs	r0, [r0, #-256]
    4d44:	0000294c 	andeq	r2, r0, ip, asr #18
    4d48:	41037d01 	tstmi	r3, r1, lsl #26
    4d4c:	01000000 	tsteq	r0, r0
    4d50:	11262551 	teqne	r6, r1, asr r5
    4d54:	7d010000 	stcvc	0, cr0, [r1]
    4d58:	0000a903 	andeq	sl, r0, r3, lsl #18
    4d5c:	00520100 	subseq	r0, r2, r0, lsl #2
    4d60:	24fd0129 	ldrbtcs	r0, [sp], #297
    4d64:	a1010000 	tstge	r1, r0
    4d68:	80080103 	andhi	r0, r8, r3, lsl #2
    4d6c:	800c0800 	andhi	r0, ip, r0, lsl #16
    4d70:	5d010800 	stcpl	8, cr0, [r1]
    4d74:	00000ed0 	ldrdeq	r0, [r0], -r0
    4d78:	00223725 	eoreq	r3, r2, r5, lsr #14
    4d7c:	03a00100 	moveq	r0, #0	; 0x0
    4d80:	0000051e 	andeq	r0, r0, lr, lsl r5
    4d84:	8b255001 	blhi	958d90 <__Stack_Size+0x958990>
    4d88:	01000026 	tsteq	r0, r6, lsr #32
    4d8c:	004103a0 	subeq	r0, r1, r0, lsr #7
    4d90:	51010000 	tstpl	r1, r0
    4d94:	62012900 	andvs	r2, r1, #0	; 0x0
    4d98:	01000023 	tsteq	r0, r3, lsr #32
    4d9c:	0c0103c0 	stceq	3, cr0, [r1], {192}
    4da0:	14080080 	strne	r0, [r8], #-128
    4da4:	01080080 	smlabbeq	r8, r0, r0, r0
    4da8:	000f155d 	andeq	r1, pc, sp, asr r5
    4dac:	22372500 	eorscs	r2, r7, #0	; 0x0
    4db0:	bf010000 	svclt	0x00010000
    4db4:	00051e03 	andeq	r1, r5, r3, lsl #28
    4db8:	25500100 	ldrbcs	r0, [r0, #-256]
    4dbc:	0000212f 	andeq	r2, r0, pc, lsr #2
    4dc0:	4103bf01 	tstmi	r3, r1, lsl #30
    4dc4:	01000000 	tsteq	r0, r0
    4dc8:	22ff1a51 	rscscs	r1, pc, #331776	; 0x51000
    4dcc:	bf010000 	svclt	0x00010000
    4dd0:	00004103 	andeq	r4, r0, r3, lsl #2
    4dd4:	00210f00 	eoreq	r0, r1, r0, lsl #30
    4dd8:	01290000 	teqeq	r9, r0
    4ddc:	00002846 	andeq	r2, r0, r6, asr #16
    4de0:	0103dd01 	tsteq	r3, r1, lsl #26
    4de4:	08008014 	stmdaeq	r0, {r2, r4, pc}
    4de8:	0800802c 	stmdaeq	r0, {r2, r3, r5, pc}
    4dec:	0f585d01 	svceq	0x00585d01
    4df0:	37250000 	strcc	r0, [r5, -r0]!
    4df4:	01000022 	tsteq	r0, r2, lsr #32
    4df8:	051e03dc 	ldreq	r0, [lr, #-988]
    4dfc:	50010000 	andpl	r0, r1, r0
    4e00:	00245f25 	eoreq	r5, r4, r5, lsr #30
    4e04:	03dc0100 	bicseq	r0, ip, #0	; 0x0
    4e08:	00000041 	andeq	r0, r0, r1, asr #32
    4e0c:	26255101 	strtcs	r5, [r5], -r1, lsl #2
    4e10:	01000011 	tsteq	r0, r1, lsl r0
    4e14:	00a903dc 	ldrdeq	r0, [r9], ip
    4e18:	52010000 	andpl	r0, r1, #0	; 0x0
    4e1c:	f0012900 	undefined instruction 0xf0012900
    4e20:	01000026 	tsteq	r0, r6, lsr #32
    4e24:	2c0103f9 	stccs	3, cr0, [r1], {249}
    4e28:	3a080080 	bcc	205030 <__Stack_Size+0x204c30>
    4e2c:	01080080 	smlabbeq	r8, r0, r0, r0
    4e30:	000f7f5d 	andeq	r7, pc, sp, asr pc
    4e34:	22372500 	eorscs	r2, r7, #0	; 0x0
    4e38:	f8010000 	undefined instruction 0xf8010000
    4e3c:	00051e03 	andeq	r1, r5, r3, lsl #28
    4e40:	00500100 	subseq	r0, r0, r0, lsl #2
    4e44:	23300129 	teqcs	r0, #1073741834	; 0x4000000a
    4e48:	0f010000 	svceq	0x00010000
    4e4c:	803c0104 	eorshi	r0, ip, r4, lsl #2
    4e50:	80560800 	subshi	r0, r6, r0, lsl #16
    4e54:	5d010800 	stcpl	8, cr0, [r1]
    4e58:	00000fe4 	andeq	r0, r0, r4, ror #31
    4e5c:	00223725 	eoreq	r3, r2, r5, lsr #14
    4e60:	040e0100 	streq	r0, [lr], #-256
    4e64:	0000051e 	andeq	r0, r0, lr, lsl r5
    4e68:	181a5001 	ldmdane	sl, {r0, ip, lr}
    4e6c:	01000021 	tsteq	r0, r1, lsr #32
    4e70:	0041040e 	subeq	r0, r1, lr, lsl #8
    4e74:	21220000 	teqcs	r2, r0
    4e78:	24280000 	strtcs	r0, [r8]
    4e7c:	3c000005 	stccc	0, cr0, [r0], {5}
    4e80:	4a080080 	bmi	205088 <__Stack_Size+0x204c88>
    4e84:	01080080 	smlabbeq	r8, r0, r0, r0
    4e88:	3f1d0415 	svccc	0x001d0415
    4e8c:	1d000005 	stcne	0, cr0, [r0, #-20]
    4e90:	00000533 	andeq	r0, r0, r3, lsr r5
    4e94:	00803c23 	addeq	r3, r0, r3, lsr #24
    4e98:	00804a08 	addeq	r4, r0, r8, lsl #20
    4e9c:	054b1f08 	strbeq	r1, [fp, #-3848]
    4ea0:	21350000 	teqcs	r5, r0
    4ea4:	00000000 	andeq	r0, r0, r0
    4ea8:	f1011900 	undefined instruction 0xf1011900
    4eac:	01000027 	tsteq	r0, r7, lsr #32
    4eb0:	5801042f 	stmdapl	r1, {r0, r1, r2, r3, r5, sl}
    4eb4:	ea080080 	b	2050bc <__Stack_Size+0x204cbc>
    4eb8:	53080080 	movwpl	r0, #32896	; 0x8080
    4ebc:	f8000021 	undefined instruction 0xf8000021
    4ec0:	25000010 	strcs	r0, [r0, #-16]
    4ec4:	00002237 	andeq	r2, r0, r7, lsr r2
    4ec8:	1e042d01 	cdpne	13, 0, cr2, cr4, cr1, {0}
    4ecc:	01000005 	tsteq	r0, r5
    4ed0:	25361a50 	ldrcs	r1, [r6, #-2640]!
    4ed4:	2d010000 	stccs	0, cr0, [r1]
    4ed8:	00004104 	andeq	r4, r0, r4, lsl #2
    4edc:	00217200 	eoreq	r7, r1, r0, lsl #4
    4ee0:	279d1a00 	ldrcs	r1, [sp, r0, lsl #20]
    4ee4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4ee8:	00004104 	andeq	r4, r0, r4, lsl #2
    4eec:	00219000 	eoreq	r9, r1, r0
    4ef0:	297e1a00 	ldmdbcs	lr!, {r9, fp, ip}^
    4ef4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4ef8:	00004104 	andeq	r4, r0, r4, lsl #2
    4efc:	0021ae00 	eoreq	sl, r1, r0, lsl #28
    4f00:	05582200 	ldrbeq	r2, [r8, #-512]
    4f04:	80640000 	rsbhi	r0, r4, r0
    4f08:	809a0800 	addshi	r0, sl, r0, lsl #16
    4f0c:	39010800 	stmdbcc	r1, {fp}
    4f10:	00108604 	andseq	r8, r0, r4, lsl #12
    4f14:	058a1d00 	streq	r1, [sl, #3328]
    4f18:	7e1d0000 	wxorvc	wr0, wr13, wr0
    4f1c:	1d000005 	stcne	0, cr0, [r0, #-20]
    4f20:	00000572 	andeq	r0, r0, r2, ror r5
    4f24:	0005661d 	andeq	r6, r5, sp, lsl r6
    4f28:	80642300 	rsbhi	r2, r4, r0, lsl #6
    4f2c:	809a0800 	addshi	r0, sl, r0, lsl #16
    4f30:	961f0800 	ldrls	r0, [pc], -r0, lsl #16
    4f34:	cc000005 	stcgt	0, cr0, [r0], {5}
    4f38:	1f000021 	svcne	0x00000021
    4f3c:	000005a2 	andeq	r0, r0, r2, lsr #11
    4f40:	000021f5 	strdeq	r2, [r0], -r5
    4f44:	0005ae21 	andeq	sl, r5, r1, lsr #28
    4f48:	22000000 	andcs	r0, r0, #0	; 0x0
    4f4c:	000005bb 	strheq	r0, [r0], -fp
    4f50:	0800809a 	stmdaeq	r0, {r1, r3, r4, r7, pc}
    4f54:	080080ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, pc}
    4f58:	c9043d01 	stmdbgt	r4, {r0, r8, sl, fp, ip, sp}
    4f5c:	1d000010 	stcne	0, cr0, [r0, #-64]
    4f60:	000005ed 	andeq	r0, r0, sp, ror #11
    4f64:	0005e11d 	andeq	lr, r5, sp, lsl r1
    4f68:	05d51d00 	ldrbeq	r1, [r5, #3328]
    4f6c:	c91d0000 	ldmdbgt	sp, {}
    4f70:	23000005 	movwcs	r0, #5	; 0x5
    4f74:	0800809a 	stmdaeq	r0, {r1, r3, r4, r7, pc}
    4f78:	080080ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, pc}
    4f7c:	0005f91f 	andeq	pc, r5, pc, lsl r9
    4f80:	00221300 	eoreq	r1, r2, r0, lsl #6
    4f84:	06052700 	streq	r2, [r5], -r0, lsl #14
    4f88:	52010000 	andpl	r0, r1, #0	; 0x0
    4f8c:	24280000 	strtcs	r0, [r8]
    4f90:	ce000005 	cdpgt	0, 0, cr0, cr0, cr5, {0}
    4f94:	de080080 	cdple	0, 0, cr0, cr8, cr0, {4}
    4f98:	01080080 	smlabbeq	r8, r0, r0, r0
    4f9c:	3f1d0441 	svccc	0x001d0441
    4fa0:	1d000005 	stcne	0, cr0, [r0, #-20]
    4fa4:	00000533 	andeq	r0, r0, r3, lsr r5
    4fa8:	0080ce23 	addeq	ip, r0, r3, lsr #28
    4fac:	0080de08 	addeq	sp, r0, r8, lsl #28
    4fb0:	054b1f08 	strbeq	r1, [fp, #-3848]
    4fb4:	22260000 	eorcs	r0, r6, #0	; 0x0
    4fb8:	00000000 	andeq	r0, r0, r0
    4fbc:	48012900 	stmdami	r1, {r8, fp, sp}
    4fc0:	01000027 	tsteq	r0, r7, lsr #32
    4fc4:	ec01045d 	cfstrs	mvf0, [r1], {93}
    4fc8:	14080080 	strne	r0, [r8], #-128
    4fcc:	01080081 	smlabbeq	r8, r1, r0, r0
    4fd0:	0011935d 	andseq	r9, r1, sp, asr r3
    4fd4:	22372500 	eorscs	r2, r7, #0	; 0x0
    4fd8:	5b010000 	blpl	44fe0 <__Stack_Size+0x44be0>
    4fdc:	00051e04 	andeq	r1, r5, r4, lsl #28
    4fe0:	1a500100 	bne	14053e8 <__Stack_Size+0x1404fe8>
    4fe4:	0000213b 	andeq	r2, r0, fp, lsr r1
    4fe8:	41045b01 	tstmi	r4, r1, lsl #22
    4fec:	39000000 	stmdbcc	r0, {}
    4ff0:	1a000022 	bne	5080 <__Stack_Size+0x4c80>
    4ff4:	00002913 	andeq	r2, r0, r3, lsl r9
    4ff8:	41045b01 	tstmi	r4, r1, lsl #22
    4ffc:	4c000000 	stcmi	0, cr0, [r0], {0}
    5000:	1a000022 	bne	5090 <__Stack_Size+0x4c90>
    5004:	000024c7 	andeq	r2, r0, r7, asr #9
    5008:	41045c01 	tstmi	r4, r1, lsl #24
    500c:	5f000000 	svcpl	0x00000000
    5010:	26000022 	strcs	r0, [r0], -r2, lsr #32
    5014:	0000221d 	andeq	r2, r0, sp, lsl r2
    5018:	41045e01 	tstmi	r4, r1, lsl #28
    501c:	01000000 	tsteq	r0, r0
    5020:	04d22853 	ldrbeq	r2, [r2], #2131
    5024:	80ec0000 	rschi	r0, ip, r0
    5028:	81020800 	tsthi	r2, r0, lsl #16
    502c:	67010800 	strvs	r0, [r1, -r0, lsl #16]
    5030:	05051d04 	streq	r1, [r5, #-3332]
    5034:	f91d0000 	undefined instruction 0xf91d0000
    5038:	1d000004 	stcne	0, cr0, [r0, #-16]
    503c:	000004ed 	andeq	r0, r0, sp, ror #9
    5040:	0004e11d 	andeq	lr, r4, sp, lsl r1
    5044:	80ec2300 	rschi	r2, ip, r0, lsl #6
    5048:	81020800 	tsthi	r2, r0, lsl #16
    504c:	11270800 	teqne	r7, r0, lsl #16
    5050:	01000005 	tsteq	r0, r5
    5054:	00000052 	andeq	r0, r0, r2, asr r0
    5058:	22ac0129 	adccs	r0, ip, #1073741834	; 0x4000000a
    505c:	8f010000 	svchi	0x00010000
    5060:	81140104 	tsthi	r4, r4, lsl #2
    5064:	81360800 	teqhi	r6, r0, lsl #16
    5068:	5d010800 	stcpl	8, cr0, [r1]
    506c:	00001220 	andeq	r1, r0, r0, lsr #4
    5070:	00223725 	eoreq	r3, r2, r5, lsr #14
    5074:	048d0100 	streq	r0, [sp], #256
    5078:	0000051e 	andeq	r0, r0, lr, lsl r5
    507c:	3b1a5001 	blcc	699088 <__Stack_Size+0x698c88>
    5080:	01000021 	tsteq	r0, r1, lsr #32
    5084:	0041048d 	subeq	r0, r1, sp, lsl #9
    5088:	22720000 	rsbscs	r0, r2, #0	; 0x0
    508c:	131a0000 	tstne	sl, #0	; 0x0
    5090:	01000029 	tsteq	r0, r9, lsr #32
    5094:	0041048e 	subeq	r0, r1, lr, lsl #9
    5098:	22850000 	addcs	r0, r5, #0	; 0x0
    509c:	c71a0000 	ldrgt	r0, [sl, -r0]
    50a0:	01000024 	tsteq	r0, r4, lsr #32
    50a4:	0041048e 	subeq	r0, r1, lr, lsl #9
    50a8:	22980000 	addscs	r0, r8, #0	; 0x0
    50ac:	d2280000 	eorle	r0, r8, #0	; 0x0
    50b0:	14000004 	strne	r0, [r0], #-4
    50b4:	2a080081 	bcs	2052c0 <__Stack_Size+0x204ec0>
    50b8:	01080081 	smlabbeq	r8, r1, r0, r0
    50bc:	051d0497 	ldreq	r0, [sp, #-1175]
    50c0:	1d000005 	stcne	0, cr0, [r0, #-20]
    50c4:	000004f9 	strdeq	r0, [r0], -r9
    50c8:	0004ed1d 	andeq	lr, r4, sp, lsl sp
    50cc:	04e11d00 	strbteq	r1, [r1], #3328
    50d0:	14230000 	strtne	r0, [r3]
    50d4:	2a080081 	bcs	2052e0 <__Stack_Size+0x204ee0>
    50d8:	27080081 	strcs	r0, [r8, -r1, lsl #1]
    50dc:	00000511 	andeq	r0, r0, r1, lsl r5
    50e0:	00005201 	andeq	r5, r0, r1, lsl #4
    50e4:	04d22a00 	ldrbeq	r2, [r2], #2560
    50e8:	81380000 	teqhi	r8, r0
    50ec:	81500800 	cmphi	r0, r0, lsl #16
    50f0:	5d010800 	stcpl	8, cr0, [r1]
    50f4:	0000125b 	andeq	r1, r0, fp, asr r2
    50f8:	0004e12b 	andeq	lr, r4, fp, lsr #2
    50fc:	2c500100 	ldfcse	f0, [r0], {0}
    5100:	000004ed 	andeq	r0, r0, sp, ror #9
    5104:	000022ab 	andeq	r2, r0, fp, lsr #5
    5108:	0004f92c 	andeq	pc, r4, ip, lsr #18
    510c:	0022be00 	eoreq	fp, r2, r0, lsl #28
    5110:	05052b00 	streq	r2, [r5, #-2816]
    5114:	53010000 	movwpl	r0, #4096	; 0x1000
    5118:	00051127 	andeq	r1, r5, r7, lsr #2
    511c:	00520100 	subseq	r0, r2, r0, lsl #2
    5120:	29b80129 	ldmibcs	r8!, {r0, r3, r5, r8}
    5124:	d7010000 	strle	r0, [r1, -r0]
    5128:	81500104 	cmphi	r0, r4, lsl #2
    512c:	81560800 	cmphi	r6, r0, lsl #16
    5130:	5d010800 	stcpl	8, cr0, [r1]
    5134:	0000129e 	muleq	r0, lr, r2
    5138:	00223725 	eoreq	r3, r2, r5, lsr #14
    513c:	04d60100 	ldrbeq	r0, [r6], #256
    5140:	0000051e 	andeq	r0, r0, lr, lsl r5
    5144:	12255001 	eorne	r5, r5, #1	; 0x1
    5148:	01000027 	tsteq	r0, r7, lsr #32
    514c:	004104d6 	ldrdeq	r0, [r1], #-70
    5150:	51010000 	tstpl	r1, r0
    5154:	00249925 	eoreq	r9, r4, r5, lsr #18
    5158:	04d60100 	ldrbeq	r0, [r6], #256
    515c:	00000041 	andeq	r0, r0, r1, asr #32
    5160:	29005201 	stmdbcs	r0, {r0, r9, ip, lr}
    5164:	0025c001 	eoreq	ip, r5, r1
    5168:	04f30100 	ldrbteq	r0, [r3], #256
    516c:	00815801 	addeq	r5, r1, r1, lsl #16
    5170:	00816808 	addeq	r6, r1, r8, lsl #16
    5174:	e55d0108 	ldrb	r0, [sp, #-264]
    5178:	25000012 	strcs	r0, [r0, #-18]
    517c:	00002237 	andeq	r2, r0, r7, lsr r2
    5180:	1e04f201 	cdpne	2, 0, cr15, cr4, cr1, {0}
    5184:	01000005 	tsteq	r0, r5
    5188:	043b1a50 	ldrteq	r1, [fp], #-2640
    518c:	f2010000 	vhadd.s8	d0, d1, d0
    5190:	00004104 	andeq	r4, r0, r4, lsl #2
    5194:	0022d100 	eoreq	sp, r2, r0, lsl #2
    5198:	228d1b00 	addcs	r1, sp, #0	; 0x0
    519c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    51a0:	00004104 	andeq	r4, r0, r4, lsl #2
    51a4:	0022e400 	eoreq	lr, r2, r0, lsl #8
    51a8:	242a0000 	strtcs	r0, [sl]
    51ac:	68000005 	stmdavs	r0, {r0, r2}
    51b0:	78080081 	stmdavc	r8, {r0, r7}
    51b4:	01080081 	smlabbeq	r8, r1, r0, r0
    51b8:	0013125d 	andseq	r1, r3, sp, asr r2
    51bc:	05332b00 	ldreq	r2, [r3, #-2816]!
    51c0:	50010000 	andpl	r0, r1, r0
    51c4:	00053f2c 	andeq	r3, r5, ip, lsr #30
    51c8:	00230200 	eoreq	r0, r3, r0, lsl #4
    51cc:	054b1f00 	strbeq	r1, [fp, #-3840]
    51d0:	23150000 	tstcs	r5, #0	; 0x0
    51d4:	19000000 	stmdbne	r0, {}
    51d8:	0025a501 	eoreq	sl, r5, r1, lsl #10
    51dc:	05470100 	strbeq	r0, [r7, #-256]
    51e0:	00817801 	addeq	r7, r1, r1, lsl #16
    51e4:	0081be08 	addeq	fp, r1, r8, lsl #28
    51e8:	00233308 	eoreq	r3, r3, r8, lsl #6
    51ec:	00139500 	andseq	r9, r3, r0, lsl #10
    51f0:	22372500 	eorscs	r2, r7, #0	; 0x0
    51f4:	45010000 	strmi	r0, [r1]
    51f8:	00051e05 	andeq	r1, r5, r5, lsl #28
    51fc:	1a500100 	bne	1405604 <__Stack_Size+0x1405204>
    5200:	0000246d 	andeq	r2, r0, sp, ror #8
    5204:	41054501 	tstmi	r5, r1, lsl #10
    5208:	52000000 	andpl	r0, r0, #0	; 0x0
    520c:	1a000023 	bne	52a0 <__Stack_Size+0x4ea0>
    5210:	000021fd 	strdeq	r2, [r0], -sp
    5214:	41054601 	tstmi	r5, r1, lsl #12
    5218:	65000000 	strvs	r0, [r0]
    521c:	25000023 	strcs	r0, [r0, #-35]
    5220:	0000224d 	andeq	r2, r0, sp, asr #4
    5224:	41054601 	tstmi	r5, r1, lsl #12
    5228:	01000000 	tsteq	r0, r0
    522c:	221d1b53 	andscs	r1, sp, #84992	; 0x14c00
    5230:	48010000 	stmdami	r1, {}
    5234:	00004105 	andeq	r4, r0, r5, lsl #2
    5238:	00237800 	eoreq	r7, r3, r0, lsl #16
    523c:	269b2600 	ldrcs	r2, [fp], r0, lsl #12
    5240:	49010000 	stmdbmi	r1, {}
    5244:	00004105 	andeq	r4, r0, r5, lsl #2
    5248:	26540100 	ldrbcs	r0, [r4], -r0, lsl #2
    524c:	000023ba 	strheq	r2, [r0], -sl
    5250:	41054a01 	tstmi	r5, r1, lsl #20
    5254:	01000000 	tsteq	r0, r0
    5258:	01290052 	qsubeq	r0, r2, r9
    525c:	00002875 	andeq	r2, r0, r5, ror r8
    5260:	01058001 	tsteq	r5, r1
    5264:	080081c0 	stmdaeq	r0, {r6, r7, r8, pc}
    5268:	080081d0 	stmdaeq	r0, {r4, r6, r7, r8, pc}
    526c:	13dc5d01 	bicsne	r5, ip, #64	; 0x40
    5270:	37250000 	strcc	r0, [r5, -r0]!
    5274:	01000022 	tsteq	r0, r2, lsr #32
    5278:	051e057f 	ldreq	r0, [lr, #-1407]
    527c:	50010000 	andpl	r0, r1, r0
    5280:	00223c1a 	eoreq	r3, r2, sl, lsl ip
    5284:	057f0100 	ldrbeq	r0, [pc, #-256]!	; 518c <__Stack_Size+0x4d8c>
    5288:	00000041 	andeq	r0, r0, r1, asr #32
    528c:	00002396 	muleq	r0, r6, r3
    5290:	00269b1b 	eoreq	r9, r6, fp, lsl fp
    5294:	05810100 	streq	r0, [r1, #256]
    5298:	00000041 	andeq	r0, r0, r1, asr #32
    529c:	000023a9 	andeq	r2, r0, r9, lsr #7
    52a0:	79012900 	stmdbvc	r1, {r8, fp, sp}
    52a4:	01000021 	tsteq	r0, r1, lsr #32
    52a8:	d00105a2 	andle	r0, r1, r2, lsr #11
    52ac:	e4080081 	str	r0, [r8], #-129
    52b0:	01080081 	smlabbeq	r8, r1, r0, r0
    52b4:	0014215d 	andseq	r2, r4, sp, asr r1
    52b8:	22372500 	eorscs	r2, r7, #0	; 0x0
    52bc:	a1010000 	tstge	r1, r0
    52c0:	00051e05 	andeq	r1, r5, r5, lsl #28
    52c4:	25500100 	ldrbcs	r0, [r0, #-256]
    52c8:	0000223c 	andeq	r2, r0, ip, lsr r2
    52cc:	4105a101 	tstmi	r5, r1, lsl #2
    52d0:	01000000 	tsteq	r0, r0
    52d4:	269b1b51 	undefined
    52d8:	a3010000 	movwge	r0, #4096	; 0x1000
    52dc:	00004105 	andeq	r4, r0, r5, lsl #2
    52e0:	0023c700 	eoreq	ip, r3, r0, lsl #14
    52e4:	01290000 	teqeq	r9, r0
    52e8:	00002953 	andeq	r2, r0, r3, asr r9
    52ec:	0105c401 	tsteq	r5, r1, lsl #8
    52f0:	080081e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, pc}
    52f4:	080081f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, pc}
    52f8:	14685d01 	strbtne	r5, [r8], #-3329
    52fc:	37250000 	strcc	r0, [r5, -r0]!
    5300:	01000022 	tsteq	r0, r2, lsr #32
    5304:	051e05c3 	ldreq	r0, [lr, #-1475]
    5308:	50010000 	andpl	r0, r1, r0
    530c:	00223c1a 	eoreq	r3, r2, sl, lsl ip
    5310:	05c30100 	strbeq	r0, [r3, #256]
    5314:	00000041 	andeq	r0, r0, r1, asr #32
    5318:	000023e5 	andeq	r2, r0, r5, ror #7
    531c:	0026a41b 	eoreq	sl, r6, fp, lsl r4
    5320:	05c50100 	strbeq	r0, [r5, #256]
    5324:	00000041 	andeq	r0, r0, r1, asr #32
    5328:	000023f8 	strdeq	r2, [r0], -r8
    532c:	02012900 	andeq	r2, r1, #0	; 0x0
    5330:	01000026 	tsteq	r0, r6, lsr #32
    5334:	f40105e6 	vst3.<illegal width 64>	{d0,d2,d4}, [r1, :128], r6
    5338:	08080081 	stmdaeq	r8, {r0, r7}
    533c:	01080082 	smlabbeq	r8, r2, r0, r0
    5340:	0014ad5d 	andseq	sl, r4, sp, asr sp
    5344:	22372500 	eorscs	r2, r7, #0	; 0x0
    5348:	e5010000 	str	r0, [r1]
    534c:	00051e05 	andeq	r1, r5, r5, lsl #28
    5350:	25500100 	ldrbcs	r0, [r0, #-256]
    5354:	0000223c 	andeq	r2, r0, ip, lsr r2
    5358:	4105e501 	tstmi	r5, r1, lsl #10
    535c:	01000000 	tsteq	r0, r0
    5360:	26a41b51 	ssatcs	r1, #5, r1, asr #22
    5364:	e7010000 	str	r0, [r1, -r0]
    5368:	00004105 	andeq	r4, r0, r5, lsl #2
    536c:	00241600 	eoreq	r1, r4, r0, lsl #12
    5370:	01290000 	teqeq	r9, r0
    5374:	00002370 	andeq	r2, r0, r0, ror r3
    5378:	01060301 	tsteq	r6, r1, lsl #6
    537c:	08008208 	stmdaeq	r0, {r3, r9, pc}
    5380:	08008222 	stmdaeq	r0, {r1, r5, r9, pc}
    5384:	14e25d01 	strbtne	r5, [r2], #3329
    5388:	37250000 	strcc	r0, [r5, -r0]!
    538c:	01000022 	tsteq	r0, r2, lsr #32
    5390:	051e0602 	ldreq	r0, [lr, #-1538]
    5394:	50010000 	andpl	r0, r1, r0
    5398:	00112625 	andseq	r2, r1, r5, lsr #12
    539c:	06020100 	streq	r0, [r2], -r0, lsl #2
    53a0:	000000a9 	andeq	r0, r0, r9, lsr #1
    53a4:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    53a8:	0026b901 	eoreq	fp, r6, r1, lsl #18
    53ac:	061e0100 	ldreq	r0, [lr], -r0, lsl #2
    53b0:	00822401 	addeq	r2, r2, r1, lsl #8
    53b4:	00823e08 	addeq	r3, r2, r8, lsl #28
    53b8:	175d0108 	ldrbne	r0, [sp, -r8, lsl #2]
    53bc:	25000015 	strcs	r0, [r0, #-21]
    53c0:	00002237 	andeq	r2, r0, r7, lsr r2
    53c4:	1e061d01 	cdpne	13, 0, cr1, cr6, cr1, {0}
    53c8:	01000005 	tsteq	r0, r5
    53cc:	11262550 	teqne	r6, r0, asr r5
    53d0:	1d010000 	stcne	0, cr0, [r1]
    53d4:	0000a906 	andeq	sl, r0, r6, lsl #18
    53d8:	00510100 	subseq	r0, r1, r0, lsl #2
    53dc:	21c10129 	biccs	r0, r1, r9, lsr #2
    53e0:	3a010000 	bcc	453e8 <__Stack_Size+0x44fe8>
    53e4:	82400106 	subhi	r0, r0, #-2147483647	; 0x80000001
    53e8:	825a0800 	subshi	r0, sl, #0	; 0x0
    53ec:	5d010800 	stcpl	8, cr0, [r1]
    53f0:	0000154c 	andeq	r1, r0, ip, asr #10
    53f4:	00223725 	eoreq	r3, r2, r5, lsr #14
    53f8:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    53fc:	0000051e 	andeq	r0, r0, lr, lsl r5
    5400:	26255001 	strtcs	r5, [r5], -r1
    5404:	01000011 	tsteq	r0, r1, lsl r0
    5408:	00a90639 	adceq	r0, r9, r9, lsr r6
    540c:	51010000 	tstpl	r1, r0
    5410:	c7012900 	strgt	r2, [r1, -r0, lsl #18]
    5414:	01000026 	tsteq	r0, r6, lsr #32
    5418:	5c010656 	stcpl	6, cr0, [r1], {86}
    541c:	76080082 	strvc	r0, [r8], -r2, lsl #1
    5420:	01080082 	smlabbeq	r8, r2, r0, r0
    5424:	0015815d 	andseq	r8, r5, sp, asr r1
    5428:	22372500 	eorscs	r2, r7, #0	; 0x0
    542c:	55010000 	strpl	r0, [r1]
    5430:	00051e06 	andeq	r1, r5, r6, lsl #28
    5434:	25500100 	ldrbcs	r0, [r0, #-256]
    5438:	00001126 	andeq	r1, r0, r6, lsr #2
    543c:	a9065501 	stmdbge	r6, {r0, r8, sl, ip, lr}
    5440:	01000000 	tsteq	r0, r0
    5444:	01290051 	qsubeq	r0, r1, r9
    5448:	000021e8 	andeq	r2, r0, r8, ror #3
    544c:	01067501 	tsteq	r6, r1, lsl #10
    5450:	08008278 	stmdaeq	r0, {r3, r4, r5, r6, r9, pc}
    5454:	08008288 	stmdaeq	r0, {r3, r7, r9, pc}
    5458:	15c85d01 	strbne	r5, [r8, #3329]
    545c:	37250000 	strcc	r0, [r5, -r0]!
    5460:	01000022 	tsteq	r0, r2, lsr #32
    5464:	051e0674 	ldreq	r0, [lr, #-1652]
    5468:	50010000 	andpl	r0, r1, r0
    546c:	0020b31a 	eoreq	fp, r0, sl, lsl r3
    5470:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
    5474:	00000041 	andeq	r0, r0, r1, asr #32
    5478:	00002434 	andeq	r2, r0, r4, lsr r4
    547c:	00269b1b 	eoreq	r9, r6, fp, lsl fp
    5480:	06760100 	ldrbteq	r0, [r6], -r0, lsl #2
    5484:	00000041 	andeq	r0, r0, r1, asr #32
    5488:	00002447 	andeq	r2, r0, r7, asr #8
    548c:	64012900 	strvs	r2, [r1], #-2304
    5490:	01000021 	tsteq	r0, r1, lsr #32
    5494:	88010696 	stmdahi	r1, {r1, r2, r4, r7, r9, sl}
    5498:	9c080082 	stcls	0, cr0, [r8], {130}
    549c:	01080082 	smlabbeq	r8, r2, r0, r0
    54a0:	00160d5d 	andseq	r0, r6, sp, asr sp
    54a4:	22372500 	eorscs	r2, r7, #0	; 0x0
    54a8:	95010000 	strls	r0, [r1]
    54ac:	00051e06 	andeq	r1, r5, r6, lsl #28
    54b0:	25500100 	ldrbcs	r0, [r0, #-256]
    54b4:	000020b3 	strheq	r2, [r0], -r3
    54b8:	41069501 	tstmi	r6, r1, lsl #10
    54bc:	01000000 	tsteq	r0, r0
    54c0:	269b1b51 	undefined
    54c4:	97010000 	strls	r0, [r1, -r0]
    54c8:	00004106 	andeq	r4, r0, r6, lsl #2
    54cc:	00246500 	eoreq	r6, r4, r0, lsl #10
    54d0:	01290000 	teqeq	r9, r0
    54d4:	000020c1 	andeq	r2, r0, r1, asr #1
    54d8:	0106b701 	tsteq	r6, r1, lsl #14
    54dc:	0800829c 	stmdaeq	r0, {r2, r3, r4, r7, r9, pc}
    54e0:	080082ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, pc}
    54e4:	16545d01 	ldrbne	r5, [r4], -r1, lsl #26
    54e8:	37250000 	strcc	r0, [r5, -r0]!
    54ec:	01000022 	tsteq	r0, r2, lsr #32
    54f0:	051e06b6 	ldreq	r0, [lr, #-1718]
    54f4:	50010000 	andpl	r0, r1, r0
    54f8:	0020b31a 	eoreq	fp, r0, sl, lsl r3
    54fc:	06b60100 	ldrteq	r0, [r6], r0, lsl #2
    5500:	00000041 	andeq	r0, r0, r1, asr #32
    5504:	00002483 	andeq	r2, r0, r3, lsl #9
    5508:	0026a41b 	eoreq	sl, r6, fp, lsl r4
    550c:	06b80100 	ldrteq	r0, [r8], r0, lsl #2
    5510:	00000041 	andeq	r0, r0, r1, asr #32
    5514:	00002496 	muleq	r0, r6, r4
    5518:	57012900 	strpl	r2, [r1, -r0, lsl #18]
    551c:	01000020 	tsteq	r0, r0, lsr #32
    5520:	ac0106d8 	stcge	6, cr0, [r1], {216}
    5524:	c0080082 	andgt	r0, r8, r2, lsl #1
    5528:	01080082 	smlabbeq	r8, r2, r0, r0
    552c:	0016995d 	andseq	r9, r6, sp, asr r9
    5530:	22372500 	eorscs	r2, r7, #0	; 0x0
    5534:	d7010000 	strle	r0, [r1, -r0]
    5538:	00051e06 	andeq	r1, r5, r6, lsl #28
    553c:	25500100 	ldrbcs	r0, [r0, #-256]
    5540:	000020b3 	strheq	r2, [r0], -r3
    5544:	4106d701 	tstmi	r6, r1, lsl #14
    5548:	01000000 	tsteq	r0, r0
    554c:	26a41b51 	ssatcs	r1, #5, r1, asr #22
    5550:	d9010000 	stmdble	r1, {}
    5554:	00004106 	andeq	r4, r0, r6, lsl #2
    5558:	0024b400 	eoreq	fp, r4, r0, lsl #8
    555c:	01290000 	teqeq	r9, r0
    5560:	0000264a 	andeq	r2, r0, sl, asr #12
    5564:	0106f801 	tstpeq	r6, r1, lsl #16
    5568:	080082c0 	stmdaeq	r0, {r6, r7, r9, pc}
    556c:	080082d0 	stmdaeq	r0, {r4, r6, r7, r9, pc}
    5570:	16e05d01 	strbtne	r5, [r0], r1, lsl #26
    5574:	37250000 	strcc	r0, [r5, -r0]!
    5578:	01000022 	tsteq	r0, r2, lsr #32
    557c:	051e06f7 	ldreq	r0, [lr, #-1783]
    5580:	50010000 	andpl	r0, r1, r0
    5584:	0020f31a 	eoreq	pc, r0, sl, lsl r3
    5588:	06f70100 	ldrbteq	r0, [r7], r0, lsl #2
    558c:	00000041 	andeq	r0, r0, r1, asr #32
    5590:	000024d2 	ldrdeq	r2, [r0], -r2
    5594:	00269b1b 	eoreq	r9, r6, fp, lsl fp
    5598:	06f90100 	ldrbteq	r0, [r9], r0, lsl #2
    559c:	00000041 	andeq	r0, r0, r1, asr #32
    55a0:	000024e5 	andeq	r2, r0, r5, ror #9
    55a4:	d7012900 	strle	r2, [r1, -r0, lsl #18]
    55a8:	01000023 	tsteq	r0, r3, lsr #32
    55ac:	d0010719 	andle	r0, r1, r9, lsl r7
    55b0:	e4080082 	str	r0, [r8], #-130
    55b4:	01080082 	smlabbeq	r8, r2, r0, r0
    55b8:	0017255d 	andseq	r2, r7, sp, asr r5
    55bc:	22372500 	eorscs	r2, r7, #0	; 0x0
    55c0:	18010000 	stmdane	r1, {}
    55c4:	00051e07 	andeq	r1, r5, r7, lsl #28
    55c8:	25500100 	ldrbcs	r0, [r0, #-256]
    55cc:	000020f3 	strdeq	r2, [r0], -r3
    55d0:	41071801 	tstmi	r7, r1, lsl #16
    55d4:	01000000 	tsteq	r0, r0
    55d8:	269b1b51 	undefined
    55dc:	1a010000 	bne	455e4 <__Stack_Size+0x451e4>
    55e0:	00004107 	andeq	r4, r0, r7, lsl #2
    55e4:	00250300 	eoreq	r0, r5, r0, lsl #6
    55e8:	01290000 	teqeq	r9, r0
    55ec:	00002225 	andeq	r2, r0, r5, lsr #4
    55f0:	01073a01 	tsteq	r7, r1, lsl #20
    55f4:	080082e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, pc}
    55f8:	080082f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, pc}
    55fc:	176c5d01 	strbne	r5, [ip, -r1, lsl #26]!
    5600:	37250000 	strcc	r0, [r5, -r0]!
    5604:	01000022 	tsteq	r0, r2, lsr #32
    5608:	051e0739 	ldreq	r0, [lr, #-1849]
    560c:	50010000 	andpl	r0, r1, r0
    5610:	0020f31a 	eoreq	pc, r0, sl, lsl r3
    5614:	07390100 	ldreq	r0, [r9, -r0, lsl #2]!
    5618:	00000041 	andeq	r0, r0, r1, asr #32
    561c:	00002521 	andeq	r2, r0, r1, lsr #10
    5620:	0026a41b 	eoreq	sl, r6, fp, lsl r4
    5624:	073b0100 	ldreq	r0, [fp, -r0, lsl #2]!
    5628:	00000041 	andeq	r0, r0, r1, asr #32
    562c:	00002534 	andeq	r2, r0, r4, lsr r5
    5630:	1e012900 	cdpne	9, 0, cr2, cr1, cr0, {0}
    5634:	01000020 	tsteq	r0, r0, lsr #32
    5638:	f401075b 	vst1.16	{d0}, [r1, :64], fp
    563c:	08080082 	stmdaeq	r8, {r1, r7}
    5640:	01080083 	smlabbeq	r8, r3, r0, r0
    5644:	0017b15d 	andseq	fp, r7, sp, asr r1
    5648:	22372500 	eorscs	r2, r7, #0	; 0x0
    564c:	5a010000 	bpl	45654 <__Stack_Size+0x45254>
    5650:	00051e07 	andeq	r1, r5, r7, lsl #28
    5654:	25500100 	ldrbcs	r0, [r0, #-256]
    5658:	000020f3 	strdeq	r2, [r0], -r3
    565c:	41075a01 	tstmi	r7, r1, lsl #20
    5660:	01000000 	tsteq	r0, r0
    5664:	26a41b51 	ssatcs	r1, #5, r1, asr #22
    5668:	5c010000 	stcpl	0, cr0, [r1], {0}
    566c:	00004107 	andeq	r4, r0, r7, lsl #2
    5670:	00255200 	eoreq	r5, r5, r0, lsl #4
    5674:	01290000 	teqeq	r9, r0
    5678:	000028ed 	andeq	r2, r0, sp, ror #17
    567c:	01077c01 	tsteq	r7, r1, lsl #24
    5680:	08008308 	stmdaeq	r0, {r3, r8, r9, pc}
    5684:	08008318 	stmdaeq	r0, {r3, r4, r8, r9, pc}
    5688:	17f85d01 	ldrbne	r5, [r8, r1, lsl #26]!
    568c:	37250000 	strcc	r0, [r5, -r0]!
    5690:	01000022 	tsteq	r0, r2, lsr #32
    5694:	051e077b 	ldreq	r0, [lr, #-1915]
    5698:	50010000 	andpl	r0, r1, r0
    569c:	00248d1a 	eoreq	r8, r4, sl, lsl sp
    56a0:	077b0100 	ldrbeq	r0, [fp, -r0, lsl #2]!
    56a4:	00000041 	andeq	r0, r0, r1, asr #32
    56a8:	00002570 	andeq	r2, r0, r0, ror r5
    56ac:	00269b1b 	eoreq	r9, r6, fp, lsl fp
    56b0:	077d0100 	ldrbeq	r0, [sp, -r0, lsl #2]!
    56b4:	00000041 	andeq	r0, r0, r1, asr #32
    56b8:	00002583 	andeq	r2, r0, r3, lsl #11
    56bc:	e1012900 	tst	r1, r0, lsl #18
    56c0:	01000027 	tsteq	r0, r7, lsr #32
    56c4:	1801079c 	stmdane	r1, {r2, r3, r4, r7, r8, r9, sl}
    56c8:	28080083 	stmdacs	r8, {r0, r1, r7}
    56cc:	01080083 	smlabbeq	r8, r3, r0, r0
    56d0:	00183d5d 	andseq	r3, r8, sp, asr sp
    56d4:	22372500 	eorscs	r2, r7, #0	; 0x0
    56d8:	9b010000 	blls	456e0 <__Stack_Size+0x452e0>
    56dc:	00051e07 	andeq	r1, r5, r7, lsl #28
    56e0:	25500100 	ldrbcs	r0, [r0, #-256]
    56e4:	0000248d 	andeq	r2, r0, sp, lsl #9
    56e8:	41079b01 	tstmi	r7, r1, lsl #22
    56ec:	01000000 	tsteq	r0, r0
    56f0:	269b1b51 	undefined
    56f4:	9d010000 	stcls	0, cr0, [r1]
    56f8:	00004107 	andeq	r4, r0, r7, lsl #2
    56fc:	0025a100 	eoreq	sl, r5, r0, lsl #2
    5700:	01290000 	teqeq	r9, r0
    5704:	000025e6 	andeq	r2, r0, r6, ror #11
    5708:	0107bc01 	tsteq	r7, r1, lsl #24
    570c:	08008328 	stmdaeq	r0, {r3, r5, r8, r9, pc}
    5710:	08008338 	stmdaeq	r0, {r3, r4, r5, r8, r9, pc}
    5714:	18845d01 	stmne	r4, {r0, r8, sl, fp, ip, lr}
    5718:	37250000 	strcc	r0, [r5, -r0]!
    571c:	01000022 	tsteq	r0, r2, lsr #32
    5720:	051e07bb 	ldreq	r0, [lr, #-1979]
    5724:	50010000 	andpl	r0, r1, r0
    5728:	00248d1a 	eoreq	r8, r4, sl, lsl sp
    572c:	07bb0100 	ldreq	r0, [fp, r0, lsl #2]!
    5730:	00000041 	andeq	r0, r0, r1, asr #32
    5734:	000025bf 	strheq	r2, [r0], -pc
    5738:	0026a41b 	eoreq	sl, r6, fp, lsl r4
    573c:	07bd0100 	ldreq	r0, [sp, r0, lsl #2]!
    5740:	00000041 	andeq	r0, r0, r1, asr #32
    5744:	000025d2 	ldrdeq	r2, [r0], -r2
    5748:	20012900 	andcs	r2, r1, r0, lsl #18
    574c:	01000023 	tsteq	r0, r3, lsr #32
    5750:	380107dc 	stmdacc	r1, {r2, r3, r4, r6, r7, r8, r9, sl}
    5754:	48080083 	stmdami	r8, {r0, r1, r7}
    5758:	01080083 	smlabbeq	r8, r3, r0, r0
    575c:	0018c95d 	andseq	ip, r8, sp, asr r9
    5760:	22372500 	eorscs	r2, r7, #0	; 0x0
    5764:	db010000 	blle	4576c <__Stack_Size+0x4536c>
    5768:	00051e07 	andeq	r1, r5, r7, lsl #28
    576c:	25500100 	ldrbcs	r0, [r0, #-256]
    5770:	0000248d 	andeq	r2, r0, sp, lsl #9
    5774:	4107db01 	tstmi	r7, r1, lsl #22
    5778:	01000000 	tsteq	r0, r0
    577c:	26a41b51 	ssatcs	r1, #5, r1, asr #22
    5780:	dd010000 	stcle	0, cr0, [r1]
    5784:	00004107 	andeq	r4, r0, r7, lsl #2
    5788:	0025f000 	eoreq	pc, r5, r0
    578c:	01290000 	teqeq	r9, r0
    5790:	00002030 	andeq	r2, r0, r0, lsr r0
    5794:	0107fc01 	tstpeq	r7, r1, lsl #24
    5798:	08008348 	stmdaeq	r0, {r3, r6, r8, r9, pc}
    579c:	08008358 	stmdaeq	r0, {r3, r4, r6, r8, r9, pc}
    57a0:	19105d01 	ldmdbne	r0, {r0, r8, sl, fp, ip, lr}
    57a4:	37250000 	strcc	r0, [r5, -r0]!
    57a8:	01000022 	tsteq	r0, r2, lsr #32
    57ac:	051e07fb 	ldreq	r0, [lr, #-2043]
    57b0:	50010000 	andpl	r0, r1, r0
    57b4:	00008c1a 	andeq	r8, r0, sl, lsl ip
    57b8:	07fb0100 	ldrbeq	r0, [fp, r0, lsl #2]!
    57bc:	00000041 	andeq	r0, r0, r1, asr #32
    57c0:	0000260e 	andeq	r2, r0, lr, lsl #12
    57c4:	0023ba1b 	eoreq	fp, r3, fp, lsl sl
    57c8:	07fd0100 	ldrbeq	r0, [sp, r0, lsl #2]!
    57cc:	00000041 	andeq	r0, r0, r1, asr #32
    57d0:	00002621 	andeq	r2, r0, r1, lsr #12
    57d4:	6a012900 	bvs	4fbdc <__Stack_Size+0x4f7dc>
    57d8:	01000026 	tsteq	r0, r6, lsr #32
    57dc:	58010819 	stmdapl	r1, {r0, r3, r4, fp}
    57e0:	68080083 	stmdavs	r8, {r0, r1, r7}
    57e4:	01080083 	smlabbeq	r8, r3, r0, r0
    57e8:	0019575d 	andseq	r5, r9, sp, asr r7
    57ec:	22372500 	eorscs	r2, r7, #0	; 0x0
    57f0:	18010000 	stmdane	r1, {}
    57f4:	00051e08 	andeq	r1, r5, r8, lsl #28
    57f8:	1a500100 	bne	1405c00 <__Stack_Size+0x1405800>
    57fc:	000003c4 	andeq	r0, r0, r4, asr #7
    5800:	41081801 	tstmi	r8, r1, lsl #16
    5804:	3f000000 	svccc	0x00000000
    5808:	1b000026 	blne	58a8 <__Stack_Size+0x54a8>
    580c:	000023ba 	strheq	r2, [r0], -sl
    5810:	41081a01 	tstmi	r8, r1, lsl #20
    5814:	52000000 	andpl	r0, r0, #0	; 0x0
    5818:	00000026 	andeq	r0, r0, r6, lsr #32
    581c:	29cc0129 	stmibcs	ip, {r0, r3, r5, r8}^
    5820:	37010000 	strcc	r0, [r1, -r0]
    5824:	83680108 	cmnhi	r8, #2	; 0x2
    5828:	837c0800 	cmnhi	ip, #0	; 0x0
    582c:	5d010800 	stcpl	8, cr0, [r1]
    5830:	0000199c 	muleq	r0, ip, r9
    5834:	00223725 	eoreq	r3, r2, r5, lsr #14
    5838:	08360100 	ldmdaeq	r6!, {r8}
    583c:	0000051e 	andeq	r0, r0, lr, lsl r5
    5840:	8c255001 	stchi	0, cr5, [r5], #-4
    5844:	01000000 	tsteq	r0, r0
    5848:	00410836 	subeq	r0, r1, r6, lsr r8
    584c:	51010000 	tstpl	r1, r0
    5850:	0023ba1b 	eoreq	fp, r3, fp, lsl sl
    5854:	08380100 	ldmdaeq	r8!, {r8}
    5858:	00000041 	andeq	r0, r0, r1, asr #32
    585c:	00002670 	andeq	r2, r0, r0, ror r6
    5860:	ad012900 	stcge	9, cr2, [r1]
    5864:	01000028 	tsteq	r0, r8, lsr #32
    5868:	7c010854 	stcvc	8, cr0, [r1], {84}
    586c:	90080083 	andls	r0, r8, r3, lsl #1
    5870:	01080083 	smlabbeq	r8, r3, r0, r0
    5874:	0019e15d 	andseq	lr, r9, sp, asr r1
    5878:	22372500 	eorscs	r2, r7, #0	; 0x0
    587c:	53010000 	movwpl	r0, #4096	; 0x1000
    5880:	00051e08 	andeq	r1, r5, r8, lsl #28
    5884:	25500100 	ldrbcs	r0, [r0, #-256]
    5888:	000003c4 	andeq	r0, r0, r4, asr #7
    588c:	41085301 	tstmi	r8, r1, lsl #6
    5890:	01000000 	tsteq	r0, r0
    5894:	23ba1b51 	undefined instruction 0x23ba1b51
    5898:	55010000 	strpl	r0, [r1]
    589c:	00004108 	andeq	r4, r0, r8, lsl #2
    58a0:	00268e00 	eoreq	r8, r6, r0, lsl #28
    58a4:	01290000 	teqeq	r9, r0
    58a8:	000028fd 	strdeq	r2, [r0], -sp
    58ac:	01087201 	tsteq	r8, r1, lsl #4
    58b0:	08008390 	stmdaeq	r0, {r4, r7, r8, r9, pc}
    58b4:	080083a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, pc}
    58b8:	1a265d01 	bne	99ccc4 <__Stack_Size+0x99c8c4>
    58bc:	37250000 	strcc	r0, [r5, -r0]!
    58c0:	01000022 	tsteq	r0, r2, lsr #32
    58c4:	051e0871 	ldreq	r0, [lr, #-2161]
    58c8:	50010000 	andpl	r0, r1, r0
    58cc:	00008c25 	andeq	r8, r0, r5, lsr #24
    58d0:	08710100 	ldmdaeq	r1!, {r8}^
    58d4:	00000041 	andeq	r0, r0, r1, asr #32
    58d8:	ba1b5101 	blt	6d9ce4 <__Stack_Size+0x6d98e4>
    58dc:	01000023 	tsteq	r0, r3, lsr #32
    58e0:	00410873 	subeq	r0, r1, r3, ror r8
    58e4:	26ac0000 	strtcs	r0, [ip], r0
    58e8:	29000000 	stmdbcs	r0, {}
    58ec:	00209c01 	eoreq	r9, r0, r1, lsl #24
    58f0:	088f0100 	stmeq	pc, {r8}
    58f4:	0083a401 	addeq	sl, r3, r1, lsl #8
    58f8:	0083b808 	addeq	fp, r3, r8, lsl #16
    58fc:	6b5d0108 	blvs	1745d24 <__Stack_Size+0x1745924>
    5900:	2500001a 	strcs	r0, [r0, #-26]
    5904:	00002237 	andeq	r2, r0, r7, lsr r2
    5908:	1e088e01 	cdpne	14, 0, cr8, cr8, cr1, {0}
    590c:	01000005 	tsteq	r0, r5
    5910:	03c42550 	biceq	r2, r4, #335544320	; 0x14000000
    5914:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    5918:	00004108 	andeq	r4, r0, r8, lsl #2
    591c:	1b510100 	blne	1445d24 <__Stack_Size+0x1445924>
    5920:	000023ba 	strheq	r2, [r0], -sl
    5924:	41089001 	tstmi	r8, r1
    5928:	ca000000 	bgt	5930 <__Stack_Size+0x5530>
    592c:	00000026 	andeq	r0, r0, r6, lsr #32
    5930:	28c40129 	stmiacs	r4, {r0, r3, r5, r8}^
    5934:	ad010000 	stcge	0, cr0, [r1]
    5938:	83b80108 	undefined instruction 0x83b80108
    593c:	83cc0800 	bichi	r0, ip, #0	; 0x0
    5940:	5d010800 	stcpl	8, cr0, [r1]
    5944:	00001ab0 	strheq	r1, [r0], -r0
    5948:	00223725 	eoreq	r3, r2, r5, lsr #14
    594c:	08ac0100 	stmiaeq	ip!, {r8}
    5950:	0000051e 	andeq	r0, r0, lr, lsl r5
    5954:	8c255001 	stchi	0, cr5, [r5], #-4
    5958:	01000000 	tsteq	r0, r0
    595c:	004108ac 	subeq	r0, r1, ip, lsr #17
    5960:	51010000 	tstpl	r1, r0
    5964:	0023ba1b 	eoreq	fp, r3, fp, lsl sl
    5968:	08ae0100 	stmiaeq	lr!, {r8}
    596c:	00000041 	andeq	r0, r0, r1, asr #32
    5970:	000026e8 	andeq	r2, r0, r8, ror #13
    5974:	ab012900 	blge	4fd7c <__Stack_Size+0x4f97c>
    5978:	01000024 	tsteq	r0, r4, lsr #32
    597c:	cc0108cf 	stcgt	8, cr0, [r1], {207}
    5980:	ec080083 	stc	0, cr0, [r8], {131}
    5984:	01080083 	smlabbeq	r8, r3, r0, r0
    5988:	001af55d 	andseq	pc, sl, sp, asr r5
    598c:	22372500 	eorscs	r2, r7, #0	; 0x0
    5990:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    5994:	00051e08 	andeq	r1, r5, r8, lsl #28
    5998:	25500100 	ldrbcs	r0, [r0, #-256]
    599c:	000026ad 	andeq	r2, r0, sp, lsr #13
    59a0:	4108ce01 	tstmi	r8, r1, lsl #28
    59a4:	01000000 	tsteq	r0, r0
    59a8:	271c1a51 	undefined
    59ac:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    59b0:	00004108 	andeq	r4, r0, r8, lsl #2
    59b4:	00270600 	eoreq	r0, r7, r0, lsl #12
    59b8:	01290000 	teqeq	r9, r0
    59bc:	0000214f 	andeq	r2, r0, pc, asr #2
    59c0:	0108eb01 	tsteq	r8, r1, lsl #22
    59c4:	080083ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, pc}
    59c8:	0800840c 	stmdaeq	r0, {r2, r3, sl, pc}
    59cc:	1b3a5d01 	blne	e9cdd8 <__Stack_Size+0xe9c9d8>
    59d0:	37250000 	strcc	r0, [r5, -r0]!
    59d4:	01000022 	tsteq	r0, r2, lsr #32
    59d8:	051e08ea 	ldreq	r0, [lr, #-2282]
    59dc:	50010000 	andpl	r0, r1, r0
    59e0:	0026ad25 	eoreq	sl, r6, r5, lsr #26
    59e4:	08ea0100 	stmiaeq	sl!, {r8}^
    59e8:	00000041 	andeq	r0, r0, r1, asr #32
    59ec:	231a5101 	tstcs	sl, #1073741824	; 0x40000000
    59f0:	01000025 	tsteq	r0, r5, lsr #32
    59f4:	004108ea 	subeq	r0, r1, sl, ror #17
    59f8:	27190000 	ldrcs	r0, [r9, -r0]
    59fc:	19000000 	stmdbne	r0, {}
    5a00:	00242a01 	eoreq	r2, r4, r1, lsl #20
    5a04:	09130100 	ldmdbeq	r3, {r8}
    5a08:	00840c01 	addeq	r0, r4, r1, lsl #24
    5a0c:	00847408 	addeq	r7, r4, r8, lsl #8
    5a10:	00272c08 	eoreq	r2, r7, r8, lsl #24
    5a14:	001b8500 	andseq	r8, fp, r0, lsl #10
    5a18:	22371a00 	eorscs	r1, r7, #0	; 0x0
    5a1c:	12010000 	andne	r0, r1, #0	; 0x0
    5a20:	00051e09 	andeq	r1, r5, r9, lsl #28
    5a24:	00274b00 	eoreq	r4, r7, r0, lsl #22
    5a28:	26ad1a00 	strtcs	r1, [sp], r0, lsl #20
    5a2c:	12010000 	andne	r0, r1, #0	; 0x0
    5a30:	00004109 	andeq	r4, r0, r9, lsl #2
    5a34:	00276a00 	eoreq	r6, r7, r0, lsl #20
    5a38:	05791a00 	ldrbeq	r1, [r9, #-2560]!
    5a3c:	12010000 	andne	r0, r1, #0	; 0x0
    5a40:	00004109 	andeq	r4, r0, r9, lsl #2
    5a44:	00278800 	eoreq	r8, r7, r0, lsl #16
    5a48:	01290000 	teqeq	r9, r0
    5a4c:	00002560 	andeq	r2, r0, r0, ror #10
    5a50:	01093901 	tsteq	r9, r1, lsl #18
    5a54:	08008474 	stmdaeq	r0, {r2, r4, r5, r6, sl, pc}
    5a58:	0800848e 	stmdaeq	r0, {r1, r2, r3, r7, sl, pc}
    5a5c:	1bba5d01 	blne	fee9ce68 <SCS_BASE+0x1ee8ee68>
    5a60:	37250000 	strcc	r0, [r5, -r0]!
    5a64:	01000022 	tsteq	r0, r2, lsr #32
    5a68:	051e0938 	ldreq	r0, [lr, #-2360]
    5a6c:	50010000 	andpl	r0, r1, r0
    5a70:	00112625 	andseq	r2, r1, r5, lsr #12
    5a74:	09380100 	ldmdbeq	r8!, {r8}
    5a78:	000000a9 	andeq	r0, r0, r9, lsr #1
    5a7c:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    5a80:	00219e01 	eoreq	r9, r1, r1, lsl #28
    5a84:	09560100 	ldmdbeq	r6, {r8}^
    5a88:	00849001 	addeq	r9, r4, r1
    5a8c:	0084aa08 	addeq	sl, r4, r8, lsl #20
    5a90:	ef5d0108 	svc	0x005d0108
    5a94:	2500001b 	strcs	r0, [r0, #-27]
    5a98:	00002237 	andeq	r2, r0, r7, lsr r2
    5a9c:	1e095501 	cfsh32ne	mvfx5, mvfx9, #1
    5aa0:	01000005 	tsteq	r0, r5
    5aa4:	25782550 	ldrbcs	r2, [r8, #-1360]!
    5aa8:	55010000 	strpl	r0, [r1]
    5aac:	00004109 	andeq	r4, r0, r9, lsl #2
    5ab0:	00510100 	subseq	r0, r1, r0, lsl #2
    5ab4:	24e80129 	strbtcs	r0, [r8], #297
    5ab8:	71010000 	tstvc	r1, r0
    5abc:	84ac0109 	strthi	r0, [ip], #265
    5ac0:	84c60800 	strbhi	r0, [r6], #2048
    5ac4:	5d010800 	stcpl	8, cr0, [r1]
    5ac8:	00001c24 	andeq	r1, r0, r4, lsr #24
    5acc:	00223725 	eoreq	r3, r2, r5, lsr #14
    5ad0:	09700100 	ldmdbeq	r0!, {r8}^
    5ad4:	0000051e 	andeq	r0, r0, lr, lsl r5
    5ad8:	26255001 	strtcs	r5, [r5], -r1
    5adc:	01000011 	tsteq	r0, r1, lsl r0
    5ae0:	00a90970 	adceq	r0, r9, r0, ror r9
    5ae4:	51010000 	tstpl	r1, r0
    5ae8:	69012900 	stmdbvs	r1, {r8, fp, sp}
    5aec:	01000027 	tsteq	r0, r7, lsr #32
    5af0:	c801098e 	stmdagt	r1, {r1, r2, r3, r7, r8, fp}
    5af4:	de080084 	cdple	0, 0, cr0, cr8, cr4, {4}
    5af8:	01080084 	smlabbeq	r8, r4, r0, r0
    5afc:	001c5b5d 	andseq	r5, ip, sp, asr fp
    5b00:	22372500 	eorscs	r2, r7, #0	; 0x0
    5b04:	8d010000 	stchi	0, cr0, [r1]
    5b08:	00051e09 	andeq	r1, r5, r9, lsl #28
    5b0c:	1a500100 	bne	1405f14 <__Stack_Size+0x1405b14>
    5b10:	000021d1 	ldrdeq	r2, [r0], -r1
    5b14:	41098d01 	tstmi	r9, r1, lsl #26
    5b18:	a6000000 	strge	r0, [r0], -r0
    5b1c:	00000027 	andeq	r0, r0, r7, lsr #32
    5b20:	23fb0129 	mvnscs	r0, #1073741834	; 0x4000000a
    5b24:	af010000 	svcge	0x00010000
    5b28:	84e00109 	strbthi	r0, [r0], #265
    5b2c:	84f60800 	ldrbthi	r0, [r6], #2048
    5b30:	5d010800 	stcpl	8, cr0, [r1]
    5b34:	00001c92 	muleq	r0, r2, ip
    5b38:	00223725 	eoreq	r3, r2, r5, lsr #14
    5b3c:	09ae0100 	stmibeq	lr!, {r8}
    5b40:	0000051e 	andeq	r0, r0, lr, lsl r5
    5b44:	801a5001 	andshi	r5, sl, r1
    5b48:	01000027 	tsteq	r0, r7, lsr #32
    5b4c:	004109ae 	subeq	r0, r1, lr, lsr #19
    5b50:	27b90000 	ldrcs	r0, [r9, r0]!
    5b54:	29000000 	stmdbcs	r0, {}
    5b58:	00263601 	eoreq	r3, r6, r1, lsl #12
    5b5c:	09cb0100 	stmibeq	fp, {r8}^
    5b60:	0084f801 	addeq	pc, r4, r1, lsl #16
    5b64:	00850e08 	addeq	r0, r5, r8, lsl #28
    5b68:	c95d0108 	ldmdbgt	sp, {r3, r8}^
    5b6c:	2500001c 	strcs	r0, [r0, #-28]
    5b70:	00002237 	andeq	r2, r0, r7, lsr r2
    5b74:	1e09ca01 	fmacsne	s24, s18, s2
    5b78:	01000005 	tsteq	r0, r5
    5b7c:	22711a50 	rsbscs	r1, r1, #327680	; 0x50000
    5b80:	ca010000 	bgt	45b88 <__Stack_Size+0x45788>
    5b84:	00004109 	andeq	r4, r0, r9, lsl #2
    5b88:	0027cc00 	eoreq	ip, r7, r0, lsl #24
    5b8c:	01290000 	teqeq	r9, r0
    5b90:	00002987 	andeq	r2, r0, r7, lsl #19
    5b94:	0109e501 	tsteq	r9, r1, lsl #10
    5b98:	08008510 	stmdaeq	r0, {r4, r8, sl, pc}
    5b9c:	08008526 	stmdaeq	r0, {r1, r2, r5, r8, sl, pc}
    5ba0:	1d005d01 	stcne	13, cr5, [r0, #-4]
    5ba4:	37250000 	strcc	r0, [r5, -r0]!
    5ba8:	01000022 	tsteq	r0, r2, lsr #32
    5bac:	051e09e4 	ldreq	r0, [lr, #-2532]
    5bb0:	50010000 	andpl	r0, r1, r0
    5bb4:	00280c1a 	eoreq	r0, r8, sl, lsl ip
    5bb8:	09e40100 	stmibeq	r4!, {r8}^
    5bbc:	00000041 	andeq	r0, r0, r1, asr #32
    5bc0:	000027df 	ldrdeq	r2, [r0], -pc
    5bc4:	50012900 	andpl	r2, r1, r0, lsl #18
    5bc8:	01000024 	tsteq	r0, r4, lsr #32
    5bcc:	280109fa 	stmdacs	r1, {r1, r3, r4, r5, r6, r7, r8, fp}
    5bd0:	2c080085 	stccs	0, cr0, [r8], {133}
    5bd4:	01080085 	smlabbeq	r8, r5, r0, r0
    5bd8:	001d355d 	andseq	r3, sp, sp, asr r5
    5bdc:	22372500 	eorscs	r2, r7, #0	; 0x0
    5be0:	f9010000 	undefined instruction 0xf9010000
    5be4:	00051e09 	andeq	r1, r5, r9, lsl #28
    5be8:	25500100 	ldrbcs	r0, [r0, #-256]
    5bec:	00001fd6 	ldrdeq	r1, [r0], -r6
    5bf0:	4109f901 	tstpmi	r9, r1, lsl #18
    5bf4:	01000000 	tsteq	r0, r0
    5bf8:	01290051 	qsubeq	r0, r1, r9
    5bfc:	00002834 	andeq	r2, r0, r4, lsr r8
    5c00:	010a0b01 	tsteq	sl, r1, lsl #22
    5c04:	0800852c 	stmdaeq	r0, {r2, r3, r5, r8, sl, pc}
    5c08:	08008530 	stmdaeq	r0, {r4, r5, r8, sl, pc}
    5c0c:	1d6a5d01 	stclne	13, cr5, [sl, #-4]!
    5c10:	37250000 	strcc	r0, [r5, -r0]!
    5c14:	01000022 	tsteq	r0, r2, lsr #32
    5c18:	051e0a0a 	ldreq	r0, [lr, #-2570]
    5c1c:	50010000 	andpl	r0, r1, r0
    5c20:	00283b25 	eoreq	r3, r8, r5, lsr #22
    5c24:	0a0a0100 	beq	28602c <__Stack_Size+0x285c2c>
    5c28:	00000041 	andeq	r0, r0, r1, asr #32
    5c2c:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    5c30:	00206c01 	eoreq	r6, r0, r1, lsl #24
    5c34:	0a1d0100 	beq	74603c <__Stack_Size+0x745c3c>
    5c38:	00853001 	addeq	r3, r5, r1
    5c3c:	00853408 	addeq	r3, r5, r8, lsl #8
    5c40:	9f5d0108 	svcls	0x005d0108
    5c44:	2500001d 	strcs	r0, [r0, #-29]
    5c48:	00002237 	andeq	r2, r0, r7, lsr r2
    5c4c:	1e0a1c01 	cdpne	12, 0, cr1, cr10, cr1, {0}
    5c50:	01000005 	tsteq	r0, r5
    5c54:	20732550 	rsbscs	r2, r3, r0, asr r5
    5c58:	1c010000 	stcne	0, cr0, [r1], {0}
    5c5c:	0000410a 	andeq	r4, r0, sl, lsl #2
    5c60:	00510100 	subseq	r0, r1, r0, lsl #2
    5c64:	207c0129 	rsbscs	r0, ip, r9, lsr #2
    5c68:	2f010000 	svccs	0x00010000
    5c6c:	8534010a 	ldrhi	r0, [r4, #-266]!
    5c70:	85380800 	ldrhi	r0, [r8, #-2048]!
    5c74:	5d010800 	stcpl	8, cr0, [r1]
    5c78:	00001dd4 	ldrdeq	r1, [r0], -r4
    5c7c:	00223725 	eoreq	r3, r2, r5, lsr #14
    5c80:	0a2e0100 	beq	b86088 <__Stack_Size+0xb85c88>
    5c84:	0000051e 	andeq	r0, r0, lr, lsl r5
    5c88:	83255001 	teqhi	r5, #1	; 0x1
    5c8c:	01000020 	tsteq	r0, r0, lsr #32
    5c90:	00410a2e 	subeq	r0, r1, lr, lsr #20
    5c94:	51010000 	tstpl	r1, r0
    5c98:	d6012900 	strle	r2, [r1], -r0, lsl #18
    5c9c:	01000025 	tsteq	r0, r5, lsr #32
    5ca0:	38010a41 	stmdacc	r1, {r0, r6, r9, fp}
    5ca4:	3c080085 	stccc	0, cr0, [r8], {133}
    5ca8:	01080085 	smlabbeq	r8, r5, r0, r0
    5cac:	001e095d 	andseq	r0, lr, sp, asr r9
    5cb0:	22372500 	eorscs	r2, r7, #0	; 0x0
    5cb4:	40010000 	andmi	r0, r1, r0
    5cb8:	00051e0a 	andeq	r1, r5, sl, lsl #28
    5cbc:	25500100 	ldrbcs	r0, [r0, #-256]
    5cc0:	000025dd 	ldrdeq	r2, [r0], -sp
    5cc4:	410a4001 	tstmi	sl, r1
    5cc8:	01000000 	tsteq	r0, r0
    5ccc:	01290051 	qsubeq	r0, r1, r9
    5cd0:	0000208c 	andeq	r2, r0, ip, lsl #1
    5cd4:	010a5301 	tsteq	sl, r1, lsl #6
    5cd8:	0800853c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, pc}
    5cdc:	08008542 	stmdaeq	r0, {r1, r6, r8, sl, pc}
    5ce0:	1e3e5d01 	cdpne	13, 3, cr5, cr14, cr1, {0}
    5ce4:	37250000 	strcc	r0, [r5, -r0]!
    5ce8:	01000022 	tsteq	r0, r2, lsr #32
    5cec:	051e0a52 	ldreq	r0, [lr, #-2642]
    5cf0:	50010000 	andpl	r0, r1, r0
    5cf4:	00209325 	eoreq	r9, r0, r5, lsr #6
    5cf8:	0a520100 	beq	1486100 <__Stack_Size+0x1485d00>
    5cfc:	00000041 	andeq	r0, r0, r1, asr #32
    5d00:	2a005101 	bcs	1a10c <__Stack_Size+0x19d0c>
    5d04:	00000612 	andeq	r0, r0, r2, lsl r6
    5d08:	08008544 	stmdaeq	r0, {r2, r6, r8, sl, pc}
    5d0c:	0800855a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, pc}
    5d10:	1e625d01 	cdpne	13, 6, cr5, cr2, cr1, {0}
    5d14:	212b0000 	teqcs	fp, r0
    5d18:	01000006 	tsteq	r0, r6
    5d1c:	062d2c50 	undefined
    5d20:	27f20000 	ldrbcs	r0, [r2, r0]!
    5d24:	2a000000 	bcs	5d2c <__Stack_Size+0x592c>
    5d28:	0000063a 	andeq	r0, r0, sl, lsr r6
    5d2c:	0800855c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, pc}
    5d30:	08008576 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, pc}
    5d34:	1e845d01 	cdpne	13, 8, cr5, cr4, cr1, {0}
    5d38:	492b0000 	stmdbmi	fp!, {}
    5d3c:	01000006 	tsteq	r0, r6
    5d40:	06552b50 	undefined
    5d44:	51010000 	tstpl	r1, r0
    5d48:	06c52a00 	strbeq	r2, [r5], r0, lsl #20
    5d4c:	85780000 	ldrbhi	r0, [r8]!
    5d50:	858e0800 	strhi	r0, [lr, #2048]
    5d54:	5d010800 	stcpl	8, cr0, [r1]
    5d58:	00001ea8 	andeq	r1, r0, r8, lsr #29
    5d5c:	0006d42b 	andeq	sp, r6, fp, lsr #8
    5d60:	2c500100 	ldfcse	f0, [r0], {0}
    5d64:	000006e0 	andeq	r0, r0, r0, ror #13
    5d68:	00002805 	andeq	r2, r0, r5, lsl #16
    5d6c:	07502a00 	ldrbeq	r2, [r0, -r0, lsl #20]
    5d70:	85900000 	ldrhi	r0, [r0]
    5d74:	85aa0800 	strhi	r0, [sl, #2048]!
    5d78:	5d010800 	stcpl	8, cr0, [r1]
    5d7c:	00001eca 	andeq	r1, r0, sl, asr #29
    5d80:	00075f2b 	andeq	r5, r7, fp, lsr #30
    5d84:	2b500100 	blcs	140618c <__Stack_Size+0x1405d8c>
    5d88:	0000076b 	andeq	r0, r0, fp, ror #14
    5d8c:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    5d90:	0023c201 	eoreq	ip, r3, r1, lsl #4
    5d94:	0ad90100 	beq	ff64619c <SCS_BASE+0x1f63819c>
    5d98:	0085ac01 	addeq	sl, r5, r1, lsl #24
    5d9c:	0085bc08 	addeq	fp, r5, r8, lsl #24
    5da0:	015d0108 	cmpeq	sp, r8, lsl #2
    5da4:	2500001f 	strcs	r0, [r0, #-31]
    5da8:	00002237 	andeq	r2, r0, r7, lsr r2
    5dac:	1e0ad801 	cdpne	8, 0, cr13, cr10, cr1, {0}
    5db0:	01000005 	tsteq	r0, r5
    5db4:	20fe1a50 	rscscs	r1, lr, r0, asr sl
    5db8:	d8010000 	stmdale	r1, {}
    5dbc:	0000410a 	andeq	r4, r0, sl, lsl #2
    5dc0:	00281800 	eoreq	r1, r8, r0, lsl #16
    5dc4:	012d0000 	teqeq	sp, r0
    5dc8:	0000220d 	andeq	r2, r0, sp, lsl #4
    5dcc:	010aed01 	tsteq	sl, r1, lsl #26
    5dd0:	00000041 	andeq	r0, r0, r1, asr #32
    5dd4:	080085bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, pc}
    5dd8:	080085c2 	stmdaeq	r0, {r1, r6, r7, r8, sl, pc}
    5ddc:	1f2e5d01 	svcne	0x002e5d01
    5de0:	371a0000 	ldrcc	r0, [sl, -r0]
    5de4:	01000022 	tsteq	r0, r2, lsr #32
    5de8:	051e0aec 	ldreq	r0, [lr, #-2796]
    5dec:	282b0000 	stmdacs	fp!, {}
    5df0:	2d000000 	stccs	0, cr0, [r0]
    5df4:	0022cf01 	eoreq	ip, r2, r1, lsl #30
    5df8:	0afe0100 	beq	fff86200 <SCS_BASE+0x1ff78200>
    5dfc:	00004101 	andeq	r4, r0, r1, lsl #2
    5e00:	0085c400 	addeq	ip, r5, r0, lsl #8
    5e04:	0085ca08 	addeq	ip, r5, r8, lsl #20
    5e08:	5b5d0108 	blpl	1746230 <__Stack_Size+0x1745e30>
    5e0c:	1a00001f 	bne	5e90 <__Stack_Size+0x5a90>
    5e10:	00002237 	andeq	r2, r0, r7, lsr r2
    5e14:	1e0afd01 	cdpne	13, 0, cr15, cr10, cr1, {0}
    5e18:	3e000005 	cdpcc	0, 0, cr0, cr0, cr5, {0}
    5e1c:	00000028 	andeq	r0, r0, r8, lsr #32
    5e20:	22df012d 	sbcscs	r0, pc, #1073741835	; 0x4000000b
    5e24:	0f010000 	svceq	0x00010000
    5e28:	0041010b 	subeq	r0, r1, fp, lsl #2
    5e2c:	85cc0000 	strbhi	r0, [ip]
    5e30:	85d20800 	ldrbhi	r0, [r2, #2048]
    5e34:	5d010800 	stcpl	8, cr0, [r1]
    5e38:	00001f88 	andeq	r1, r0, r8, lsl #31
    5e3c:	0022371a 	eoreq	r3, r2, sl, lsl r7
    5e40:	0b0e0100 	bleq	386248 <__Stack_Size+0x385e48>
    5e44:	0000051e 	andeq	r0, r0, lr, lsl r5
    5e48:	00002851 	andeq	r2, r0, r1, asr r8
    5e4c:	ef012d00 	svc	0x00012d00
    5e50:	01000022 	tsteq	r0, r2, lsr #32
    5e54:	41010b20 	tstmi	r1, r0, lsr #22
    5e58:	d4000000 	strle	r0, [r0]
    5e5c:	dc080085 	stcle	0, cr0, [r8], {133}
    5e60:	01080085 	smlabbeq	r8, r5, r0, r0
    5e64:	001fb55d 	andseq	fp, pc, sp, asr r5
    5e68:	22371a00 	eorscs	r1, r7, #0	; 0x0
    5e6c:	1f010000 	svcne	0x00010000
    5e70:	00051e0b 	andeq	r1, r5, fp, lsl #28
    5e74:	00286400 	eoreq	r6, r8, r0, lsl #8
    5e78:	012d0000 	teqeq	sp, r0
    5e7c:	00002616 	andeq	r2, r0, r6, lsl r6
    5e80:	010b3001 	tsteq	fp, r1
    5e84:	00000041 	andeq	r0, r0, r1, asr #32
    5e88:	080085dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, pc}
    5e8c:	080085e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, pc}
    5e90:	1fe25d01 	svcne	0x00e25d01
    5e94:	371a0000 	ldrcc	r0, [sl, -r0]
    5e98:	01000022 	tsteq	r0, r2, lsr #32
    5e9c:	051e0b2f 	ldreq	r0, [lr, #-2863]
    5ea0:	28770000 	ldmdacs	r7!, {}^
    5ea4:	2d000000 	stccs	0, cr0, [r0]
    5ea8:	0024b601 	eoreq	fp, r4, r1, lsl #12
    5eac:	0b400100 	bleq	10062b4 <__Stack_Size+0x1005eb4>
    5eb0:	00004101 	andeq	r4, r0, r1, lsl #2
    5eb4:	0085e400 	addeq	lr, r5, r0, lsl #8
    5eb8:	0085ea08 	addeq	lr, r5, r8, lsl #20
    5ebc:	0f5d0108 	svceq	0x005d0108
    5ec0:	1a000020 	bne	5f48 <__Stack_Size+0x5b48>
    5ec4:	00002237 	andeq	r2, r0, r7, lsr r2
    5ec8:	1e0b3f01 	cdpne	15, 0, cr3, cr11, cr1, {0}
    5ecc:	8a000005 	bhi	5ee8 <__Stack_Size+0x5ae8>
    5ed0:	00000028 	andeq	r0, r0, r8, lsr #32
    5ed4:	20d6012d 	sbcscs	r0, r6, sp, lsr #2
    5ed8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    5edc:	007e010b 	rsbseq	r0, lr, fp, lsl #2
    5ee0:	85ec0000 	strbhi	r0, [ip]!
    5ee4:	85f80800 	ldrbhi	r0, [r8, #2048]!
    5ee8:	5d010800 	stcpl	8, cr0, [r1]
    5eec:	00002056 	andeq	r2, r0, r6, asr r0
    5ef0:	0022371a 	eoreq	r3, r2, sl, lsl r7
    5ef4:	0b5d0100 	bleq	17462fc <__Stack_Size+0x1745efc>
    5ef8:	0000051e 	andeq	r0, r0, lr, lsl r5
    5efc:	0000289d 	muleq	r0, sp, r8
    5f00:	00243925 	eoreq	r3, r4, r5, lsr #18
    5f04:	0b5d0100 	bleq	174630c <__Stack_Size+0x1745f0c>
    5f08:	00000041 	andeq	r0, r0, r1, asr #32
    5f0c:	ad125101 	ldfges	f5, [r2, #-4]
    5f10:	01000011 	tsteq	r0, r1, lsl r0
    5f14:	00890b5f 	addeq	r0, r9, pc, asr fp
    5f18:	29000000 	stmdbcs	r0, {}
    5f1c:	00231201 	eoreq	r1, r3, r1, lsl #4
    5f20:	0b870100 	bleq	fe1c6328 <SCS_BASE+0x1e1b8328>
    5f24:	0085f801 	addeq	pc, r5, r1, lsl #16
    5f28:	00860208 	addeq	r0, r6, r8, lsl #4
    5f2c:	8d5d0108 	ldfhie	f0, [sp, #-32]
    5f30:	25000020 	strcs	r0, [r0, #-32]
    5f34:	00002237 	andeq	r2, r0, r7, lsr r2
    5f38:	1e0b8601 	cfmadd32ne	mvax0, mvfx8, mvfx11, mvfx1
    5f3c:	01000005 	tsteq	r0, r5
    5f40:	24391a50 	ldrtcs	r1, [r9], #-2640
    5f44:	86010000 	strhi	r0, [r1], -r0
    5f48:	0000410b 	andeq	r4, r0, fp, lsl #2
    5f4c:	0028b000 	eoreq	fp, r8, r0
    5f50:	012d0000 	teqeq	sp, r0
    5f54:	00002935 	andeq	r2, r0, r5, lsr r9
    5f58:	010ba301 	tsteq	fp, r1, lsl #6
    5f5c:	00000089 	andeq	r0, r0, r9, lsl #1
    5f60:	08008604 	stmdaeq	r0, {r2, r9, sl, pc}
    5f64:	0800861c 	stmdaeq	r0, {r2, r3, r4, r9, sl, pc}
    5f68:	20ec5d01 	rsccs	r5, ip, r1, lsl #26
    5f6c:	371a0000 	ldrcc	r0, [sl, -r0]
    5f70:	01000022 	tsteq	r0, r2, lsr #32
    5f74:	051e0ba2 	ldreq	r0, [lr, #-2978]
    5f78:	28c30000 	stmiacs	r3, {}^
    5f7c:	4c250000 	stcmi	0, cr0, [r5]
    5f80:	01000029 	tsteq	r0, r9, lsr #32
    5f84:	00410ba2 	subeq	r0, r1, r2, lsr #23
    5f88:	51010000 	tstpl	r1, r0
    5f8c:	0011ad12 	andseq	sl, r1, r2, lsl sp
    5f90:	0ba40100 	bleq	fe906398 <SCS_BASE+0x1e8f8398>
    5f94:	00000089 	andeq	r0, r0, r9, lsl #1
    5f98:	0011ae12 	andseq	sl, r1, r2, lsl lr
    5f9c:	0ba50100 	bleq	fe9463a4 <SCS_BASE+0x1e9383a4>
    5fa0:	00000041 	andeq	r0, r0, r1, asr #32
    5fa4:	00215b12 	eoreq	r5, r1, r2, lsl fp
    5fa8:	0ba50100 	bleq	fe9463b0 <SCS_BASE+0x1e9383b0>
    5fac:	00000041 	andeq	r0, r0, r1, asr #32
    5fb0:	4c012900 	stcmi	9, cr2, [r1], {0}
    5fb4:	01000023 	tsteq	r0, r3, lsr #32
    5fb8:	1c010bce 	stcne	11, cr0, [r1], {206}
    5fbc:	26080086 	strcs	r0, [r8], -r6, lsl #1
    5fc0:	01080086 	smlabbeq	r8, r6, r0, r0
    5fc4:	0021235d 	eoreq	r2, r1, sp, asr r3
    5fc8:	22372500 	eorscs	r2, r7, #0	; 0x0
    5fcc:	cd010000 	stcgt	0, cr0, [r1]
    5fd0:	00051e0b 	andeq	r1, r5, fp, lsl #28
    5fd4:	1a500100 	bne	14063dc <__Stack_Size+0x1405fdc>
    5fd8:	0000294c 	andeq	r2, r0, ip, asr #18
    5fdc:	410bcd01 	tstmi	fp, r1, lsl #26
    5fe0:	d6000000 	strle	r0, [r0], -r0
    5fe4:	00000028 	andeq	r0, r0, r8, lsr #32
    5fe8:	21b6012e 	undefined instruction 0x21b6012e
    5fec:	87010000 	strhi	r0, [r1, -r0]
    5ff0:	00862801 	addeq	r2, r6, r1, lsl #16
    5ff4:	0086f408 	addeq	pc, r6, r8, lsl #8
    5ff8:	0028e908 	eoreq	lr, r8, r8, lsl #18
    5ffc:	22371700 	eorscs	r1, r7, #0	; 0x0
    6000:	86010000 	strhi	r0, [r1], -r0
    6004:	0000051e 	andeq	r0, r0, lr, lsl r5
    6008:	00002914 	andeq	r2, r0, r4, lsl r9
    600c:	094c0000 	stmdbeq	ip, {}^
    6010:	00020000 	andeq	r0, r2, r0
    6014:	000013a1 	andeq	r1, r0, r1, lsr #7
    6018:	05510104 	ldrbeq	r0, [r1, #-260]
    601c:	0f010000 	svceq	0x00010000
    6020:	6900002d 	stmdbvs	r0, {r0, r2, r3, r5}
    6024:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    6028:	b0080086 	andlt	r0, r8, r6, lsl #1
    602c:	2c08008a 	stccs	0, cr0, [r8], {138}
    6030:	02000016 	andeq	r0, r0, #22	; 0x16
    6034:	2dcb0504 	cfstr64cs	mvdx0, [fp, #16]
    6038:	02020000 	andeq	r0, r2, #0	; 0x0
    603c:	0005d805 	andeq	sp, r5, r5, lsl #16
    6040:	06010200 	streq	r0, [r1], -r0, lsl #4
    6044:	0000069d 	muleq	r0, sp, r6
    6048:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    604c:	45270200 	strmi	r0, [r7, #-512]!
    6050:	02000000 	andeq	r0, r0, #0	; 0x0
    6054:	2e450704 	cdpcs	7, 4, cr0, cr5, cr4, {0}
    6058:	75030000 	strvc	r0, [r3]
    605c:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    6060:	00005728 	andeq	r5, r0, r8, lsr #14
    6064:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6068:	000007db 	ldrdeq	r0, [r0], -fp
    606c:	00387503 	eorseq	r7, r8, r3, lsl #10
    6070:	00682902 	rsbeq	r2, r8, r2, lsl #18
    6074:	01020000 	tsteq	r2, r0
    6078:	00069b08 	andeq	r9, r6, r8, lsl #22
    607c:	00570400 	subseq	r0, r7, r0, lsl #8
    6080:	01050000 	tsteq	r5, r0
    6084:	00893902 	addeq	r3, r9, r2, lsl #18
    6088:	47060000 	strmi	r0, [r6, -r0]
    608c:	00000014 	andeq	r0, r0, r4, lsl r0
    6090:	54455307 	strbpl	r5, [r5], #-775
    6094:	08000100 	stmdaeq	r0, {r8}
    6098:	00001d9a 	muleq	r0, sl, sp
    609c:	00743902 	rsbseq	r3, r4, r2, lsl #18
    60a0:	94080000 	strls	r0, [r8]
    60a4:	0200001b 	andeq	r0, r0, #27	; 0x1b
    60a8:	00007439 	andeq	r7, r0, r9, lsr r4
    60ac:	02010500 	andeq	r0, r1, #0	; 0x0
    60b0:	0000b43b 	andeq	fp, r0, fp, lsr r4
    60b4:	04240600 	strteq	r0, [r4], #-1536
    60b8:	06000000 	streq	r0, [r0], -r0
    60bc:	0000066d 	andeq	r0, r0, sp, ror #12
    60c0:	ec080001 	stc	0, cr0, [r8], {1}
    60c4:	02000000 	andeq	r0, r0, #0	; 0x0
    60c8:	00009f3b 	andeq	r9, r0, fp, lsr pc
    60cc:	07040900 	streq	r0, [r4, -r0, lsl #18]
    60d0:	39031c0a 	stmdbcc	r3, {r1, r3, sl, fp, ip}
    60d4:	00019c02 	andeq	r9, r1, r2, lsl #24
    60d8:	52530b00 	subspl	r0, r3, #0	; 0x0
    60dc:	023a0300 	eorseq	r0, sl, #0	; 0x0
    60e0:	0000006f 	andeq	r0, r0, pc, rrx
    60e4:	0c002302 	stceq	3, cr2, [r0], {2}
    60e8:	00000592 	muleq	r0, r2, r5
    60ec:	4c023b03 	stcmi	11, cr3, [r2], {3}
    60f0:	02000000 	andeq	r0, r0, #0	; 0x0
    60f4:	440b0223 	strmi	r0, [fp], #-547
    60f8:	3c030052 	stccc	0, cr0, [r3], {82}
    60fc:	00006f02 	andeq	r6, r0, r2, lsl #30
    6100:	04230200 	strteq	r0, [r3], #-512
    6104:	00059c0c 	andeq	r9, r5, ip, lsl #24
    6108:	023d0300 	eorseq	r0, sp, #0	; 0x0
    610c:	0000004c 	andeq	r0, r0, ip, asr #32
    6110:	0b062302 	bleq	18ed20 <__Stack_Size+0x18e920>
    6114:	00525242 	subseq	r5, r2, r2, asr #4
    6118:	6f023e03 	svcvs	0x00023e03
    611c:	02000000 	andeq	r0, r0, #0	; 0x0
    6120:	a60c0823 	strge	r0, [ip], -r3, lsr #16
    6124:	03000005 	movweq	r0, #5	; 0x5
    6128:	004c023f 	subeq	r0, ip, pc, lsr r2
    612c:	23020000 	movwcs	r0, #8192	; 0x2000
    6130:	52430b0a 	subpl	r0, r3, #10240	; 0x2800
    6134:	40030031 	andmi	r0, r3, r1, lsr r0
    6138:	00006f02 	andeq	r6, r0, r2, lsl #30
    613c:	0c230200 	sfmeq	f0, 4, [r3]
    6140:	0005b00c 	andeq	fp, r5, ip
    6144:	02410300 	subeq	r0, r1, #0	; 0x0
    6148:	0000004c 	andeq	r0, r0, ip, asr #32
    614c:	0b0e2302 	bleq	38ed5c <__Stack_Size+0x38e95c>
    6150:	00325243 	eorseq	r5, r2, r3, asr #4
    6154:	6f024203 	svcvs	0x00024203
    6158:	02000000 	andeq	r0, r0, #0	; 0x0
    615c:	ba0c1023 	blt	30a1f0 <__Stack_Size+0x309df0>
    6160:	03000005 	movweq	r0, #5	; 0x5
    6164:	004c0243 	subeq	r0, ip, r3, asr #4
    6168:	23020000 	movwcs	r0, #8192	; 0x2000
    616c:	52430b12 	subpl	r0, r3, #18432	; 0x4800
    6170:	44030033 	strmi	r0, [r3], #-51
    6174:	00006f02 	andeq	r6, r0, r2, lsl #30
    6178:	14230200 	strtne	r0, [r3], #-512
    617c:	0005c40c 	andeq	ip, r5, ip, lsl #8
    6180:	02450300 	subeq	r0, r5, #0	; 0x0
    6184:	0000004c 	andeq	r0, r0, ip, asr #32
    6188:	0c162302 	ldceq	3, cr2, [r6], {2}
    618c:	0000018e 	andeq	r0, r0, lr, lsl #3
    6190:	6f024603 	svcvs	0x00024603
    6194:	02000000 	andeq	r0, r0, #0	; 0x0
    6198:	ce0c1823 	cdpgt	8, 0, cr1, cr12, cr3, {1}
    619c:	03000005 	movweq	r0, #5	; 0x5
    61a0:	004c0247 	subeq	r0, ip, r7, asr #4
    61a4:	23020000 	movwcs	r0, #8192	; 0x2000
    61a8:	350d001a 	strcc	r0, [sp, #-26]
    61ac:	0300002a 	movweq	r0, #42	; 0x2a
    61b0:	00c20248 	sbceq	r0, r2, r8, asr #4
    61b4:	100e0000 	andne	r0, lr, r0
    61b8:	02051b04 	andeq	r1, r5, #4096	; 0x1000
    61bc:	ed0f0000 	stc	0, cr0, [pc]
    61c0:	04000001 	streq	r0, [r0], #-1
    61c4:	00003a1c 	andeq	r3, r0, ip, lsl sl
    61c8:	00230200 	eoreq	r0, r3, r0, lsl #4
    61cc:	0001320f 	andeq	r3, r1, pc, lsl #4
    61d0:	4c1d0400 	cfldrsmi	mvf0, [sp], {0}
    61d4:	02000000 	andeq	r0, r0, #0	; 0x0
    61d8:	560f0423 	strpl	r0, [pc], -r3, lsr #8
    61dc:	04000001 	streq	r0, [r0], #-1
    61e0:	00004c1e 	andeq	r4, r0, lr, lsl ip
    61e4:	06230200 	strteq	r0, [r3], -r0, lsl #4
    61e8:	0007940f 	andeq	r9, r7, pc, lsl #8
    61ec:	4c1f0400 	cfldrsmi	mvf0, [pc], {0}
    61f0:	02000000 	andeq	r0, r0, #0	; 0x0
    61f4:	4b0f0823 	blmi	3c8288 <__Stack_Size+0x3c7e88>
    61f8:	04000004 	streq	r0, [r0], #-4
    61fc:	00004c20 	andeq	r4, r0, r0, lsr #24
    6200:	0a230200 	beq	8c6a08 <__Stack_Size+0x8c6608>
    6204:	0004700f 	andeq	r7, r4, pc
    6208:	4c210400 	cfstrsmi	mvf0, [r1]
    620c:	02000000 	andeq	r0, r0, #0	; 0x0
    6210:	08000c23 	stmdaeq	r0, {r0, r1, r5, sl, fp}
    6214:	00000767 	andeq	r0, r0, r7, ror #14
    6218:	01a82204 	undefined instruction 0x01a82204
    621c:	080e0000 	stmdaeq	lr, {}
    6220:	02512604 	subseq	r2, r1, #4194304	; 0x400000
    6224:	330f0000 	movwcc	r0, #61440	; 0xf000
    6228:	0400002c 	streq	r0, [r0], #-44
    622c:	00004c27 	andeq	r4, r0, r7, lsr #24
    6230:	00230200 	eoreq	r0, r3, r0, lsl #4
    6234:	002cfd0f 	eoreq	pc, ip, pc, lsl #26
    6238:	4c280400 	cfstrsmi	mvf0, [r8]
    623c:	02000000 	andeq	r0, r0, #0	; 0x0
    6240:	f10f0223 	undefined instruction 0xf10f0223
    6244:	04000029 	streq	r0, [r0], #-41
    6248:	00004c29 	andeq	r4, r0, r9, lsr #24
    624c:	04230200 	strteq	r0, [r3], #-512
    6250:	002aa10f 	eoreq	sl, sl, pc, lsl #2
    6254:	4c2a0400 	cfstrsmi	mvf0, [sl]
    6258:	02000000 	andeq	r0, r0, #0	; 0x0
    625c:	08000623 	stmdaeq	r0, {r0, r1, r5, r9, sl}
    6260:	00002a43 	andeq	r2, r0, r3, asr #20
    6264:	02102b04 	andseq	r2, r0, #4096	; 0x1000
    6268:	140e0000 	strne	r0, [lr]
    626c:	02ab1a05 	adceq	r1, fp, #20480	; 0x5000
    6270:	f80f0000 	undefined instruction 0xf80f0000
    6274:	0500001d 	streq	r0, [r0, #-29]
    6278:	00003a1b 	andeq	r3, r0, fp, lsl sl
    627c:	00230200 	eoreq	r0, r3, r0, lsl #4
    6280:	001bfe0f 	andseq	pc, fp, pc, lsl #28
    6284:	3a1c0500 	bcc	70768c <__Stack_Size+0x70728c>
    6288:	02000000 	andeq	r0, r0, #0	; 0x0
    628c:	610f0423 	tstvs	pc, r3, lsr #8
    6290:	0500001e 	streq	r0, [r0, #-30]
    6294:	00003a1d 	andeq	r3, r0, sp, lsl sl
    6298:	08230200 	stmdaeq	r3!, {r9}
    629c:	001e140f 	andseq	r1, lr, pc, lsl #8
    62a0:	3a1e0500 	bcc	7876a8 <__Stack_Size+0x7872a8>
    62a4:	02000000 	andeq	r0, r0, #0	; 0x0
    62a8:	5a0f0c23 	bpl	3c933c <__Stack_Size+0x3c8f3c>
    62ac:	0500001d 	streq	r0, [r0, #-29]
    62b0:	00003a1f 	andeq	r3, r0, pc, lsl sl
    62b4:	10230200 	eorne	r0, r3, r0, lsl #4
    62b8:	1bc60800 	blne	ff1882c0 <SCS_BASE+0x1f17a2c0>
    62bc:	20050000 	andcs	r0, r5, r0
    62c0:	0000025c 	andeq	r0, r0, ip, asr r2
    62c4:	2d3c0110 	ldfcss	f0, [ip, #-64]!
    62c8:	e9010000 	stmdb	r1, {}
    62cc:	0086f401 	addeq	pc, r6, r1, lsl #8
    62d0:	00871208 	addeq	r1, r7, r8, lsl #4
    62d4:	db5d0108 	blle	17466fc <__Stack_Size+0x17462fc>
    62d8:	11000002 	tstne	r0, r2
    62dc:	00002bda 	ldrdeq	r2, [r0], -sl
    62e0:	02dbe801 	sbcseq	lr, fp, #65536	; 0x10000
    62e4:	50010000 	andpl	r0, r1, r0
    62e8:	05041200 	streq	r1, [r4, #-512]
    62ec:	13000002 	movwne	r0, #2	; 0x2
    62f0:	002cb801 	eoreq	fp, ip, r1, lsl #16
    62f4:	01000100 	tsteq	r0, r0, lsl #2
    62f8:	00871401 	addeq	r1, r7, r1, lsl #8
    62fc:	00873c08 	addeq	r3, r7, r8, lsl #24
    6300:	245d0108 	ldrbcs	r0, [sp], #-264
    6304:	11000003 	tstne	r0, r3
    6308:	00002bc0 	andeq	r2, r0, r0, asr #23
    630c:	0324ff01 	msreq	CPSR_s, #4	; 0x4
    6310:	50010000 	andpl	r0, r1, r0
    6314:	002b2814 	eoreq	r2, fp, r4, lsl r8
    6318:	2aff0100 	bcs	fffc6720 <SCS_BASE+0x1ffb8720>
    631c:	33000003 	movwcc	r0, #3	; 0x3
    6320:	15000029 	strne	r0, [r0, #-41]
    6324:	000014f8 	strdeq	r1, [r0], -r8
    6328:	3a010101 	bcc	46734 <__Stack_Size+0x46334>
    632c:	01000000 	tsteq	r0, r0
    6330:	04120052 	ldreq	r0, [r2], #-82
    6334:	0000019c 	muleq	r0, ip, r1
    6338:	02510412 	subseq	r0, r1, #301989888	; 0x12000000
    633c:	01130000 	tsteq	r3, r0
    6340:	00002b4b 	andeq	r2, r0, fp, asr #22
    6344:	01012401 	tsteq	r1, r1, lsl #8
    6348:	0800873c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, pc}
    634c:	0800874a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, pc}
    6350:	03575d01 	cmpeq	r7, #64	; 0x40
    6354:	28160000 	ldmdacs	r6, {}
    6358:	0100002b 	tsteq	r0, fp, lsr #32
    635c:	032a0123 	teqeq	sl, #-1073741816	; 0xc0000008
    6360:	50010000 	andpl	r0, r1, r0
    6364:	5a011300 	bpl	4af6c <__Stack_Size+0x4ab6c>
    6368:	0100002a 	tsteq	r0, sl, lsr #32
    636c:	4c010138 	stfmis	f0, [r1], {56}
    6370:	66080087 	strvs	r0, [r8], -r7, lsl #1
    6374:	01080087 	smlabbeq	r8, r7, r0, r0
    6378:	00038c5d 	andeq	r8, r3, sp, asr ip
    637c:	2bc01600 	blcs	ff00bb84 <SCS_BASE+0x1effdb84>
    6380:	37010000 	strcc	r0, [r1, -r0]
    6384:	00032401 	andeq	r2, r3, r1, lsl #8
    6388:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    638c:	00001126 	andeq	r1, r0, r6, lsr #2
    6390:	b4013701 	strlt	r3, [r1], #-1793
    6394:	01000000 	tsteq	r0, r0
    6398:	01170051 	tsteq	r7, r1, asr r0
    639c:	00002bb1 	strheq	r2, [r0], -r1
    63a0:	01016301 	tsteq	r1, r1, lsl #6
    63a4:	08008768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, pc}
    63a8:	080087a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, pc}
    63ac:	00002946 	andeq	r2, r0, r6, asr #18
    63b0:	0000040d 	andeq	r0, r0, sp, lsl #8
    63b4:	002bc018 	eoreq	ip, fp, r8, lsl r0
    63b8:	01620100 	cmneq	r2, r0, lsl #2
    63bc:	00000324 	andeq	r0, r0, r4, lsr #6
    63c0:	00002965 	andeq	r2, r0, r5, ror #18
    63c4:	002caf18 	eoreq	sl, ip, r8, lsl pc
    63c8:	01620100 	cmneq	r2, r0, lsl #2
    63cc:	0000004c 	andeq	r0, r0, ip, asr #32
    63d0:	00002978 	andeq	r2, r0, r8, ror r9
    63d4:	00112616 	andseq	r2, r1, r6, lsl r6
    63d8:	01620100 	cmneq	r2, r0, lsl #2
    63dc:	000000b4 	strheq	r0, [r0], -r4
    63e0:	33155201 	tstcc	r5, #268435456	; 0x10000000
    63e4:	0100002d 	tsteq	r0, sp, lsr #32
    63e8:	003a0164 	eorseq	r0, sl, r4, ror #2
    63ec:	5c010000 	stcpl	0, cr0, [r1], {0}
    63f0:	002bfa19 	eoreq	pc, fp, r9, lsl sl
    63f4:	01640100 	cmneq	r4, r0, lsl #2
    63f8:	0000003a 	andeq	r0, r0, sl, lsr r0
    63fc:	002d0815 	eoreq	r0, sp, r5, lsl r8
    6400:	01640100 	cmneq	r4, r0, lsl #2
    6404:	0000003a 	andeq	r0, r0, sl, lsr r0
    6408:	611a5101 	tstvs	sl, r1, lsl #2
    640c:	0100002b 	tsteq	r0, fp, lsr #32
    6410:	003a0165 	eorseq	r0, sl, r5, ror #2
    6414:	29960000 	ldmibcs	r6, {}
    6418:	13000000 	movwne	r0, #0	; 0x0
    641c:	002a9401 	eoreq	r9, sl, r1, lsl #8
    6420:	019e0100 	orrseq	r0, lr, r0, lsl #2
    6424:	0087a801 	addeq	sl, r7, r1, lsl #16
    6428:	0087c008 	addeq	ip, r7, r8
    642c:	505d0108 	subspl	r0, sp, r8, lsl #2
    6430:	16000004 	strne	r0, [r0], -r4
    6434:	00002bc0 	andeq	r2, r0, r0, asr #23
    6438:	24019d01 	strcs	r9, [r1], #-3329
    643c:	01000003 	tsteq	r0, r3
    6440:	2b3e1650 	blcs	f8bd88 <__Stack_Size+0xf8b988>
    6444:	9d010000 	stcls	0, cr0, [r1]
    6448:	00004c01 	andeq	r4, r0, r1, lsl #24
    644c:	16510100 	ldrbne	r0, [r1], -r0, lsl #2
    6450:	00001126 	andeq	r1, r0, r6, lsr #2
    6454:	b4019d01 	strlt	r9, [r1], #-3329
    6458:	01000000 	tsteq	r0, r0
    645c:	01130052 	tsteq	r3, r2, asr r0
    6460:	00002b7d 	andeq	r2, r0, sp, ror fp
    6464:	0101bd01 	tsteq	r1, r1, lsl #26
    6468:	080087c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, pc}
    646c:	080087d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, pc}
    6470:	04855d01 	streq	r5, [r5], #3329
    6474:	c0160000 	andsgt	r0, r6, r0
    6478:	0100002b 	tsteq	r0, fp, lsr #32
    647c:	032401bc 	teqeq	r4, #47	; 0x2f
    6480:	50010000 	andpl	r0, r1, r0
    6484:	002beb16 	eoreq	lr, fp, r6, lsl fp
    6488:	01bc0100 	undefined instruction 0x01bc0100
    648c:	0000005e 	andeq	r0, r0, lr, asr r0
    6490:	13005101 	movwne	r5, #257	; 0x101
    6494:	002cc801 	eoreq	ip, ip, r1, lsl #16
    6498:	01d60100 	bicseq	r0, r6, r0, lsl #2
    649c:	0087d801 	addeq	sp, r7, r1, lsl #16
    64a0:	0087ee08 	addeq	lr, r7, r8, lsl #28
    64a4:	bc5d0108 	ldflte	f0, [sp], {8}
    64a8:	16000004 	strne	r0, [r0], -r4
    64ac:	00002bc0 	andeq	r2, r0, r0, asr #23
    64b0:	2401d501 	strcs	sp, [r1], #-1281
    64b4:	01000003 	tsteq	r0, r3
    64b8:	2a871850 	bcs	fe1cc600 <SCS_BASE+0x1e1be600>
    64bc:	d5010000 	strle	r0, [r1]
    64c0:	00004c01 	andeq	r4, r0, r1, lsl #24
    64c4:	0029bf00 	eoreq	fp, r9, r0, lsl #30
    64c8:	01130000 	tsteq	r3, r0
    64cc:	00002c3f 	andeq	r2, r0, pc, lsr ip
    64d0:	0101eb01 	tsteq	r1, r1, lsl #22
    64d4:	080087f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, pc}
    64d8:	0800880a 	stmdaeq	r0, {r1, r3, fp, pc}
    64dc:	04f15d01 	ldrbteq	r5, [r1], #3329
    64e0:	c0160000 	andsgt	r0, r6, r0
    64e4:	0100002b 	tsteq	r0, fp, lsr #32
    64e8:	032401ea 	teqeq	r4, #-2147483590	; 0x8000003a
    64ec:	50010000 	andpl	r0, r1, r0
    64f0:	00112616 	andseq	r2, r1, r6, lsl r6
    64f4:	01ea0100 	mvneq	r0, r0, lsl #2
    64f8:	000000b4 	strheq	r0, [r0], -r4
    64fc:	13005101 	movwne	r5, #257	; 0x101
    6500:	002aef01 	eoreq	lr, sl, r1, lsl #30
    6504:	020b0100 	andeq	r0, fp, #0	; 0x0
    6508:	00880c01 	addeq	r0, r8, r1, lsl #24
    650c:	00882208 	addeq	r2, r8, r8, lsl #4
    6510:	285d0108 	ldmdacs	sp, {r3, r8}^
    6514:	16000005 	strne	r0, [r0], -r5
    6518:	00002bc0 	andeq	r2, r0, r0, asr #23
    651c:	24020a01 	strcs	r0, [r2], #-2561
    6520:	01000003 	tsteq	r0, r3
    6524:	2a1a1850 	bcs	68c66c <__Stack_Size+0x68c26c>
    6528:	0a010000 	beq	46530 <__Stack_Size+0x46130>
    652c:	00004c02 	andeq	r4, r0, r2, lsl #24
    6530:	0029d200 	eoreq	sp, r9, r0, lsl #4
    6534:	01130000 	tsteq	r3, r0
    6538:	00002c65 	andeq	r2, r0, r5, ror #24
    653c:	01022001 	tsteq	r2, r1
    6540:	08008824 	stmdaeq	r0, {r2, r5, fp, pc}
    6544:	0800883e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, pc}
    6548:	055d5d01 	ldrbeq	r5, [sp, #-3329]
    654c:	c0160000 	andsgt	r0, r6, r0
    6550:	0100002b 	tsteq	r0, fp, lsr #32
    6554:	0324021f 	teqeq	r4, #-268435455	; 0xf0000001
    6558:	50010000 	andpl	r0, r1, r0
    655c:	00112616 	andseq	r2, r1, r6, lsl r6
    6560:	021f0100 	andseq	r0, pc, #0	; 0x0
    6564:	000000b4 	strheq	r0, [r0], -r4
    6568:	13005101 	movwne	r5, #257	; 0x101
    656c:	002a6401 	eoreq	r6, sl, r1, lsl #8
    6570:	023c0100 	eorseq	r0, ip, #0	; 0x0
    6574:	00884001 	addeq	r4, r8, r1
    6578:	00884808 	addeq	r4, r8, r8, lsl #16
    657c:	945d0108 	ldrbls	r0, [sp], #-264
    6580:	16000005 	strne	r0, [r0], -r5
    6584:	00002bc0 	andeq	r2, r0, r0, asr #23
    6588:	24023b01 	strcs	r3, [r2], #-2817
    658c:	01000003 	tsteq	r0, r3
    6590:	12b11850 	adcsne	r1, r1, #5242880	; 0x500000
    6594:	3b010000 	blcc	4659c <__Stack_Size+0x4619c>
    6598:	00004c02 	andeq	r4, r0, r2, lsl #24
    659c:	0029e500 	eoreq	lr, r9, r0, lsl #10
    65a0:	011b0000 	tsteq	fp, r0
    65a4:	00002cdb 	ldrdeq	r2, [r0], -fp
    65a8:	01024f01 	tsteq	r2, r1, lsl #30
    65ac:	0000004c 	andeq	r0, r0, ip, asr #32
    65b0:	08008848 	stmdaeq	r0, {r3, r6, fp, pc}
    65b4:	08008850 	stmdaeq	r0, {r4, r6, fp, pc}
    65b8:	05c15d01 	strbeq	r5, [r1, #3329]
    65bc:	c0180000 	andsgt	r0, r8, r0
    65c0:	0100002b 	tsteq	r0, fp, lsr #32
    65c4:	0324024e 	teqeq	r4, #-536870908	; 0xe0000004
    65c8:	29f80000 	ldmibcs	r8!, {}^
    65cc:	13000000 	movwne	r0, #0	; 0x0
    65d0:	002ba101 	eoreq	sl, fp, r1, lsl #2
    65d4:	02610100 	rsbeq	r0, r1, #0	; 0x0
    65d8:	00885001 	addeq	r5, r8, r1
    65dc:	00885c08 	addeq	r5, r8, r8, lsl #24
    65e0:	e85d0108 	ldmda	sp, {r3, r8}^
    65e4:	16000005 	strne	r0, [r0], -r5
    65e8:	00002bc0 	andeq	r2, r0, r0, asr #23
    65ec:	24026001 	strcs	r6, [r2], #-1
    65f0:	01000003 	tsteq	r0, r3
    65f4:	01130050 	tsteq	r3, r0, asr r0
    65f8:	00002b8e 	andeq	r2, r0, lr, lsl #23
    65fc:	01027401 	tsteq	r2, r1, lsl #8
    6600:	0800885c 	stmdaeq	r0, {r2, r3, r4, r6, fp, pc}
    6604:	0800886e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, pc}
    6608:	061d5d01 	ldreq	r5, [sp], -r1, lsl #26
    660c:	c0160000 	andsgt	r0, r6, r0
    6610:	0100002b 	tsteq	r0, fp, lsr #32
    6614:	03240273 	teqeq	r4, #805306375	; 0x30000007
    6618:	50010000 	andpl	r0, r1, r0
    661c:	002adf16 	eoreq	sp, sl, r6, lsl pc
    6620:	02730100 	rsbseq	r0, r3, #0	; 0x0
    6624:	0000005e 	andeq	r0, r0, lr, asr r0
    6628:	13005101 	movwne	r5, #257	; 0x101
    662c:	0029fc01 	eoreq	pc, r9, r1, lsl #24
    6630:	028a0100 	addeq	r0, sl, #0	; 0x0
    6634:	00887001 	addeq	r7, r8, r1
    6638:	00888208 	addeq	r8, r8, r8, lsl #4
    663c:	525d0108 	subspl	r0, sp, #2	; 0x2
    6640:	16000006 	strne	r0, [r0], -r6
    6644:	00002bc0 	andeq	r2, r0, r0, asr #23
    6648:	24028901 	strcs	r8, [r2], #-2305
    664c:	01000003 	tsteq	r0, r3
    6650:	2ced1650 	stclcs	6, cr1, [sp], #320
    6654:	89010000 	stmdbhi	r1, {}
    6658:	00005e02 	andeq	r5, r0, r2, lsl #28
    665c:	00510100 	subseq	r0, r1, r0, lsl #2
    6660:	2bc70113 	blcs	ff1c6ab4 <SCS_BASE+0x1f1b8ab4>
    6664:	a0010000 	andge	r0, r1, r0
    6668:	88840102 	stmhi	r4, {r1, r8}
    666c:	889e0800 	ldmhi	lr, {fp}
    6670:	5d010800 	stcpl	8, cr0, [r1]
    6674:	00000687 	andeq	r0, r0, r7, lsl #13
    6678:	002bc016 	eoreq	ip, fp, r6, lsl r0
    667c:	029f0100 	addseq	r0, pc, #0	; 0x0
    6680:	00000324 	andeq	r0, r0, r4, lsr #6
    6684:	26165001 	ldrcs	r5, [r6], -r1
    6688:	01000011 	tsteq	r0, r1, lsl r0
    668c:	00b4029f 	umlalseq	r0, r4, pc, r2
    6690:	51010000 	tstpl	r1, r0
    6694:	84011300 	strhi	r1, [r1], #-768
    6698:	0100002c 	tsteq	r0, ip, lsr #32
    669c:	a00102bd 	strhge	r0, [r1], -sp
    66a0:	ba080088 	blt	2068c8 <__Stack_Size+0x2064c8>
    66a4:	01080088 	smlabbeq	r8, r8, r0, r0
    66a8:	0006bc5d 	andeq	fp, r6, sp, asr ip
    66ac:	2bc01600 	blcs	ff00beb4 <SCS_BASE+0x1effdeb4>
    66b0:	bc010000 	stclt	0, cr0, [r1], {0}
    66b4:	00032402 	andeq	r2, r3, r2, lsl #8
    66b8:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    66bc:	00001126 	andeq	r1, r0, r6, lsr #2
    66c0:	b402bc01 	strlt	fp, [r2], #-3073
    66c4:	01000000 	tsteq	r0, r0
    66c8:	01130051 	tsteq	r3, r1, asr r0
    66cc:	00002a73 	andeq	r2, r0, r3, ror sl
    66d0:	0102da01 	tsteq	r2, r1, lsl #20
    66d4:	080088bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, pc}
    66d8:	080088d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, fp, pc}
    66dc:	06f15d01 	ldrbteq	r5, [r1], r1, lsl #26
    66e0:	c0160000 	andsgt	r0, r6, r0
    66e4:	0100002b 	tsteq	r0, fp, lsr #32
    66e8:	032402d9 	teqeq	r4, #-1879048179	; 0x9000000d
    66ec:	50010000 	andpl	r0, r1, r0
    66f0:	00112616 	andseq	r2, r1, r6, lsl r6
    66f4:	02d90100 	sbcseq	r0, r9, #0	; 0x0
    66f8:	000000b4 	strheq	r0, [r0], -r4
    66fc:	13005101 	movwne	r5, #257	; 0x101
    6700:	002c2201 	eoreq	r2, ip, r1, lsl #4
    6704:	02f90100 	rscseq	r0, r9, #0	; 0x0
    6708:	0088d801 	addeq	sp, r8, r1, lsl #16
    670c:	0088ee08 	addeq	lr, r8, r8, lsl #28
    6710:	285d0108 	ldmdacs	sp, {r3, r8}^
    6714:	16000007 	strne	r0, [r0], -r7
    6718:	00002bc0 	andeq	r2, r0, r0, asr #23
    671c:	2402f801 	strcs	pc, [r2], #-2049
    6720:	01000003 	tsteq	r0, r3
    6724:	2aaf1850 	bcs	febcc86c <SCS_BASE+0x1ebbe86c>
    6728:	f8010000 	undefined instruction 0xf8010000
    672c:	00004c02 	andeq	r4, r0, r2, lsl #24
    6730:	002a0b00 	eoreq	r0, sl, r0, lsl #22
    6734:	01130000 	tsteq	r3, r0
    6738:	00002c57 	andeq	r2, r0, r7, asr ip
    673c:	01030e01 	tsteq	r3, r1, lsl #28
    6740:	080088f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, pc}
    6744:	0800890a 	stmdaeq	r0, {r1, r3, r8, fp, pc}
    6748:	075d5d01 	ldrbeq	r5, [sp, -r1, lsl #26]
    674c:	c0160000 	andsgt	r0, r6, r0
    6750:	0100002b 	tsteq	r0, fp, lsr #32
    6754:	0324030d 	teqeq	r4, #872415232	; 0x34000000
    6758:	50010000 	andpl	r0, r1, r0
    675c:	00112616 	andseq	r2, r1, r6, lsl r6
    6760:	030d0100 	movweq	r0, #53504	; 0xd100
    6764:	000000b4 	strheq	r0, [r0], -r4
    6768:	1b005101 	blne	1ab74 <__Stack_Size+0x1a774>
    676c:	002c9b01 	eoreq	r9, ip, r1, lsl #22
    6770:	03360100 	teqeq	r6, #0	; 0x0
    6774:	00008901 	andeq	r8, r0, r1, lsl #18
    6778:	00890c00 	addeq	r0, r9, r0, lsl #24
    677c:	00891808 	addeq	r1, r9, r8, lsl #16
    6780:	a45d0108 	ldrbge	r0, [sp], #-264
    6784:	18000007 	stmdane	r0, {r0, r1, r2}
    6788:	00002bc0 	andeq	r2, r0, r0, asr #23
    678c:	24033501 	strcs	r3, [r3], #-1281
    6790:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    6794:	1600002a 	strne	r0, [r0], -sl, lsr #32
    6798:	00002b10 	andeq	r2, r0, r0, lsl fp
    679c:	4c033501 	cfstr32mi	mvfx3, [r3], {1}
    67a0:	01000000 	tsteq	r0, r0
    67a4:	11ad1951 	undefined instruction 0x11ad1951
    67a8:	37010000 	strcc	r0, [r1, -r0]
    67ac:	00008903 	andeq	r8, r0, r3, lsl #18
    67b0:	01130000 	tsteq	r3, r0
    67b4:	00002c00 	andeq	r2, r0, r0, lsl #24
    67b8:	01036a01 	tsteq	r3, r1, lsl #20
    67bc:	08008918 	stmdaeq	r0, {r3, r4, r8, fp, pc}
    67c0:	08008922 	stmdaeq	r0, {r1, r5, r8, fp, pc}
    67c4:	07db5d01 	ldrbeq	r5, [fp, r1, lsl #26]
    67c8:	c0160000 	andsgt	r0, r6, r0
    67cc:	0100002b 	tsteq	r0, fp, lsr #32
    67d0:	03240369 	teqeq	r4, #-1543503871	; 0xa4000001
    67d4:	50010000 	andpl	r0, r1, r0
    67d8:	002b1018 	eoreq	r1, fp, r8, lsl r0
    67dc:	03690100 	cmneq	r9, #0	; 0x0
    67e0:	0000004c 	andeq	r0, r0, ip, asr #32
    67e4:	00002a31 	andeq	r2, r0, r1, lsr sl
    67e8:	10011b00 	andne	r1, r1, r0, lsl #22
    67ec:	0100002c 	tsteq	r0, ip, lsr #32
    67f0:	9401038b 	strls	r0, [r1], #-907
    67f4:	24000000 	strcs	r0, [r0]
    67f8:	6e080089 	cdpvs	0, 0, cr0, cr8, cr9, {4}
    67fc:	01080089 	smlabbeq	r8, r9, r0, r0
    6800:	0008525d 	andeq	r5, r8, sp, asr r2
    6804:	2bc01800 	blcs	ff00c80c <SCS_BASE+0x1effe80c>
    6808:	8a010000 	bhi	46810 <__Stack_Size+0x46410>
    680c:	00032403 	andeq	r2, r3, r3, lsl #8
    6810:	002a4400 	eoreq	r4, sl, r0, lsl #8
    6814:	2caf1800 	stccs	8, cr1, [pc]
    6818:	8a010000 	bhi	46820 <__Stack_Size+0x46420>
    681c:	00004c03 	andeq	r4, r0, r3, lsl #24
    6820:	002a5700 	eoreq	r5, sl, r0, lsl #14
    6824:	2bf91500 	blcs	ffe4bc2c <SCS_BASE+0x1fe3dc2c>
    6828:	8c010000 	stchi	0, cr0, [r1], {0}
    682c:	00003a03 	andeq	r3, r0, r3, lsl #20
    6830:	1a520100 	bne	1486c38 <__Stack_Size+0x1486838>
    6834:	00002d08 	andeq	r2, r0, r8, lsl #26
    6838:	3a038c01 	bcc	e9844 <__Stack_Size+0xe9444>
    683c:	80000000 	andhi	r0, r0, r0
    6840:	1a00002a 	bne	68f0 <__Stack_Size+0x64f0>
    6844:	00002d33 	andeq	r2, r0, r3, lsr sp
    6848:	3a038c01 	bcc	e9854 <__Stack_Size+0xe9454>
    684c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    6850:	1900002a 	stmdbne	r0, {r1, r3, r5}
    6854:	000011ad 	andeq	r1, r0, sp, lsr #3
    6858:	94038d01 	strls	r8, [r3], #-3329
    685c:	00000000 	andeq	r0, r0, r0
    6860:	2ac70113 	bcs	ff1c6cb4 <SCS_BASE+0x1f1b8cb4>
    6864:	db010000 	blle	4686c <__Stack_Size+0x4646c>
    6868:	89700103 	ldmdbhi	r0!, {r0, r1, r8}^
    686c:	89800800 	stmibhi	r0, {fp}
    6870:	5d010800 	stcpl	8, cr0, [r1]
    6874:	000008a1 	andeq	r0, r0, r1, lsr #17
    6878:	002bc016 	eoreq	ip, fp, r6, lsl r0
    687c:	03da0100 	bicseq	r0, sl, #0	; 0x0
    6880:	00000324 	andeq	r0, r0, r4, lsr #6
    6884:	af185001 	svcge	0x00185001
    6888:	0100002c 	tsteq	r0, ip, lsr #32
    688c:	004c03da 	ldrdeq	r0, [ip], #-58
    6890:	2ab10000 	bcs	fec46898 <SCS_BASE+0x1ec38898>
    6894:	f9190000 	undefined instruction 0xf9190000
    6898:	0100002b 	tsteq	r0, fp, lsr #32
    689c:	004c03dc 	ldrdeq	r0, [ip], #-60
    68a0:	08190000 	ldmdaeq	r9, {}
    68a4:	0100002d 	tsteq	r0, sp, lsr #32
    68a8:	004c03dc 	ldrdeq	r0, [ip], #-60
    68ac:	1c000000 	stcne	0, cr0, [r0], {0}
    68b0:	002a0f01 	eoreq	r0, sl, r1, lsl #30
    68b4:	018d0100 	orreq	r0, sp, r0, lsl #2
    68b8:	08008980 	stmdaeq	r0, {r7, r8, fp, pc}
    68bc:	08008a1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, pc}
    68c0:	00002ac4 	andeq	r2, r0, r4, asr #21
    68c4:	0000092a 	andeq	r0, r0, sl, lsr #18
    68c8:	002bc014 	eoreq	ip, fp, r4, lsl r0
    68cc:	248c0100 	strcs	r0, [ip], #256
    68d0:	ef000003 	svc	0x00000003
    68d4:	1400002a 	strne	r0, [r0], #-42
    68d8:	00002bda 	ldrdeq	r2, [r0], -sl
    68dc:	02db8c01 	sbcseq	r8, fp, #256	; 0x100
    68e0:	2b0e0000 	blcs	3868e8 <__Stack_Size+0x3864e8>
    68e4:	f81d0000 	undefined instruction 0xf81d0000
    68e8:	01000014 	tsteq	r0, r4, lsl r0
    68ec:	00003a8e 	andeq	r3, r0, lr, lsl #21
    68f0:	002b2c00 	eoreq	r2, fp, r0, lsl #24
    68f4:	2abe1d00 	bcs	fef8dcfc <SCS_BASE+0x1ef7fcfc>
    68f8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    68fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    6900:	00002b55 	andeq	r2, r0, r5, asr fp
    6904:	0029e21e 	eoreq	lr, r9, lr, lsl r2
    6908:	3a8f0100 	bcc	fe3c6d10 <SCS_BASE+0x1e3b8d10>
    690c:	01000000 	tsteq	r0, r0
    6910:	2c721f51 	ldclcs	15, cr1, [r2], #-324
    6914:	90010000 	andls	r0, r1, r0
    6918:	0000003a 	andeq	r0, r0, sl, lsr r0
    691c:	002b611e 	eoreq	r6, fp, lr, lsl r1
    6920:	3a910100 	bcc	fe446d28 <SCS_BASE+0x1e438d28>
    6924:	01000000 	tsteq	r0, r0
    6928:	2b6c1e54 	blcs	1b0e280 <__Stack_Size+0x1b0de80>
    692c:	92010000 	andls	r0, r1, #0	; 0x0
    6930:	000002ab 	andeq	r0, r0, fp, lsr #5
    6934:	005c9102 	subseq	r9, ip, r2, lsl #2
    6938:	2b1b0120 	blcs	6c6dc0 <__Stack_Size+0x6c69c0>
    693c:	5b010000 	blpl	46944 <__Stack_Size+0x46544>
    6940:	008a1c01 	addeq	r1, sl, r1, lsl #24
    6944:	008ab008 	addeq	fp, sl, r8
    6948:	002b6808 	eoreq	r6, fp, r8, lsl #16
    694c:	2bc01400 	blcs	ff00b954 <SCS_BASE+0x1effd954>
    6950:	5a010000 	bpl	46958 <__Stack_Size+0x46558>
    6954:	00000324 	andeq	r0, r0, r4, lsr #6
    6958:	00002b93 	muleq	r0, r3, fp
    695c:	00a30000 	adceq	r0, r3, r0
    6960:	00020000 	andeq	r0, r2, r0
    6964:	00001582 	andeq	r1, r0, r2, lsl #11
    6968:	182a0104 	stmdane	sl!, {r2, r8}
    696c:	8ab00000 	bhi	fec06974 <SCS_BASE+0x1ebf8974>
    6970:	8b1e0800 	blhi	788978 <__Stack_Size+0x788578>
    6974:	74730800 	ldrbtvc	r0, [r3], #-2048
    6978:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    697c:	5f783031 	svcpl	0x00783031
    6980:	2f62696c 	svccs	0x0062696c
    6984:	2f637273 	svccs	0x00637273
    6988:	74726f63 	ldrbtvc	r6, [r2], #-3939
    698c:	336d7865 	cmncc	sp, #6619136	; 0x650000
    6990:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
    6994:	732e6f72 	teqvc	lr, #456	; 0x1c8
    6998:	5c3a4300 	ldcpl	3, cr4, [sl]
    699c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    69a0:	69475c73 	stmdbvs	r7, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
    69a4:	72616d6c 	rsbvc	r6, r1, #6912	; 0x1b00
    69a8:	6f72445c 	svcvs	0x0072445c
    69ac:	786f6270 	stmdavc	pc!, {r4, r5, r6, r9, sp, lr}^
    69b0:	30304c5c 	eorscc	r4, r0, ip, asr ip
    69b4:	202d2038 	eorcs	r2, sp, r8, lsr r0
    69b8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    69bc:	6544206f 	strbvs	r2, [r4, #-111]
    69c0:	5c61746c 	cfstrdpl	mvd7, [r1], #-432
    69c4:	62617254 	rsbvs	r7, r1, #1073741829	; 0x40000005
    69c8:	6f686c61 	svcvs	0x00686c61
    69cc:	7064705c 	rsbvc	r7, r4, ip, asr r0
    69d0:	44505c64 	ldrbmi	r5, [r0], #-3172
    69d4:	4c204450 	cfstrsmi	mvf4, [r0], #-320
    69d8:	5c534249 	lfmpl	f4, 2, [r3], {73}
    69dc:	33354d43 	teqcc	r5, #4288	; 0x10c0
    69e0:	39305c30 	ldmdbcc	r0!, {r4, r5, sl, fp, ip, lr}
    69e4:	4c584420 	cfldrdmi	mvd4, [r8], {32}
    69e8:	41455220 	cmpmi	r5, r0, lsr #4
    69ec:	52575f44 	subspl	r5, r7, #272	; 0x110
    69f0:	00455449 	subeq	r5, r5, r9, asr #8
    69f4:	20554e47 	subscs	r4, r5, r7, asr #28
    69f8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    69fc:	2e38312e 	rsfcsep	f3, f0, #0.5
    6a00:	01003035 	tsteq	r0, r5, lsr r0
    6a04:	00010280 	andeq	r0, r1, r0, lsl #5
    6a08:	96000200 	strls	r0, [r0], -r0, lsl #4
    6a0c:	04000015 	streq	r0, [r0], #-21
    6a10:	00055101 	andeq	r5, r5, r1, lsl #2
    6a14:	2d870100 	stfcss	f0, [r7]
    6a18:	03690000 	cmneq	r9, #0	; 0x0
    6a1c:	8b200000 	blhi	806a24 <__Stack_Size+0x806624>
    6a20:	8b740800 	blhi	1d08a28 <__Stack_Size+0x1d08628>
    6a24:	18ce0800 	stmiane	lr, {fp}^
    6a28:	04020000 	streq	r0, [r2]
    6a2c:	002dcb05 	eoreq	ip, sp, r5, lsl #22
    6a30:	05020200 	streq	r0, [r2, #-512]
    6a34:	000005d8 	ldrdeq	r0, [r0], -r8
    6a38:	9d060102 	stflss	f0, [r6, #-8]
    6a3c:	02000006 	andeq	r0, r0, #6	; 0x6
    6a40:	2e450704 	cdpcs	7, 4, cr0, cr5, cr4, {0}
    6a44:	02020000 	andeq	r0, r2, #0	; 0x0
    6a48:	0007db07 	andeq	sp, r7, r7, lsl #22
    6a4c:	08010200 	stmdaeq	r1, {r9}
    6a50:	0000069b 	muleq	r0, fp, r6
    6a54:	04070403 	streq	r0, [r7], #-1027
    6a58:	002d5c01 	eoreq	r5, sp, r1, lsl #24
    6a5c:	01920100 	orrseq	r0, r2, r0, lsl #2
    6a60:	08008b20 	stmdaeq	r0, {r5, r8, r9, fp, pc}
    6a64:	08008b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, pc}
    6a68:	00002bb2 	strheq	r2, [r0], -r2
    6a6c:	00000086 	andeq	r0, r0, r6, lsl #1
    6a70:	002db905 	eoreq	fp, sp, r5, lsl #18
    6a74:	86930100 	ldrhi	r0, [r3], r0, lsl #2
    6a78:	06000000 	streq	r0, [r0], -r0
    6a7c:	00002d6a 	andeq	r2, r0, sl, ror #26
    6a80:	00869301 	addeq	r9, r6, r1, lsl #6
    6a84:	2bd10000 	blcs	ff446a8c <SCS_BASE+0x1f438a8c>
    6a88:	07000000 	streq	r0, [r0, -r0]
    6a8c:	00003a04 	andeq	r3, r0, r4, lsl #20
    6a90:	2d720800 	ldclcs	8, cr0, [r2]
    6a94:	19010000 	stmdbne	r1, {}
    6a98:	0000003a 	andeq	r0, r0, sl, lsr r0
    6a9c:	55080101 	strpl	r0, [r8, #-257]
    6aa0:	0100002d 	tsteq	r0, sp, lsr #32
    6aa4:	00003a1b 	andeq	r3, r0, fp, lsl sl
    6aa8:	08010100 	stmdaeq	r1, {r8}
    6aac:	00002d80 	andeq	r2, r0, r0, lsl #27
    6ab0:	003a1d01 	eorseq	r1, sl, r1, lsl #26
    6ab4:	01010000 	tsteq	r1, r0
    6ab8:	002dc008 	eoreq	ip, sp, r8
    6abc:	3a200100 	bcc	806ec4 <__Stack_Size+0x806ac4>
    6ac0:	01000000 	tsteq	r0, r0
    6ac4:	2d7a0801 	ldclcs	8, cr0, [sl, #-4]!
    6ac8:	22010000 	andcs	r0, r1, #0	; 0x0
    6acc:	0000003a 	andeq	r0, r0, sl, lsr r0
    6ad0:	4d090101 	stfmis	f0, [r9, #-4]
    6ad4:	0100002d 	tsteq	r0, sp, lsr #32
    6ad8:	0a010125 	beq	46f74 <__Stack_Size+0x46b74>
    6adc:	000000e8 	andeq	r0, r0, r8, ror #1
    6ae0:	000000e6 	andeq	r0, r0, r6, ror #1
    6ae4:	00004f0b 	andeq	r4, r0, fp, lsl #30
    6ae8:	0c004c00 	stceq	12, cr4, [r0], {0}
    6aec:	e6040701 	str	r0, [r4], -r1, lsl #14
    6af0:	0d000000 	stceq	0, cr0, [r0]
    6af4:	00002dac 	andeq	r2, r0, ip, lsr #27
    6af8:	01003901 	tsteq	r0, r1, lsl #18
    6afc:	05010000 	streq	r0, [r1]
    6b00:	00300003 	eorseq	r0, r0, r3
    6b04:	00d60e08 	sbcseq	r0, r6, r8, lsl #28
    6b08:	c1000000 	tstgt	r0, r0
    6b0c:	02000000 	andeq	r0, r0, #0	; 0x0
    6b10:	00164b00 	andseq	r4, r6, r0, lsl #22
    6b14:	51010400 	tstpl	r1, r0, lsl #8
    6b18:	01000005 	tsteq	r0, r5
    6b1c:	00002e0b 	andeq	r2, r0, fp, lsl #28
    6b20:	00002dd4 	ldrdeq	r2, [r0], -r4
	...
    6b2c:	0000192c 	andeq	r1, r0, ip, lsr #18
    6b30:	4a070402 	bmi	1c7b40 <__Stack_Size+0x1c7740>
    6b34:	0200002e 	andeq	r0, r0, #46	; 0x2e
    6b38:	069d0601 	ldreq	r0, [sp], r1, lsl #12
    6b3c:	01020000 	tsteq	r2, r0
    6b40:	00069b08 	andeq	r9, r6, r8, lsl #22
    6b44:	05020200 	streq	r0, [r2, #-512]
    6b48:	000005d8 	ldrdeq	r0, [r0], -r8
    6b4c:	db070202 	blle	1c735c <__Stack_Size+0x1c6f5c>
    6b50:	03000007 	movweq	r0, #7	; 0x7
    6b54:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6b58:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    6b5c:	002dc605 	eoreq	ip, sp, r5, lsl #12
    6b60:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6b64:	00002e40 	andeq	r2, r0, r0, asr #28
    6b68:	cb050402 	blgt	147b78 <__Stack_Size+0x147778>
    6b6c:	0400002d 	streq	r0, [r0], #-45
    6b70:	04020704 	streq	r0, [r2], #-1796
    6b74:	002e4507 	eoreq	r4, lr, r7, lsl #10
    6b78:	06010500 	streq	r0, [r1], -r0, lsl #10
    6b7c:	00006e04 	andeq	r6, r0, r4, lsl #28
    6b80:	08010200 	stmdaeq	r1, {r9}
    6b84:	000006a4 	andeq	r0, r0, r4, lsr #13
    6b88:	002e6c07 	eoreq	r6, lr, r7, lsl #24
    6b8c:	06020100 	streq	r0, [r2], -r0, lsl #2
    6b90:	0000009c 	muleq	r0, ip, r0
    6b94:	002e7b08 	eoreq	r7, lr, r8, lsl #22
    6b98:	60080000 	andvs	r0, r8, r0
    6b9c:	0100002e 	tsteq	r0, lr, lsr #32
    6ba0:	002e5708 	eoreq	r5, lr, r8, lsl #14
    6ba4:	09000200 	stmdbeq	r0, {r9}
    6ba8:	002e8001 	eoreq	r8, lr, r1
    6bac:	01400100 	cmpeq	r0, r0, lsl #2
    6bb0:	00000048 	andeq	r0, r0, r8, asr #32
	...
    6bbc:	00002be4 	andeq	r2, r0, r4, ror #23
    6bc0:	006e660a 	rsbeq	r6, lr, sl, lsl #12
    6bc4:	00703d01 	rsbseq	r3, r0, r1, lsl #26
    6bc8:	2c0f0000 	stccs	0, cr0, [pc], {0}
    6bcc:	00000000 	andeq	r0, r0, r0
    6bd0:	00000936 	andeq	r0, r0, r6, lsr r9
    6bd4:	16cc0002 	strbne	r0, [ip], r2
    6bd8:	01040000 	tsteq	r4, r0
    6bdc:	00000551 	andeq	r0, r0, r1, asr r5
    6be0:	002e9301 	eoreq	r9, lr, r1, lsl #6
    6be4:	002dd400 	eoreq	sp, sp, r0, lsl #8
	...
    6bf0:	0019a000 	andseq	sl, r9, r0
    6bf4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6bf8:	00002e4a 	andeq	r2, r0, sl, asr #28
    6bfc:	9d060102 	stflss	f0, [r6, #-8]
    6c00:	02000006 	andeq	r0, r0, #6	; 0x6
    6c04:	069b0801 	ldreq	r0, [fp], r1, lsl #16
    6c08:	02020000 	andeq	r0, r2, #0	; 0x0
    6c0c:	0005d805 	andeq	sp, r5, r5, lsl #16
    6c10:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6c14:	000007db 	ldrdeq	r0, [r0], -fp
    6c18:	69050403 	stmdbvs	r5, {r0, r1, sl}
    6c1c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6c20:	2dc60508 	cfstr64cs	mvdx0, [r6, #32]
    6c24:	08020000 	stmdaeq	r2, {}
    6c28:	002e4007 	eoreq	r4, lr, r7
    6c2c:	309a0400 	addscc	r0, sl, r0, lsl #8
    6c30:	07020000 	streq	r0, [r2, -r0]
    6c34:	00000048 	andeq	r0, r0, r8, asr #32
    6c38:	cb050402 	blgt	147c48 <__Stack_Size+0x147848>
    6c3c:	0400002d 	streq	r0, [r0], #-45
    6c40:	00003149 	andeq	r3, r0, r9, asr #2
    6c44:	00682c03 	rsbeq	r2, r8, r3, lsl #24
    6c48:	42050000 	andmi	r0, r5, #0	; 0x0
    6c4c:	04000030 	streq	r0, [r0], #-48
    6c50:	00250163 	eoreq	r0, r5, r3, ror #2
    6c54:	04060000 	streq	r0, [r6]
    6c58:	00a54703 	adceq	r4, r5, r3, lsl #14
    6c5c:	3c070000 	stccc	0, cr0, [r7], {0}
    6c60:	03000030 	movweq	r0, #48	; 0x30
    6c64:	00007a48 	andeq	r7, r0, r8, asr #20
    6c68:	2ff60700 	svccs	0x00f60700
    6c6c:	49030000 	stmdbmi	r3, {}
    6c70:	000000a5 	andeq	r0, r0, r5, lsr #1
    6c74:	00330800 	eorseq	r0, r3, r0, lsl #16
    6c78:	00b50000 	adcseq	r0, r5, r0
    6c7c:	b5090000 	strlt	r0, [r9]
    6c80:	03000000 	movweq	r0, #0	; 0x0
    6c84:	07040a00 	streq	r0, [r4, -r0, lsl #20]
    6c88:	4403080b 	strmi	r0, [r3], #-2059
    6c8c:	000000dd 	ldrdeq	r0, [r0], -sp
    6c90:	0031330c 	eorseq	r3, r1, ip, lsl #6
    6c94:	48450300 	stmdami	r5, {r8, r9}^
    6c98:	02000000 	andeq	r0, r0, #0	; 0x0
    6c9c:	3b0c0023 	blcc	306d30 <__Stack_Size+0x306930>
    6ca0:	03000031 	movweq	r0, #49	; 0x31
    6ca4:	0000864a 	andeq	r8, r0, sl, asr #12
    6ca8:	04230200 	strteq	r0, [r3], #-512
    6cac:	30cf0400 	sbccc	r0, pc, r0, lsl #8
    6cb0:	4b030000 	blmi	c6cb8 <__Stack_Size+0xc68b8>
    6cb4:	000000b8 	strheq	r0, [r0], -r8
    6cb8:	002fc804 	eoreq	ip, pc, r4, lsl #16
    6cbc:	5d4f0300 	stclpl	3, cr0, [pc]
    6cc0:	0d000000 	stceq	0, cr0, [r0]
    6cc4:	317c0404 	cmncc	ip, r4, lsl #8
    6cc8:	15050000 	strne	r0, [r5]
    6ccc:	00000100 	andeq	r0, r0, r0, lsl #2
    6cd0:	45070402 	strmi	r0, [r7, #-1026]
    6cd4:	0e00002e 	cdpeq	0, 0, cr0, cr0, cr14, {1}
    6cd8:	00002fd9 	ldrdeq	r2, [r0], -r9
    6cdc:	662d0518 	undefined
    6ce0:	0c000001 	stceq	0, cr0, [r0], {1}
    6ce4:	000030e7 	andeq	r3, r0, r7, ror #1
    6ce8:	01662e05 	cmneq	r6, r5, lsl #28
    6cec:	23020000 	movwcs	r0, #8192	; 0x2000
    6cf0:	6b5f0f00 	blvs	17ca8f8 <__Stack_Size+0x17ca4f8>
    6cf4:	482f0500 	stmdami	pc!, {r8, sl}
    6cf8:	02000000 	andeq	r0, r0, #0	; 0x0
    6cfc:	1e0c0423 	cdpne	4, 0, cr0, cr12, cr3, {1}
    6d00:	05000031 	streq	r0, [r0, #-49]
    6d04:	0000482f 	andeq	r4, r0, pc, lsr #16
    6d08:	08230200 	stmdaeq	r3!, {r9}
    6d0c:	002fc20c 	eoreq	ip, pc, ip, lsl #4
    6d10:	482f0500 	stmdami	pc!, {r8, sl}
    6d14:	02000000 	andeq	r0, r0, #0	; 0x0
    6d18:	c80c0c23 	stmdagt	ip, {r0, r1, r5, sl, fp}
    6d1c:	05000031 	streq	r0, [r0, #-49]
    6d20:	0000482f 	andeq	r4, r0, pc, lsr #16
    6d24:	10230200 	eorne	r0, r3, r0, lsl #4
    6d28:	00785f0f 	rsbseq	r5, r8, pc, lsl #30
    6d2c:	016c3005 	cmneq	ip, r5
    6d30:	23020000 	movwcs	r0, #8192	; 0x2000
    6d34:	04100014 	ldreq	r0, [r0], #-20
    6d38:	00000107 	andeq	r0, r0, r7, lsl #2
    6d3c:	0000f508 	andeq	pc, r0, r8, lsl #10
    6d40:	00017c00 	andeq	r7, r1, r0, lsl #24
    6d44:	00b50900 	adcseq	r0, r5, r0, lsl #18
    6d48:	00000000 	andeq	r0, r0, r0
    6d4c:	002ff10e 	eoreq	pc, pc, lr, lsl #2
    6d50:	35052400 	strcc	r2, [r5, #-1024]
    6d54:	00000207 	andeq	r0, r0, r7, lsl #4
    6d58:	002f250c 	eoreq	r2, pc, ip, lsl #10
    6d5c:	48360500 	ldmdami	r6!, {r8, sl}
    6d60:	02000000 	andeq	r0, r0, #0	; 0x0
    6d64:	580c0023 	stmdapl	ip, {r0, r1, r5}
    6d68:	05000031 	streq	r0, [r0, #-49]
    6d6c:	00004837 	andeq	r4, r0, r7, lsr r8
    6d70:	04230200 	strteq	r0, [r3], #-512
    6d74:	002f3a0c 	eoreq	r3, pc, ip, lsl #20
    6d78:	48380500 	ldmdami	r8!, {r8, sl}
    6d7c:	02000000 	andeq	r0, r0, #0	; 0x0
    6d80:	3a0c0823 	bcc	308e14 <__Stack_Size+0x308a14>
    6d84:	05000032 	streq	r0, [r0, #-50]
    6d88:	00004839 	andeq	r4, r0, r9, lsr r8
    6d8c:	0c230200 	sfmeq	f0, 4, [r3]
    6d90:	00306d0c 	eorseq	r6, r0, ip, lsl #26
    6d94:	483a0500 	ldmdami	sl!, {r8, sl}
    6d98:	02000000 	andeq	r0, r0, #0	; 0x0
    6d9c:	5c0c1023 	stcpl	0, cr1, [ip], {35}
    6da0:	05000030 	streq	r0, [r0, #-48]
    6da4:	0000483b 	andeq	r4, r0, fp, lsr r8
    6da8:	14230200 	strtne	r0, [r3], #-512
    6dac:	0031cd0c 	eorseq	ip, r1, ip, lsl #26
    6db0:	483c0500 	ldmdami	ip!, {r8, sl}
    6db4:	02000000 	andeq	r0, r0, #0	; 0x0
    6db8:	b10c1823 	tstlt	ip, r3, lsr #16
    6dbc:	05000030 	streq	r0, [r0, #-48]
    6dc0:	0000483d 	andeq	r4, r0, sp, lsr r8
    6dc4:	1c230200 	sfmne	f0, 4, [r3]
    6dc8:	0032080c 	eorseq	r0, r2, ip, lsl #16
    6dcc:	483e0500 	ldmdami	lr!, {r8, sl}
    6dd0:	02000000 	andeq	r0, r0, #0	; 0x0
    6dd4:	11002023 	tstne	r0, r3, lsr #32
    6dd8:	00002f49 	andeq	r2, r0, r9, asr #30
    6ddc:	47050108 	strmi	r0, [r5, -r8, lsl #2]
    6de0:	00000250 	andeq	r0, r0, r0, asr r2
    6de4:	002fb50c 	eoreq	fp, pc, ip, lsl #10
    6de8:	50480500 	subpl	r0, r8, r0, lsl #10
    6dec:	02000002 	andeq	r0, r0, #2	; 0x2
    6df0:	870c0023 	strhi	r0, [ip, -r3, lsr #32]
    6df4:	0500002e 	streq	r0, [r0, #-46]
    6df8:	00025049 	andeq	r5, r2, r9, asr #32
    6dfc:	80230300 	eorhi	r0, r3, r0, lsl #6
    6e00:	316e0c01 	cmncc	lr, r1, lsl #24
    6e04:	4b050000 	blmi	146e0c <__Stack_Size+0x146a0c>
    6e08:	000000f5 	strdeq	r0, [r0], -r5
    6e0c:	02802303 	addeq	r2, r0, #201326592	; 0xc000000
    6e10:	002f6e0c 	eoreq	r6, pc, ip, lsl #28
    6e14:	f54e0500 	undefined instruction 0xf54e0500
    6e18:	03000000 	movweq	r0, #0	; 0x0
    6e1c:	00028423 	andeq	r8, r2, r3, lsr #8
    6e20:	0000f308 	andeq	pc, r0, r8, lsl #6
    6e24:	00026000 	andeq	r6, r2, r0
    6e28:	00b50900 	adcseq	r0, r5, r0, lsl #18
    6e2c:	001f0000 	andseq	r0, pc, r0
    6e30:	002e7f11 	eoreq	r7, lr, r1, lsl pc
    6e34:	05019000 	streq	r9, [r1]
    6e38:	0002a759 	andeq	sl, r2, r9, asr r7
    6e3c:	30e70c00 	rsccc	r0, r7, r0, lsl #24
    6e40:	5a050000 	bpl	146e48 <__Stack_Size+0x146a48>
    6e44:	000002a7 	andeq	r0, r0, r7, lsr #5
    6e48:	0c002302 	stceq	3, cr2, [r0], {2}
    6e4c:	000030ff 	strdeq	r3, [r0], -pc
    6e50:	00485b05 	subeq	r5, r8, r5, lsl #22
    6e54:	23020000 	movwcs	r0, #8192	; 0x2000
    6e58:	2fbd0c04 	svccs	0x00bd0c04
    6e5c:	5d050000 	stcpl	0, cr0, [r5]
    6e60:	000002ad 	andeq	r0, r0, sp, lsr #5
    6e64:	0c082302 	stceq	3, cr2, [r8], {2}
    6e68:	00002f49 	andeq	r2, r0, r9, asr #30
    6e6c:	02075e05 	andeq	r5, r7, #80	; 0x50
    6e70:	23030000 	movwcs	r0, #12288	; 0x3000
    6e74:	10000188 	andne	r0, r0, r8, lsl #3
    6e78:	00026004 	andeq	r6, r2, r4
    6e7c:	02bf0800 	adcseq	r0, pc, #0	; 0x0
    6e80:	02bd0000 	adcseq	r0, sp, #0	; 0x0
    6e84:	b5090000 	strlt	r0, [r9]
    6e88:	1f000000 	svcne	0x00000000
    6e8c:	10011200 	andne	r1, r1, r0, lsl #4
    6e90:	0002bd04 	andeq	fp, r2, r4, lsl #26
    6e94:	30bb0e00 	adcscc	r0, fp, r0, lsl #28
    6e98:	05080000 	streq	r0, [r8]
    6e9c:	0002ee69 	andeq	lr, r2, r9, ror #28
    6ea0:	2f340c00 	svccs	0x00340c00
    6ea4:	6a050000 	bvs	146eac <__Stack_Size+0x146aac>
    6ea8:	000002ee 	andeq	r0, r0, lr, ror #5
    6eac:	0c002302 	stceq	3, cr2, [r0], {2}
    6eb0:	00002ec6 	andeq	r2, r0, r6, asr #29
    6eb4:	00486b05 	subeq	r6, r8, r5, lsl #22
    6eb8:	23020000 	movwcs	r0, #8192	; 0x2000
    6ebc:	04100004 	ldreq	r0, [r0], #-4
    6ec0:	00000033 	andeq	r0, r0, r3, lsr r0
    6ec4:	0030da0e 	eorseq	sp, r0, lr, lsl #20
    6ec8:	a9055c00 	stmdbge	r5, {sl, fp, ip, lr}
    6ecc:	00000432 	andeq	r0, r0, r2, lsr r4
    6ed0:	00705f0f 	rsbseq	r5, r0, pc, lsl #30
    6ed4:	02eeaa05 	rsceq	sl, lr, #20480	; 0x5000
    6ed8:	23020000 	movwcs	r0, #8192	; 0x2000
    6edc:	725f0f00 	subsvc	r0, pc, #0	; 0x0
    6ee0:	48ab0500 	stmiami	fp!, {r8, sl}
    6ee4:	02000000 	andeq	r0, r0, #0	; 0x0
    6ee8:	5f0f0423 	svcpl	0x000f0423
    6eec:	ac050077 	stcge	0, cr0, [r5], {119}
    6ef0:	00000048 	andeq	r0, r0, r8, asr #32
    6ef4:	0c082302 	stceq	3, cr2, [r8], {2}
    6ef8:	00002f67 	andeq	r2, r0, r7, ror #30
    6efc:	003aad05 	eorseq	sl, sl, r5, lsl #26
    6f00:	23020000 	movwcs	r0, #8192	; 0x2000
    6f04:	300d0c0c 	andcc	r0, sp, ip, lsl #24
    6f08:	ae050000 	cdpge	0, 0, cr0, cr5, cr0, {0}
    6f0c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6f10:	0f0e2302 	svceq	0x000e2302
    6f14:	0066625f 	rsbeq	r6, r6, pc, asr r2
    6f18:	02c5af05 	sbceq	sl, r5, #20	; 0x14
    6f1c:	23020000 	movwcs	r0, #8192	; 0x2000
    6f20:	2eff0c10 	mrccs	12, 7, r0, cr15, cr0, {0}
    6f24:	b0050000 	andlt	r0, r5, r0
    6f28:	00000048 	andeq	r0, r0, r8, asr #32
    6f2c:	0c182302 	ldceq	3, cr2, [r8], {2}
    6f30:	00002f57 	andeq	r2, r0, r7, asr pc
    6f34:	00f3b705 	rscseq	fp, r3, r5, lsl #14
    6f38:	23020000 	movwcs	r0, #8192	; 0x2000
    6f3c:	2fe10c1c 	svccs	0x00e10c1c
    6f40:	b9050000 	stmdblt	r5, {}
    6f44:	000005c1 	andeq	r0, r0, r1, asr #11
    6f48:	0c202302 	stceq	3, cr2, [r0], #-8
    6f4c:	00003055 	andeq	r3, r0, r5, asr r0
    6f50:	05f1bb05 	ldrbeq	fp, [r1, #2821]!
    6f54:	23020000 	movwcs	r0, #8192	; 0x2000
    6f58:	31430c24 	cmpcc	r3, r4, lsr #24
    6f5c:	bd050000 	stclt	0, cr0, [r5]
    6f60:	00000616 	andeq	r0, r0, r6, lsl r6
    6f64:	0c282302 	stceq	3, cr2, [r8], #-8
    6f68:	00000e30 	andeq	r0, r0, r0, lsr lr
    6f6c:	0631be05 	ldrteq	fp, [r1], -r5, lsl #28
    6f70:	23020000 	movwcs	r0, #8192	; 0x2000
    6f74:	755f0f2c 	ldrbvc	r0, [pc, #-3884]	; 6050 <__Stack_Size+0x5c50>
    6f78:	c1050062 	tstgt	r5, r2, rrx
    6f7c:	000002c5 	andeq	r0, r0, r5, asr #5
    6f80:	0f302302 	svceq	0x00302302
    6f84:	0070755f 	rsbseq	r7, r0, pc, asr r5
    6f88:	02eec205 	rsceq	ip, lr, #1342177280	; 0x50000000
    6f8c:	23020000 	movwcs	r0, #8192	; 0x2000
    6f90:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; 6060 <__Stack_Size+0x5c60>
    6f94:	c3050072 	movwgt	r0, #20594	; 0x5072
    6f98:	00000048 	andeq	r0, r0, r8, asr #32
    6f9c:	0c3c2302 	ldceq	3, cr2, [ip], #-8
    6fa0:	00002f2e 	andeq	r2, r0, lr, lsr #30
    6fa4:	0637c605 	ldrteq	ip, [r7], -r5, lsl #12
    6fa8:	23020000 	movwcs	r0, #8192	; 0x2000
    6fac:	31fa0c40 	mvnscc	r0, r0, asr #24
    6fb0:	c7050000 	strgt	r0, [r5, -r0]
    6fb4:	00000647 	andeq	r0, r0, r7, asr #12
    6fb8:	0f432302 	svceq	0x00432302
    6fbc:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    6fc0:	02c5ca05 	sbceq	ip, r5, #20480	; 0x5000
    6fc4:	23020000 	movwcs	r0, #8192	; 0x2000
    6fc8:	2f7d0c44 	svccs	0x007d0c44
    6fcc:	cd050000 	stcgt	0, cr0, [r5]
    6fd0:	00000048 	andeq	r0, r0, r8, asr #32
    6fd4:	0c4c2302 	mcrreq	3, 0, r2, ip, cr2
    6fd8:	00002f8e 	andeq	r2, r0, lr, lsl #31
    6fdc:	0048ce05 	subeq	ip, r8, r5, lsl #28
    6fe0:	23020000 	movwcs	r0, #8192	; 0x2000
    6fe4:	324a0c50 	subcc	r0, sl, #20480	; 0x5000
    6fe8:	d1050000 	tstle	r5, r0
    6fec:	00000451 	andeq	r0, r0, r1, asr r4
    6ff0:	0c542302 	mrrceq	3, 0, r2, r4, cr2
    6ff4:	00003049 	andeq	r3, r0, r9, asr #32
    6ff8:	00e8d505 	rsceq	sp, r8, r5, lsl #10
    6ffc:	23020000 	movwcs	r0, #8192	; 0x2000
    7000:	01130058 	tsteq	r3, r8, asr r0
    7004:	00000048 	andeq	r0, r0, r8, asr #32
    7008:	00000451 	andeq	r0, r0, r1, asr r4
    700c:	00045114 	andeq	r5, r4, r4, lsl r1
    7010:	00f31400 	rscseq	r1, r3, r0, lsl #8
    7014:	b4140000 	ldrlt	r0, [r4]
    7018:	14000005 	strne	r0, [r0], #-5
    701c:	00000048 	andeq	r0, r0, r8, asr #32
    7020:	57041000 	strpl	r1, [r4, -r0]
    7024:	11000004 	tstne	r0, r4
    7028:	00003126 	andeq	r3, r0, r6, lsr #2
    702c:	25050400 	strcs	r0, [r5, #-1024]
    7030:	000005b4 	strheq	r0, [r0], -r4
    7034:	00315115 	eorseq	r5, r1, r5, lsl r1
    7038:	02410500 	subeq	r0, r1, #0	; 0x0
    703c:	00000048 	andeq	r0, r0, r8, asr #32
    7040:	15002302 	strne	r2, [r0, #-770]
    7044:	00002f76 	andeq	r2, r0, r6, ror pc
    7048:	a4024605 	strge	r4, [r2], #-1541
    704c:	02000006 	andeq	r0, r0, #6	; 0x6
    7050:	fd150423 	ldc2	4, cr0, [r5, #-140]
    7054:	0500002f 	streq	r0, [r0, #-47]
    7058:	06a40246 	strteq	r0, [r4], r6, asr #4
    705c:	23020000 	movwcs	r0, #8192	; 0x2000
    7060:	2fd11508 	svccs	0x00d11508
    7064:	46050000 	strmi	r0, [r5], -r0
    7068:	0006a402 	andeq	sl, r6, r2, lsl #8
    706c:	0c230200 	sfmeq	f0, 4, [r3]
    7070:	0030fa15 	eorseq	pc, r0, r5, lsl sl
    7074:	02480500 	subeq	r0, r8, #0	; 0x0
    7078:	00000048 	andeq	r0, r0, r8, asr #32
    707c:	15102302 	ldrne	r2, [r0, #-770]
    7080:	00002ed4 	ldrdeq	r2, [r0], -r4
    7084:	af024905 	svcge	0x00024905
    7088:	02000008 	andeq	r0, r0, #8	; 0x8
    708c:	a4151423 	ldrge	r1, [r5], #-1059
    7090:	05000031 	streq	r0, [r0, #-49]
    7094:	0048024b 	subeq	r0, r8, fp, asr #4
    7098:	23020000 	movwcs	r0, #8192	; 0x2000
    709c:	31041530 	tstcc	r4, r0, lsr r5
    70a0:	4c050000 	stcmi	0, cr0, [r5], {0}
    70a4:	0005e602 	andeq	lr, r5, r2, lsl #12
    70a8:	34230200 	strtcc	r0, [r3], #-512
    70ac:	00307615 	eorseq	r7, r0, r5, lsl r6
    70b0:	024e0500 	subeq	r0, lr, #0	; 0x0
    70b4:	00000048 	andeq	r0, r0, r8, asr #32
    70b8:	15382302 	ldrne	r2, [r8, #-770]!
    70bc:	00003114 	andeq	r3, r0, r4, lsl r1
    70c0:	cb025005 	blgt	9b0dc <__Stack_Size+0x9acdc>
    70c4:	02000008 	andeq	r0, r0, #8	; 0x8
    70c8:	9b153c23 	blls	55615c <__Stack_Size+0x555d5c>
    70cc:	0500000f 	streq	r0, [r0, #-15]
    70d0:	01660253 	cmneq	r6, r3, asr r2
    70d4:	23020000 	movwcs	r0, #8192	; 0x2000
    70d8:	2fe71540 	svccs	0x00e71540
    70dc:	54050000 	strpl	r0, [r5]
    70e0:	00004802 	andeq	r4, r0, r2, lsl #16
    70e4:	44230200 	strtmi	r0, [r3], #-512
    70e8:	00323515 	eorseq	r3, r2, r5, lsl r5
    70ec:	02550500 	subseq	r0, r5, #0	; 0x0
    70f0:	00000166 	andeq	r0, r0, r6, ror #2
    70f4:	15482302 	strbne	r2, [r8, #-770]
    70f8:	00003090 	muleq	r0, r0, r0
    70fc:	d1025605 	tstle	r2, r5, lsl #12
    7100:	02000008 	andeq	r0, r0, #8	; 0x8
    7104:	05154c23 	ldreq	r4, [r5, #-3107]
    7108:	05000030 	streq	r0, [r0, #-48]
    710c:	00480259 	subeq	r0, r8, r9, asr r2
    7110:	23020000 	movwcs	r0, #8192	; 0x2000
    7114:	2f861550 	svccs	0x00861550
    7118:	5a050000 	bpl	147120 <__Stack_Size+0x146d20>
    711c:	0005b402 	andeq	fp, r5, r2, lsl #8
    7120:	54230200 	strtpl	r0, [r3], #-512
    7124:	0030ac15 	eorseq	sl, r0, r5, lsl ip
    7128:	027c0500 	rsbseq	r0, ip, #0	; 0x0
    712c:	0000088d 	andeq	r0, r0, sp, lsl #17
    7130:	15582302 	ldrbne	r2, [r8, #-770]
    7134:	00002e7f 	andeq	r2, r0, pc, ror lr
    7138:	a7027f05 	strge	r7, [r2, -r5, lsl #30]
    713c:	03000002 	movweq	r0, #2	; 0x2
    7140:	1502c823 	strne	ip, [r2, #-2083]
    7144:	0000301a 	andeq	r3, r0, sl, lsl r0
    7148:	60028005 	andvs	r8, r2, r5
    714c:	03000002 	movweq	r0, #2	; 0x2
    7150:	1502cc23 	strne	ip, [r2, #-3107]
    7154:	000031f0 	strdeq	r3, [r0], -r0
    7158:	e3028305 	movw	r8, #8965	; 0x2305
    715c:	03000008 	movweq	r0, #8	; 0x8
    7160:	1505dc23 	strne	sp, [r5, #-3107]
    7164:	00002f5f 	andeq	r2, r0, pc, asr pc
    7168:	63028805 	movwvs	r8, #10245	; 0x2805
    716c:	03000006 	movweq	r0, #6	; 0x6
    7170:	1505e023 	strne	lr, [r5, #-35]
    7174:	00002f44 	andeq	r2, r0, r4, asr #30
    7178:	ef028905 	svc	0x00028905
    717c:	03000008 	movweq	r0, #8	; 0x8
    7180:	0005ec23 	andeq	lr, r5, r3, lsr #24
    7184:	05ba0410 	ldreq	r0, [sl, #1040]!
    7188:	01020000 	tsteq	r2, r0
    718c:	0006a408 	andeq	sl, r6, r8, lsl #8
    7190:	32041000 	andcc	r1, r4, #0	; 0x0
    7194:	13000004 	movwne	r0, #4	; 0x4
    7198:	00004801 	andeq	r4, r0, r1, lsl #16
    719c:	0005e600 	andeq	lr, r5, r0, lsl #12
    71a0:	04511400 	ldrbeq	r1, [r1], #-1024
    71a4:	f3140000 	vhadd.u16	d0, d4, d0
    71a8:	14000000 	strne	r0, [r0]
    71ac:	000005e6 	andeq	r0, r0, r6, ror #11
    71b0:	00004814 	andeq	r4, r0, r4, lsl r8
    71b4:	04100000 	ldreq	r0, [r0]
    71b8:	000005ec 	andeq	r0, r0, ip, ror #11
    71bc:	0005ba16 	andeq	fp, r5, r6, lsl sl
    71c0:	c7041000 	strgt	r1, [r4, -r0]
    71c4:	13000005 	movwne	r0, #5	; 0x5
    71c8:	00006f01 	andeq	r6, r0, r1, lsl #30
    71cc:	00061600 	andeq	r1, r6, r0, lsl #12
    71d0:	04511400 	ldrbeq	r1, [r1], #-1024
    71d4:	f3140000 	vhadd.u16	d0, d4, d0
    71d8:	14000000 	strne	r0, [r0]
    71dc:	0000006f 	andeq	r0, r0, pc, rrx
    71e0:	00004814 	andeq	r4, r0, r4, lsl r8
    71e4:	04100000 	ldreq	r0, [r0]
    71e8:	000005f7 	strdeq	r0, [r0], -r7
    71ec:	00480113 	subeq	r0, r8, r3, lsl r1
    71f0:	06310000 	ldrteq	r0, [r1], -r0
    71f4:	51140000 	tstpl	r4, r0
    71f8:	14000004 	strne	r0, [r0], #-4
    71fc:	000000f3 	strdeq	r0, [r0], -r3
    7200:	1c041000 	stcne	0, cr1, [r4], {0}
    7204:	08000006 	stmdaeq	r0, {r1, r2}
    7208:	00000033 	andeq	r0, r0, r3, lsr r0
    720c:	00000647 	andeq	r0, r0, r7, asr #12
    7210:	0000b509 	andeq	fp, r0, r9, lsl #10
    7214:	08000200 	stmdaeq	r0, {r9}
    7218:	00000033 	andeq	r0, r0, r3, lsr r0
    721c:	00000657 	andeq	r0, r0, r7, asr r6
    7220:	0000b509 	andeq	fp, r0, r9, lsl #10
    7224:	05000000 	streq	r0, [r0]
    7228:	000030c8 	andeq	r3, r0, r8, asr #1
    722c:	f4010e05 	undefined instruction 0xf4010e05
    7230:	17000002 	strne	r0, [r0, -r2]
    7234:	000031d7 	ldrdeq	r3, [r0], -r7
    7238:	0113050c 	tsteq	r3, ip, lsl #10
    723c:	0000069e 	muleq	r0, lr, r6
    7240:	0030e715 	eorseq	lr, r0, r5, lsl r7
    7244:	01140500 	tsteq	r4, r0, lsl #10
    7248:	0000069e 	muleq	r0, lr, r6
    724c:	15002302 	strne	r2, [r0, #-770]
    7250:	00003013 	andeq	r3, r0, r3, lsl r0
    7254:	48011505 	stmdami	r1, {r0, r2, r8, sl, ip}
    7258:	02000000 	andeq	r0, r0, #0	; 0x0
    725c:	c2150423 	andsgt	r0, r5, #587202560	; 0x23000000
    7260:	05000030 	streq	r0, [r0, #-48]
    7264:	06a40116 	ssateq	r0, #5, r6, lsl #2
    7268:	23020000 	movwcs	r0, #8192	; 0x2000
    726c:	04100008 	ldreq	r0, [r0], #-8
    7270:	00000663 	andeq	r0, r0, r3, ror #12
    7274:	06570410 	undefined
    7278:	cc170000 	ldcgt	0, cr0, [r7], {0}
    727c:	0e00002e 	cdpeq	0, 0, cr0, cr0, cr14, {1}
    7280:	e5012e05 	str	r2, [r1, #-3589]
    7284:	15000006 	strne	r0, [r0, #-6]
    7288:	0000312d 	andeq	r3, r0, sp, lsr #2
    728c:	e5012f05 	str	r2, [r1, #-3845]
    7290:	02000006 	andeq	r0, r0, #6	; 0x6
    7294:	4f150023 	svcmi	0x00150023
    7298:	05000030 	streq	r0, [r0, #-48]
    729c:	06e50130 	undefined
    72a0:	23020000 	movwcs	r0, #8192	; 0x2000
    72a4:	31771506 	cmncc	r7, r6, lsl #10
    72a8:	31050000 	tstcc	r5, r0
    72ac:	00004101 	andeq	r4, r0, r1, lsl #2
    72b0:	0c230200 	sfmeq	f0, 4, [r3]
    72b4:	00410800 	subeq	r0, r1, r0, lsl #16
    72b8:	06f50000 	ldrbteq	r0, [r5], r0
    72bc:	b5090000 	strlt	r0, [r9]
    72c0:	02000000 	andeq	r0, r0, #0	; 0x0
    72c4:	05d01800 	ldrbeq	r1, [r0, #2048]
    72c8:	0815025f 	ldmdaeq	r5, {r0, r1, r2, r3, r4, r6, r9}
    72cc:	bb150000 	bllt	5472d4 <__Stack_Size+0x546ed4>
    72d0:	05000031 	streq	r0, [r0, #-49]
    72d4:	00250260 	eoreq	r0, r5, r0, ror #4
    72d8:	23020000 	movwcs	r0, #8192	; 0x2000
    72dc:	31611500 	cmncc	r1, r0, lsl #10
    72e0:	61050000 	tstvs	r5, r0
    72e4:	0005b402 	andeq	fp, r5, r2, lsl #8
    72e8:	04230200 	strteq	r0, [r3], #-512
    72ec:	00302f15 	eorseq	r2, r0, r5, lsl pc
    72f0:	02620500 	rsbeq	r0, r2, #0	; 0x0
    72f4:	00000815 	andeq	r0, r0, r5, lsl r8
    72f8:	15082302 	strne	r2, [r8, #-770]
    72fc:	00003213 	andeq	r3, r0, r3, lsl r2
    7300:	7c026305 	stcvc	3, cr6, [r2], {5}
    7304:	02000001 	andeq	r0, r0, #1	; 0x1
    7308:	81152423 	tsthi	r5, r3, lsr #8
    730c:	05000030 	streq	r0, [r0, #-48]
    7310:	00480264 	subeq	r0, r8, r4, ror #4
    7314:	23020000 	movwcs	r0, #8192	; 0x2000
    7318:	30e21548 	rsccc	r1, r2, r8, asr #10
    731c:	65050000 	strvs	r0, [r5]
    7320:	00005602 	andeq	r5, r0, r2, lsl #12
    7324:	50230200 	eorpl	r0, r3, r0, lsl #4
    7328:	00322215 	eorseq	r2, r2, r5, lsl r2
    732c:	02660500 	rsbeq	r0, r6, #0	; 0x0
    7330:	000006aa 	andeq	r0, r0, sl, lsr #13
    7334:	15582302 	ldrbne	r2, [r8, #-770]
    7338:	000030ed 	andeq	r3, r0, sp, ror #1
    733c:	dd026705 	stcle	7, cr6, [r2, #-20]
    7340:	02000000 	andeq	r0, r0, #0	; 0x0
    7344:	27156823 	ldrcs	r6, [r5, -r3, lsr #16]
    7348:	05000032 	streq	r0, [r0, #-50]
    734c:	00dd0268 	sbcseq	r0, sp, r8, ror #4
    7350:	23020000 	movwcs	r0, #8192	; 0x2000
    7354:	2f171570 	svccs	0x00171570
    7358:	69050000 	stmdbvs	r5, {}
    735c:	0000dd02 	andeq	sp, r0, r2, lsl #26
    7360:	78230200 	stmdavc	r3!, {r9}
    7364:	0031e615 	eorseq	lr, r1, r5, lsl r6
    7368:	026a0500 	rsbeq	r0, sl, #0	; 0x0
    736c:	00000825 	andeq	r0, r0, r5, lsr #16
    7370:	01802303 	orreq	r2, r0, r3, lsl #6
    7374:	00302315 	eorseq	r2, r0, r5, lsl r3
    7378:	026b0500 	rsbeq	r0, fp, #0	; 0x0
    737c:	00000835 	andeq	r0, r0, r5, lsr r8
    7380:	01882303 	orreq	r2, r8, r3, lsl #6
    7384:	00318415 	eorseq	r8, r1, r5, lsl r4
    7388:	026c0500 	rsbeq	r0, ip, #0	; 0x0
    738c:	00000048 	andeq	r0, r0, r8, asr #32
    7390:	01a02303 	lsleq	r2, r3, #6
    7394:	002fa715 	eoreq	sl, pc, r5, lsl r7
    7398:	026d0500 	rsbeq	r0, sp, #0	; 0x0
    739c:	000000dd 	ldrdeq	r0, [r0], -sp
    73a0:	01a42303 	undefined instruction 0x01a42303
    73a4:	002f0815 	eoreq	r0, pc, r5, lsl r8
    73a8:	026e0500 	rsbeq	r0, lr, #0	; 0x0
    73ac:	000000dd 	ldrdeq	r0, [r0], -sp
    73b0:	01ac2303 	undefined instruction 0x01ac2303
    73b4:	002f9615 	eoreq	r9, pc, r5, lsl r6
    73b8:	026f0500 	rsbeq	r0, pc, #0	; 0x0
    73bc:	000000dd 	ldrdeq	r0, [r0], -sp
    73c0:	01b42303 	undefined instruction 0x01b42303
    73c4:	002edf15 	eoreq	sp, lr, r5, lsl pc
    73c8:	02700500 	rsbseq	r0, r0, #0	; 0x0
    73cc:	000000dd 	ldrdeq	r0, [r0], -sp
    73d0:	01bc2303 	undefined instruction 0x01bc2303
    73d4:	002eee15 	eoreq	lr, lr, r5, lsl lr
    73d8:	02710500 	rsbseq	r0, r1, #0	; 0x0
    73dc:	000000dd 	ldrdeq	r0, [r0], -sp
    73e0:	01c42303 	biceq	r2, r4, r3, lsl #6
    73e4:	05ba0800 	ldreq	r0, [sl, #2048]!
    73e8:	08250000 	stmdaeq	r5!, {}
    73ec:	b5090000 	strlt	r0, [r9]
    73f0:	19000000 	stmdbne	r0, {}
    73f4:	05ba0800 	ldreq	r0, [sl, #2048]!
    73f8:	08350000 	ldmdaeq	r5!, {}
    73fc:	b5090000 	strlt	r0, [r9]
    7400:	07000000 	streq	r0, [r0, -r0]
    7404:	05ba0800 	ldreq	r0, [sl, #2048]!
    7408:	08450000 	stmdaeq	r5, {}^
    740c:	b5090000 	strlt	r0, [r9]
    7410:	17000000 	strne	r0, [r0, -r0]
    7414:	05f01800 	ldrbeq	r1, [r0, #2048]!
    7418:	086d0277 	stmdaeq	sp!, {r0, r1, r2, r4, r5, r6, r9}^
    741c:	66150000 	ldrvs	r0, [r5], -r0
    7420:	05000030 	streq	r0, [r0, #-48]
    7424:	086d0279 	stmdaeq	sp!, {r0, r3, r4, r5, r6, r9}^
    7428:	23020000 	movwcs	r0, #8192	; 0x2000
    742c:	31dd1500 	bicscc	r1, sp, r0, lsl #10
    7430:	7a050000 	bvc	147438 <__Stack_Size+0x147038>
    7434:	00087d02 	andeq	r7, r8, r2, lsl #26
    7438:	78230200 	stmdavc	r3!, {r9}
    743c:	02ee0800 	rsceq	r0, lr, #0	; 0x0
    7440:	087d0000 	ldmdaeq	sp!, {}^
    7444:	b5090000 	strlt	r0, [r9]
    7448:	1d000000 	stcne	0, cr0, [r0]
    744c:	00250800 	eoreq	r0, r5, r0, lsl #16
    7450:	088d0000 	stmeq	sp, {}
    7454:	b5090000 	strlt	r0, [r9]
    7458:	1d000000 	stcne	0, cr0, [r0]
    745c:	05f01900 	ldrbeq	r1, [r0, #2304]!
    7460:	08af025d 	stmiaeq	pc!, {r0, r2, r3, r4, r6, r9}
    7464:	261a0000 	ldrcs	r0, [sl], -r0
    7468:	05000031 	streq	r0, [r0, #-49]
    746c:	06f50272 	undefined
    7470:	001a0000 	andseq	r0, sl, r0
    7474:	05000032 	streq	r0, [r0, #-50]
    7478:	0845027b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r6, r9}^
    747c:	08000000 	stmdaeq	r0, {}
    7480:	000005ba 	strheq	r0, [r0], -sl
    7484:	000008bf 	strheq	r0, [r0], -pc
    7488:	0000b509 	andeq	fp, r0, r9, lsl #10
    748c:	1b001800 	blne	d494 <__Stack_Size+0xd094>
    7490:	0008cb01 	andeq	ip, r8, r1, lsl #22
    7494:	04511400 	ldrbeq	r1, [r1], #-1024
    7498:	10000000 	andne	r0, r0, r0
    749c:	0008bf04 	andeq	fp, r8, r4, lsl #30
    74a0:	66041000 	strvs	r1, [r4], -r0
    74a4:	1b000001 	blne	74b0 <__Stack_Size+0x70b0>
    74a8:	0008e301 	andeq	lr, r8, r1, lsl #6
    74ac:	00481400 	subeq	r1, r8, r0, lsl #8
    74b0:	10000000 	andne	r0, r0, r0
    74b4:	0008e904 	andeq	lr, r8, r4, lsl #18
    74b8:	d7041000 	strle	r1, [r4, -r0]
    74bc:	08000008 	stmdaeq	r0, {r3}
    74c0:	00000657 	andeq	r0, r0, r7, asr r6
    74c4:	000008ff 	strdeq	r0, [r0], -pc
    74c8:	0000b509 	andeq	fp, r0, r9, lsl #10
    74cc:	1c000200 	sfmne	f0, 4, [r0], {0}
    74d0:	002e6701 	eoreq	r6, lr, r1, lsl #14
    74d4:	013c0100 	teqeq	ip, r0, lsl #2
	...
    74e0:	09265d01 	stmdbeq	r6!, {r0, r8, sl, fp, ip, lr}
    74e4:	b61d0000 	ldrlt	r0, [sp], -r0
    74e8:	01000031 	tsteq	r0, r1, lsr r0
    74ec:	0000483a 	andeq	r4, r0, sl, lsr r8
    74f0:	002c2d00 	eoreq	r2, ip, r0, lsl #26
    74f4:	911e0000 	tstls	lr, r0
    74f8:	05000031 	streq	r0, [r0, #-49]
    74fc:	09340328 	ldmdbeq	r4!, {r3, r5, r8, r9}
    7500:	01010000 	tsteq	r1, r0
    7504:	00045116 	andeq	r5, r4, r6, lsl r1
    7508:	09360000 	ldmdbeq	r6!, {}
    750c:	00020000 	.word	0x00020000
    7510:	00001843 	.word	0x00001843
    7514:	05510104 	.word	0x05510104
    7518:	50010000 	.word	0x50010000
    751c:	84000032 	.word	0x84000032
    7520:	00000032 	.word	0x00000032
    7524:	00000000 	.word	0x00000000
    7528:	8f000000 	.word	0x8f000000
    752c:	0200001a 	.word	0x0200001a
    7530:	069d0601 	.word	0x069d0601
    7534:	01020000 	.word	0x01020000
    7538:	00069b08 	.word	0x00069b08
    753c:	05020200 	.word	0x05020200
    7540:	000005d8 	.word	0x000005d8
    7544:	db070202 	.word	0xdb070202
    7548:	03000007 	.word	0x03000007
    754c:	6e690504 	.word	0x6e690504
    7550:	04020074 	.word	0x04020074
    7554:	002e4a07 	.word	0x002e4a07
    7558:	05080200 	.word	0x05080200
    755c:	00002dc6 	.word	0x00002dc6
    7560:	40070802 	.word	0x40070802
    7564:	0400002e 	.word	0x0400002e
    7568:	0000309a 	.word	0x0000309a
    756c:	00410701 	.word	0x00410701
    7570:	04020000 	.word	0x04020000
    7574:	002dcb05 	.word	0x002dcb05
    7578:	31490400 	.word	0x31490400
    757c:	2c020000 	.word	0x2c020000
    7580:	00000068 	.word	0x00000068
    7584:	00304205 	.word	0x00304205
    7588:	01630300 	.word	0x01630300
    758c:	00000048 	.word	0x00000048
    7590:	47020406 	.word	0x47020406
    7594:	000000a5 	.word	0x000000a5
    7598:	00303c07 	.word	0x00303c07
    759c:	7a480200 	.word	0x7a480200
    75a0:	07000000 	.word	0x07000000
    75a4:	00002ff6 	.word	0x00002ff6
    75a8:	00a54902 	.word	0x00a54902
    75ac:	08000000 	.word	0x08000000
    75b0:	0000002c 	.word	0x0000002c
    75b4:	000000b5 	.word	0x000000b5
    75b8:	0000b509 	.word	0x0000b509
    75bc:	0a000300 	.word	0x0a000300
    75c0:	080b0704 	.word	0x080b0704
    75c4:	00dd4402 	.word	0x00dd4402
    75c8:	330c0000 	.word	0x330c0000
    75cc:	02000031 	.word	0x02000031
    75d0:	00004145 	.word	0x00004145
    75d4:	00230200 	.word	0x00230200
    75d8:	00313b0c 	.word	0x00313b0c
    75dc:	864a0200 	.word	0x864a0200
    75e0:	02000000 	.word	0x02000000
    75e4:	04000423 	.word	0x04000423
    75e8:	000030cf 	.word	0x000030cf
    75ec:	00b84b02 	.word	0x00b84b02
    75f0:	c8040000 	.word	0xc8040000
    75f4:	0200002f 	.word	0x0200002f
    75f8:	00005d4f 	.word	0x00005d4f
    75fc:	04040d00 	.word	0x04040d00
    7600:	0000317c 	.word	0x0000317c
    7604:	01001504 	.word	0x01001504
    7608:	04020000 	.word	0x04020000
    760c:	002e4507 	.word	0x002e4507
    7610:	2fd90e00 	.word	0x2fd90e00
    7614:	04180000 	.word	0x04180000
    7618:	0001662d 	.word	0x0001662d
    761c:	30e70c00 	.word	0x30e70c00
    7620:	2e040000 	.word	0x2e040000
    7624:	00000166 	.word	0x00000166
    7628:	0f002302 	.word	0x0f002302
    762c:	04006b5f 	.word	0x04006b5f
    7630:	0000412f 	.word	0x0000412f
    7634:	04230200 	.word	0x04230200
    7638:	00311e0c 	.word	0x00311e0c
    763c:	412f0400 	.word	0x412f0400
    7640:	02000000 	.word	0x02000000
    7644:	c20c0823 	.word	0xc20c0823
    7648:	0400002f 	.word	0x0400002f
    764c:	0000412f 	.word	0x0000412f
    7650:	0c230200 	.word	0x0c230200
    7654:	0031c80c 	.word	0x0031c80c
    7658:	412f0400 	.word	0x412f0400
    765c:	02000000 	.word	0x02000000
    7660:	5f0f1023 	.word	0x5f0f1023
    7664:	30040078 	.word	0x30040078
    7668:	0000016c 	.word	0x0000016c
    766c:	00142302 	.word	0x00142302
    7670:	01070410 	.word	0x01070410
    7674:	f5080000 	.word	0xf5080000
    7678:	7c000000 	.word	0x7c000000
    767c:	09000001 	.word	0x09000001
    7680:	000000b5 	.word	0x000000b5
    7684:	f10e0000 	.word	0xf10e0000
    7688:	2400002f 	.word	0x2400002f
    768c:	02073504 	.word	0x02073504
    7690:	250c0000 	.word	0x250c0000
    7694:	0400002f 	.word	0x0400002f
    7698:	00004136 	.word	0x00004136
    769c:	00230200 	.word	0x00230200
    76a0:	0031580c 	.word	0x0031580c
    76a4:	41370400 	.word	0x41370400
    76a8:	02000000 	.word	0x02000000
    76ac:	3a0c0423 	.word	0x3a0c0423
    76b0:	0400002f 	.word	0x0400002f
    76b4:	00004138 	.word	0x00004138
    76b8:	08230200 	.word	0x08230200
    76bc:	00323a0c 	.word	0x00323a0c
    76c0:	41390400 	.word	0x41390400
    76c4:	02000000 	.word	0x02000000
    76c8:	6d0c0c23 	.word	0x6d0c0c23
    76cc:	04000030 	.word	0x04000030
    76d0:	0000413a 	.word	0x0000413a
    76d4:	10230200 	.word	0x10230200
    76d8:	00305c0c 	.word	0x00305c0c
    76dc:	413b0400 	.word	0x413b0400
    76e0:	02000000 	.word	0x02000000
    76e4:	cd0c1423 	.word	0xcd0c1423
    76e8:	04000031 	.word	0x04000031
    76ec:	0000413c 	.word	0x0000413c
    76f0:	18230200 	.word	0x18230200
    76f4:	0030b10c 	.word	0x0030b10c
    76f8:	413d0400 	.word	0x413d0400
    76fc:	02000000 	.word	0x02000000
    7700:	080c1c23 	.word	0x080c1c23
    7704:	04000032 	.word	0x04000032
    7708:	0000413e 	.word	0x0000413e
    770c:	20230200 	.word	0x20230200
    7710:	2f491100 	.word	0x2f491100
    7714:	01080000 	.word	0x01080000
    7718:	02504704 	.word	0x02504704
    771c:	b50c0000 	.word	0xb50c0000
    7720:	0400002f 	.word	0x0400002f
    7724:	00025048 	.word	0x00025048
    7728:	00230200 	.word	0x00230200
    772c:	002e870c 	.word	0x002e870c
    7730:	50490400 	.word	0x50490400
    7734:	03000002 	.word	0x03000002
    7738:	0c018023 	.word	0x0c018023
    773c:	0000316e 	.word	0x0000316e
    7740:	00f54b04 	.word	0x00f54b04
    7744:	23030000 	.word	0x23030000
    7748:	6e0c0280 	.word	0x6e0c0280
    774c:	0400002f 	.word	0x0400002f
    7750:	0000f54e 	.word	0x0000f54e
    7754:	84230300 	.word	0x84230300
    7758:	f3080002 	.word	0xf3080002
    775c:	60000000 	.word	0x60000000
    7760:	09000002 	.word	0x09000002
    7764:	000000b5 	.word	0x000000b5
    7768:	7f11001f 	.word	0x7f11001f
    776c:	9000002e 	.word	0x9000002e
    7770:	a7590401 	.word	0xa7590401
    7774:	0c000002 	.word	0x0c000002
    7778:	000030e7 	.word	0x000030e7
    777c:	02a75a04 	.word	0x02a75a04
    7780:	23020000 	.word	0x23020000
    7784:	30ff0c00 	.word	0x30ff0c00
    7788:	5b040000 	.word	0x5b040000
    778c:	00000041 	.word	0x00000041
    7790:	0c042302 	.word	0x0c042302
    7794:	00002fbd 	.word	0x00002fbd
    7798:	02ad5d04 	.word	0x02ad5d04
    779c:	23020000 	.word	0x23020000
    77a0:	2f490c08 	.word	0x2f490c08
    77a4:	5e040000 	.word	0x5e040000
    77a8:	00000207 	.word	0x00000207
    77ac:	01882303 	.word	0x01882303
    77b0:	60041000 	.word	0x60041000
    77b4:	08000002 	.word	0x08000002
    77b8:	000002bf 	.word	0x000002bf
    77bc:	000002bd 	.word	0x000002bd
    77c0:	0000b509 	.word	0x0000b509
    77c4:	12001f00 	.word	0x12001f00
    77c8:	bd041001 	.word	0xbd041001
    77cc:	0e000002 	.word	0x0e000002
    77d0:	000030bb 	.word	0x000030bb
    77d4:	ee690408 	.word	0xee690408
    77d8:	0c000002 	.word	0x0c000002
    77dc:	00002f34 	.word	0x00002f34
    77e0:	02ee6a04 	.word	0x02ee6a04
    77e4:	23020000 	.word	0x23020000
    77e8:	2ec60c00 	.word	0x2ec60c00
    77ec:	6b040000 	.word	0x6b040000
    77f0:	00000041 	.word	0x00000041
    77f4:	00042302 	.word	0x00042302
    77f8:	002c0410 	.word	0x002c0410
    77fc:	da0e0000 	.word	0xda0e0000
    7800:	5c000030 	.word	0x5c000030
    7804:	0432a904 	.word	0x0432a904
    7808:	5f0f0000 	.word	0x5f0f0000
    780c:	aa040070 	.word	0xaa040070
    7810:	000002ee 	.word	0x000002ee
    7814:	0f002302 	.word	0x0f002302
    7818:	0400725f 	.word	0x0400725f
    781c:	000041ab 	.word	0x000041ab
    7820:	04230200 	.word	0x04230200
    7824:	00775f0f 	.word	0x00775f0f
    7828:	0041ac04 	.word	0x0041ac04
    782c:	23020000 	.word	0x23020000
    7830:	2f670c08 	.word	0x2f670c08
    7834:	ad040000 	.word	0xad040000
    7838:	00000033 	.word	0x00000033
    783c:	0c0c2302 	.word	0x0c0c2302
    7840:	0000300d 	.word	0x0000300d
    7844:	0033ae04 	.word	0x0033ae04
    7848:	23020000 	.word	0x23020000
    784c:	625f0f0e 	.word	0x625f0f0e
    7850:	af040066 	.word	0xaf040066
    7854:	000002c5 	.word	0x000002c5
    7858:	0c102302 	.word	0x0c102302
    785c:	00002eff 	.word	0x00002eff
    7860:	0041b004 	.word	0x0041b004
    7864:	23020000 	.word	0x23020000
    7868:	2f570c18 	.word	0x2f570c18
    786c:	b7040000 	.word	0xb7040000
    7870:	000000f3 	.word	0x000000f3
    7874:	0c1c2302 	.word	0x0c1c2302
    7878:	00002fe1 	.word	0x00002fe1
    787c:	05c1b904 	.word	0x05c1b904
    7880:	23020000 	.word	0x23020000
    7884:	30550c20 	.word	0x30550c20
    7888:	bb040000 	.word	0xbb040000
    788c:	000005f1 	.word	0x000005f1
    7890:	0c242302 	.word	0x0c242302
    7894:	00003143 	.word	0x00003143
    7898:	0616bd04 	.word	0x0616bd04
    789c:	23020000 	.word	0x23020000
    78a0:	0e300c28 	.word	0x0e300c28
    78a4:	be040000 	.word	0xbe040000
    78a8:	00000631 	.word	0x00000631
    78ac:	0f2c2302 	.word	0x0f2c2302
    78b0:	0062755f 	.word	0x0062755f
    78b4:	02c5c104 	.word	0x02c5c104
    78b8:	23020000 	.word	0x23020000
    78bc:	755f0f30 	.word	0x755f0f30
    78c0:	c2040070 	.word	0xc2040070
    78c4:	000002ee 	.word	0x000002ee
    78c8:	0f382302 	.word	0x0f382302
    78cc:	0072755f 	.word	0x0072755f
    78d0:	0041c304 	.word	0x0041c304
    78d4:	23020000 	.word	0x23020000
    78d8:	2f2e0c3c 	.word	0x2f2e0c3c
    78dc:	c6040000 	.word	0xc6040000
    78e0:	00000637 	.word	0x00000637
    78e4:	0c402302 	.word	0x0c402302
    78e8:	000031fa 	.word	0x000031fa
    78ec:	0647c704 	.word	0x0647c704
    78f0:	23020000 	.word	0x23020000
    78f4:	6c5f0f43 	.word	0x6c5f0f43
    78f8:	ca040062 	.word	0xca040062
    78fc:	000002c5 	.word	0x000002c5
    7900:	0c442302 	.word	0x0c442302
    7904:	00002f7d 	.word	0x00002f7d
    7908:	0041cd04 	.word	0x0041cd04
    790c:	23020000 	.word	0x23020000
    7910:	2f8e0c4c 	.word	0x2f8e0c4c
    7914:	ce040000 	.word	0xce040000
    7918:	00000041 	.word	0x00000041
    791c:	0c502302 	.word	0x0c502302
    7920:	0000324a 	.word	0x0000324a
    7924:	0451d104 	.word	0x0451d104
    7928:	23020000 	.word	0x23020000
    792c:	30490c54 	.word	0x30490c54
    7930:	d5040000 	.word	0xd5040000
    7934:	000000e8 	.word	0x000000e8
    7938:	00582302 	.word	0x00582302
    793c:	00410113 	.word	0x00410113
    7940:	04510000 	.word	0x04510000
    7944:	51140000 	.word	0x51140000
    7948:	14000004 	.word	0x14000004
    794c:	000000f3 	.word	0x000000f3
    7950:	0005b414 	.word	0x0005b414
    7954:	00411400 	.word	0x00411400
    7958:	10000000 	.word	0x10000000
    795c:	00045704 	.word	0x00045704
    7960:	31261100 	.word	0x31261100
    7964:	04000000 	.word	0x04000000
    7968:	05b42504 	.word	0x05b42504
    796c:	51150000 	.word	0x51150000
    7970:	04000031 	.word	0x04000031
    7974:	00410241 	.word	0x00410241
    7978:	23020000 	.word	0x23020000
    797c:	2f761500 	.word	0x2f761500
    7980:	46040000 	.word	0x46040000
    7984:	0006a402 	.word	0x0006a402
    7988:	04230200 	.word	0x04230200
    798c:	002ffd15 	.word	0x002ffd15
    7990:	02460400 	.word	0x02460400
    7994:	000006a4 	.word	0x000006a4
    7998:	15082302 	.word	0x15082302
    799c:	00002fd1 	.word	0x00002fd1
    79a0:	a4024604 	.word	0xa4024604
    79a4:	02000006 	.word	0x02000006
    79a8:	fa150c23 	.word	0xfa150c23
    79ac:	04000030 	.word	0x04000030
    79b0:	00410248 	.word	0x00410248
    79b4:	23020000 	.word	0x23020000
    79b8:	2ed41510 	.word	0x2ed41510
    79bc:	49040000 	.word	0x49040000
    79c0:	0008af02 	.word	0x0008af02
    79c4:	14230200 	.word	0x14230200
    79c8:	0031a415 	.word	0x0031a415
    79cc:	024b0400 	.word	0x024b0400
    79d0:	00000041 	.word	0x00000041
    79d4:	15302302 	.word	0x15302302
    79d8:	00003104 	.word	0x00003104
    79dc:	e6024c04 	.word	0xe6024c04
    79e0:	02000005 	.word	0x02000005
    79e4:	76153423 	.word	0x76153423
    79e8:	04000030 	.word	0x04000030
    79ec:	0041024e 	.word	0x0041024e
    79f0:	23020000 	.word	0x23020000
    79f4:	31141538 	.word	0x31141538
    79f8:	50040000 	.word	0x50040000
    79fc:	0008cb02 	.word	0x0008cb02
    7a00:	3c230200 	.word	0x3c230200
    7a04:	000f9b15 	.word	0x000f9b15
    7a08:	02530400 	.word	0x02530400
    7a0c:	00000166 	.word	0x00000166
    7a10:	15402302 	.word	0x15402302
    7a14:	00002fe7 	.word	0x00002fe7
    7a18:	41025404 	.word	0x41025404
    7a1c:	02000000 	.word	0x02000000
    7a20:	35154423 	.word	0x35154423
    7a24:	04000032 	.word	0x04000032
    7a28:	01660255 	.word	0x01660255
    7a2c:	23020000 	.word	0x23020000
    7a30:	30901548 	.word	0x30901548
    7a34:	56040000 	.word	0x56040000
    7a38:	0008d102 	.word	0x0008d102
    7a3c:	4c230200 	.word	0x4c230200
    7a40:	00300515 	.word	0x00300515
    7a44:	02590400 	.word	0x02590400
    7a48:	00000041 	.word	0x00000041
    7a4c:	15502302 	.word	0x15502302
    7a50:	00002f86 	.word	0x00002f86
    7a54:	b4025a04 	.word	0xb4025a04
    7a58:	02000005 	.word	0x02000005
    7a5c:	ac155423 	.word	0xac155423
    7a60:	04000030 	.word	0x04000030
    7a64:	088d027c 	.word	0x088d027c
    7a68:	23020000 	.word	0x23020000
    7a6c:	2e7f1558 	.word	0x2e7f1558
    7a70:	7f040000 	.word	0x7f040000
    7a74:	0002a702 	.word	0x0002a702
    7a78:	c8230300 	.word	0xc8230300
    7a7c:	301a1502 	.word	0x301a1502
    7a80:	80040000 	.word	0x80040000
    7a84:	00026002 	.word	0x00026002
    7a88:	cc230300 	.word	0xcc230300
    7a8c:	31f01502 	.word	0x31f01502
    7a90:	83040000 	.word	0x83040000
    7a94:	0008e302 	.word	0x0008e302
    7a98:	dc230300 	.word	0xdc230300
    7a9c:	2f5f1505 	.word	0x2f5f1505
    7aa0:	88040000 	.word	0x88040000
    7aa4:	00066302 	.word	0x00066302
    7aa8:	e0230300 	.word	0xe0230300
    7aac:	2f441505 	.word	0x2f441505
    7ab0:	89040000 	.word	0x89040000
    7ab4:	0008ef02 	.word	0x0008ef02
    7ab8:	ec230300 	.word	0xec230300
    7abc:	04100005 	.word	0x04100005
    7ac0:	000005ba 	.word	0x000005ba
    7ac4:	a4080102 	.word	0xa4080102
    7ac8:	10000006 	.word	0x10000006
    7acc:	00043204 	.word	0x00043204
    7ad0:	41011300 	.word	0x41011300
    7ad4:	e6000000 	.word	0xe6000000
    7ad8:	14000005 	.word	0x14000005
    7adc:	00000451 	.word	0x00000451
    7ae0:	0000f314 	.word	0x0000f314
    7ae4:	05e61400 	.word	0x05e61400
    7ae8:	41140000 	.word	0x41140000
    7aec:	00000000 	.word	0x00000000
    7af0:	05ec0410 	.word	0x05ec0410
    7af4:	ba160000 	.word	0xba160000
    7af8:	10000005 	.word	0x10000005
    7afc:	0005c704 	.word	0x0005c704
    7b00:	6f011300 	.word	0x6f011300
    7b04:	16000000 	.word	0x16000000
    7b08:	14000006 	.word	0x14000006
    7b0c:	00000451 	.word	0x00000451
    7b10:	0000f314 	.word	0x0000f314
    7b14:	006f1400 	.word	0x006f1400
    7b18:	41140000 	.word	0x41140000
    7b1c:	00000000 	.word	0x00000000
    7b20:	05f70410 	.word	0x05f70410
    7b24:	01130000 	.word	0x01130000
    7b28:	00000041 	.word	0x00000041
    7b2c:	00000631 	.word	0x00000631
    7b30:	00045114 	.word	0x00045114
    7b34:	00f31400 	.word	0x00f31400
    7b38:	10000000 	.word	0x10000000
    7b3c:	00061c04 	.word	0x00061c04
    7b40:	002c0800 	.word	0x002c0800
    7b44:	06470000 	.word	0x06470000
    7b48:	b5090000 	.word	0xb5090000
    7b4c:	02000000 	.word	0x02000000
    7b50:	002c0800 	.word	0x002c0800
    7b54:	06570000 	.word	0x06570000
    7b58:	b5090000 	.word	0xb5090000
    7b5c:	00000000 	.word	0x00000000
    7b60:	30c80500 	.word	0x30c80500
    7b64:	0e040000 	.word	0x0e040000
    7b68:	0002f401 	.word	0x0002f401
    7b6c:	31d71700 	.word	0x31d71700
    7b70:	040c0000 	.word	0x040c0000
    7b74:	069e0113 	.word	0x069e0113
    7b78:	e7150000 	.word	0xe7150000
    7b7c:	04000030 	.word	0x04000030
    7b80:	069e0114 	.word	0x069e0114
    7b84:	23020000 	.word	0x23020000
    7b88:	30131500 	.word	0x30131500
    7b8c:	15040000 	.word	0x15040000
    7b90:	00004101 	.word	0x00004101
    7b94:	04230200 	.word	0x04230200
    7b98:	0030c215 	.word	0x0030c215
    7b9c:	01160400 	.word	0x01160400
    7ba0:	000006a4 	.word	0x000006a4
    7ba4:	00082302 	.word	0x00082302
    7ba8:	06630410 	.word	0x06630410
    7bac:	04100000 	.word	0x04100000
    7bb0:	00000657 	.word	0x00000657
    7bb4:	002ecc17 	.word	0x002ecc17
    7bb8:	2e040e00 	.word	0x2e040e00
    7bbc:	0006e501 	.word	0x0006e501
    7bc0:	312d1500 	.word	0x312d1500
    7bc4:	2f040000 	.word	0x2f040000
    7bc8:	0006e501 	.word	0x0006e501
    7bcc:	00230200 	.word	0x00230200
    7bd0:	00304f15 	.word	0x00304f15
    7bd4:	01300400 	.word	0x01300400
    7bd8:	000006e5 	.word	0x000006e5
    7bdc:	15062302 	.word	0x15062302
    7be0:	00003177 	.word	0x00003177
    7be4:	3a013104 	.word	0x3a013104
    7be8:	02000000 	.word	0x02000000
    7bec:	08000c23 	.word	0x08000c23
    7bf0:	0000003a 	.word	0x0000003a
    7bf4:	000006f5 	.word	0x000006f5
    7bf8:	0000b509 	.word	0x0000b509
    7bfc:	18000200 	.word	0x18000200
    7c00:	025f04d0 	.word	0x025f04d0
    7c04:	00000815 	.word	0x00000815
    7c08:	0031bb15 	.word	0x0031bb15
    7c0c:	02600400 	.word	0x02600400
    7c10:	00000048 	.word	0x00000048
    7c14:	15002302 	.word	0x15002302
    7c18:	00003161 	.word	0x00003161
    7c1c:	b4026104 	.word	0xb4026104
    7c20:	02000005 	.word	0x02000005
    7c24:	2f150423 	.word	0x2f150423
    7c28:	04000030 	.word	0x04000030
    7c2c:	08150262 	.word	0x08150262
    7c30:	23020000 	.word	0x23020000
    7c34:	32131508 	.word	0x32131508
    7c38:	63040000 	.word	0x63040000
    7c3c:	00017c02 	.word	0x00017c02
    7c40:	24230200 	.word	0x24230200
    7c44:	00308115 	.word	0x00308115
    7c48:	02640400 	.word	0x02640400
    7c4c:	00000041 	.word	0x00000041
    7c50:	15482302 	.word	0x15482302
    7c54:	000030e2 	.word	0x000030e2
    7c58:	56026504 	.word	0x56026504
    7c5c:	02000000 	.word	0x02000000
    7c60:	22155023 	.word	0x22155023
    7c64:	04000032 	.word	0x04000032
    7c68:	06aa0266 	.word	0x06aa0266
    7c6c:	23020000 	.word	0x23020000
    7c70:	30ed1558 	.word	0x30ed1558
    7c74:	67040000 	.word	0x67040000
    7c78:	0000dd02 	.word	0x0000dd02
    7c7c:	68230200 	.word	0x68230200
    7c80:	00322715 	.word	0x00322715
    7c84:	02680400 	.word	0x02680400
    7c88:	000000dd 	.word	0x000000dd
    7c8c:	15702302 	.word	0x15702302
    7c90:	00002f17 	.word	0x00002f17
    7c94:	dd026904 	.word	0xdd026904
    7c98:	02000000 	.word	0x02000000
    7c9c:	e6157823 	.word	0xe6157823
    7ca0:	04000031 	.word	0x04000031
    7ca4:	0825026a 	.word	0x0825026a
    7ca8:	23030000 	.word	0x23030000
    7cac:	23150180 	.word	0x23150180
    7cb0:	04000030 	.word	0x04000030
    7cb4:	0835026b 	.word	0x0835026b
    7cb8:	23030000 	.word	0x23030000
    7cbc:	84150188 	.word	0x84150188
    7cc0:	04000031 	.word	0x04000031
    7cc4:	0041026c 	.word	0x0041026c
    7cc8:	23030000 	.word	0x23030000
    7ccc:	a71501a0 	.word	0xa71501a0
    7cd0:	0400002f 	.word	0x0400002f
    7cd4:	00dd026d 	.word	0x00dd026d
    7cd8:	23030000 	.word	0x23030000
    7cdc:	081501a4 	.word	0x081501a4
    7ce0:	0400002f 	.word	0x0400002f
    7ce4:	00dd026e 	.word	0x00dd026e
    7ce8:	23030000 	.word	0x23030000
    7cec:	961501ac 	.word	0x961501ac
    7cf0:	0400002f 	.word	0x0400002f
    7cf4:	00dd026f 	.word	0x00dd026f
    7cf8:	23030000 	.word	0x23030000
    7cfc:	df1501b4 	.word	0xdf1501b4
    7d00:	0400002e 	.word	0x0400002e
    7d04:	00dd0270 	.word	0x00dd0270
    7d08:	23030000 	.word	0x23030000
    7d0c:	ee1501bc 	.word	0xee1501bc
    7d10:	0400002e 	.word	0x0400002e
    7d14:	00dd0271 	.word	0x00dd0271
    7d18:	23030000 	.word	0x23030000
    7d1c:	080001c4 	.word	0x080001c4
    7d20:	000005ba 	.word	0x000005ba
    7d24:	00000825 	.word	0x00000825
    7d28:	0000b509 	.word	0x0000b509
    7d2c:	08001900 	.word	0x08001900
    7d30:	000005ba 	.word	0x000005ba
    7d34:	00000835 	.word	0x00000835
    7d38:	0000b509 	.word	0x0000b509
    7d3c:	08000700 	.word	0x08000700
    7d40:	000005ba 	.word	0x000005ba
    7d44:	00000845 	.word	0x00000845
    7d48:	0000b509 	.word	0x0000b509
    7d4c:	18001700 	.word	0x18001700
    7d50:	027704f0 	.word	0x027704f0
    7d54:	0000086d 	.word	0x0000086d
    7d58:	00306615 	.word	0x00306615
    7d5c:	02790400 	.word	0x02790400
    7d60:	0000086d 	.word	0x0000086d
    7d64:	15002302 	.word	0x15002302
    7d68:	000031dd 	.word	0x000031dd
    7d6c:	7d027a04 	.word	0x7d027a04
    7d70:	02000008 	.word	0x02000008
    7d74:	08007823 	.word	0x08007823
    7d78:	000002ee 	.word	0x000002ee
    7d7c:	0000087d 	.word	0x0000087d
    7d80:	0000b509 	.word	0x0000b509
    7d84:	08001d00 	.word	0x08001d00
    7d88:	00000048 	.word	0x00000048
    7d8c:	0000088d 	.word	0x0000088d
    7d90:	0000b509 	.word	0x0000b509
    7d94:	19001d00 	.word	0x19001d00
    7d98:	025d04f0 	.word	0x025d04f0
    7d9c:	000008af 	.word	0x000008af
    7da0:	0031261a 	.word	0x0031261a
    7da4:	02720400 	.word	0x02720400
    7da8:	000006f5 	.word	0x000006f5
    7dac:	0032001a 	.word	0x0032001a
    7db0:	027b0400 	.word	0x027b0400
    7db4:	00000845 	.word	0x00000845
    7db8:	05ba0800 	.word	0x05ba0800
    7dbc:	08bf0000 	.word	0x08bf0000
    7dc0:	b5090000 	.word	0xb5090000
    7dc4:	18000000 	.word	0x18000000
    7dc8:	cb011b00 	.word	0xcb011b00
    7dcc:	14000008 	.word	0x14000008
    7dd0:	00000451 	.word	0x00000451
    7dd4:	bf041000 	.word	0xbf041000
    7dd8:	10000008 	.word	0x10000008
    7ddc:	00016604 	.word	0x00016604
    7de0:	e3011b00 	.word	0xe3011b00
    7de4:	14000008 	.word	0x14000008
    7de8:	00000041 	.word	0x00000041
    7dec:	e9041000 	.word	0xe9041000
    7df0:	10000008 	.word	0x10000008
    7df4:	0008d704 	.word	0x0008d704
    7df8:	06570800 	.word	0x06570800
    7dfc:	08ff0000 	.word	0x08ff0000
    7e00:	b5090000 	.word	0xb5090000
    7e04:	02000000 	.word	0x02000000
    7e08:	32441c00 	.word	0x32441c00
    7e0c:	0c050000 	.word	0x0c050000
    7e10:	00000457 	.word	0x00000457
    7e14:	00000305 	.word	0x00000305
    7e18:	981d0000 	.word	0x981d0000
    7e1c:	05000031 	.word	0x05000031
    7e20:	00045110 	.word	0x00045110
    7e24:	03050100 	.word	0x03050100
    7e28:	00000000 	.word	0x00000000
    7e2c:	0031911d 	.word	0x0031911d
    7e30:	34110500 	.word	0x34110500
    7e34:	01000009 	.word	0x01000009
    7e38:	00000305 	.word	0x00000305
    7e3c:	51160000 	.word	0x51160000
    7e40:	00000004 	.word	0x00000004
    7e44:	00000142 	.word	0x00000142
    7e48:	19a30002 	.word	0x19a30002
    7e4c:	01040000 	.word	0x01040000
    7e50:	00000551 	.word	0x00000551
    7e54:	0032f901 	.word	0x0032f901
    7e58:	00334d00 	.word	0x00334d00
	...
    7e64:	001b6a00 	.word	0x001b6a00
    7e68:	06010200 	.word	0x06010200
    7e6c:	0000069d 	.word	0x0000069d
    7e70:	9b080102 	.word	0x9b080102
    7e74:	02000006 	.word	0x02000006
    7e78:	05d80502 	.word	0x05d80502
    7e7c:	02020000 	.word	0x02020000
    7e80:	0007db07 	.word	0x0007db07
    7e84:	05040300 	.word	0x05040300
    7e88:	00746e69 	.word	0x00746e69
    7e8c:	4a070402 	.word	0x4a070402
    7e90:	0200002e 	.word	0x0200002e
    7e94:	2dc60508 	.word	0x2dc60508
    7e98:	08020000 	.word	0x08020000
    7e9c:	002e4007 	.word	0x002e4007
    7ea0:	05040200 	.word	0x05040200
    7ea4:	00002dcb 	.word	0x00002dcb
    7ea8:	05070404 	.word	0x05070404
    7eac:	000032cd 	.word	0x000032cd
    7eb0:	0048d602 	.word	0x0048d602
    7eb4:	04020000 	.word	0x04020000
    7eb8:	002e4507 	.word	0x002e4507
    7ebc:	08010200 	.word	0x08010200
    7ec0:	000006a4 	.word	0x000006a4
    7ec4:	33820106 	.word	0x33820106
    7ec8:	32010000 	.word	0x32010000
    7ecc:	00000001 	.word	0x00000001
    7ed0:	00000000 	.word	0x00000000
    7ed4:	002c4b00 	.word	0x002c4b00
    7ed8:	0000b200 	.word	0x0000b200
    7edc:	31350700 	.word	0x31350700
    7ee0:	33010000 	.word	0x33010000
    7ee4:	00000067 	.word	0x00000067
    7ee8:	69085501 	.word	0x69085501
    7eec:	67340100 	.word	0x67340100
    7ef0:	01000000 	.word	0x01000000
    7ef4:	01060054 	.word	0x01060054
    7ef8:	0000333b 	.word	0x0000333b
    7efc:	00012001 	.word	0x00012001
    7f00:	00000000 	.word	0x00000000
    7f04:	6a000000 	.word	0x6a000000
    7f08:	e400002c 	.word	0xe400002c
    7f0c:	07000000 	.word	0x07000000
    7f10:	00003135 	.word	0x00003135
    7f14:	00672101 	.word	0x00672101
    7f18:	55010000 	.word	0x55010000
    7f1c:	01006908 	.word	0x01006908
    7f20:	00006722 	.word	0x00006722
    7f24:	00540100 	.word	0x00540100
    7f28:	0000f109 	.word	0x0000f109
    7f2c:	0000ef00 	.word	0x0000ef00
    7f30:	0b000a00 	.word	0x0b000a00
    7f34:	ef040c01 	.word	0xef040c01
    7f38:	0d000000 	.word	0x0d000000
    7f3c:	00003394 	.word	0x00003394
    7f40:	00e41301 	.word	0x00e41301
    7f44:	01010000 	.word	0x01010000
    7f48:	0032e50d 	.word	0x0032e50d
    7f4c:	e4140100 	.word	0xe4140100
    7f50:	01000000 	.word	0x01000000
    7f54:	33aa0d01 	.word	0x33aa0d01
    7f58:	15010000 	.word	0x15010000
    7f5c:	000000e4 	.word	0x000000e4
    7f60:	2a0d0101 	.word	0x2a0d0101
    7f64:	01000033 	.word	0x01000033
    7f68:	0000e416 	.word	0x0000e416
    7f6c:	0d010100 	.word	0x0d010100
    7f70:	000032ba 	.word	0x000032ba
    7f74:	00e41701 	.word	0x00e41701
    7f78:	01010000 	.word	0x01010000
    7f7c:	0032d40d 	.word	0x0032d40d
    7f80:	e4180100 	.word	0xe4180100
    7f84:	01000000 	.word	0x01000000
    7f88:	010f0001 	.word	0x010f0001
    7f8c:	00020000 	.word	0x00020000
    7f90:	00001a47 	.word	0x00001a47
    7f94:	05510104 	.word	0x05510104
    7f98:	01010000 	.word	0x01010000
    7f9c:	ca000034 	.word	0xca000034
    7fa0:	00000033 	.word	0x00000033
    7fa4:	00000000 	.word	0x00000000
    7fa8:	10000000 	.word	0x10000000
    7fac:	0200001c 	.word	0x0200001c
    7fb0:	069d0601 	.word	0x069d0601
    7fb4:	01020000 	.word	0x01020000
    7fb8:	00069b08 	.word	0x00069b08
    7fbc:	05020200 	.word	0x05020200
    7fc0:	000005d8 	.word	0x000005d8
    7fc4:	db070202 	.word	0xdb070202
    7fc8:	03000007 	.word	0x03000007
    7fcc:	6e690504 	.word	0x6e690504
    7fd0:	04020074 	.word	0x04020074
    7fd4:	002e4a07 	.word	0x002e4a07
    7fd8:	05080200 	.word	0x05080200
    7fdc:	00002dc6 	.word	0x00002dc6
    7fe0:	40070802 	.word	0x40070802
    7fe4:	0200002e 	.word	0x0200002e
    7fe8:	2dcb0504 	.word	0x2dcb0504
    7fec:	04040000 	.word	0x04040000
    7ff0:	02040507 	.word	0x02040507
    7ff4:	2e450704 	.word	0x2e450704
    7ff8:	04060000 	.word	0x04060000
    7ffc:	00000076 	.word	0x00000076
    8000:	a4080102 	.word	0xa4080102
    8004:	07000006 	.word	0x07000006
    8008:	000032cd 	.word	0x000032cd
    800c:	0048d602 	.word	0x0048d602
    8010:	01080000 	.word	0x01080000
    8014:	00003436 	.word	0x00003436
    8018:	67012f01 	.word	0x67012f01
	...
    8024:	89000000 	.word	0x89000000
    8028:	0c00002c 	.word	0x0c00002c
    802c:	09000001 	.word	0x09000001
    8030:	2b01006d 	.word	0x2b01006d
    8034:	00000067 	.word	0x00000067
    8038:	00002ca8 	.word	0x00002ca8
    803c:	01006309 	.word	0x01006309
    8040:	0000412b 	.word	0x0000412b
    8044:	002cdc00 	.word	0x002cdc00
    8048:	006e0900 	.word	0x006e0900
    804c:	007d2b01 	.word	0x007d2b01
    8050:	2d050000 	.word	0x2d050000
    8054:	730a0000 	.word	0x730a0000
    8058:	703a0100 	.word	0x703a0100
    805c:	39000000 	.word	0x39000000
    8060:	0b00002d 	.word	0x0b00002d
    8064:	3b010069 	.word	0x3b010069
    8068:	00000041 	.word	0x00000041
    806c:	00343d0c 	.word	0x00343d0c
    8070:	693c0100 	.word	0x693c0100
    8074:	57000000 	.word	0x57000000
    8078:	0c00002d 	.word	0x0c00002d
    807c:	000033bd 	.word	0x000033bd
    8080:	010c3d01 	.word	0x010c3d01
    8084:	2d800000 	.word	0x2d800000
    8088:	640d0000 	.word	0x640d0000
    808c:	483e0100 	.word	0x483e0100
    8090:	01000000 	.word	0x01000000
    8094:	04060055 	.word	0x04060055
    8098:	00000069 	.word	0x00000069
    809c:	0009a100 	.word	0x0009a100
    80a0:	f9000200 	.word	0xf9000200
    80a4:	0400001a 	.word	0x0400001a
    80a8:	00055101 	.word	0x00055101
    80ac:	34440100 	.word	0x34440100
    80b0:	2dd40000 	.word	0x2dd40000
	...
    80bc:	1cec0000 	.word	0x1cec0000
    80c0:	04020000 	.word	0x04020000
    80c4:	746e6905 	.word	0x746e6905
    80c8:	07040300 	.word	0x07040300
    80cc:	00002e4a 	.word	0x00002e4a
    80d0:	9d060103 	.word	0x9d060103
    80d4:	03000006 	.word	0x03000006
    80d8:	069b0801 	.word	0x069b0801
    80dc:	02030000 	.word	0x02030000
    80e0:	0005d805 	.word	0x0005d805
    80e4:	07020300 	.word	0x07020300
    80e8:	000007db 	.word	0x000007db
    80ec:	c6050803 	.word	0xc6050803
    80f0:	0300002d 	.word	0x0300002d
    80f4:	2e400708 	.word	0x2e400708
    80f8:	9a040000 	.word	0x9a040000
    80fc:	02000030 	.word	0x02000030
    8100:	00002507 	.word	0x00002507
    8104:	05040300 	.word	0x05040300
    8108:	00002dcb 	.word	0x00002dcb
    810c:	00314904 	.word	0x00314904
    8110:	682c0300 	.word	0x682c0300
    8114:	05000000 	.word	0x05000000
    8118:	00003042 	.word	0x00003042
    811c:	2c016304 	.word	0x2c016304
    8120:	06000000 	.word	0x06000000
    8124:	a5470304 	.word	0xa5470304
    8128:	07000000 	.word	0x07000000
    812c:	0000303c 	.word	0x0000303c
    8130:	007a4803 	.word	0x007a4803
    8134:	f6070000 	.word	0xf6070000
    8138:	0300002f 	.word	0x0300002f
    813c:	0000a549 	.word	0x0000a549
    8140:	3a080000 	.word	0x3a080000
    8144:	b5000000 	.word	0xb5000000
    8148:	09000000 	.word	0x09000000
    814c:	000000b5 	.word	0x000000b5
    8150:	040a0003 	.word	0x040a0003
    8154:	03080b07 	.word	0x03080b07
    8158:	0000dd44 	.word	0x0000dd44
    815c:	31330c00 	.word	0x31330c00
    8160:	45030000 	.word	0x45030000
    8164:	00000025 	.word	0x00000025
    8168:	0c002302 	.word	0x0c002302
    816c:	0000313b 	.word	0x0000313b
    8170:	00864a03 	.word	0x00864a03
    8174:	23020000 	.word	0x23020000
    8178:	cf040004 	.word	0xcf040004
    817c:	03000030 	.word	0x03000030
    8180:	0000b84b 	.word	0x0000b84b
    8184:	2fc80400 	.word	0x2fc80400
    8188:	4f030000 	.word	0x4f030000
    818c:	0000005d 	.word	0x0000005d
    8190:	7c04040d 	.word	0x7c04040d
    8194:	05000031 	.word	0x05000031
    8198:	00010015 	.word	0x00010015
    819c:	07040300 	.word	0x07040300
    81a0:	00002e45 	.word	0x00002e45
    81a4:	002fd90e 	.word	0x002fd90e
    81a8:	2d051800 	.word	0x2d051800
    81ac:	00000166 	.word	0x00000166
    81b0:	0030e70c 	.word	0x0030e70c
    81b4:	662e0500 	.word	0x662e0500
    81b8:	02000001 	.word	0x02000001
    81bc:	5f0f0023 	.word	0x5f0f0023
    81c0:	2f05006b 	.word	0x2f05006b
    81c4:	00000025 	.word	0x00000025
    81c8:	0c042302 	.word	0x0c042302
    81cc:	0000311e 	.word	0x0000311e
    81d0:	00252f05 	.word	0x00252f05
    81d4:	23020000 	.word	0x23020000
    81d8:	2fc20c08 	.word	0x2fc20c08
    81dc:	2f050000 	.word	0x2f050000
    81e0:	00000025 	.word	0x00000025
    81e4:	0c0c2302 	.word	0x0c0c2302
    81e8:	000031c8 	.word	0x000031c8
    81ec:	00252f05 	.word	0x00252f05
    81f0:	23020000 	.word	0x23020000
    81f4:	785f0f10 	.word	0x785f0f10
    81f8:	6c300500 	.word	0x6c300500
    81fc:	02000001 	.word	0x02000001
    8200:	10001423 	.word	0x10001423
    8204:	00010704 	.word	0x00010704
    8208:	00f50800 	.word	0x00f50800
    820c:	017c0000 	.word	0x017c0000
    8210:	b5090000 	.word	0xb5090000
    8214:	00000000 	.word	0x00000000
    8218:	2ff10e00 	.word	0x2ff10e00
    821c:	05240000 	.word	0x05240000
    8220:	00020735 	.word	0x00020735
    8224:	2f250c00 	.word	0x2f250c00
    8228:	36050000 	.word	0x36050000
    822c:	00000025 	.word	0x00000025
    8230:	0c002302 	.word	0x0c002302
    8234:	00003158 	.word	0x00003158
    8238:	00253705 	.word	0x00253705
    823c:	23020000 	.word	0x23020000
    8240:	2f3a0c04 	.word	0x2f3a0c04
    8244:	38050000 	.word	0x38050000
    8248:	00000025 	.word	0x00000025
    824c:	0c082302 	.word	0x0c082302
    8250:	0000323a 	.word	0x0000323a
    8254:	00253905 	.word	0x00253905
    8258:	23020000 	.word	0x23020000
    825c:	306d0c0c 	.word	0x306d0c0c
    8260:	3a050000 	.word	0x3a050000
    8264:	00000025 	.word	0x00000025
    8268:	0c102302 	.word	0x0c102302
    826c:	0000305c 	.word	0x0000305c
    8270:	00253b05 	.word	0x00253b05
    8274:	23020000 	.word	0x23020000
    8278:	31cd0c14 	.word	0x31cd0c14
    827c:	3c050000 	.word	0x3c050000
    8280:	00000025 	.word	0x00000025
    8284:	0c182302 	.word	0x0c182302
    8288:	000030b1 	.word	0x000030b1
    828c:	00253d05 	.word	0x00253d05
    8290:	23020000 	.word	0x23020000
    8294:	32080c1c 	.word	0x32080c1c
    8298:	3e050000 	.word	0x3e050000
    829c:	00000025 	.word	0x00000025
    82a0:	00202302 	.word	0x00202302
    82a4:	002f4911 	.word	0x002f4911
    82a8:	05010800 	.word	0x05010800
    82ac:	00025047 	.word	0x00025047
    82b0:	2fb50c00 	.word	0x2fb50c00
    82b4:	48050000 	.word	0x48050000
    82b8:	00000250 	.word	0x00000250
    82bc:	0c002302 	.word	0x0c002302
    82c0:	00002e87 	.word	0x00002e87
    82c4:	02504905 	.word	0x02504905
    82c8:	23030000 	.word	0x23030000
    82cc:	6e0c0180 	.word	0x6e0c0180
    82d0:	05000031 	.word	0x05000031
    82d4:	0000f54b 	.word	0x0000f54b
    82d8:	80230300 	.word	0x80230300
    82dc:	2f6e0c02 	.word	0x2f6e0c02
    82e0:	4e050000 	.word	0x4e050000
    82e4:	000000f5 	.word	0x000000f5
    82e8:	02842303 	.word	0x02842303
    82ec:	00f30800 	.word	0x00f30800
    82f0:	02600000 	.word	0x02600000
    82f4:	b5090000 	.word	0xb5090000
    82f8:	1f000000 	.word	0x1f000000
    82fc:	2e7f1100 	.word	0x2e7f1100
    8300:	01900000 	.word	0x01900000
    8304:	02a75905 	.word	0x02a75905
    8308:	e70c0000 	.word	0xe70c0000
    830c:	05000030 	.word	0x05000030
    8310:	0002a75a 	.word	0x0002a75a
    8314:	00230200 	.word	0x00230200
    8318:	0030ff0c 	.word	0x0030ff0c
    831c:	255b0500 	.word	0x255b0500
    8320:	02000000 	.word	0x02000000
    8324:	bd0c0423 	.word	0xbd0c0423
    8328:	0500002f 	.word	0x0500002f
    832c:	0002ad5d 	.word	0x0002ad5d
    8330:	08230200 	.word	0x08230200
    8334:	002f490c 	.word	0x002f490c
    8338:	075e0500 	.word	0x075e0500
    833c:	03000002 	.word	0x03000002
    8340:	00018823 	.word	0x00018823
    8344:	02600410 	.word	0x02600410
    8348:	bf080000 	.word	0xbf080000
    834c:	bd000002 	.word	0xbd000002
    8350:	09000002 	.word	0x09000002
    8354:	000000b5 	.word	0x000000b5
    8358:	0112001f 	.word	0x0112001f
    835c:	02bd0410 	.word	0x02bd0410
    8360:	bb0e0000 	.word	0xbb0e0000
    8364:	08000030 	.word	0x08000030
    8368:	02ee6905 	.word	0x02ee6905
    836c:	340c0000 	.word	0x340c0000
    8370:	0500002f 	.word	0x0500002f
    8374:	0002ee6a 	.word	0x0002ee6a
    8378:	00230200 	.word	0x00230200
    837c:	002ec60c 	.word	0x002ec60c
    8380:	256b0500 	.word	0x256b0500
    8384:	02000000 	.word	0x02000000
    8388:	10000423 	.word	0x10000423
    838c:	00003a04 	.word	0x00003a04
    8390:	30da0e00 	.word	0x30da0e00
    8394:	055c0000 	.word	0x055c0000
    8398:	000432a9 	.word	0x000432a9
    839c:	705f0f00 	.word	0x705f0f00
    83a0:	eeaa0500 	.word	0xeeaa0500
    83a4:	02000002 	.word	0x02000002
    83a8:	5f0f0023 	.word	0x5f0f0023
    83ac:	ab050072 	.word	0xab050072
    83b0:	00000025 	.word	0x00000025
    83b4:	0f042302 	.word	0x0f042302
    83b8:	0500775f 	.word	0x0500775f
    83bc:	000025ac 	.word	0x000025ac
    83c0:	08230200 	.word	0x08230200
    83c4:	002f670c 	.word	0x002f670c
    83c8:	41ad0500 	.word	0x41ad0500
    83cc:	02000000 	.word	0x02000000
    83d0:	0d0c0c23 	.word	0x0d0c0c23
    83d4:	05000030 	.word	0x05000030
    83d8:	000041ae 	.word	0x000041ae
    83dc:	0e230200 	.word	0x0e230200
    83e0:	66625f0f 	.word	0x66625f0f
    83e4:	c5af0500 	.word	0xc5af0500
    83e8:	02000002 	.word	0x02000002
    83ec:	ff0c1023 	.word	0xff0c1023
    83f0:	0500002e 	.word	0x0500002e
    83f4:	000025b0 	.word	0x000025b0
    83f8:	18230200 	.word	0x18230200
    83fc:	002f570c 	.word	0x002f570c
    8400:	f3b70500 	.word	0xf3b70500
    8404:	02000000 	.word	0x02000000
    8408:	e10c1c23 	.word	0xe10c1c23
    840c:	0500002f 	.word	0x0500002f
    8410:	0005c1b9 	.word	0x0005c1b9
    8414:	20230200 	.word	0x20230200
    8418:	0030550c 	.word	0x0030550c
    841c:	f1bb0500 	.word	0xf1bb0500
    8420:	02000005 	.word	0x02000005
    8424:	430c2423 	.word	0x430c2423
    8428:	05000031 	.word	0x05000031
    842c:	000616bd 	.word	0x000616bd
    8430:	28230200 	.word	0x28230200
    8434:	000e300c 	.word	0x000e300c
    8438:	31be0500 	.word	0x31be0500
    843c:	02000006 	.word	0x02000006
    8440:	5f0f2c23 	.word	0x5f0f2c23
    8444:	05006275 	.word	0x05006275
    8448:	0002c5c1 	.word	0x0002c5c1
    844c:	30230200 	.word	0x30230200
    8450:	70755f0f 	.word	0x70755f0f
    8454:	eec20500 	.word	0xeec20500
    8458:	02000002 	.word	0x02000002
    845c:	5f0f3823 	.word	0x5f0f3823
    8460:	05007275 	.word	0x05007275
    8464:	000025c3 	.word	0x000025c3
    8468:	3c230200 	.word	0x3c230200
    846c:	002f2e0c 	.word	0x002f2e0c
    8470:	37c60500 	.word	0x37c60500
    8474:	02000006 	.word	0x02000006
    8478:	fa0c4023 	.word	0xfa0c4023
    847c:	05000031 	.word	0x05000031
    8480:	000647c7 	.word	0x000647c7
    8484:	43230200 	.word	0x43230200
    8488:	626c5f0f 	.word	0x626c5f0f
    848c:	c5ca0500 	.word	0xc5ca0500
    8490:	02000002 	.word	0x02000002
    8494:	7d0c4423 	.word	0x7d0c4423
    8498:	0500002f 	.word	0x0500002f
    849c:	000025cd 	.word	0x000025cd
    84a0:	4c230200 	.word	0x4c230200
    84a4:	002f8e0c 	.word	0x002f8e0c
    84a8:	25ce0500 	.word	0x25ce0500
    84ac:	02000000 	.word	0x02000000
    84b0:	4a0c5023 	.word	0x4a0c5023
    84b4:	05000032 	.word	0x05000032
    84b8:	000451d1 	.word	0x000451d1
    84bc:	54230200 	.word	0x54230200
    84c0:	0030490c 	.word	0x0030490c
    84c4:	e8d50500 	.word	0xe8d50500
    84c8:	02000000 	.word	0x02000000
    84cc:	13005823 	.word	0x13005823
    84d0:	00002501 	.word	0x00002501
    84d4:	00045100 	.word	0x00045100
    84d8:	04511400 	.word	0x04511400
    84dc:	f3140000 	.word	0xf3140000
    84e0:	14000000 	.word	0x14000000
    84e4:	000005b4 	.word	0x000005b4
    84e8:	00002514 	.word	0x00002514
    84ec:	04100000 	.word	0x04100000
    84f0:	00000457 	.word	0x00000457
    84f4:	00312611 	.word	0x00312611
    84f8:	05040000 	.word	0x05040000
    84fc:	0005b425 	.word	0x0005b425
    8500:	31511500 	.word	0x31511500
    8504:	41050000 	.word	0x41050000
    8508:	00002502 	.word	0x00002502
    850c:	00230200 	.word	0x00230200
    8510:	002f7615 	.word	0x002f7615
    8514:	02460500 	.word	0x02460500
    8518:	000006a4 	.word	0x000006a4
    851c:	15042302 	.word	0x15042302
    8520:	00002ffd 	.word	0x00002ffd
    8524:	a4024605 	.word	0xa4024605
    8528:	02000006 	.word	0x02000006
    852c:	d1150823 	.word	0xd1150823
    8530:	0500002f 	.word	0x0500002f
    8534:	06a40246 	.word	0x06a40246
    8538:	23020000 	.word	0x23020000
    853c:	30fa150c 	.word	0x30fa150c
    8540:	48050000 	.word	0x48050000
    8544:	00002502 	.word	0x00002502
    8548:	10230200 	.word	0x10230200
    854c:	002ed415 	.word	0x002ed415
    8550:	02490500 	.word	0x02490500
    8554:	000008af 	.word	0x000008af
    8558:	15142302 	.word	0x15142302
    855c:	000031a4 	.word	0x000031a4
    8560:	25024b05 	.word	0x25024b05
    8564:	02000000 	.word	0x02000000
    8568:	04153023 	.word	0x04153023
    856c:	05000031 	.word	0x05000031
    8570:	05e6024c 	.word	0x05e6024c
    8574:	23020000 	.word	0x23020000
    8578:	30761534 	.word	0x30761534
    857c:	4e050000 	.word	0x4e050000
    8580:	00002502 	.word	0x00002502
    8584:	38230200 	.word	0x38230200
    8588:	00311415 	.word	0x00311415
    858c:	02500500 	.word	0x02500500
    8590:	000008cb 	.word	0x000008cb
    8594:	153c2302 	.word	0x153c2302
    8598:	00000f9b 	.word	0x00000f9b
    859c:	66025305 	.word	0x66025305
    85a0:	02000001 	.word	0x02000001
    85a4:	e7154023 	.word	0xe7154023
    85a8:	0500002f 	.word	0x0500002f
    85ac:	00250254 	.word	0x00250254
    85b0:	23020000 	.word	0x23020000
    85b4:	32351544 	.word	0x32351544
    85b8:	55050000 	.word	0x55050000
    85bc:	00016602 	.word	0x00016602
    85c0:	48230200 	.word	0x48230200
    85c4:	00309015 	.word	0x00309015
    85c8:	02560500 	.word	0x02560500
    85cc:	000008d1 	.word	0x000008d1
    85d0:	154c2302 	.word	0x154c2302
    85d4:	00003005 	.word	0x00003005
    85d8:	25025905 	.word	0x25025905
    85dc:	02000000 	.word	0x02000000
    85e0:	86155023 	.word	0x86155023
    85e4:	0500002f 	.word	0x0500002f
    85e8:	05b4025a 	.word	0x05b4025a
    85ec:	23020000 	.word	0x23020000
    85f0:	30ac1554 	.word	0x30ac1554
    85f4:	7c050000 	.word	0x7c050000
    85f8:	00088d02 	.word	0x00088d02
    85fc:	58230200 	.word	0x58230200
    8600:	002e7f15 	.word	0x002e7f15
    8604:	027f0500 	.word	0x027f0500
    8608:	000002a7 	.word	0x000002a7
    860c:	02c82303 	.word	0x02c82303
    8610:	00301a15 	.word	0x00301a15
    8614:	02800500 	.word	0x02800500
    8618:	00000260 	.word	0x00000260
    861c:	02cc2303 	.word	0x02cc2303
    8620:	0031f015 	.word	0x0031f015
    8624:	02830500 	.word	0x02830500
    8628:	000008e3 	.word	0x000008e3
    862c:	05dc2303 	.word	0x05dc2303
    8630:	002f5f15 	.word	0x002f5f15
    8634:	02880500 	.word	0x02880500
    8638:	00000663 	.word	0x00000663
    863c:	05e02303 	.word	0x05e02303
    8640:	002f4415 	.word	0x002f4415
    8644:	02890500 	.word	0x02890500
    8648:	000008ef 	.word	0x000008ef
    864c:	05ec2303 	.word	0x05ec2303
    8650:	ba041000 	.word	0xba041000
    8654:	03000005 	.word	0x03000005
    8658:	06a40801 	.word	0x06a40801
    865c:	04100000 	.word	0x04100000
    8660:	00000432 	.word	0x00000432
    8664:	00250113 	.word	0x00250113
    8668:	05e60000 	.word	0x05e60000
    866c:	51140000 	.word	0x51140000
    8670:	14000004 	.word	0x14000004
    8674:	000000f3 	.word	0x000000f3
    8678:	0005e614 	.word	0x0005e614
    867c:	00251400 	.word	0x00251400
    8680:	10000000 	.word	0x10000000
    8684:	0005ec04 	.word	0x0005ec04
    8688:	05ba1600 	.word	0x05ba1600
    868c:	04100000 	.word	0x04100000
    8690:	000005c7 	.word	0x000005c7
    8694:	006f0113 	.word	0x006f0113
    8698:	06160000 	.word	0x06160000
    869c:	51140000 	.word	0x51140000
    86a0:	14000004 	.word	0x14000004
    86a4:	000000f3 	.word	0x000000f3
    86a8:	00006f14 	.word	0x00006f14
    86ac:	00251400 	.word	0x00251400
    86b0:	10000000 	.word	0x10000000
    86b4:	0005f704 	.word	0x0005f704
    86b8:	25011300 	.word	0x25011300
    86bc:	31000000 	.word	0x31000000
    86c0:	14000006 	.word	0x14000006
    86c4:	00000451 	.word	0x00000451
    86c8:	0000f314 	.word	0x0000f314
    86cc:	04100000 	.word	0x04100000
    86d0:	0000061c 	.word	0x0000061c
    86d4:	00003a08 	.word	0x00003a08
    86d8:	00064700 	.word	0x00064700
    86dc:	00b50900 	.word	0x00b50900
    86e0:	00020000 	.word	0x00020000
    86e4:	00003a08 	.word	0x00003a08
    86e8:	00065700 	.word	0x00065700
    86ec:	00b50900 	.word	0x00b50900
    86f0:	00000000 	.word	0x00000000
    86f4:	0030c805 	.word	0x0030c805
    86f8:	010e0500 	.word	0x010e0500
    86fc:	000002f4 	.word	0x000002f4
    8700:	0031d717 	.word	0x0031d717
    8704:	13050c00 	.word	0x13050c00
    8708:	00069e01 	.word	0x00069e01
    870c:	30e71500 	.word	0x30e71500
    8710:	14050000 	.word	0x14050000
    8714:	00069e01 	.word	0x00069e01
    8718:	00230200 	.word	0x00230200
    871c:	00301315 	.word	0x00301315
    8720:	01150500 	.word	0x01150500
    8724:	00000025 	.word	0x00000025
    8728:	15042302 	.word	0x15042302
    872c:	000030c2 	.word	0x000030c2
    8730:	a4011605 	.word	0xa4011605
    8734:	02000006 	.word	0x02000006
    8738:	10000823 	.word	0x10000823
    873c:	00066304 	.word	0x00066304
    8740:	57041000 	.word	0x57041000
    8744:	17000006 	.word	0x17000006
    8748:	00002ecc 	.word	0x00002ecc
    874c:	012e050e 	.word	0x012e050e
    8750:	000006e5 	.word	0x000006e5
    8754:	00312d15 	.word	0x00312d15
    8758:	012f0500 	.word	0x012f0500
    875c:	000006e5 	.word	0x000006e5
    8760:	15002302 	.word	0x15002302
    8764:	0000304f 	.word	0x0000304f
    8768:	e5013005 	.word	0xe5013005
    876c:	02000006 	.word	0x02000006
    8770:	77150623 	.word	0x77150623
    8774:	05000031 	.word	0x05000031
    8778:	00480131 	.word	0x00480131
    877c:	23020000 	.word	0x23020000
    8780:	4808000c 	.word	0x4808000c
    8784:	f5000000 	.word	0xf5000000
    8788:	09000006 	.word	0x09000006
    878c:	000000b5 	.word	0x000000b5
    8790:	d0180002 	.word	0xd0180002
    8794:	15025f05 	.word	0x15025f05
    8798:	15000008 	.word	0x15000008
    879c:	000031bb 	.word	0x000031bb
    87a0:	2c026005 	.word	0x2c026005
    87a4:	02000000 	.word	0x02000000
    87a8:	61150023 	.word	0x61150023
    87ac:	05000031 	.word	0x05000031
    87b0:	05b40261 	.word	0x05b40261
    87b4:	23020000 	.word	0x23020000
    87b8:	302f1504 	.word	0x302f1504
    87bc:	62050000 	.word	0x62050000
    87c0:	00081502 	.word	0x00081502
    87c4:	08230200 	.word	0x08230200
    87c8:	00321315 	.word	0x00321315
    87cc:	02630500 	.word	0x02630500
    87d0:	0000017c 	.word	0x0000017c
    87d4:	15242302 	.word	0x15242302
    87d8:	00003081 	.word	0x00003081
    87dc:	25026405 	.word	0x25026405
    87e0:	02000000 	.word	0x02000000
    87e4:	e2154823 	.word	0xe2154823
    87e8:	05000030 	.word	0x05000030
    87ec:	00560265 	.word	0x00560265
    87f0:	23020000 	.word	0x23020000
    87f4:	32221550 	.word	0x32221550
    87f8:	66050000 	.word	0x66050000
    87fc:	0006aa02 	.word	0x0006aa02
    8800:	58230200 	.word	0x58230200
    8804:	0030ed15 	.word	0x0030ed15
    8808:	02670500 	.word	0x02670500
    880c:	000000dd 	.word	0x000000dd
    8810:	15682302 	.word	0x15682302
    8814:	00003227 	.word	0x00003227
    8818:	dd026805 	.word	0xdd026805
    881c:	02000000 	.word	0x02000000
    8820:	17157023 	.word	0x17157023
    8824:	0500002f 	.word	0x0500002f
    8828:	00dd0269 	.word	0x00dd0269
    882c:	23020000 	.word	0x23020000
    8830:	31e61578 	.word	0x31e61578
    8834:	6a050000 	.word	0x6a050000
    8838:	00082502 	.word	0x00082502
    883c:	80230300 	.word	0x80230300
    8840:	30231501 	.word	0x30231501
    8844:	6b050000 	.word	0x6b050000
    8848:	00083502 	.word	0x00083502
    884c:	88230300 	.word	0x88230300
    8850:	31841501 	.word	0x31841501
    8854:	6c050000 	.word	0x6c050000
    8858:	00002502 	.word	0x00002502
    885c:	a0230300 	.word	0xa0230300
    8860:	2fa71501 	.word	0x2fa71501
    8864:	6d050000 	.word	0x6d050000
    8868:	0000dd02 	.word	0x0000dd02
    886c:	a4230300 	.word	0xa4230300
    8870:	2f081501 	.word	0x2f081501
    8874:	6e050000 	.word	0x6e050000
    8878:	0000dd02 	.word	0x0000dd02
    887c:	ac230300 	.word	0xac230300
    8880:	2f961501 	.word	0x2f961501
    8884:	6f050000 	.word	0x6f050000
    8888:	0000dd02 	.word	0x0000dd02
    888c:	b4230300 	.word	0xb4230300
    8890:	2edf1501 	.word	0x2edf1501
    8894:	70050000 	.word	0x70050000
    8898:	0000dd02 	.word	0x0000dd02
    889c:	bc230300 	.word	0xbc230300
    88a0:	2eee1501 	.word	0x2eee1501
    88a4:	71050000 	.word	0x71050000
    88a8:	0000dd02 	.word	0x0000dd02
    88ac:	c4230300 	.word	0xc4230300
    88b0:	ba080001 	.word	0xba080001
    88b4:	25000005 	.word	0x25000005
    88b8:	09000008 	.word	0x09000008
    88bc:	000000b5 	.word	0x000000b5
    88c0:	ba080019 	.word	0xba080019
    88c4:	35000005 	.word	0x35000005
    88c8:	09000008 	.word	0x09000008
    88cc:	000000b5 	.word	0x000000b5
    88d0:	ba080007 	.word	0xba080007
    88d4:	45000005 	.word	0x45000005
    88d8:	09000008 	.word	0x09000008
    88dc:	000000b5 	.word	0x000000b5
    88e0:	f0180017 	.word	0xf0180017
    88e4:	6d027705 	.word	0x6d027705
    88e8:	15000008 	.word	0x15000008
    88ec:	00003066 	.word	0x00003066
    88f0:	6d027905 	.word	0x6d027905
    88f4:	02000008 	.word	0x02000008
    88f8:	dd150023 	.word	0xdd150023
    88fc:	05000031 	.word	0x05000031
    8900:	087d027a 	.word	0x087d027a
    8904:	23020000 	.word	0x23020000
    8908:	ee080078 	.word	0xee080078
    890c:	7d000002 	.word	0x7d000002
    8910:	09000008 	.word	0x09000008
    8914:	000000b5 	.word	0x000000b5
    8918:	2c08001d 	.word	0x2c08001d
    891c:	8d000000 	.word	0x8d000000
    8920:	09000008 	.word	0x09000008
    8924:	000000b5 	.word	0x000000b5
    8928:	f019001d 	.word	0xf019001d
    892c:	af025d05 	.word	0xaf025d05
    8930:	1a000008 	.word	0x1a000008
    8934:	00003126 	.word	0x00003126
    8938:	f5027205 	.word	0xf5027205
    893c:	1a000006 	.word	0x1a000006
    8940:	00003200 	.word	0x00003200
    8944:	45027b05 	.word	0x45027b05
    8948:	00000008 	.word	0x00000008
    894c:	0005ba08 	.word	0x0005ba08
    8950:	0008bf00 	.word	0x0008bf00
    8954:	00b50900 	.word	0x00b50900
    8958:	00180000 	.word	0x00180000
    895c:	08cb011b 	.word	0x08cb011b
    8960:	51140000 	.word	0x51140000
    8964:	00000004 	.word	0x00000004
    8968:	08bf0410 	.word	0x08bf0410
    896c:	04100000 	.word	0x04100000
    8970:	00000166 	.word	0x00000166
    8974:	08e3011b 	.word	0x08e3011b
    8978:	25140000 	.word	0x25140000
    897c:	00000000 	.word	0x00000000
    8980:	08e90410 	.word	0x08e90410
    8984:	04100000 	.word	0x04100000
    8988:	000008d7 	.word	0x000008d7
    898c:	00065708 	.word	0x00065708
    8990:	0008ff00 	.word	0x0008ff00
    8994:	00b50900 	.word	0x00b50900
    8998:	00020000 	.word	0x00020000
    899c:	002e6c1c 	.word	0x002e6c1c
    89a0:	06060100 	.word	0x06060100
    89a4:	0000091e 	.word	0x0000091e
    89a8:	002e7b1d 	.word	0x002e7b1d
    89ac:	601d0000 	.word	0x601d0000
    89b0:	0100002e 	.word	0x0100002e
    89b4:	002e571d 	.word	0x002e571d
    89b8:	1e000200 	.word	0x1e000200
    89bc:	00348001 	.word	0x00348001
    89c0:	01170100 	.word	0x01170100
    89c4:	00000025 	.word	0x00000025
	...
    89d0:	00002db4 	.word	0x00002db4
    89d4:	0000098b 	.word	0x0000098b
    89d8:	00347b1f 	.word	0x00347b1f
    89dc:	25110100 	.word	0x25110100
    89e0:	d3000000 	.word	0xd3000000
    89e4:	2000002d 	.word	0x2000002d
    89e8:	01006e66 	.word	0x01006e66
    89ec:	0002bf11 	.word	0x0002bf11
    89f0:	002df100 	.word	0x002df100
    89f4:	72612000 	.word	0x72612000
    89f8:	11010067 	.word	0x11010067
    89fc:	000000f3 	.word	0x000000f3
    8a00:	00002e0f 	.word	0x00002e0f
    8a04:	01006420 	.word	0x01006420
    8a08:	0000f311 	.word	0x0000f311
    8a0c:	002e2d00 	.word	0x002e2d00
    8a10:	2f522100 	.word	0x2f522100
    8a14:	18010000 	.word	0x18010000
    8a18:	0000098b 	.word	0x0000098b
    8a1c:	01007022 	.word	0x01007022
    8a20:	0002a719 	.word	0x0002a719
    8a24:	005c0100 	.word	0x005c0100
    8a28:	02070410 	.word	0x02070410
    8a2c:	91230000 	.word	0x91230000
    8a30:	05000031 	.word	0x05000031
    8a34:	099f0328 	.word	0x099f0328
    8a38:	01010000 	.word	0x01010000
    8a3c:	00045116 	.word	0x00045116
    8a40:	09ae0000 	.word	0x09ae0000
    8a44:	00020000 	.word	0x00020000
    8a48:	00001cb5 	.word	0x00001cb5
    8a4c:	05510104 	.word	0x05510104
    8a50:	a5010000 	.word	0xa5010000
    8a54:	d4000034 	.word	0xd4000034
    8a58:	0000002d 	.word	0x0000002d
    8a5c:	00000000 	.word	0x00000000
    8a60:	13000000 	.word	0x13000000
    8a64:	0200001e 	.word	0x0200001e
    8a68:	2e4a0704 	.word	0x2e4a0704
    8a6c:	01020000 	.word	0x01020000
    8a70:	00069d06 	.word	0x00069d06
    8a74:	08010200 	.word	0x08010200
    8a78:	0000069b 	.word	0x0000069b
    8a7c:	d8050202 	.word	0xd8050202
    8a80:	02000005 	.word	0x02000005
    8a84:	07db0702 	.word	0x07db0702
    8a88:	04030000 	.word	0x04030000
    8a8c:	746e6905 	.word	0x746e6905
    8a90:	05080200 	.word	0x05080200
    8a94:	00002dc6 	.word	0x00002dc6
    8a98:	40070802 	.word	0x40070802
    8a9c:	0400002e 	.word	0x0400002e
    8aa0:	0000309a 	.word	0x0000309a
    8aa4:	00480702 	.word	0x00480702
    8aa8:	04020000 	.word	0x04020000
    8aac:	002dcb05 	.word	0x002dcb05
    8ab0:	31490400 	.word	0x31490400
    8ab4:	2c030000 	.word	0x2c030000
    8ab8:	00000068 	.word	0x00000068
    8abc:	00304205 	.word	0x00304205
    8ac0:	01630400 	.word	0x01630400
    8ac4:	00000025 	.word	0x00000025
    8ac8:	47030406 	.word	0x47030406
    8acc:	000000a5 	.word	0x000000a5
    8ad0:	00303c07 	.word	0x00303c07
    8ad4:	7a480300 	.word	0x7a480300
    8ad8:	07000000 	.word	0x07000000
    8adc:	00002ff6 	.word	0x00002ff6
    8ae0:	00a54903 	.word	0x00a54903
    8ae4:	08000000 	.word	0x08000000
    8ae8:	00000033 	.word	0x00000033
    8aec:	000000b5 	.word	0x000000b5
    8af0:	0000b509 	.word	0x0000b509
    8af4:	0a000300 	.word	0x0a000300
    8af8:	080b0704 	.word	0x080b0704
    8afc:	00dd4403 	.word	0x00dd4403
    8b00:	330c0000 	.word	0x330c0000
    8b04:	03000031 	.word	0x03000031
    8b08:	00004845 	.word	0x00004845
    8b0c:	00230200 	.word	0x00230200
    8b10:	00313b0c 	.word	0x00313b0c
    8b14:	864a0300 	.word	0x864a0300
    8b18:	02000000 	.word	0x02000000
    8b1c:	04000423 	.word	0x04000423
    8b20:	000030cf 	.word	0x000030cf
    8b24:	00b84b03 	.word	0x00b84b03
    8b28:	c8040000 	.word	0xc8040000
    8b2c:	0300002f 	.word	0x0300002f
    8b30:	00005d4f 	.word	0x00005d4f
    8b34:	04040d00 	.word	0x04040d00
    8b38:	0000317c 	.word	0x0000317c
    8b3c:	01001505 	.word	0x01001505
    8b40:	04020000 	.word	0x04020000
    8b44:	002e4507 	.word	0x002e4507
    8b48:	2fd90e00 	.word	0x2fd90e00
    8b4c:	05180000 	.word	0x05180000
    8b50:	0001662d 	.word	0x0001662d
    8b54:	30e70c00 	.word	0x30e70c00
    8b58:	2e050000 	.word	0x2e050000
    8b5c:	00000166 	.word	0x00000166
    8b60:	0f002302 	.word	0x0f002302
    8b64:	05006b5f 	.word	0x05006b5f
    8b68:	0000482f 	.word	0x0000482f
    8b6c:	04230200 	.word	0x04230200
    8b70:	00311e0c 	.word	0x00311e0c
    8b74:	482f0500 	.word	0x482f0500
    8b78:	02000000 	.word	0x02000000
    8b7c:	c20c0823 	.word	0xc20c0823
    8b80:	0500002f 	.word	0x0500002f
    8b84:	0000482f 	.word	0x0000482f
    8b88:	0c230200 	.word	0x0c230200
    8b8c:	0031c80c 	.word	0x0031c80c
    8b90:	482f0500 	.word	0x482f0500
    8b94:	02000000 	.word	0x02000000
    8b98:	5f0f1023 	.word	0x5f0f1023
    8b9c:	30050078 	.word	0x30050078
    8ba0:	0000016c 	.word	0x0000016c
    8ba4:	00142302 	.word	0x00142302
    8ba8:	01070410 	.word	0x01070410
    8bac:	f5080000 	.word	0xf5080000
    8bb0:	7c000000 	.word	0x7c000000
    8bb4:	09000001 	.word	0x09000001
    8bb8:	000000b5 	.word	0x000000b5
    8bbc:	f10e0000 	.word	0xf10e0000
    8bc0:	2400002f 	.word	0x2400002f
    8bc4:	02073505 	.word	0x02073505
    8bc8:	250c0000 	.word	0x250c0000
    8bcc:	0500002f 	.word	0x0500002f
    8bd0:	00004836 	.word	0x00004836
    8bd4:	00230200 	.word	0x00230200
    8bd8:	0031580c 	.word	0x0031580c
    8bdc:	48370500 	.word	0x48370500
    8be0:	02000000 	.word	0x02000000
    8be4:	3a0c0423 	.word	0x3a0c0423
    8be8:	0500002f 	.word	0x0500002f
    8bec:	00004838 	.word	0x00004838
    8bf0:	08230200 	.word	0x08230200
    8bf4:	00323a0c 	.word	0x00323a0c
    8bf8:	48390500 	.word	0x48390500
    8bfc:	02000000 	.word	0x02000000
    8c00:	6d0c0c23 	.word	0x6d0c0c23
    8c04:	05000030 	.word	0x05000030
    8c08:	0000483a 	.word	0x0000483a
    8c0c:	10230200 	.word	0x10230200
    8c10:	00305c0c 	.word	0x00305c0c
    8c14:	483b0500 	.word	0x483b0500
    8c18:	02000000 	.word	0x02000000
    8c1c:	cd0c1423 	.word	0xcd0c1423
    8c20:	05000031 	.word	0x05000031
    8c24:	0000483c 	.word	0x0000483c
    8c28:	18230200 	.word	0x18230200
    8c2c:	0030b10c 	.word	0x0030b10c
    8c30:	483d0500 	.word	0x483d0500
    8c34:	02000000 	.word	0x02000000
    8c38:	080c1c23 	.word	0x080c1c23
    8c3c:	05000032 	.word	0x05000032
    8c40:	0000483e 	.word	0x0000483e
    8c44:	20230200 	.word	0x20230200
    8c48:	2f491100 	.word	0x2f491100
    8c4c:	01080000 	.word	0x01080000
    8c50:	02504705 	.word	0x02504705
    8c54:	b50c0000 	.word	0xb50c0000
    8c58:	0500002f 	.word	0x0500002f
    8c5c:	00025048 	.word	0x00025048
    8c60:	00230200 	.word	0x00230200
    8c64:	002e870c 	.word	0x002e870c
    8c68:	50490500 	.word	0x50490500
    8c6c:	03000002 	.word	0x03000002
    8c70:	0c018023 	.word	0x0c018023
    8c74:	0000316e 	.word	0x0000316e
    8c78:	00f54b05 	.word	0x00f54b05
    8c7c:	23030000 	.word	0x23030000
    8c80:	6e0c0280 	.word	0x6e0c0280
    8c84:	0500002f 	.word	0x0500002f
    8c88:	0000f54e 	.word	0x0000f54e
    8c8c:	84230300 	.word	0x84230300
    8c90:	f3080002 	.word	0xf3080002
    8c94:	60000000 	.word	0x60000000
    8c98:	09000002 	.word	0x09000002
    8c9c:	000000b5 	.word	0x000000b5
    8ca0:	7f11001f 	.word	0x7f11001f
    8ca4:	9000002e 	.word	0x9000002e
    8ca8:	a7590501 	.word	0xa7590501
    8cac:	0c000002 	.word	0x0c000002
    8cb0:	000030e7 	.word	0x000030e7
    8cb4:	02a75a05 	.word	0x02a75a05
    8cb8:	23020000 	.word	0x23020000
    8cbc:	30ff0c00 	.word	0x30ff0c00
    8cc0:	5b050000 	.word	0x5b050000
    8cc4:	00000048 	.word	0x00000048
    8cc8:	0c042302 	.word	0x0c042302
    8ccc:	00002fbd 	.word	0x00002fbd
    8cd0:	02ad5d05 	.word	0x02ad5d05
    8cd4:	23020000 	.word	0x23020000
    8cd8:	2f490c08 	.word	0x2f490c08
    8cdc:	5e050000 	.word	0x5e050000
    8ce0:	00000207 	.word	0x00000207
    8ce4:	01882303 	.word	0x01882303
    8ce8:	60041000 	.word	0x60041000
    8cec:	08000002 	.word	0x08000002
    8cf0:	000002bf 	.word	0x000002bf
    8cf4:	000002bd 	.word	0x000002bd
    8cf8:	0000b509 	.word	0x0000b509
    8cfc:	12001f00 	.word	0x12001f00
    8d00:	bd041001 	.word	0xbd041001
    8d04:	0e000002 	.word	0x0e000002
    8d08:	000030bb 	.word	0x000030bb
    8d0c:	ee690508 	.word	0xee690508
    8d10:	0c000002 	.word	0x0c000002
    8d14:	00002f34 	.word	0x00002f34
    8d18:	02ee6a05 	.word	0x02ee6a05
    8d1c:	23020000 	.word	0x23020000
    8d20:	2ec60c00 	.word	0x2ec60c00
    8d24:	6b050000 	.word	0x6b050000
    8d28:	00000048 	.word	0x00000048
    8d2c:	00042302 	.word	0x00042302
    8d30:	00330410 	.word	0x00330410
    8d34:	da0e0000 	.word	0xda0e0000
    8d38:	5c000030 	.word	0x5c000030
    8d3c:	0432a905 	.word	0x0432a905
    8d40:	5f0f0000 	.word	0x5f0f0000
    8d44:	aa050070 	.word	0xaa050070
    8d48:	000002ee 	.word	0x000002ee
    8d4c:	0f002302 	.word	0x0f002302
    8d50:	0500725f 	.word	0x0500725f
    8d54:	000048ab 	.word	0x000048ab
    8d58:	04230200 	.word	0x04230200
    8d5c:	00775f0f 	.word	0x00775f0f
    8d60:	0048ac05 	.word	0x0048ac05
    8d64:	23020000 	.word	0x23020000
    8d68:	2f670c08 	.word	0x2f670c08
    8d6c:	ad050000 	.word	0xad050000
    8d70:	0000003a 	.word	0x0000003a
    8d74:	0c0c2302 	.word	0x0c0c2302
    8d78:	0000300d 	.word	0x0000300d
    8d7c:	003aae05 	.word	0x003aae05
    8d80:	23020000 	.word	0x23020000
    8d84:	625f0f0e 	.word	0x625f0f0e
    8d88:	af050066 	.word	0xaf050066
    8d8c:	000002c5 	.word	0x000002c5
    8d90:	0c102302 	.word	0x0c102302
    8d94:	00002eff 	.word	0x00002eff
    8d98:	0048b005 	.word	0x0048b005
    8d9c:	23020000 	.word	0x23020000
    8da0:	2f570c18 	.word	0x2f570c18
    8da4:	b7050000 	.word	0xb7050000
    8da8:	000000f3 	.word	0x000000f3
    8dac:	0c1c2302 	.word	0x0c1c2302
    8db0:	00002fe1 	.word	0x00002fe1
    8db4:	05c1b905 	.word	0x05c1b905
    8db8:	23020000 	.word	0x23020000
    8dbc:	30550c20 	.word	0x30550c20
    8dc0:	bb050000 	.word	0xbb050000
    8dc4:	000005f1 	.word	0x000005f1
    8dc8:	0c242302 	.word	0x0c242302
    8dcc:	00003143 	.word	0x00003143
    8dd0:	0616bd05 	.word	0x0616bd05
    8dd4:	23020000 	.word	0x23020000
    8dd8:	0e300c28 	.word	0x0e300c28
    8ddc:	be050000 	.word	0xbe050000
    8de0:	00000631 	.word	0x00000631
    8de4:	0f2c2302 	.word	0x0f2c2302
    8de8:	0062755f 	.word	0x0062755f
    8dec:	02c5c105 	.word	0x02c5c105
    8df0:	23020000 	.word	0x23020000
    8df4:	755f0f30 	.word	0x755f0f30
    8df8:	c2050070 	.word	0xc2050070
    8dfc:	000002ee 	.word	0x000002ee
    8e00:	0f382302 	.word	0x0f382302
    8e04:	0072755f 	.word	0x0072755f
    8e08:	0048c305 	.word	0x0048c305
    8e0c:	23020000 	.word	0x23020000
    8e10:	2f2e0c3c 	.word	0x2f2e0c3c
    8e14:	c6050000 	.word	0xc6050000
    8e18:	00000637 	.word	0x00000637
    8e1c:	0c402302 	.word	0x0c402302
    8e20:	000031fa 	.word	0x000031fa
    8e24:	0647c705 	.word	0x0647c705
    8e28:	23020000 	.word	0x23020000
    8e2c:	6c5f0f43 	.word	0x6c5f0f43
    8e30:	ca050062 	.word	0xca050062
    8e34:	000002c5 	.word	0x000002c5
    8e38:	0c442302 	.word	0x0c442302
    8e3c:	00002f7d 	.word	0x00002f7d
    8e40:	0048cd05 	.word	0x0048cd05
    8e44:	23020000 	.word	0x23020000
    8e48:	2f8e0c4c 	.word	0x2f8e0c4c
    8e4c:	ce050000 	.word	0xce050000
    8e50:	00000048 	.word	0x00000048
    8e54:	0c502302 	.word	0x0c502302
    8e58:	0000324a 	.word	0x0000324a
    8e5c:	0451d105 	.word	0x0451d105
    8e60:	23020000 	.word	0x23020000
    8e64:	30490c54 	.word	0x30490c54
    8e68:	d5050000 	.word	0xd5050000
    8e6c:	000000e8 	.word	0x000000e8
    8e70:	00582302 	.word	0x00582302
    8e74:	00480113 	.word	0x00480113
    8e78:	04510000 	.word	0x04510000
    8e7c:	51140000 	.word	0x51140000
    8e80:	14000004 	.word	0x14000004
    8e84:	000000f3 	.word	0x000000f3
    8e88:	0005b414 	.word	0x0005b414
    8e8c:	00481400 	.word	0x00481400
    8e90:	10000000 	.word	0x10000000
    8e94:	00045704 	.word	0x00045704
    8e98:	31261100 	.word	0x31261100
    8e9c:	04000000 	.word	0x04000000
    8ea0:	05b42505 	.word	0x05b42505
    8ea4:	51150000 	.word	0x51150000
    8ea8:	05000031 	.word	0x05000031
    8eac:	00480241 	.word	0x00480241
    8eb0:	23020000 	.word	0x23020000
    8eb4:	2f761500 	.word	0x2f761500
    8eb8:	46050000 	.word	0x46050000
    8ebc:	0006a402 	.word	0x0006a402
    8ec0:	04230200 	.word	0x04230200
    8ec4:	002ffd15 	.word	0x002ffd15
    8ec8:	02460500 	.word	0x02460500
    8ecc:	000006a4 	.word	0x000006a4
    8ed0:	15082302 	.word	0x15082302
    8ed4:	00002fd1 	.word	0x00002fd1
    8ed8:	a4024605 	.word	0xa4024605
    8edc:	02000006 	.word	0x02000006
    8ee0:	fa150c23 	.word	0xfa150c23
    8ee4:	05000030 	.word	0x05000030
    8ee8:	00480248 	.word	0x00480248
    8eec:	23020000 	.word	0x23020000
    8ef0:	2ed41510 	.word	0x2ed41510
    8ef4:	49050000 	.word	0x49050000
    8ef8:	0008af02 	.word	0x0008af02
    8efc:	14230200 	.word	0x14230200
    8f00:	0031a415 	.word	0x0031a415
    8f04:	024b0500 	.word	0x024b0500
    8f08:	00000048 	.word	0x00000048
    8f0c:	15302302 	.word	0x15302302
    8f10:	00003104 	.word	0x00003104
    8f14:	e6024c05 	.word	0xe6024c05
    8f18:	02000005 	.word	0x02000005
    8f1c:	76153423 	.word	0x76153423
    8f20:	05000030 	.word	0x05000030
    8f24:	0048024e 	.word	0x0048024e
    8f28:	23020000 	.word	0x23020000
    8f2c:	31141538 	.word	0x31141538
    8f30:	50050000 	.word	0x50050000
    8f34:	0008cb02 	.word	0x0008cb02
    8f38:	3c230200 	.word	0x3c230200
    8f3c:	000f9b15 	.word	0x000f9b15
    8f40:	02530500 	.word	0x02530500
    8f44:	00000166 	.word	0x00000166
    8f48:	15402302 	.word	0x15402302
    8f4c:	00002fe7 	.word	0x00002fe7
    8f50:	48025405 	.word	0x48025405
    8f54:	02000000 	.word	0x02000000
    8f58:	35154423 	.word	0x35154423
    8f5c:	05000032 	.word	0x05000032
    8f60:	01660255 	.word	0x01660255
    8f64:	23020000 	.word	0x23020000
    8f68:	30901548 	.word	0x30901548
    8f6c:	56050000 	.word	0x56050000
    8f70:	0008d102 	.word	0x0008d102
    8f74:	4c230200 	.word	0x4c230200
    8f78:	00300515 	.word	0x00300515
    8f7c:	02590500 	.word	0x02590500
    8f80:	00000048 	.word	0x00000048
    8f84:	15502302 	.word	0x15502302
    8f88:	00002f86 	.word	0x00002f86
    8f8c:	b4025a05 	.word	0xb4025a05
    8f90:	02000005 	.word	0x02000005
    8f94:	ac155423 	.word	0xac155423
    8f98:	05000030 	.word	0x05000030
    8f9c:	088d027c 	.word	0x088d027c
    8fa0:	23020000 	.word	0x23020000
    8fa4:	2e7f1558 	.word	0x2e7f1558
    8fa8:	7f050000 	.word	0x7f050000
    8fac:	0002a702 	.word	0x0002a702
    8fb0:	c8230300 	.word	0xc8230300
    8fb4:	301a1502 	.word	0x301a1502
    8fb8:	80050000 	.word	0x80050000
    8fbc:	00026002 	.word	0x00026002
    8fc0:	cc230300 	.word	0xcc230300
    8fc4:	31f01502 	.word	0x31f01502
    8fc8:	83050000 	.word	0x83050000
    8fcc:	0008e302 	.word	0x0008e302
    8fd0:	dc230300 	.word	0xdc230300
    8fd4:	2f5f1505 	.word	0x2f5f1505
    8fd8:	88050000 	.word	0x88050000
    8fdc:	00066302 	.word	0x00066302
    8fe0:	e0230300 	.word	0xe0230300
    8fe4:	2f441505 	.word	0x2f441505
    8fe8:	89050000 	.word	0x89050000
    8fec:	0008ef02 	.word	0x0008ef02
    8ff0:	ec230300 	.word	0xec230300
    8ff4:	04100005 	.word	0x04100005
    8ff8:	000005ba 	.word	0x000005ba
    8ffc:	a4080102 	.word	0xa4080102
    9000:	10000006 	.word	0x10000006
    9004:	00043204 	.word	0x00043204
    9008:	48011300 	.word	0x48011300
    900c:	e6000000 	.word	0xe6000000
    9010:	14000005 	.word	0x14000005
    9014:	00000451 	.word	0x00000451
    9018:	0000f314 	.word	0x0000f314
    901c:	05e61400 	.word	0x05e61400
    9020:	48140000 	.word	0x48140000
    9024:	00000000 	.word	0x00000000
    9028:	05ec0410 	.word	0x05ec0410
    902c:	ba160000 	.word	0xba160000
    9030:	10000005 	.word	0x10000005
    9034:	0005c704 	.word	0x0005c704
    9038:	6f011300 	.word	0x6f011300
    903c:	16000000 	.word	0x16000000
    9040:	14000006 	.word	0x14000006
    9044:	00000451 	.word	0x00000451
    9048:	0000f314 	.word	0x0000f314
    904c:	006f1400 	.word	0x006f1400
    9050:	48140000 	.word	0x48140000
    9054:	00000000 	.word	0x00000000
    9058:	05f70410 	.word	0x05f70410
    905c:	01130000 	.word	0x01130000
    9060:	00000048 	.word	0x00000048
    9064:	00000631 	.word	0x00000631
    9068:	00045114 	.word	0x00045114
    906c:	00f31400 	.word	0x00f31400
    9070:	10000000 	.word	0x10000000
    9074:	00061c04 	.word	0x00061c04
    9078:	00330800 	.word	0x00330800
    907c:	06470000 	.word	0x06470000
    9080:	b5090000 	.word	0xb5090000
    9084:	02000000 	.word	0x02000000
    9088:	00330800 	.word	0x00330800
    908c:	06570000 	.word	0x06570000
    9090:	b5090000 	.word	0xb5090000
    9094:	00000000 	.word	0x00000000
    9098:	30c80500 	.word	0x30c80500
    909c:	0e050000 	.word	0x0e050000
    90a0:	0002f401 	.word	0x0002f401
    90a4:	31d71700 	.word	0x31d71700
    90a8:	050c0000 	.word	0x050c0000
    90ac:	069e0113 	.word	0x069e0113
    90b0:	e7150000 	.word	0xe7150000
    90b4:	05000030 	.word	0x05000030
    90b8:	069e0114 	.word	0x069e0114
    90bc:	23020000 	.word	0x23020000
    90c0:	30131500 	.word	0x30131500
    90c4:	15050000 	.word	0x15050000
    90c8:	00004801 	.word	0x00004801
    90cc:	04230200 	.word	0x04230200
    90d0:	0030c215 	.word	0x0030c215
    90d4:	01160500 	.word	0x01160500
    90d8:	000006a4 	.word	0x000006a4
    90dc:	00082302 	.word	0x00082302
    90e0:	06630410 	.word	0x06630410
    90e4:	04100000 	.word	0x04100000
    90e8:	00000657 	.word	0x00000657
    90ec:	002ecc17 	.word	0x002ecc17
    90f0:	2e050e00 	.word	0x2e050e00
    90f4:	0006e501 	.word	0x0006e501
    90f8:	312d1500 	.word	0x312d1500
    90fc:	2f050000 	.word	0x2f050000
    9100:	0006e501 	.word	0x0006e501
    9104:	00230200 	.word	0x00230200
    9108:	00304f15 	.word	0x00304f15
    910c:	01300500 	.word	0x01300500
    9110:	000006e5 	.word	0x000006e5
    9114:	15062302 	.word	0x15062302
    9118:	00003177 	.word	0x00003177
    911c:	41013105 	.word	0x41013105
    9120:	02000000 	.word	0x02000000
    9124:	08000c23 	.word	0x08000c23
    9128:	00000041 	.word	0x00000041
    912c:	000006f5 	.word	0x000006f5
    9130:	0000b509 	.word	0x0000b509
    9134:	18000200 	.word	0x18000200
    9138:	025f05d0 	.word	0x025f05d0
    913c:	00000815 	.word	0x00000815
    9140:	0031bb15 	.word	0x0031bb15
    9144:	02600500 	.word	0x02600500
    9148:	00000025 	.word	0x00000025
    914c:	15002302 	.word	0x15002302
    9150:	00003161 	.word	0x00003161
    9154:	b4026105 	.word	0xb4026105
    9158:	02000005 	.word	0x02000005
    915c:	2f150423 	.word	0x2f150423
    9160:	05000030 	.word	0x05000030
    9164:	08150262 	.word	0x08150262
    9168:	23020000 	.word	0x23020000
    916c:	32131508 	.word	0x32131508
    9170:	63050000 	.word	0x63050000
    9174:	00017c02 	.word	0x00017c02
    9178:	24230200 	.word	0x24230200
    917c:	00308115 	.word	0x00308115
    9180:	02640500 	.word	0x02640500
    9184:	00000048 	.word	0x00000048
    9188:	15482302 	.word	0x15482302
    918c:	000030e2 	.word	0x000030e2
    9190:	56026505 	.word	0x56026505
    9194:	02000000 	.word	0x02000000
    9198:	22155023 	.word	0x22155023
    919c:	05000032 	.word	0x05000032
    91a0:	06aa0266 	.word	0x06aa0266
    91a4:	23020000 	.word	0x23020000
    91a8:	30ed1558 	.word	0x30ed1558
    91ac:	67050000 	.word	0x67050000
    91b0:	0000dd02 	.word	0x0000dd02
    91b4:	68230200 	.word	0x68230200
    91b8:	00322715 	.word	0x00322715
    91bc:	02680500 	.word	0x02680500
    91c0:	000000dd 	.word	0x000000dd
    91c4:	15702302 	.word	0x15702302
    91c8:	00002f17 	.word	0x00002f17
    91cc:	dd026905 	.word	0xdd026905
    91d0:	02000000 	.word	0x02000000
    91d4:	e6157823 	.word	0xe6157823
    91d8:	05000031 	.word	0x05000031
    91dc:	0825026a 	.word	0x0825026a
    91e0:	23030000 	.word	0x23030000
    91e4:	23150180 	.word	0x23150180
    91e8:	05000030 	.word	0x05000030
    91ec:	0835026b 	.word	0x0835026b
    91f0:	23030000 	.word	0x23030000
    91f4:	84150188 	.word	0x84150188
    91f8:	05000031 	.word	0x05000031
    91fc:	0048026c 	.word	0x0048026c
    9200:	23030000 	.word	0x23030000
    9204:	a71501a0 	.word	0xa71501a0
    9208:	0500002f 	.word	0x0500002f
    920c:	00dd026d 	.word	0x00dd026d
    9210:	23030000 	.word	0x23030000
    9214:	081501a4 	.word	0x081501a4
    9218:	0500002f 	.word	0x0500002f
    921c:	00dd026e 	.word	0x00dd026e
    9220:	23030000 	.word	0x23030000
    9224:	961501ac 	.word	0x961501ac
    9228:	0500002f 	.word	0x0500002f
    922c:	00dd026f 	.word	0x00dd026f
    9230:	23030000 	.word	0x23030000
    9234:	df1501b4 	.word	0xdf1501b4
    9238:	0500002e 	.word	0x0500002e
    923c:	00dd0270 	.word	0x00dd0270
    9240:	23030000 	.word	0x23030000
    9244:	ee1501bc 	.word	0xee1501bc
    9248:	0500002e 	.word	0x0500002e
    924c:	00dd0271 	.word	0x00dd0271
    9250:	23030000 	.word	0x23030000
    9254:	080001c4 	.word	0x080001c4
    9258:	000005ba 	.word	0x000005ba
    925c:	00000825 	.word	0x00000825
    9260:	0000b509 	.word	0x0000b509
    9264:	08001900 	.word	0x08001900
    9268:	000005ba 	.word	0x000005ba
    926c:	00000835 	.word	0x00000835
    9270:	0000b509 	.word	0x0000b509
    9274:	08000700 	.word	0x08000700
    9278:	000005ba 	.word	0x000005ba
    927c:	00000845 	.word	0x00000845
    9280:	0000b509 	.word	0x0000b509
    9284:	18001700 	.word	0x18001700
    9288:	027705f0 	.word	0x027705f0
    928c:	0000086d 	.word	0x0000086d
    9290:	00306615 	.word	0x00306615
    9294:	02790500 	.word	0x02790500
    9298:	0000086d 	.word	0x0000086d
    929c:	15002302 	.word	0x15002302
    92a0:	000031dd 	.word	0x000031dd
    92a4:	7d027a05 	.word	0x7d027a05
    92a8:	02000008 	.word	0x02000008
    92ac:	08007823 	.word	0x08007823
    92b0:	000002ee 	.word	0x000002ee
    92b4:	0000087d 	.word	0x0000087d
    92b8:	0000b509 	.word	0x0000b509
    92bc:	08001d00 	.word	0x08001d00
    92c0:	00000025 	.word	0x00000025
    92c4:	0000088d 	.word	0x0000088d
    92c8:	0000b509 	.word	0x0000b509
    92cc:	19001d00 	.word	0x19001d00
    92d0:	025d05f0 	.word	0x025d05f0
    92d4:	000008af 	.word	0x000008af
    92d8:	0031261a 	.word	0x0031261a
    92dc:	02720500 	.word	0x02720500
    92e0:	000006f5 	.word	0x000006f5
    92e4:	0032001a 	.word	0x0032001a
    92e8:	027b0500 	.word	0x027b0500
    92ec:	00000845 	.word	0x00000845
    92f0:	05ba0800 	.word	0x05ba0800
    92f4:	08bf0000 	.word	0x08bf0000
    92f8:	b5090000 	.word	0xb5090000
    92fc:	18000000 	.word	0x18000000
    9300:	cb011b00 	.word	0xcb011b00
    9304:	14000008 	.word	0x14000008
    9308:	00000451 	.word	0x00000451
    930c:	bf041000 	.word	0xbf041000
    9310:	10000008 	.word	0x10000008
    9314:	00016604 	.word	0x00016604
    9318:	e3011b00 	.word	0xe3011b00
    931c:	14000008 	.word	0x14000008
    9320:	00000048 	.word	0x00000048
    9324:	e9041000 	.word	0xe9041000
    9328:	10000008 	.word	0x10000008
    932c:	0008d704 	.word	0x0008d704
    9330:	06570800 	.word	0x06570800
    9334:	08ff0000 	.word	0x08ff0000
    9338:	b5090000 	.word	0xb5090000
    933c:	02000000 	.word	0x02000000
    9340:	94011c00 	.word	0x94011c00
    9344:	01000034 	.word	0x01000034
    9348:	00000112 	.word	0x00000112
    934c:	00000000 	.word	0x00000000
    9350:	2e4b0000 	.word	0x2e4b0000
    9354:	09920000 	.word	0x09920000
    9358:	b61d0000 	.word	0xb61d0000
    935c:	01000031 	.word	0x01000031
    9360:	00004810 	.word	0x00004810
    9364:	002e7600 	.word	0x002e7600
    9368:	00641e00 	.word	0x00641e00
    936c:	00f31001 	.word	0x00f31001
    9370:	2ec50000 	.word	0x2ec50000
    9374:	701f0000 	.word	0x701f0000
    9378:	a7130100 	.word	0xa7130100
    937c:	01000002 	.word	0x01000002
    9380:	34e12056 	.word	0x34e12056
    9384:	14010000 	.word	0x14010000
    9388:	00000992 	.word	0x00000992
    938c:	002f5220 	.word	0x002f5220
    9390:	98150100 	.word	0x98150100
    9394:	1f000009 	.word	0x1f000009
    9398:	1601006e 	.word	0x1601006e
    939c:	00000048 	.word	0x00000048
    93a0:	69215501 	.word	0x69215501
    93a4:	48170100 	.word	0x48170100
    93a8:	22000000 	.word	0x22000000
    93ac:	01006e66 	.word	0x01006e66
    93b0:	0002bf18 	.word	0x0002bf18
    93b4:	002ee300 	.word	0x002ee300
    93b8:	34e72300 	.word	0x34e72300
    93bc:	49010000 	.word	0x49010000
    93c0:	00020824 	.word	0x00020824
    93c4:	6e691f00 	.word	0x6e691f00
    93c8:	27010064 	.word	0x27010064
    93cc:	00000048 	.word	0x00000048
    93d0:	00005801 	.word	0x00005801
    93d4:	02a70410 	.word	0x02a70410
    93d8:	04100000 	.word	0x04100000
    93dc:	00000207 	.word	0x00000207
    93e0:	00319125 	.word	0x00319125
    93e4:	03280500 	.word	0x03280500
    93e8:	000009ac 	.word	0x000009ac
    93ec:	51160101 	.word	0x51160101
    93f0:	00000004 	.word	0x00000004
    93f4:	00000049 	.word	0x00000049
    93f8:	1e850002 	.word	0x1e850002
    93fc:	01040000 	.word	0x01040000
    9400:	00001f32 	.word	0x00001f32
    9404:	00000228 	.word	0x00000228
    9408:	6e747263 	.word	0x6e747263
    940c:	6d73612e 	.word	0x6d73612e
    9410:	5c3a6300 	.word	0x5c3a6300
    9414:	616e6977 	.word	0x616e6977
    9418:	5c736d72 	.word	0x5c736d72
    941c:	6c697562 	.word	0x6c697562
    9420:	63675c64 	.word	0x63675c64
    9424:	75622d63 	.word	0x75622d63
    9428:	5c646c69 	.word	0x5c646c69
    942c:	00636367 	.word	0x00636367
    9430:	20554e47 	.word	0x20554e47
    9434:	32205341 	.word	0x32205341
    9438:	2e38312e 	.word	0x2e38312e
    943c:	01003035 	.word	0x01003035
    9440:	Address 0x00009440 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	tstne	r1, r0
      14:	11061000 	tstne	r6, r0
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	tstne	r1, r0
      28:	130e2501 	movwne	r2, #58625	; 0xe501
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
      30:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
      34:	00061001 	andeq	r1, r6, r1
      38:	00160200 	andseq	r0, r6, r0, lsl #4
      3c:	0b3a0803 	bleq	e82050 <__Stack_Size+0xe81c50>
      40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      44:	24030000 	strcs	r0, [r3]
      48:	3e0b0b00 	fmacdcc	d0, d11, d0
      4c:	000e030b 	andeq	r0, lr, fp, lsl #6
      50:	00350400 	eorseq	r0, r5, r0, lsl #8
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	0b010405 	bleq	41074 <__Stack_Size+0x40c74>
      5c:	3b0b3a0b 	blcc	2ce890 <__Stack_Size+0x2ce490>
      60:	0013010b 	andseq	r0, r3, fp, lsl #2
      64:	00280600 	eoreq	r0, r8, r0, lsl #12
      68:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      6c:	28070000 	stmdacs	r7, {}
      70:	1c080300 	stcne	3, cr0, [r8], {0}
      74:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      78:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      7c:	0b3b0b3a 	bleq	ec2d6c <__Stack_Size+0xec296c>
      80:	00001349 	andeq	r1, r0, r9, asr #6
      84:	0b002409 	bleq	90b0 <__Stack_Size+0x8cb0>
      88:	000b3e0b 	andeq	r3, fp, fp, lsl #28
      8c:	01130a00 	tsteq	r3, r0, lsl #20
      90:	0b3a0b0b 	bleq	e82cc4 <__Stack_Size+0xe828c4>
      94:	1301053b 	movwne	r0, #5435	; 0x153b
      98:	0d0b0000 	stceq	0, cr0, [fp]
      9c:	3a080300 	bcc	200ca4 <__Stack_Size+0x2008a4>
      a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      a4:	000a3813 	andeq	r3, sl, r3, lsl r8
      a8:	000d0c00 	andeq	r0, sp, r0, lsl #24
      ac:	0b3a0e03 	bleq	e838c0 <__Stack_Size+0xe834c0>
      b0:	1349053b 	movtne	r0, #38203	; 0x953b
      b4:	00000a38 	andeq	r0, r0, r8, lsr sl
      b8:	0b01130d 	bleq	44cf4 <__Stack_Size+0x448f4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	000d0e00 	andeq	r0, sp, r0, lsl #28
      c8:	0b3a0e03 	bleq	e838dc <__Stack_Size+0xe834dc>
      cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d0:	00000a38 	andeq	r0, r0, r8, lsr sl
      d4:	3f002e0f 	svccc	0x00002e0f
      d8:	3a0e030c 	bcc	380d10 <__Stack_Size+0x380910>
      dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
      e0:	1201110c 	andne	r1, r1, #3	; 0x3
      e4:	000a4001 	andeq	r4, sl, r1
      e8:	002e1000 	eoreq	r1, lr, r0
      ec:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
      f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
      f4:	13490c27 	movtne	r0, #39975	; 0x9c27
      f8:	01120111 	tsteq	r2, r1, lsl r1
      fc:	00000a40 	andeq	r0, r0, r0, asr #20
     100:	3f012e11 	svccc	0x00012e11
     104:	3a0e030c 	bcc	380d3c <__Stack_Size+0x38093c>
     108:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     10c:	1113490c 	tstne	r3, ip, lsl #18
     110:	40011201 	andmi	r1, r1, r1, lsl #4
     114:	0013010a 	andseq	r0, r3, sl, lsl #2
     118:	00341200 	eorseq	r1, r4, r0, lsl #4
     11c:	0b3a0e03 	bleq	e83930 <__Stack_Size+0xe83530>
     120:	1349053b 	movtne	r0, #38203	; 0x953b
     124:	00000a02 	andeq	r0, r0, r2, lsl #20
     128:	3f012e13 	svccc	0x00012e13
     12c:	3a0e030c 	bcc	380d64 <__Stack_Size+0x380964>
     130:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     134:	1201110c 	andne	r1, r1, #3	; 0x3
     138:	010a4001 	tsteq	sl, r1
     13c:	14000013 	strne	r0, [r0], #-19
     140:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     144:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     148:	0a021349 	beq	84e74 <__Stack_Size+0x84a74>
     14c:	2e150000 	wxorcs	wr0, wr5, wr0
     150:	030c3f01 	movweq	r3, #52993	; 0xcf01
     154:	3b0b3a0e 	blcc	2ce994 <__Stack_Size+0x2ce594>
     158:	110c2705 	tstne	ip, r5, lsl #14
     15c:	40011201 	andmi	r1, r1, r1, lsl #4
     160:	00130106 	andseq	r0, r3, r6, lsl #2
     164:	00051600 	andeq	r1, r5, r0, lsl #12
     168:	0b3a0e03 	bleq	e8397c <__Stack_Size+0xe8357c>
     16c:	1349053b 	movtne	r0, #38203	; 0x953b
     170:	00000602 	andeq	r0, r0, r2, lsl #12
     174:	3f002e17 	svccc	0x00002e17
     178:	3a0e030c 	bcc	380db0 <__Stack_Size+0x3809b0>
     17c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     180:	1201110c 	andne	r1, r1, #3	; 0x3
     184:	00064001 	andeq	r4, r6, r1
     188:	00341800 	eorseq	r1, r4, r0, lsl #16
     18c:	0b3a0e03 	bleq	e839a0 <__Stack_Size+0xe835a0>
     190:	1349053b 	movtne	r0, #38203	; 0x953b
     194:	00000602 	andeq	r0, r0, r2, lsl #12
     198:	0b000f19 	bleq	3e04 <__Stack_Size+0x3a04>
     19c:	0013490b 	andseq	r4, r3, fp, lsl #18
     1a0:	00341a00 	eorseq	r1, r4, r0, lsl #20
     1a4:	0b3a0e03 	bleq	e839b8 <__Stack_Size+0xe835b8>
     1a8:	1349053b 	movtne	r0, #38203	; 0x953b
     1ac:	051b0000 	ldreq	r0, [fp]
     1b0:	3a080300 	bcc	200db8 <__Stack_Size+0x2009b8>
     1b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     1b8:	00060213 	andeq	r0, r6, r3, lsl r2
     1bc:	00341c00 	eorseq	r1, r4, r0, lsl #24
     1c0:	0b3a0803 	bleq	e821d4 <__Stack_Size+0xe81dd4>
     1c4:	1349053b 	movtne	r0, #38203	; 0x953b
     1c8:	241d0000 	ldrcs	r0, [sp]
     1cc:	3e0b0b00 	fmacdcc	d0, d11, d0
     1d0:	0008030b 	andeq	r0, r8, fp, lsl #6
     1d4:	012e1e00 	teqeq	lr, r0, lsl #28
     1d8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     1dc:	0b3b0b3a 	bleq	ec2ecc <__Stack_Size+0xec2acc>
     1e0:	13490c27 	movtne	r0, #39975	; 0x9c27
     1e4:	01120111 	tsteq	r2, r1, lsl r1
     1e8:	13010640 	movwne	r0, #5696	; 0x1640
     1ec:	341f0000 	ldrcc	r0, [pc], #0	; 1f4 <_Minimum_Stack_Size+0xf4>
     1f0:	3a080300 	bcc	200df8 <__Stack_Size+0x2009f8>
     1f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1f8:	20000013 	andcs	r0, r0, r3, lsl r0
     1fc:	13490101 	movtne	r0, #37121	; 0x9101
     200:	00001301 	andeq	r1, r0, r1, lsl #6
     204:	49002121 	stmdbmi	r0, {r0, r5, r8, sp}
     208:	000b2f13 	andeq	r2, fp, r3, lsl pc
     20c:	00342200 	eorseq	r2, r4, r0, lsl #4
     210:	0b3a0e03 	bleq	e83a24 <__Stack_Size+0xe83624>
     214:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     218:	0a020c3f 	beq	8331c <__Stack_Size+0x82f1c>
     21c:	34230000 	strtcc	r0, [r3]
     220:	3a080300 	bcc	200e28 <__Stack_Size+0x200a28>
     224:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     228:	020c3f13 	andeq	r3, ip, #76	; 0x4c
     22c:	0000000a 	andeq	r0, r0, sl
     230:	25011101 	strcs	r1, [r1, #-257]
     234:	030b130e 	movweq	r1, #45838	; 0xb30e
     238:	110e1b0e 	tstne	lr, lr, lsl #22
     23c:	10011201 	andne	r1, r1, r1, lsl #4
     240:	02000006 	andeq	r0, r0, #6	; 0x6
     244:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     248:	0b3a0e03 	bleq	e83a5c <__Stack_Size+0xe8365c>
     24c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     250:	01120111 	tsteq	r2, r1, lsl r1
     254:	00000a40 	andeq	r0, r0, r0, asr #20
     258:	3f002e03 	svccc	0x00002e03
     25c:	3a0e030c 	bcc	380e94 <__Stack_Size+0x380a94>
     260:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     264:	1201110c 	andne	r1, r1, #3	; 0x3
     268:	000a4001 	andeq	r4, sl, r1
     26c:	002e0400 	eoreq	r0, lr, r0, lsl #8
     270:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     274:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     278:	01110c27 	tsteq	r1, r7, lsr #24
     27c:	06400112 	undefined
     280:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     284:	030c3f00 	movweq	r3, #52992	; 0xcf00
     288:	3b0b3a0e 	blcc	2ceac8 <__Stack_Size+0x2ce6c8>
     28c:	110c270b 	tstne	ip, fp, lsl #14
     290:	40011201 	andmi	r1, r1, r1, lsl #4
     294:	00000006 	andeq	r0, r0, r6
     298:	25011101 	strcs	r1, [r1, #-257]
     29c:	030b130e 	movweq	r1, #45838	; 0xb30e
     2a0:	110e1b0e 	tstne	lr, lr, lsl #22
     2a4:	10011201 	andne	r1, r1, r1, lsl #4
     2a8:	02000006 	andeq	r0, r0, #6	; 0x6
     2ac:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     2b0:	0b3a0e03 	bleq	e83ac4 <__Stack_Size+0xe836c4>
     2b4:	0c270b3b 	stceq	11, cr0, [r7], #-236
     2b8:	01111349 	tsteq	r1, r9, asr #6
     2bc:	06400112 	undefined
     2c0:	24030000 	strcs	r0, [r3]
     2c4:	3e0b0b00 	fmacdcc	d0, d11, d0
     2c8:	0008030b 	andeq	r0, r8, fp, lsl #6
     2cc:	012e0400 	teqeq	lr, r0, lsl #8
     2d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     2d4:	0b3b0b3a 	bleq	ec2fc4 <__Stack_Size+0xec2bc4>
     2d8:	01110c27 	tsteq	r1, r7, lsr #24
     2dc:	06400112 	undefined
     2e0:	00001301 	andeq	r1, r0, r1, lsl #6
     2e4:	03000505 	movweq	r0, #1285	; 0x505
     2e8:	3b0b3a0e 	blcc	2ceb28 <__Stack_Size+0x2ce728>
     2ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2f0:	06000006 	streq	r0, [r0], -r6
     2f4:	0c3f012e 	ldfeqs	f0, [pc], #-184
     2f8:	0b3a0e03 	bleq	e83b0c <__Stack_Size+0xe8370c>
     2fc:	0c270b3b 	stceq	11, cr0, [r7], #-236
     300:	01111349 	tsteq	r1, r9, asr #6
     304:	06400112 	undefined
     308:	00001301 	andeq	r1, r0, r1, lsl #6
     30c:	03003407 	movweq	r3, #1031	; 0x407
     310:	3b0b3a08 	blcc	2ceb38 <__Stack_Size+0x2ce738>
     314:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     318:	0800000a 	stmdaeq	r0, {r1, r3}
     31c:	0b0b000f 	bleq	2c0360 <__Stack_Size+0x2bff60>
     320:	00001349 	andeq	r1, r0, r9, asr #6
     324:	0b002409 	bleq	9350 <__Stack_Size+0x8f50>
     328:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     32c:	0a00000e 	beq	36c <_Minimum_Stack_Size+0x26c>
     330:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     334:	0b3a0e03 	bleq	e83b48 <__Stack_Size+0xe83748>
     338:	0c270b3b 	stceq	11, cr0, [r7], #-236
     33c:	01120111 	tsteq	r2, r1, lsl r1
     340:	00000640 	andeq	r0, r0, r0, asr #12
     344:	3f012e0b 	svccc	0x00012e0b
     348:	3a0e030c 	bcc	380f80 <__Stack_Size+0x380b80>
     34c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     350:	1113490c 	tstne	r3, ip, lsl #18
     354:	40011201 	andmi	r1, r1, r1, lsl #4
     358:	00000006 	andeq	r0, r0, r6
     35c:	25011101 	strcs	r1, [r1, #-257]
     360:	030b130e 	movweq	r1, #45838	; 0xb30e
     364:	110e1b0e 	tstne	lr, lr, lsl #22
     368:	10011201 	andne	r1, r1, r1, lsl #4
     36c:	02000006 	andeq	r0, r0, #6	; 0x6
     370:	0c3f012e 	ldfeqs	f0, [pc], #-184
     374:	0b3a0e03 	bleq	e83b88 <__Stack_Size+0xe83788>
     378:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     37c:	0b201349 	bleq	8050a8 <__Stack_Size+0x804ca8>
     380:	00001301 	andeq	r1, r0, r1, lsl #6
     384:	03000503 	movweq	r0, #1283	; 0x503
     388:	3b0b3a0e 	blcc	2cebc8 <__Stack_Size+0x2ce7c8>
     38c:	00134905 	andseq	r4, r3, r5, lsl #18
     390:	00340400 	eorseq	r0, r4, r0, lsl #8
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1349053b 	movtne	r0, #38203	; 0x953b
     39c:	24050000 	strcs	r0, [r5]
     3a0:	3e0b0b00 	fmacdcc	d0, d11, d0
     3a4:	0008030b 	andeq	r0, r8, fp, lsl #6
     3a8:	00240600 	eoreq	r0, r4, r0, lsl #12
     3ac:	0b3e0b0b 	bleq	f82fe0 <__Stack_Size+0xf82be0>
     3b0:	00000e03 	andeq	r0, r0, r3, lsl #28
     3b4:	3f002e07 	svccc	0x00002e07
     3b8:	3a0e030c 	bcc	380ff0 <__Stack_Size+0x380bf0>
     3bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3c0:	1113490c 	tstne	r3, ip, lsl #18
     3c4:	40011201 	andmi	r1, r1, r1, lsl #4
     3c8:	0800000a 	stmdaeq	r0, {r1, r3}
     3cc:	0c3f012e 	ldfeqs	f0, [pc], #-184
     3d0:	0b3a0e03 	bleq	e83be4 <__Stack_Size+0xe837e4>
     3d4:	0c270b3b 	stceq	11, cr0, [r7], #-236
     3d8:	01120111 	tsteq	r2, r1, lsl r1
     3dc:	13010a40 	movwne	r0, #6720	; 0x1a40
     3e0:	05090000 	streq	r0, [r9]
     3e4:	3a080300 	bcc	200fec <__Stack_Size+0x200bec>
     3e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3ec:	000a0213 	andeq	r0, sl, r3, lsl r2
     3f0:	00050a00 	andeq	r0, r5, r0, lsl #20
     3f4:	0b3a0e03 	bleq	e83c08 <__Stack_Size+0xe83808>
     3f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3fc:	00000a02 	andeq	r0, r0, r2, lsl #20
     400:	3f012e0b 	svccc	0x00012e0b
     404:	3a0e030c 	bcc	38103c <__Stack_Size+0x380c3c>
     408:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     40c:	1113490c 	tstne	r3, ip, lsl #18
     410:	40011201 	andmi	r1, r1, r1, lsl #4
     414:	0013010a 	andseq	r0, r3, sl, lsl #2
     418:	00050c00 	andeq	r0, r5, r0, lsl #24
     41c:	0b3a0e03 	bleq	e83c30 <__Stack_Size+0xe83830>
     420:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     424:	00000602 	andeq	r0, r0, r2, lsl #12
     428:	3f002e0d 	svccc	0x00002e0d
     42c:	3a0e030c 	bcc	381064 <__Stack_Size+0x380c64>
     430:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     434:	1113490c 	tstne	r3, ip, lsl #18
     438:	40011201 	andmi	r1, r1, r1, lsl #4
     43c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     440:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     444:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     448:	06021349 	streq	r1, [r2], -r9, asr #6
     44c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     450:	11133101 	tstne	r3, r1, lsl #2
     454:	40011201 	andmi	r1, r1, r1, lsl #4
     458:	0013010a 	andseq	r0, r3, sl, lsl #2
     45c:	00051000 	andeq	r1, r5, r0
     460:	06021331 	undefined
     464:	05110000 	ldreq	r0, [r1]
     468:	02133100 	andseq	r3, r3, #0	; 0x0
     46c:	1200000a 	andne	r0, r0, #10	; 0xa
     470:	13310034 	teqne	r1, #52	; 0x34
     474:	34130000 	ldrcc	r0, [r3]
     478:	02133100 	andseq	r3, r3, #0	; 0x0
     47c:	14000006 	strne	r0, [r0], #-6
     480:	0c3f012e 	ldfeqs	f0, [pc], #-184
     484:	0b3a0e03 	bleq	e83c98 <__Stack_Size+0xe83898>
     488:	0c270b3b 	stceq	11, cr0, [r7], #-236
     48c:	01120111 	tsteq	r2, r1, lsl r1
     490:	13010640 	movwne	r0, #5696	; 0x1640
     494:	34150000 	ldrcc	r0, [r5]
     498:	3a080300 	bcc	2010a0 <__Stack_Size+0x200ca0>
     49c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a0:	00060213 	andeq	r0, r6, r3, lsl r2
     4a4:	00341600 	eorseq	r1, r4, r0, lsl #12
     4a8:	0b3a0e03 	bleq	e83cbc <__Stack_Size+0xe838bc>
     4ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4b0:	34170000 	ldrcc	r0, [r7]
     4b4:	3a0e0300 	bcc	3810bc <__Stack_Size+0x380cbc>
     4b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4bc:	00060213 	andeq	r0, r6, r3, lsl r2
     4c0:	00341800 	eorseq	r1, r4, r0, lsl #16
     4c4:	0b3a0e03 	bleq	e83cd8 <__Stack_Size+0xe838d8>
     4c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4cc:	00000a02 	andeq	r0, r0, r2, lsl #20
     4d0:	3f002e19 	svccc	0x00002e19
     4d4:	3a0e030c 	bcc	38110c <__Stack_Size+0x380d0c>
     4d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     4dc:	1201110c 	andne	r1, r1, #3	; 0x3
     4e0:	00064001 	andeq	r4, r6, r1
     4e4:	012e1a00 	teqeq	lr, r0, lsl #20
     4e8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     4ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     4f0:	01110c27 	tsteq	r1, r7, lsr #24
     4f4:	06400112 	undefined
     4f8:	00001301 	andeq	r1, r0, r1, lsl #6
     4fc:	0300051b 	movweq	r0, #1307	; 0x51b
     500:	3b0b3a08 	blcc	2ced28 <__Stack_Size+0x2ce928>
     504:	02134905 	andseq	r4, r3, #81920	; 0x14000
     508:	1c000006 	stcne	0, cr0, [r0], {6}
     50c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     510:	01120111 	tsteq	r2, r1, lsl r1
     514:	05590b58 	ldrbeq	r0, [r9, #-2904]
     518:	051d0000 	ldreq	r0, [sp]
     51c:	00133100 	andseq	r3, r3, r0, lsl #2
     520:	010b1e00 	tsteq	fp, r0, lsl #28
     524:	01120111 	tsteq	r2, r1, lsl r1
     528:	2e1f0000 	wxorcs	wr0, wr15, wr0
     52c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     530:	3b0b3a0e 	blcc	2ced70 <__Stack_Size+0x2ce970>
     534:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     538:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     53c:	01064001 	tsteq	r6, r1
     540:	20000013 	andcs	r0, r0, r3, lsl r0
     544:	0c3f012e 	ldfeqs	f0, [pc], #-184
     548:	0b3a0e03 	bleq	e83d5c <__Stack_Size+0xe8395c>
     54c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     550:	01111349 	tsteq	r1, r9, asr #6
     554:	06400112 	undefined
     558:	00001301 	andeq	r1, r0, r1, lsl #6
     55c:	49010121 	stmdbmi	r1, {r0, r5, r8}
     560:	00130113 	andseq	r0, r3, r3, lsl r1
     564:	00212200 	eoreq	r2, r1, r0, lsl #4
     568:	0b2f1349 	bleq	bc5294 <__Stack_Size+0xbc4e94>
     56c:	24230000 	strtcs	r0, [r3]
     570:	3e0b0b00 	fmacdcc	d0, d11, d0
     574:	2400000b 	strcs	r0, [r0], #-11
     578:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     57c:	0b3b0b3a 	bleq	ec326c <__Stack_Size+0xec2e6c>
     580:	0c3f1349 	ldceq	3, cr1, [pc], #-292
     584:	00000a02 	andeq	r0, r0, r2, lsl #20
     588:	01110100 	tsteq	r1, r0, lsl #2
     58c:	0b130e25 	bleq	4c3e28 <__Stack_Size+0x4c3a28>
     590:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     594:	01120111 	tsteq	r2, r1, lsl r1
     598:	00000610 	andeq	r0, r0, r0, lsl r6
     59c:	0b002402 	bleq	95ac <__Stack_Size+0x91ac>
     5a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5a4:	0300000e 	movweq	r0, #14	; 0xe
     5a8:	08030016 	stmdaeq	r3, {r1, r2, r4}
     5ac:	0b3b0b3a 	bleq	ec329c <__Stack_Size+0xec2e9c>
     5b0:	00001349 	andeq	r1, r0, r9, asr #6
     5b4:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     5b8:	05000013 	streq	r0, [r0, #-19]
     5bc:	0b0b0104 	bleq	2c09d4 <__Stack_Size+0x2c05d4>
     5c0:	0b3b0b3a 	bleq	ec32b0 <__Stack_Size+0xec2eb0>
     5c4:	00001301 	andeq	r1, r0, r1, lsl #6
     5c8:	03002806 	movweq	r2, #2054	; 0x806
     5cc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     5d0:	00280700 	eoreq	r0, r8, r0, lsl #14
     5d4:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     5d8:	16080000 	strne	r0, [r8], -r0
     5dc:	3a0e0300 	bcc	3811e4 <__Stack_Size+0x380de4>
     5e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5e4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     5e8:	0b0b0024 	bleq	2c0680 <__Stack_Size+0x2c0280>
     5ec:	00000b3e 	andeq	r0, r0, lr, lsr fp
     5f0:	0b01130a 	bleq	45220 <__Stack_Size+0x44e20>
     5f4:	3b0b3a0b 	blcc	2cee28 <__Stack_Size+0x2cea28>
     5f8:	00130105 	andseq	r0, r3, r5, lsl #2
     5fc:	000d0b00 	andeq	r0, sp, r0, lsl #22
     600:	0b3a0803 	bleq	e82614 <__Stack_Size+0xe82214>
     604:	1349053b 	movtne	r0, #38203	; 0x953b
     608:	00000a38 	andeq	r0, r0, r8, lsr sl
     60c:	03000d0c 	movweq	r0, #3340	; 0xd0c
     610:	3b0b3a0e 	blcc	2cee50 <__Stack_Size+0x2cea50>
     614:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     618:	0d00000a 	stceq	0, cr0, [r0, #-40]
     61c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     620:	0b3a0e03 	bleq	e83e34 <__Stack_Size+0xe83a34>
     624:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     628:	0b201349 	bleq	805354 <__Stack_Size+0x804f54>
     62c:	00001301 	andeq	r1, r0, r1, lsl #6
     630:	0300340e 	movweq	r3, #1038	; 0x40e
     634:	3b0b3a0e 	blcc	2cee74 <__Stack_Size+0x2cea74>
     638:	00134905 	andseq	r4, r3, r5, lsl #18
     63c:	012e0f00 	teqeq	lr, r0, lsl #30
     640:	0b3a0e03 	bleq	e83e54 <__Stack_Size+0xe83a54>
     644:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     648:	13010b20 	movwne	r0, #6944	; 0x1b20
     64c:	34100000 	ldrcc	r0, [r0]
     650:	3a080300 	bcc	201258 <__Stack_Size+0x200e58>
     654:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     658:	11000013 	tstne	r0, r3, lsl r0
     65c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     660:	0b3a0e03 	bleq	e83e74 <__Stack_Size+0xe83a74>
     664:	0c270b3b 	stceq	11, cr0, [r7], #-236
     668:	01120111 	tsteq	r2, r1, lsl r1
     66c:	13010a40 	movwne	r0, #6720	; 0x1a40
     670:	05120000 	ldreq	r0, [r2]
     674:	3a0e0300 	bcc	38127c <__Stack_Size+0x380e7c>
     678:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     67c:	00060213 	andeq	r0, r6, r3, lsl r2
     680:	002e1300 	eoreq	r1, lr, r0, lsl #6
     684:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     688:	0b3b0b3a 	bleq	ec3378 <__Stack_Size+0xec2f78>
     68c:	01110c27 	tsteq	r1, r7, lsr #24
     690:	0a400112 	beq	1000ae0 <__Stack_Size+0x10006e0>
     694:	2e140000 	wxorcs	wr0, wr4, wr0
     698:	030c3f00 	movweq	r3, #52992	; 0xcf00
     69c:	3b0b3a0e 	blcc	2ceedc <__Stack_Size+0x2ceadc>
     6a0:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     6a4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6a8:	000a4001 	andeq	r4, sl, r1
     6ac:	012e1500 	teqeq	lr, r0, lsl #10
     6b0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     6b8:	13490c27 	movtne	r0, #39975	; 0x9c27
     6bc:	01120111 	tsteq	r2, r1, lsl r1
     6c0:	13010a40 	movwne	r0, #6720	; 0x1a40
     6c4:	2e160000 	wxorcs	wr0, wr6, wr0
     6c8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     6cc:	3b0b3a0e 	blcc	2cef0c <__Stack_Size+0x2ceb0c>
     6d0:	110c2705 	tstne	ip, r5, lsl #14
     6d4:	40011201 	andmi	r1, r1, r1, lsl #4
     6d8:	0013010a 	andseq	r0, r3, sl, lsl #2
     6dc:	00051700 	andeq	r1, r5, r0, lsl #14
     6e0:	0b3a0e03 	bleq	e83ef4 <__Stack_Size+0xe83af4>
     6e4:	1349053b 	movtne	r0, #38203	; 0x953b
     6e8:	00000a02 	andeq	r0, r0, r2, lsl #20
     6ec:	03000518 	movweq	r0, #1304	; 0x518
     6f0:	3b0b3a0e 	blcc	2cef30 <__Stack_Size+0x2ceb30>
     6f4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     6f8:	19000006 	stmdbne	r0, {r1, r2}
     6fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     700:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     704:	06021349 	streq	r1, [r2], -r9, asr #6
     708:	2e1a0000 	wxorcs	wr0, wr10, wr0
     70c:	11133101 	tstne	r3, r1, lsl #2
     710:	40011201 	andmi	r1, r1, r1, lsl #4
     714:	0013010a 	andseq	r0, r3, sl, lsl #2
     718:	00341b00 	eorseq	r1, r4, r0, lsl #22
     71c:	06021331 	undefined
     720:	2e1c0000 	wxorcs	wr0, wr12, wr0
     724:	030c3f01 	movweq	r3, #52993	; 0xcf01
     728:	3b0b3a0e 	blcc	2cef68 <__Stack_Size+0x2ceb68>
     72c:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     730:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     734:	01064001 	tsteq	r6, r1
     738:	1d000013 	stcne	0, cr0, [r0, #-76]
     73c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     740:	0b580655 	bleq	160209c <__Stack_Size+0x1601c9c>
     744:	13010559 	movwne	r0, #5465	; 0x1559
     748:	0b1e0000 	bleq	780750 <__Stack_Size+0x780350>
     74c:	00065501 	andeq	r5, r6, r1, lsl #10
     750:	00341f00 	eorseq	r1, r4, r0, lsl #30
     754:	00001331 	andeq	r1, r0, r1, lsr r3
     758:	31011d20 	tstcc	r1, r0, lsr #26
     75c:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
     760:	0005590b 	andeq	r5, r5, fp, lsl #18
     764:	012e2100 	teqeq	lr, r0, lsl #2
     768:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     76c:	0b3b0b3a 	bleq	ec345c <__Stack_Size+0xec305c>
     770:	13490c27 	movtne	r0, #39975	; 0x9c27
     774:	01120111 	tsteq	r2, r1, lsl r1
     778:	13010640 	movwne	r0, #5696	; 0x1640
     77c:	34220000 	strtcc	r0, [r2]
     780:	3a0e0300 	bcc	381388 <__Stack_Size+0x380f88>
     784:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     788:	00060213 	andeq	r0, r6, r3, lsl r2
     78c:	012e2300 	teqeq	lr, r0, lsl #6
     790:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     794:	0b3b0b3a 	bleq	ec3484 <__Stack_Size+0xec3084>
     798:	13490c27 	movtne	r0, #39975	; 0x9c27
     79c:	01120111 	tsteq	r2, r1, lsl r1
     7a0:	00000640 	andeq	r0, r0, r0, asr #12
     7a4:	01110100 	tsteq	r1, r0, lsl #2
     7a8:	0b130e25 	bleq	4c4044 <__Stack_Size+0x4c3c44>
     7ac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     7b0:	01120111 	tsteq	r2, r1, lsl r1
     7b4:	00000610 	andeq	r0, r0, r0, lsl r6
     7b8:	0b002402 	bleq	97c8 <__Stack_Size+0x93c8>
     7bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7c0:	0300000e 	movweq	r0, #14	; 0xe
     7c4:	08030016 	stmdaeq	r3, {r1, r2, r4}
     7c8:	0b3b0b3a 	bleq	ec34b8 <__Stack_Size+0xec30b8>
     7cc:	00001349 	andeq	r1, r0, r9, asr #6
     7d0:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     7d4:	05000013 	streq	r0, [r0, #-19]
     7d8:	0b0b0104 	bleq	2c0bf0 <__Stack_Size+0x2c07f0>
     7dc:	0b3b0b3a 	bleq	ec34cc <__Stack_Size+0xec30cc>
     7e0:	00001301 	andeq	r1, r0, r1, lsl #6
     7e4:	03002806 	movweq	r2, #2054	; 0x806
     7e8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     7ec:	00160700 	andseq	r0, r6, r0, lsl #14
     7f0:	0b3a0e03 	bleq	e84004 <__Stack_Size+0xe83c04>
     7f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7f8:	24080000 	strcs	r0, [r8]
     7fc:	3e0b0b00 	fmacdcc	d0, d11, d0
     800:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     804:	0b0b0113 	bleq	2c0c58 <__Stack_Size+0x2c0858>
     808:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     80c:	00001301 	andeq	r1, r0, r1, lsl #6
     810:	03000d0a 	movweq	r0, #3338	; 0xd0a
     814:	3b0b3a08 	blcc	2cf03c <__Stack_Size+0x2cec3c>
     818:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     81c:	0b00000a 	bleq	84c <__Stack_Size+0x44c>
     820:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     824:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     828:	0a381349 	beq	e05554 <__Stack_Size+0xe05154>
     82c:	160c0000 	strne	r0, [ip], -r0
     830:	3a0e0300 	bcc	381438 <__Stack_Size+0x381038>
     834:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     838:	0d000013 	stceq	0, cr0, [r0, #-76]
     83c:	13490101 	movtne	r0, #37121	; 0x9101
     840:	00001301 	andeq	r1, r0, r1, lsl #6
     844:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
     848:	000b2f13 	andeq	r2, fp, r3, lsl pc
     84c:	01130f00 	tsteq	r3, r0, lsl #30
     850:	0b3a0b0b 	bleq	e83484 <__Stack_Size+0xe83084>
     854:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     858:	0d100000 	ldceq	0, cr0, [r0]
     85c:	3a0e0300 	bcc	381464 <__Stack_Size+0x381064>
     860:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     864:	000a3813 	andeq	r3, sl, r3, lsl r8
     868:	012e1100 	teqeq	lr, r0, lsl #2
     86c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     870:	0b3b0b3a 	bleq	ec3560 <__Stack_Size+0xec3160>
     874:	01110c27 	tsteq	r1, r7, lsr #24
     878:	06400112 	undefined
     87c:	00001301 	andeq	r1, r0, r1, lsl #6
     880:	03000512 	movweq	r0, #1298	; 0x512
     884:	3b0b3a0e 	blcc	2cf0c4 <__Stack_Size+0x2cecc4>
     888:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     88c:	1300000a 	movwne	r0, #10	; 0xa
     890:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     894:	0b3b0b3a 	bleq	ec3584 <__Stack_Size+0xec3184>
     898:	06021349 	streq	r1, [r2], -r9, asr #6
     89c:	34140000 	ldrcc	r0, [r4]
     8a0:	3a0e0300 	bcc	3814a8 <__Stack_Size+0x3810a8>
     8a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8a8:	000a0213 	andeq	r0, sl, r3, lsl r2
     8ac:	00341500 	eorseq	r1, r4, r0, lsl #10
     8b0:	0b3a0803 	bleq	e828c4 <__Stack_Size+0xe824c4>
     8b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8b8:	00000602 	andeq	r0, r0, r2, lsl #12
     8bc:	03003416 	movweq	r3, #1046	; 0x416
     8c0:	3b0b3a0e 	blcc	2cf100 <__Stack_Size+0x2ced00>
     8c4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8c8:	000f1700 	andeq	r1, pc, r0, lsl #14
     8cc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     8d0:	2e180000 	wxorcs	wr0, wr8, wr0
     8d4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     8d8:	3b0b3a0e 	blcc	2cf118 <__Stack_Size+0x2ced18>
     8dc:	110c270b 	tstne	ip, fp, lsl #14
     8e0:	40011201 	andmi	r1, r1, r1, lsl #4
     8e4:	0013010a 	andseq	r0, r3, sl, lsl #2
     8e8:	012e1900 	teqeq	lr, r0, lsl #18
     8ec:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     8f0:	0b3b0b3a 	bleq	ec35e0 <__Stack_Size+0xec31e0>
     8f4:	13490c27 	movtne	r0, #39975	; 0x9c27
     8f8:	01120111 	tsteq	r2, r1, lsl r1
     8fc:	13010a40 	movwne	r0, #6720	; 0x1a40
     900:	2e1a0000 	wxorcs	wr0, wr10, wr0
     904:	030c3f01 	movweq	r3, #52993	; 0xcf01
     908:	3b0b3a0e 	blcc	2cf148 <__Stack_Size+0x2ced48>
     90c:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     910:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     914:	010a4001 	tsteq	sl, r1
     918:	1b000013 	blne	96c <__Stack_Size+0x56c>
     91c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     920:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     924:	06021349 	streq	r1, [r2], -r9, asr #6
     928:	051c0000 	ldreq	r0, [ip]
     92c:	3a0e0300 	bcc	381534 <__Stack_Size+0x381134>
     930:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     934:	000a0213 	andeq	r0, sl, r3, lsl r2
     938:	00341d00 	eorseq	r1, r4, r0, lsl #26
     93c:	0b3a0e03 	bleq	e84150 <__Stack_Size+0xe83d50>
     940:	1349053b 	movtne	r0, #38203	; 0x953b
     944:	2e1e0000 	wxorcs	wr0, wr14, wr0
     948:	030c3f01 	movweq	r3, #52993	; 0xcf01
     94c:	3b0b3a0e 	blcc	2cf18c <__Stack_Size+0x2ced8c>
     950:	110c2705 	tstne	ip, r5, lsl #14
     954:	40011201 	andmi	r1, r1, r1, lsl #4
     958:	0013010a 	andseq	r0, r3, sl, lsl #2
     95c:	00341f00 	eorseq	r1, r4, r0, lsl #30
     960:	0b3a0803 	bleq	e82974 <__Stack_Size+0xe82574>
     964:	1349053b 	movtne	r0, #38203	; 0x953b
     968:	00000a02 	andeq	r0, r0, r2, lsl #20
     96c:	03003420 	movweq	r3, #1056	; 0x420
     970:	3b0b3a0e 	blcc	2cf1b0 <__Stack_Size+0x2cedb0>
     974:	02134905 	andseq	r4, r3, #81920	; 0x14000
     978:	21000006 	tstcs	r0, r6
     97c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     980:	0b3a0e03 	bleq	e84194 <__Stack_Size+0xe83d94>
     984:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     988:	01120111 	tsteq	r2, r1, lsl r1
     98c:	13010640 	movwne	r0, #5696	; 0x1640
     990:	34220000 	strtcc	r0, [r2]
     994:	3a080300 	bcc	20159c <__Stack_Size+0x20119c>
     998:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     99c:	23000013 	movwcs	r0, #19	; 0x13
     9a0:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     9a4:	0b3a0e03 	bleq	e841b8 <__Stack_Size+0xe83db8>
     9a8:	0c270b3b 	stceq	11, cr0, [r7], #-236
     9ac:	01120111 	tsteq	r2, r1, lsl r1
     9b0:	00000640 	andeq	r0, r0, r0, asr #12
     9b4:	3f012e24 	svccc	0x00012e24
     9b8:	3a0e030c 	bcc	3815f0 <__Stack_Size+0x3811f0>
     9bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     9c0:	1201110c 	andne	r1, r1, #3	; 0x3
     9c4:	00064001 	andeq	r4, r6, r1
     9c8:	11010000 	tstne	r1, r0
     9cc:	130e2501 	movwne	r2, #58625	; 0xe501
     9d0:	1b0e030b 	blne	381604 <__Stack_Size+0x381204>
     9d4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     9d8:	00061001 	andeq	r1, r6, r1
     9dc:	00240200 	eoreq	r0, r4, r0, lsl #4
     9e0:	0b3e0b0b 	bleq	f83614 <__Stack_Size+0xf83214>
     9e4:	00000e03 	andeq	r0, r0, r3, lsl #28
     9e8:	03001603 	movweq	r1, #1539	; 0x603
     9ec:	3b0b3a08 	blcc	2cf214 <__Stack_Size+0x2cee14>
     9f0:	0013490b 	andseq	r4, r3, fp, lsl #18
     9f4:	00350400 	eorseq	r0, r5, r0, lsl #8
     9f8:	00001349 	andeq	r1, r0, r9, asr #6
     9fc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     a00:	06000013 	undefined
     a04:	0b0b0104 	bleq	2c0e1c <__Stack_Size+0x2c0a1c>
     a08:	0b3b0b3a 	bleq	ec36f8 <__Stack_Size+0xec32f8>
     a0c:	00001301 	andeq	r1, r0, r1, lsl #6
     a10:	03002807 	movweq	r2, #2055	; 0x807
     a14:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     a18:	00280800 	eoreq	r0, r8, r0, lsl #16
     a1c:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     a20:	16090000 	strne	r0, [r9], -r0
     a24:	3a0e0300 	bcc	38162c <__Stack_Size+0x38122c>
     a28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a2c:	0a000013 	beq	a80 <__Stack_Size+0x680>
     a30:	0b0b0024 	bleq	2c0ac8 <__Stack_Size+0x2c06c8>
     a34:	00000b3e 	andeq	r0, r0, lr, lsr fp
     a38:	0b01130b 	bleq	4566c <__Stack_Size+0x4526c>
     a3c:	3b0b3a05 	blcc	2cf258 <__Stack_Size+0x2cee58>
     a40:	00130105 	andseq	r0, r3, r5, lsl #2
     a44:	000d0c00 	andeq	r0, sp, r0, lsl #24
     a48:	0b3a0e03 	bleq	e8425c <__Stack_Size+0xe83e5c>
     a4c:	1349053b 	movtne	r0, #38203	; 0x953b
     a50:	00000a38 	andeq	r0, r0, r8, lsr sl
     a54:	03000d0d 	movweq	r0, #3341	; 0xd0d
     a58:	3b0b3a08 	blcc	2cf280 <__Stack_Size+0x2cee80>
     a5c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     a60:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     a64:	13490101 	movtne	r0, #37121	; 0x9101
     a68:	00001301 	andeq	r1, r0, r1, lsl #6
     a6c:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     a70:	000b2f13 	andeq	r2, fp, r3, lsl pc
     a74:	01131000 	tsteq	r3, r0
     a78:	0b3a0b0b 	bleq	e836ac <__Stack_Size+0xe832ac>
     a7c:	1301053b 	movwne	r0, #5435	; 0x153b
     a80:	13110000 	tstne	r1, #0	; 0x0
     a84:	3a0b0b01 	bcc	2c3690 <__Stack_Size+0x2c3290>
     a88:	010b3b0b 	tsteq	fp, fp, lsl #22
     a8c:	12000013 	andne	r0, r0, #19	; 0x13
     a90:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a94:	0b3b0b3a 	bleq	ec3784 <__Stack_Size+0xec3384>
     a98:	0a381349 	beq	e057c4 <__Stack_Size+0xe053c4>
     a9c:	2e130000 	wxorcs	wr0, wr3, wr0
     aa0:	030c3f01 	movweq	r3, #52993	; 0xcf01
     aa4:	3b0b3a0e 	blcc	2cf2e4 <__Stack_Size+0x2ceee4>
     aa8:	110c270b 	tstne	ip, fp, lsl #14
     aac:	40011201 	andmi	r1, r1, r1, lsl #4
     ab0:	0013010a 	andseq	r0, r3, sl, lsl #2
     ab4:	00341400 	eorseq	r1, r4, r0, lsl #8
     ab8:	0b3a0e03 	bleq	e842cc <__Stack_Size+0xe83ecc>
     abc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ac0:	00000a02 	andeq	r0, r0, r2, lsl #20
     ac4:	03003415 	movweq	r3, #1045	; 0x415
     ac8:	3b0b3a0e 	blcc	2cf308 <__Stack_Size+0x2cef08>
     acc:	0013490b 	andseq	r4, r3, fp, lsl #18
     ad0:	00051600 	andeq	r1, r5, r0, lsl #12
     ad4:	0b3a0e03 	bleq	e842e8 <__Stack_Size+0xe83ee8>
     ad8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     adc:	00000602 	andeq	r0, r0, r2, lsl #12
     ae0:	3f012e17 	svccc	0x00012e17
     ae4:	3a0e030c 	bcc	38171c <__Stack_Size+0x38131c>
     ae8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     aec:	1201110c 	andne	r1, r1, #3	; 0x3
     af0:	01064001 	tsteq	r6, r1
     af4:	18000013 	stmdane	r0, {r0, r1, r4}
     af8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     afc:	0b3b0b3a 	bleq	ec37ec <__Stack_Size+0xec33ec>
     b00:	06021349 	streq	r1, [r2], -r9, asr #6
     b04:	0f190000 	svceq	0x00190000
     b08:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     b0c:	1a000013 	bne	b60 <__Stack_Size+0x760>
     b10:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b14:	0b3b0b3a 	bleq	ec3804 <__Stack_Size+0xec3404>
     b18:	0a021349 	beq	85844 <__Stack_Size+0x85444>
     b1c:	2e1b0000 	wxorcs	wr0, wr11, wr0
     b20:	030c3f00 	movweq	r3, #52992	; 0xcf00
     b24:	3b0b3a0e 	blcc	2cf364 <__Stack_Size+0x2cef64>
     b28:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     b2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b30:	000a4001 	andeq	r4, sl, r1
     b34:	012e1c00 	teqeq	lr, r0, lsl #24
     b38:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     b40:	13490c27 	movtne	r0, #39975	; 0x9c27
     b44:	01120111 	tsteq	r2, r1, lsl r1
     b48:	13010a40 	movwne	r0, #6720	; 0x1a40
     b4c:	051d0000 	ldreq	r0, [sp]
     b50:	3a0e0300 	bcc	381758 <__Stack_Size+0x381358>
     b54:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b58:	00060213 	andeq	r0, r6, r3, lsl r2
     b5c:	00341e00 	eorseq	r1, r4, r0, lsl #28
     b60:	0b3a0e03 	bleq	e84374 <__Stack_Size+0xe83f74>
     b64:	1349053b 	movtne	r0, #38203	; 0x953b
     b68:	341f0000 	ldrcc	r0, [pc], #0	; b70 <__Stack_Size+0x770>
     b6c:	3a080300 	bcc	201774 <__Stack_Size+0x201374>
     b70:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b74:	000a0213 	andeq	r0, sl, r3, lsl r2
     b78:	012e2000 	teqeq	lr, r0
     b7c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b80:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     b84:	01110c27 	tsteq	r1, r7, lsr #24
     b88:	0a400112 	beq	1000fd8 <__Stack_Size+0x1000bd8>
     b8c:	00001301 	andeq	r1, r0, r1, lsl #6
     b90:	03000521 	movweq	r0, #1313	; 0x521
     b94:	3b0b3a0e 	blcc	2cf3d4 <__Stack_Size+0x2cefd4>
     b98:	02134905 	andseq	r4, r3, #81920	; 0x14000
     b9c:	2200000a 	andcs	r0, r0, #10	; 0xa
     ba0:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     ba4:	0b3a0e03 	bleq	e843b8 <__Stack_Size+0xe83fb8>
     ba8:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     bac:	01120111 	tsteq	r2, r1, lsl r1
     bb0:	00000a40 	andeq	r0, r0, r0, asr #20
     bb4:	03003423 	movweq	r3, #1059	; 0x423
     bb8:	3b0b3a0e 	blcc	2cf3f8 <__Stack_Size+0x2ceff8>
     bbc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     bc0:	2400000a 	strcs	r0, [r0], #-10
     bc4:	0c3f012e 	ldfeqs	f0, [pc], #-184
     bc8:	0b3a0e03 	bleq	e843dc <__Stack_Size+0xe83fdc>
     bcc:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     bd0:	01120111 	tsteq	r2, r1, lsl r1
     bd4:	13010640 	movwne	r0, #5696	; 0x1640
     bd8:	34250000 	strtcc	r0, [r5]
     bdc:	3a0e0300 	bcc	3817e4 <__Stack_Size+0x3813e4>
     be0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     be4:	00060213 	andeq	r0, r6, r3, lsl r2
     be8:	00342600 	eorseq	r2, r4, r0, lsl #12
     bec:	0b3a0803 	bleq	e82c00 <__Stack_Size+0xe82800>
     bf0:	1349053b 	movtne	r0, #38203	; 0x953b
     bf4:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     bf8:	030c3f00 	movweq	r3, #52992	; 0xcf00
     bfc:	3b0b3a0e 	blcc	2cf43c <__Stack_Size+0x2cf03c>
     c00:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     c04:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c08:	00064001 	andeq	r4, r6, r1
     c0c:	002e2800 	eoreq	r2, lr, r0, lsl #16
     c10:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     c14:	0b3b0b3a 	bleq	ec3904 <__Stack_Size+0xec3504>
     c18:	01110c27 	tsteq	r1, r7, lsr #24
     c1c:	06400112 	undefined
     c20:	01000000 	tsteq	r0, r0
     c24:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     c28:	0e030b13 	vmoveq.32	d3[0], r0
     c2c:	01110e1b 	tsteq	r1, fp, lsl lr
     c30:	06100112 	undefined
     c34:	24020000 	strcs	r0, [r2]
     c38:	3e0b0b00 	fmacdcc	d0, d11, d0
     c3c:	000e030b 	andeq	r0, lr, fp, lsl #6
     c40:	00160300 	andseq	r0, r6, r0, lsl #6
     c44:	0b3a0803 	bleq	e82c58 <__Stack_Size+0xe82858>
     c48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c4c:	35040000 	strcc	r0, [r4]
     c50:	00134900 	andseq	r4, r3, r0, lsl #18
     c54:	01040500 	tsteq	r4, r0, lsl #10
     c58:	0b3a0b0b 	bleq	e8388c <__Stack_Size+0xe8348c>
     c5c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     c60:	28060000 	stmdacs	r6, {}
     c64:	1c0e0300 	stcne	3, cr0, [lr], {0}
     c68:	0700000d 	streq	r0, [r0, -sp]
     c6c:	08030028 	stmdaeq	r3, {r3, r5}
     c70:	00000d1c 	andeq	r0, r0, ip, lsl sp
     c74:	03001608 	movweq	r1, #1544	; 0x608
     c78:	3b0b3a0e 	blcc	2cf4b8 <__Stack_Size+0x2cf0b8>
     c7c:	0013490b 	andseq	r4, r3, fp, lsl #18
     c80:	00240900 	eoreq	r0, r4, r0, lsl #18
     c84:	0b3e0b0b 	bleq	f838b8 <__Stack_Size+0xf834b8>
     c88:	130a0000 	movwne	r0, #40960	; 0xa000
     c8c:	3a0b0b01 	bcc	2c3898 <__Stack_Size+0x2c3498>
     c90:	01053b0b 	tsteq	r5, fp, lsl #22
     c94:	0b000013 	bleq	ce8 <__Stack_Size+0x8e8>
     c98:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     c9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     ca0:	0a381349 	beq	e059cc <__Stack_Size+0xe055cc>
     ca4:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     ca8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     cac:	3b0b3a0e 	blcc	2cf4ec <__Stack_Size+0x2cf0ec>
     cb0:	110c270b 	tstne	ip, fp, lsl #14
     cb4:	40011201 	andmi	r1, r1, r1, lsl #4
     cb8:	0013010a 	andseq	r0, r3, sl, lsl #2
     cbc:	00050d00 	andeq	r0, r5, r0, lsl #26
     cc0:	0b3a0e03 	bleq	e844d4 <__Stack_Size+0xe840d4>
     cc4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cc8:	00000a02 	andeq	r0, r0, r2, lsl #20
     ccc:	0300050e 	movweq	r0, #1294	; 0x50e
     cd0:	3b0b3a0e 	blcc	2cf510 <__Stack_Size+0x2cf110>
     cd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cd8:	0f000006 	svceq	0x00000006
     cdc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ce0:	0b3b0b3a 	bleq	ec39d0 <__Stack_Size+0xec35d0>
     ce4:	06021349 	streq	r1, [r2], -r9, asr #6
     ce8:	2e100000 	wxorcs	wr0, wr0, wr0
     cec:	030c3f01 	movweq	r3, #52993	; 0xcf01
     cf0:	3b0b3a0e 	blcc	2cf530 <__Stack_Size+0x2cf130>
     cf4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     cf8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cfc:	010a4001 	tsteq	sl, r1
     d00:	11000013 	tstne	r0, r3, lsl r0
     d04:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d08:	0b3b0b3a 	bleq	ec39f8 <__Stack_Size+0xec35f8>
     d0c:	00001349 	andeq	r1, r0, r9, asr #6
     d10:	3f012e12 	svccc	0x00012e12
     d14:	3a0e030c 	bcc	38194c <__Stack_Size+0x38154c>
     d18:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     d1c:	1201110c 	andne	r1, r1, #3	; 0x3
     d20:	010a4001 	tsteq	sl, r1
     d24:	13000013 	movwne	r0, #19	; 0x13
     d28:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     d30:	0a021349 	beq	85a5c <__Stack_Size+0x8565c>
     d34:	2e140000 	wxorcs	wr0, wr4, wr0
     d38:	030c3f00 	movweq	r3, #52992	; 0xcf00
     d3c:	3b0b3a0e 	blcc	2cf57c <__Stack_Size+0x2cf17c>
     d40:	110c270b 	tstne	ip, fp, lsl #14
     d44:	40011201 	andmi	r1, r1, r1, lsl #4
     d48:	15000006 	strne	r0, [r0, #-6]
     d4c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     d50:	0b3a0e03 	bleq	e84564 <__Stack_Size+0xe84164>
     d54:	0c270b3b 	stceq	11, cr0, [r7], #-236
     d58:	01120111 	tsteq	r2, r1, lsl r1
     d5c:	13010640 	movwne	r0, #5696	; 0x1640
     d60:	01000000 	tsteq	r0, r0
     d64:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     d68:	0e030b13 	vmoveq.32	d3[0], r0
     d6c:	01110e1b 	tsteq	r1, fp, lsl lr
     d70:	06100112 	undefined
     d74:	24020000 	strcs	r0, [r2]
     d78:	3e0b0b00 	fmacdcc	d0, d11, d0
     d7c:	000e030b 	andeq	r0, lr, fp, lsl #6
     d80:	00160300 	andseq	r0, r6, r0, lsl #6
     d84:	0b3a0803 	bleq	e82d98 <__Stack_Size+0xe82998>
     d88:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d8c:	35040000 	strcc	r0, [r4]
     d90:	00134900 	andseq	r4, r3, r0, lsl #18
     d94:	01040500 	tsteq	r4, r0, lsl #10
     d98:	0b3a0b0b 	bleq	e839cc <__Stack_Size+0xe835cc>
     d9c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     da0:	28060000 	stmdacs	r6, {}
     da4:	1c0e0300 	stcne	3, cr0, [lr], {0}
     da8:	0700000d 	streq	r0, [r0, -sp]
     dac:	08030028 	stmdaeq	r3, {r3, r5}
     db0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     db4:	03001608 	movweq	r1, #1544	; 0x608
     db8:	3b0b3a0e 	blcc	2cf5f8 <__Stack_Size+0x2cf1f8>
     dbc:	0013490b 	andseq	r4, r3, fp, lsl #18
     dc0:	00240900 	eoreq	r0, r4, r0, lsl #18
     dc4:	0b3e0b0b 	bleq	f839f8 <__Stack_Size+0xf835f8>
     dc8:	130a0000 	movwne	r0, #40960	; 0xa000
     dcc:	3a0b0b01 	bcc	2c39d8 <__Stack_Size+0x2c35d8>
     dd0:	01053b0b 	tsteq	r5, fp, lsl #22
     dd4:	0b000013 	bleq	e28 <__Stack_Size+0xa28>
     dd8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ddc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     de0:	0a381349 	beq	e05b0c <__Stack_Size+0xe0570c>
     de4:	0d0c0000 	stceq	0, cr0, [ip]
     de8:	3a0e0300 	bcc	3819f0 <__Stack_Size+0x3815f0>
     dec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     df0:	000a3813 	andeq	r3, sl, r3, lsl r8
     df4:	01130d00 	tsteq	r3, r0, lsl #26
     df8:	0b3a0b0b 	bleq	e83a2c <__Stack_Size+0xe8362c>
     dfc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     e00:	0d0e0000 	stceq	0, cr0, [lr]
     e04:	3a0e0300 	bcc	381a0c <__Stack_Size+0x38160c>
     e08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e0c:	000a3813 	andeq	r3, sl, r3, lsl r8
     e10:	012e0f00 	teqeq	lr, r0, lsl #30
     e14:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e18:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     e1c:	13490c27 	movtne	r0, #39975	; 0x9c27
     e20:	13010b20 	movwne	r0, #6944	; 0x1b20
     e24:	05100000 	ldreq	r0, [r0]
     e28:	3a0e0300 	bcc	381a30 <__Stack_Size+0x381630>
     e2c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e30:	11000013 	tstne	r0, r3, lsl r0
     e34:	08030034 	stmdaeq	r3, {r2, r4, r5}
     e38:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     e3c:	00001349 	andeq	r1, r0, r9, asr #6
     e40:	03003412 	movweq	r3, #1042	; 0x412
     e44:	3b0b3a0e 	blcc	2cf684 <__Stack_Size+0x2cf284>
     e48:	00134905 	andseq	r4, r3, r5, lsl #18
     e4c:	002e1300 	eoreq	r1, lr, r0, lsl #6
     e50:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e54:	0b3b0b3a 	bleq	ec3b44 <__Stack_Size+0xec3744>
     e58:	01110c27 	tsteq	r1, r7, lsr #24
     e5c:	0a400112 	beq	10012ac <__Stack_Size+0x1000eac>
     e60:	2e140000 	wxorcs	wr0, wr4, wr0
     e64:	030c3f01 	movweq	r3, #52993	; 0xcf01
     e68:	3b0b3a0e 	blcc	2cf6a8 <__Stack_Size+0x2cf2a8>
     e6c:	110c270b 	tstne	ip, fp, lsl #14
     e70:	40011201 	andmi	r1, r1, r1, lsl #4
     e74:	0013010a 	andseq	r0, r3, sl, lsl #2
     e78:	00051500 	andeq	r1, r5, r0, lsl #10
     e7c:	0b3a0e03 	bleq	e84690 <__Stack_Size+0xe84290>
     e80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e84:	00000a02 	andeq	r0, r0, r2, lsl #20
     e88:	3f012e16 	svccc	0x00012e16
     e8c:	3a0e030c 	bcc	381ac4 <__Stack_Size+0x3816c4>
     e90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e94:	1113490c 	tstne	r3, ip, lsl #18
     e98:	40011201 	andmi	r1, r1, r1, lsl #4
     e9c:	00130106 	andseq	r0, r3, r6, lsl #2
     ea0:	00341700 	eorseq	r1, r4, r0, lsl #14
     ea4:	0b3a0e03 	bleq	e846b8 <__Stack_Size+0xe842b8>
     ea8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     eac:	00000602 	andeq	r0, r0, r2, lsl #12
     eb0:	03003418 	movweq	r3, #1048	; 0x418
     eb4:	3b0b3a0e 	blcc	2cf6f4 <__Stack_Size+0x2cf2f4>
     eb8:	0013490b 	andseq	r4, r3, fp, lsl #18
     ebc:	011d1900 	tsteq	sp, r0, lsl #18
     ec0:	01521331 	cmpeq	r2, r1, lsr r3
     ec4:	0b580655 	bleq	1602820 <__Stack_Size+0x1602420>
     ec8:	13010b59 	movwne	r0, #7001	; 0x1b59
     ecc:	051a0000 	ldreq	r0, [sl]
     ed0:	00133100 	andseq	r3, r3, r0, lsl #2
     ed4:	010b1b00 	tsteq	fp, r0, lsl #22
     ed8:	00000655 	andeq	r0, r0, r5, asr r6
     edc:	3100341c 	tstcc	r0, ip, lsl r4
     ee0:	1d000013 	stcne	0, cr0, [r0, #-76]
     ee4:	13310034 	teqne	r1, #52	; 0x34
     ee8:	00000a02 	andeq	r0, r0, r2, lsl #20
     eec:	31011d1e 	tstcc	r1, lr, lsl sp
     ef0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ef4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     ef8:	1f00000b 	svcne	0x0000000b
     efc:	0111010b 	tsteq	r1, fp, lsl #2
     f00:	00000112 	andeq	r0, r0, r2, lsl r1
     f04:	31003420 	tstcc	r0, r0, lsr #8
     f08:	00060213 	andeq	r0, r6, r3, lsl r2
     f0c:	00342100 	eorseq	r2, r4, r0, lsl #2
     f10:	0b3a0e03 	bleq	e84724 <__Stack_Size+0xe84324>
     f14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f18:	00000a02 	andeq	r0, r0, r2, lsl #20
     f1c:	3f012e22 	svccc	0x00012e22
     f20:	3a0e030c 	bcc	381b58 <__Stack_Size+0x381758>
     f24:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     f28:	1201110c 	andne	r1, r1, #3	; 0x3
     f2c:	010a4001 	tsteq	sl, r1
     f30:	23000013 	movwcs	r0, #19	; 0x13
     f34:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f38:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     f3c:	0a021349 	beq	85c68 <__Stack_Size+0x85868>
     f40:	05240000 	streq	r0, [r4]!
     f44:	3a0e0300 	bcc	381b4c <__Stack_Size+0x38174c>
     f48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f4c:	00060213 	andeq	r0, r6, r3, lsl r2
     f50:	00342500 	eorseq	r2, r4, r0, lsl #10
     f54:	0b3a0e03 	bleq	e84768 <__Stack_Size+0xe84368>
     f58:	1349053b 	movtne	r0, #38203	; 0x953b
     f5c:	00000602 	andeq	r0, r0, r2, lsl #12
     f60:	3f002e26 	svccc	0x00002e26
     f64:	3a0e030c 	bcc	381b9c <__Stack_Size+0x38179c>
     f68:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     f6c:	1113490c 	tstne	r3, ip, lsl #18
     f70:	40011201 	andmi	r1, r1, r1, lsl #4
     f74:	2700000a 	strcs	r0, [r0, -sl]
     f78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     f80:	0a021349 	beq	85cac <__Stack_Size+0x858ac>
     f84:	34280000 	strtcc	r0, [r8]
     f88:	3a080300 	bcc	201b90 <__Stack_Size+0x201790>
     f8c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f90:	00060213 	andeq	r0, r6, r3, lsl r2
     f94:	000f2900 	andeq	r2, pc, r0, lsl #18
     f98:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f9c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     fa0:	11133101 	tstne	r3, r1, lsl #2
     fa4:	40011201 	andmi	r1, r1, r1, lsl #4
     fa8:	0013010a 	andseq	r0, r3, sl, lsl #2
     fac:	00052b00 	andeq	r2, r5, r0, lsl #22
     fb0:	06021331 	undefined
     fb4:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     fb8:	030c3f00 	movweq	r3, #52992	; 0xcf00
     fbc:	3b0b3a0e 	blcc	2cf7fc <__Stack_Size+0x2cf3fc>
     fc0:	110c2705 	tstne	ip, r5, lsl #14
     fc4:	40011201 	andmi	r1, r1, r1, lsl #4
     fc8:	2d00000a 	stccs	0, cr0, [r0, #-40]
     fcc:	0c3f012e 	ldfeqs	f0, [pc], #-184
     fd0:	0b3a0e03 	bleq	e847e4 <__Stack_Size+0xe843e4>
     fd4:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     fd8:	01111349 	tsteq	r1, r9, asr #6
     fdc:	0a400112 	beq	100142c <__Stack_Size+0x100102c>
     fe0:	00001301 	andeq	r1, r0, r1, lsl #6
     fe4:	4901012e 	stmdbmi	r1, {r1, r2, r3, r5, r8}
     fe8:	00130113 	andseq	r0, r3, r3, lsl r1
     fec:	00212f00 	eoreq	r2, r1, r0, lsl #30
     ff0:	0b2f1349 	bleq	bc5d1c <__Stack_Size+0xbc591c>
     ff4:	26300000 	ldrtcs	r0, [r0], -r0
     ff8:	00134900 	andseq	r4, r3, r0, lsl #18
     ffc:	11010000 	tstne	r1, r0
    1000:	130e2501 	movwne	r2, #58625	; 0xe501
    1004:	1b0e030b 	blne	381c38 <__Stack_Size+0x381838>
    1008:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    100c:	00061001 	andeq	r1, r6, r1
    1010:	00240200 	eoreq	r0, r4, r0, lsl #4
    1014:	0b3e0b0b 	bleq	f83c48 <__Stack_Size+0xf83848>
    1018:	00000e03 	andeq	r0, r0, r3, lsl #28
    101c:	03001603 	movweq	r1, #1539	; 0x603
    1020:	3b0b3a08 	blcc	2cf848 <__Stack_Size+0x2cf448>
    1024:	0013490b 	andseq	r4, r3, fp, lsl #18
    1028:	00350400 	eorseq	r0, r5, r0, lsl #8
    102c:	00001349 	andeq	r1, r0, r9, asr #6
    1030:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    1034:	06000013 	undefined
    1038:	0b0b0104 	bleq	2c1450 <__Stack_Size+0x2c1050>
    103c:	0b3b0b3a 	bleq	ec3d2c <__Stack_Size+0xec392c>
    1040:	00001301 	andeq	r1, r0, r1, lsl #6
    1044:	03002807 	movweq	r2, #2055	; 0x807
    1048:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    104c:	00280800 	eoreq	r0, r8, r0, lsl #16
    1050:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1054:	16090000 	strne	r0, [r9], -r0
    1058:	3a0e0300 	bcc	381c60 <__Stack_Size+0x381860>
    105c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1060:	0a000013 	beq	10b4 <__Stack_Size+0xcb4>
    1064:	0b0b0024 	bleq	2c10fc <__Stack_Size+0x2c0cfc>
    1068:	00000b3e 	andeq	r0, r0, lr, lsr fp
    106c:	0b01130b 	bleq	45ca0 <__Stack_Size+0x458a0>
    1070:	3b0b3a0b 	blcc	2cf8a4 <__Stack_Size+0x2cf4a4>
    1074:	00130105 	andseq	r0, r3, r5, lsl #2
    1078:	000d0c00 	andeq	r0, sp, r0, lsl #24
    107c:	0b3a0e03 	bleq	e84890 <__Stack_Size+0xe84490>
    1080:	1349053b 	movtne	r0, #38203	; 0x953b
    1084:	00000a38 	andeq	r0, r0, r8, lsr sl
    1088:	03000d0d 	movweq	r0, #3341	; 0xd0d
    108c:	3b0b3a08 	blcc	2cf8b4 <__Stack_Size+0x2cf4b4>
    1090:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1094:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1098:	0c3f012e 	ldfeqs	f0, [pc], #-184
    109c:	0b3a0e03 	bleq	e848b0 <__Stack_Size+0xe844b0>
    10a0:	0c270b3b 	stceq	11, cr0, [r7], #-236
    10a4:	01120111 	tsteq	r2, r1, lsl r1
    10a8:	13010a40 	movwne	r0, #6720	; 0x1a40
    10ac:	050f0000 	streq	r0, [pc, #0]	; 10b4 <__Stack_Size+0xcb4>
    10b0:	3a0e0300 	bcc	381cb8 <__Stack_Size+0x3818b8>
    10b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10b8:	000a0213 	andeq	r0, sl, r3, lsl r2
    10bc:	002e1000 	eoreq	r1, lr, r0
    10c0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    10c4:	0b3b0b3a 	bleq	ec3db4 <__Stack_Size+0xec39b4>
    10c8:	13490c27 	movtne	r0, #39975	; 0x9c27
    10cc:	01120111 	tsteq	r2, r1, lsl r1
    10d0:	00000a40 	andeq	r0, r0, r0, asr #20
    10d4:	3f012e11 	svccc	0x00012e11
    10d8:	3a0e030c 	bcc	381d10 <__Stack_Size+0x381910>
    10dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10e0:	1113490c 	tstne	r3, ip, lsl #18
    10e4:	40011201 	andmi	r1, r1, r1, lsl #4
    10e8:	1200000a 	andne	r0, r0, #10	; 0xa
    10ec:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10f0:	0b3b0b3a 	bleq	ec3de0 <__Stack_Size+0xec39e0>
    10f4:	06021349 	streq	r1, [r2], -r9, asr #6
    10f8:	34130000 	ldrcc	r0, [r3]
    10fc:	3a0e0300 	bcc	381d04 <__Stack_Size+0x381904>
    1100:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1104:	00060213 	andeq	r0, r6, r3, lsl r2
    1108:	00341400 	eorseq	r1, r4, r0, lsl #8
    110c:	0b3a0803 	bleq	e83120 <__Stack_Size+0xe82d20>
    1110:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1114:	34150000 	ldrcc	r0, [r5]
    1118:	3a0e0300 	bcc	381d20 <__Stack_Size+0x381920>
    111c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1120:	00000013 	andeq	r0, r0, r3, lsl r0
    1124:	25011101 	strcs	r1, [r1, #-257]
    1128:	030b130e 	movweq	r1, #45838	; 0xb30e
    112c:	110e1b0e 	tstne	lr, lr, lsl #22
    1130:	10011201 	andne	r1, r1, r1, lsl #4
    1134:	02000006 	andeq	r0, r0, #6	; 0x6
    1138:	0b0b0024 	bleq	2c11d0 <__Stack_Size+0x2c0dd0>
    113c:	0e030b3e 	vmoveq.16	d3[0], r0
    1140:	16030000 	strne	r0, [r3], -r0
    1144:	3a080300 	bcc	201d4c <__Stack_Size+0x20194c>
    1148:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    114c:	04000013 	streq	r0, [r0], #-19
    1150:	13490035 	movtne	r0, #36917	; 0x9035
    1154:	04050000 	streq	r0, [r5]
    1158:	3a0b0b01 	bcc	2c3d64 <__Stack_Size+0x2c3964>
    115c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1160:	06000013 	undefined
    1164:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1168:	00000d1c 	andeq	r0, r0, ip, lsl sp
    116c:	03002807 	movweq	r2, #2055	; 0x807
    1170:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1174:	00160800 	andseq	r0, r6, r0, lsl #16
    1178:	0b3a0e03 	bleq	e8498c <__Stack_Size+0xe8458c>
    117c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1180:	24090000 	strcs	r0, [r9]
    1184:	3e0b0b00 	fmacdcc	d0, d11, d0
    1188:	0a00000b 	beq	11bc <__Stack_Size+0xdbc>
    118c:	0b0b0113 	bleq	2c15e0 <__Stack_Size+0x2c11e0>
    1190:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1194:	00001301 	andeq	r1, r0, r1, lsl #6
    1198:	03000d0b 	movweq	r0, #3339	; 0xd0b
    119c:	3b0b3a08 	blcc	2cf9c4 <__Stack_Size+0x2cf5c4>
    11a0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    11a4:	0c00000a 	stceq	0, cr0, [r0], {10}
    11a8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    11ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    11b0:	0a381349 	beq	e05edc <__Stack_Size+0xe05adc>
    11b4:	160d0000 	strne	r0, [sp], -r0
    11b8:	3a0e0300 	bcc	381dc0 <__Stack_Size+0x3819c0>
    11bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11c0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    11c4:	0b0b0113 	bleq	2c1618 <__Stack_Size+0x2c1218>
    11c8:	0b3b0b3a 	bleq	ec3eb8 <__Stack_Size+0xec3ab8>
    11cc:	00001301 	andeq	r1, r0, r1, lsl #6
    11d0:	03000d0f 	movweq	r0, #3343	; 0xd0f
    11d4:	3b0b3a0e 	blcc	2cfa14 <__Stack_Size+0x2cf614>
    11d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    11dc:	1000000a 	andne	r0, r0, sl
    11e0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    11e4:	0b3a0e03 	bleq	e849f8 <__Stack_Size+0xe845f8>
    11e8:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    11ec:	13010b20 	movwne	r0, #6944	; 0x1b20
    11f0:	05110000 	ldreq	r0, [r1]
    11f4:	3a0e0300 	bcc	381dfc <__Stack_Size+0x3819fc>
    11f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11fc:	12000013 	andne	r0, r0, #19	; 0x13
    1200:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1204:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1208:	00001349 	andeq	r1, r0, r9, asr #6
    120c:	0b000f13 	bleq	4e60 <__Stack_Size+0x4a60>
    1210:	0013490b 	andseq	r4, r3, fp, lsl #18
    1214:	012e1400 	teqeq	lr, r0, lsl #8
    1218:	0b3a0e03 	bleq	e84a2c <__Stack_Size+0xe8462c>
    121c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1220:	13010b20 	movwne	r0, #6944	; 0x1b20
    1224:	34150000 	ldrcc	r0, [r5]
    1228:	3a080300 	bcc	201e30 <__Stack_Size+0x201a30>
    122c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1230:	16000013 	undefined
    1234:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1238:	0b3a0e03 	bleq	e84a4c <__Stack_Size+0xe8464c>
    123c:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1240:	01120111 	tsteq	r2, r1, lsl r1
    1244:	13010640 	movwne	r0, #5696	; 0x1640
    1248:	05170000 	ldreq	r0, [r7]
    124c:	3a0e0300 	bcc	381e54 <__Stack_Size+0x381a54>
    1250:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1254:	00060213 	andeq	r0, r6, r3, lsl r2
    1258:	00341800 	eorseq	r1, r4, r0, lsl #16
    125c:	0b3a0e03 	bleq	e84a70 <__Stack_Size+0xe84670>
    1260:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1264:	00000602 	andeq	r0, r0, r2, lsl #12
    1268:	3f012e19 	svccc	0x00012e19
    126c:	3a0e030c 	bcc	381ea4 <__Stack_Size+0x381aa4>
    1270:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1274:	1201110c 	andne	r1, r1, #3	; 0x3
    1278:	01064001 	tsteq	r6, r1
    127c:	1a000013 	bne	12d0 <__Stack_Size+0xed0>
    1280:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1284:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1288:	06021349 	streq	r1, [r2], -r9, asr #6
    128c:	341b0000 	ldrcc	r0, [fp]
    1290:	3a0e0300 	bcc	381e98 <__Stack_Size+0x381a98>
    1294:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1298:	00060213 	andeq	r0, r6, r3, lsl r2
    129c:	011d1c00 	tsteq	sp, r0, lsl #24
    12a0:	06551331 	undefined
    12a4:	05590b58 	ldrbeq	r0, [r9, #-2904]
    12a8:	00001301 	andeq	r1, r0, r1, lsl #6
    12ac:	3100051d 	tstcc	r0, sp, lsl r5
    12b0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    12b4:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    12b8:	341f0000 	ldrcc	r0, [pc], #0	; 12c0 <__Stack_Size+0xec0>
    12bc:	02133100 	andseq	r3, r3, #0	; 0x0
    12c0:	20000006 	andcs	r0, r0, r6
    12c4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    12c8:	06550152 	undefined
    12cc:	05590b58 	ldrbeq	r0, [r9, #-2904]
    12d0:	00001301 	andeq	r1, r0, r1, lsl #6
    12d4:	31003421 	tstcc	r0, r1, lsr #8
    12d8:	22000013 	andcs	r0, r0, #19	; 0x13
    12dc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    12e0:	01120111 	tsteq	r2, r1, lsl r1
    12e4:	05590b58 	ldrbeq	r0, [r9, #-2904]
    12e8:	00001301 	andeq	r1, r0, r1, lsl #6
    12ec:	11010b23 	tstne	r1, r3, lsr #22
    12f0:	00011201 	andeq	r1, r1, r1, lsl #4
    12f4:	011d2400 	tsteq	sp, r0, lsl #8
    12f8:	01521331 	cmpeq	r2, r1, lsr r3
    12fc:	0b580655 	bleq	1602c58 <__Stack_Size+0x1602858>
    1300:	00000559 	andeq	r0, r0, r9, asr r5
    1304:	03000525 	movweq	r0, #1317	; 0x525
    1308:	3b0b3a0e 	blcc	2cfb48 <__Stack_Size+0x2cf748>
    130c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1310:	2600000a 	strcs	r0, [r0], -sl
    1314:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1318:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    131c:	0a021349 	beq	86048 <__Stack_Size+0x85c48>
    1320:	34270000 	strtcc	r0, [r7]
    1324:	02133100 	andseq	r3, r3, #0	; 0x0
    1328:	2800000a 	stmdacs	r0, {r1, r3}
    132c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1330:	01120111 	tsteq	r2, r1, lsl r1
    1334:	05590b58 	ldrbeq	r0, [r9, #-2904]
    1338:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
    133c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1340:	3b0b3a0e 	blcc	2cfb80 <__Stack_Size+0x2cf780>
    1344:	110c2705 	tstne	ip, r5, lsl #14
    1348:	40011201 	andmi	r1, r1, r1, lsl #4
    134c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1350:	012e2a00 	teqeq	lr, r0, lsl #20
    1354:	01111331 	tsteq	r1, r1, lsr r3
    1358:	0a400112 	beq	10017a8 <__Stack_Size+0x10013a8>
    135c:	00001301 	andeq	r1, r0, r1, lsl #6
    1360:	3100052b 	tstcc	r0, fp, lsr #10
    1364:	000a0213 	andeq	r0, sl, r3, lsl r2
    1368:	00052c00 	andeq	r2, r5, r0, lsl #24
    136c:	06021331 	undefined
    1370:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    1374:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1378:	3b0b3a0e 	blcc	2cfbb8 <__Stack_Size+0x2cf7b8>
    137c:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    1380:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1384:	010a4001 	tsteq	sl, r1
    1388:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    138c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1390:	0b3a0e03 	bleq	e84ba4 <__Stack_Size+0xe847a4>
    1394:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1398:	01120111 	tsteq	r2, r1, lsl r1
    139c:	00000640 	andeq	r0, r0, r0, asr #12
    13a0:	01110100 	tsteq	r1, r0, lsl #2
    13a4:	0b130e25 	bleq	4c4c40 <__Stack_Size+0x4c4840>
    13a8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    13ac:	01120111 	tsteq	r2, r1, lsl r1
    13b0:	00000610 	andeq	r0, r0, r0, lsl r6
    13b4:	0b002402 	bleq	a3c4 <__Stack_Size+0x9fc4>
    13b8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13bc:	0300000e 	movweq	r0, #14	; 0xe
    13c0:	08030016 	stmdaeq	r3, {r1, r2, r4}
    13c4:	0b3b0b3a 	bleq	ec40b4 <__Stack_Size+0xec3cb4>
    13c8:	00001349 	andeq	r1, r0, r9, asr #6
    13cc:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    13d0:	05000013 	streq	r0, [r0, #-19]
    13d4:	0b0b0104 	bleq	2c17ec <__Stack_Size+0x2c13ec>
    13d8:	0b3b0b3a 	bleq	ec40c8 <__Stack_Size+0xec3cc8>
    13dc:	00001301 	andeq	r1, r0, r1, lsl #6
    13e0:	03002806 	movweq	r2, #2054	; 0x806
    13e4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    13e8:	00280700 	eoreq	r0, r8, r0, lsl #14
    13ec:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    13f0:	16080000 	strne	r0, [r8], -r0
    13f4:	3a0e0300 	bcc	381ffc <__Stack_Size+0x381bfc>
    13f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13fc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1400:	0b0b0024 	bleq	2c1498 <__Stack_Size+0x2c1098>
    1404:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1408:	0b01130a 	bleq	46038 <__Stack_Size+0x45c38>
    140c:	3b0b3a0b 	blcc	2cfc40 <__Stack_Size+0x2cf840>
    1410:	00130105 	andseq	r0, r3, r5, lsl #2
    1414:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1418:	0b3a0803 	bleq	e8342c <__Stack_Size+0xe8302c>
    141c:	1349053b 	movtne	r0, #38203	; 0x953b
    1420:	00000a38 	andeq	r0, r0, r8, lsr sl
    1424:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1428:	3b0b3a0e 	blcc	2cfc68 <__Stack_Size+0x2cf868>
    142c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1430:	0d00000a 	stceq	0, cr0, [r0, #-40]
    1434:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1438:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    143c:	00001349 	andeq	r1, r0, r9, asr #6
    1440:	0b01130e 	bleq	46080 <__Stack_Size+0x45c80>
    1444:	3b0b3a0b 	blcc	2cfc78 <__Stack_Size+0x2cf878>
    1448:	0013010b 	andseq	r0, r3, fp, lsl #2
    144c:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1450:	0b3a0e03 	bleq	e84c64 <__Stack_Size+0xe84864>
    1454:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1458:	00000a38 	andeq	r0, r0, r8, lsr sl
    145c:	3f012e10 	svccc	0x00012e10
    1460:	3a0e030c 	bcc	382098 <__Stack_Size+0x381c98>
    1464:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1468:	1201110c 	andne	r1, r1, #3	; 0x3
    146c:	010a4001 	tsteq	sl, r1
    1470:	11000013 	tstne	r0, r3, lsl r0
    1474:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1478:	0b3b0b3a 	bleq	ec4168 <__Stack_Size+0xec3d68>
    147c:	0a021349 	beq	861a8 <__Stack_Size+0x85da8>
    1480:	0f120000 	svceq	0x00120000
    1484:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1488:	13000013 	movwne	r0, #19	; 0x13
    148c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1490:	0b3a0e03 	bleq	e84ca4 <__Stack_Size+0xe848a4>
    1494:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1498:	01120111 	tsteq	r2, r1, lsl r1
    149c:	13010a40 	movwne	r0, #6720	; 0x1a40
    14a0:	05140000 	ldreq	r0, [r4]
    14a4:	3a0e0300 	bcc	3820ac <__Stack_Size+0x381cac>
    14a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14ac:	00060213 	andeq	r0, r6, r3, lsl r2
    14b0:	00341500 	eorseq	r1, r4, r0, lsl #10
    14b4:	0b3a0e03 	bleq	e84cc8 <__Stack_Size+0xe848c8>
    14b8:	1349053b 	movtne	r0, #38203	; 0x953b
    14bc:	00000a02 	andeq	r0, r0, r2, lsl #20
    14c0:	03000516 	movweq	r0, #1302	; 0x516
    14c4:	3b0b3a0e 	blcc	2cfd04 <__Stack_Size+0x2cf904>
    14c8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    14cc:	1700000a 	strne	r0, [r0, -sl]
    14d0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    14d4:	0b3a0e03 	bleq	e84ce8 <__Stack_Size+0xe848e8>
    14d8:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    14dc:	01120111 	tsteq	r2, r1, lsl r1
    14e0:	13010640 	movwne	r0, #5696	; 0x1640
    14e4:	05180000 	ldreq	r0, [r8]
    14e8:	3a0e0300 	bcc	3820f0 <__Stack_Size+0x381cf0>
    14ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f0:	00060213 	andeq	r0, r6, r3, lsl r2
    14f4:	00341900 	eorseq	r1, r4, r0, lsl #18
    14f8:	0b3a0e03 	bleq	e84d0c <__Stack_Size+0xe8490c>
    14fc:	1349053b 	movtne	r0, #38203	; 0x953b
    1500:	341a0000 	ldrcc	r0, [sl]
    1504:	3a0e0300 	bcc	38210c <__Stack_Size+0x381d0c>
    1508:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    150c:	00060213 	andeq	r0, r6, r3, lsl r2
    1510:	012e1b00 	teqeq	lr, r0, lsl #22
    1514:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1518:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    151c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1520:	01120111 	tsteq	r2, r1, lsl r1
    1524:	13010a40 	movwne	r0, #6720	; 0x1a40
    1528:	2e1c0000 	wxorcs	wr0, wr12, wr0
    152c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1530:	3b0b3a0e 	blcc	2cfd70 <__Stack_Size+0x2cf970>
    1534:	110c270b 	tstne	ip, fp, lsl #14
    1538:	40011201 	andmi	r1, r1, r1, lsl #4
    153c:	00130106 	andseq	r0, r3, r6, lsl #2
    1540:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1544:	0b3a0e03 	bleq	e84d58 <__Stack_Size+0xe84958>
    1548:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    154c:	00000602 	andeq	r0, r0, r2, lsl #12
    1550:	0300341e 	movweq	r3, #1054	; 0x41e
    1554:	3b0b3a0e 	blcc	2cfd94 <__Stack_Size+0x2cf994>
    1558:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    155c:	1f00000a 	svcne	0x0000000a
    1560:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1564:	0b3b0b3a 	bleq	ec4254 <__Stack_Size+0xec3e54>
    1568:	00001349 	andeq	r1, r0, r9, asr #6
    156c:	3f012e20 	svccc	0x00012e20
    1570:	3a0e030c 	bcc	3821a8 <__Stack_Size+0x381da8>
    1574:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1578:	1201110c 	andne	r1, r1, #3	; 0x3
    157c:	00064001 	andeq	r4, r6, r1
    1580:	11010000 	tstne	r1, r0
    1584:	11061000 	tstne	r6, r0
    1588:	03011201 	movweq	r1, #4609	; 0x1201
    158c:	25081b08 	strcs	r1, [r8, #-2824]
    1590:	00051308 	andeq	r1, r5, r8, lsl #6
    1594:	11010000 	tstne	r1, r0
    1598:	130e2501 	movwne	r2, #58625	; 0xe501
    159c:	1b0e030b 	blne	3821d0 <__Stack_Size+0x381dd0>
    15a0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    15a4:	00061001 	andeq	r1, r6, r1
    15a8:	00240200 	eoreq	r0, r4, r0, lsl #4
    15ac:	0b3e0b0b 	bleq	f841e0 <__Stack_Size+0xf83de0>
    15b0:	00000e03 	andeq	r0, r0, r3, lsl #28
    15b4:	0b002403 	bleq	a5c8 <__Stack_Size+0xa1c8>
    15b8:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    15bc:	012e0400 	teqeq	lr, r0, lsl #8
    15c0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    15c4:	0b3b0b3a 	bleq	ec42b4 <__Stack_Size+0xec3eb4>
    15c8:	01110c27 	tsteq	r1, r7, lsr #24
    15cc:	06400112 	undefined
    15d0:	00001301 	andeq	r1, r0, r1, lsl #6
    15d4:	03003405 	movweq	r3, #1029	; 0x405
    15d8:	3b0b3a0e 	blcc	2cfe18 <__Stack_Size+0x2cfa18>
    15dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    15e0:	00340600 	eorseq	r0, r4, r0, lsl #12
    15e4:	0b3a0e03 	bleq	e84df8 <__Stack_Size+0xe849f8>
    15e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15ec:	00000602 	andeq	r0, r0, r2, lsl #12
    15f0:	0b000f07 	bleq	5214 <__Stack_Size+0x4e14>
    15f4:	0013490b 	andseq	r4, r3, fp, lsl #18
    15f8:	00340800 	eorseq	r0, r4, r0, lsl #16
    15fc:	0b3a0e03 	bleq	e84e10 <__Stack_Size+0xe84a10>
    1600:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1604:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    1608:	34090000 	strcc	r0, [r9]
    160c:	3a0e0300 	bcc	382214 <__Stack_Size+0x381e14>
    1610:	3f0b3b0b 	svccc	0x000b3b0b
    1614:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1618:	01010a00 	tsteq	r1, r0, lsl #20
    161c:	13011349 	movwne	r1, #4937	; 0x1349
    1620:	210b0000 	tstcs	fp, r0
    1624:	2f134900 	svccs	0x00134900
    1628:	0c00000b 	stceq	0, cr0, [r0], {11}
    162c:	0c270015 	stceq	0, cr0, [r7], #-84
    1630:	340d0000 	strcc	r0, [sp]
    1634:	3a0e0300 	bcc	38223c <__Stack_Size+0x381e3c>
    1638:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    163c:	020c3f13 	andeq	r3, ip, #76	; 0x4c
    1640:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1644:	13490026 	movtne	r0, #36902	; 0x9026
    1648:	01000000 	tsteq	r0, r0
    164c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1650:	0e030b13 	vmoveq.32	d3[0], r0
    1654:	01110e1b 	tsteq	r1, fp, lsl lr
    1658:	06100112 	undefined
    165c:	24020000 	strcs	r0, [r2]
    1660:	3e0b0b00 	fmacdcc	d0, d11, d0
    1664:	000e030b 	andeq	r0, lr, fp, lsl #6
    1668:	00240300 	eoreq	r0, r4, r0, lsl #6
    166c:	0b3e0b0b 	bleq	f842a0 <__Stack_Size+0xf83ea0>
    1670:	00000803 	andeq	r0, r0, r3, lsl #16
    1674:	0b002404 	bleq	a68c <__Stack_Size+0xa28c>
    1678:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    167c:	00150500 	andseq	r0, r5, r0, lsl #10
    1680:	00000c27 	andeq	r0, r0, r7, lsr #24
    1684:	0b000f06 	bleq	52a4 <__Stack_Size+0x4ea4>
    1688:	0013490b 	andseq	r4, r3, fp, lsl #18
    168c:	01040700 	tsteq	r4, r0, lsl #14
    1690:	0b0b0e03 	bleq	2c4ea4 <__Stack_Size+0x2c4aa4>
    1694:	0b3b0b3a 	bleq	ec4384 <__Stack_Size+0xec3f84>
    1698:	00001301 	andeq	r1, r0, r1, lsl #6
    169c:	03002808 	movweq	r2, #2056	; 0x808
    16a0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    16a4:	012e0900 	teqeq	lr, r0, lsl #18
    16a8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    16ac:	0b3b0b3a 	bleq	ec439c <__Stack_Size+0xec3f9c>
    16b0:	13490c27 	movtne	r0, #39975	; 0x9c27
    16b4:	01120111 	tsteq	r2, r1, lsl r1
    16b8:	00000640 	andeq	r0, r0, r0, asr #12
    16bc:	0300050a 	movweq	r0, #1290	; 0x50a
    16c0:	3b0b3a08 	blcc	2cfee8 <__Stack_Size+0x2cfae8>
    16c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16c8:	00000006 	andeq	r0, r0, r6
    16cc:	25011101 	strcs	r1, [r1, #-257]
    16d0:	030b130e 	movweq	r1, #45838	; 0xb30e
    16d4:	110e1b0e 	tstne	lr, lr, lsl #22
    16d8:	10011201 	andne	r1, r1, r1, lsl #4
    16dc:	02000006 	andeq	r0, r0, #6	; 0x6
    16e0:	0b0b0024 	bleq	2c1778 <__Stack_Size+0x2c1378>
    16e4:	0e030b3e 	vmoveq.16	d3[0], r0
    16e8:	24030000 	strcs	r0, [r3]
    16ec:	3e0b0b00 	fmacdcc	d0, d11, d0
    16f0:	0008030b 	andeq	r0, r8, fp, lsl #6
    16f4:	00160400 	andseq	r0, r6, r0, lsl #8
    16f8:	0b3a0e03 	bleq	e84f0c <__Stack_Size+0xe84b0c>
    16fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1700:	16050000 	strne	r0, [r5], -r0
    1704:	3a0e0300 	bcc	38230c <__Stack_Size+0x381f0c>
    1708:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    170c:	06000013 	undefined
    1710:	0b0b0117 	bleq	2c1b74 <__Stack_Size+0x2c1774>
    1714:	0b3b0b3a 	bleq	ec4404 <__Stack_Size+0xec4004>
    1718:	00001301 	andeq	r1, r0, r1, lsl #6
    171c:	03000d07 	movweq	r0, #3335	; 0xd07
    1720:	3b0b3a0e 	blcc	2cff60 <__Stack_Size+0x2cfb60>
    1724:	0013490b 	andseq	r4, r3, fp, lsl #18
    1728:	01010800 	tsteq	r1, r0, lsl #16
    172c:	13011349 	movwne	r1, #4937	; 0x1349
    1730:	21090000 	tstcs	r9, r0
    1734:	2f134900 	svccs	0x00134900
    1738:	0a00000b 	beq	176c <__Stack_Size+0x136c>
    173c:	0b0b0024 	bleq	2c17d4 <__Stack_Size+0x2c13d4>
    1740:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1744:	0b01130b 	bleq	46378 <__Stack_Size+0x45f78>
    1748:	3b0b3a0b 	blcc	2cff7c <__Stack_Size+0x2cfb7c>
    174c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1750:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1754:	0b3a0e03 	bleq	e84f68 <__Stack_Size+0xe84b68>
    1758:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    175c:	00000a38 	andeq	r0, r0, r8, lsr sl
    1760:	0b000f0d 	bleq	539c <__Stack_Size+0x4f9c>
    1764:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1768:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    176c:	0b3a0b0b 	bleq	e843a0 <__Stack_Size+0xe83fa0>
    1770:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1774:	0d0f0000 	stceq	0, cr0, [pc]
    1778:	3a080300 	bcc	202380 <__Stack_Size+0x201f80>
    177c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1780:	000a3813 	andeq	r3, sl, r3, lsl r8
    1784:	000f1000 	andeq	r1, pc, r0
    1788:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    178c:	13110000 	tstne	r1, #0	; 0x0
    1790:	0b0e0301 	bleq	38239c <__Stack_Size+0x381f9c>
    1794:	3b0b3a05 	blcc	2cffb0 <__Stack_Size+0x2cfbb0>
    1798:	0013010b 	andseq	r0, r3, fp, lsl #2
    179c:	00151200 	andseq	r1, r5, r0, lsl #4
    17a0:	00000c27 	andeq	r0, r0, r7, lsr #24
    17a4:	27011513 	smladcs	r1, r3, r5, r1
    17a8:	0113490c 	tsteq	r3, ip, lsl #18
    17ac:	14000013 	strne	r0, [r0], #-19
    17b0:	13490005 	movtne	r0, #36869	; 0x9005
    17b4:	0d150000 	ldceq	0, cr0, [r5]
    17b8:	3a0e0300 	bcc	3823c0 <__Stack_Size+0x381fc0>
    17bc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17c0:	000a3813 	andeq	r3, sl, r3, lsl r8
    17c4:	00261600 	eoreq	r1, r6, r0, lsl #12
    17c8:	00001349 	andeq	r1, r0, r9, asr #6
    17cc:	03011317 	movweq	r1, #4887	; 0x1317
    17d0:	3a0b0b0e 	bcc	2c4410 <__Stack_Size+0x2c4010>
    17d4:	01053b0b 	tsteq	r5, fp, lsl #22
    17d8:	18000013 	stmdane	r0, {r0, r1, r4}
    17dc:	0b0b0113 	bleq	2c1c30 <__Stack_Size+0x2c1830>
    17e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    17e4:	00001301 	andeq	r1, r0, r1, lsl #6
    17e8:	0b011719 	bleq	47454 <__Stack_Size+0x47054>
    17ec:	3b0b3a0b 	blcc	2d0020 <__Stack_Size+0x2cfc20>
    17f0:	00130105 	andseq	r0, r3, r5, lsl #2
    17f4:	000d1a00 	andeq	r1, sp, r0, lsl #20
    17f8:	0b3a0e03 	bleq	e8500c <__Stack_Size+0xe84c0c>
    17fc:	1349053b 	movtne	r0, #38203	; 0x953b
    1800:	151b0000 	ldrne	r0, [fp]
    1804:	010c2701 	tsteq	ip, r1, lsl #14
    1808:	1c000013 	stcne	0, cr0, [r0], {19}
    180c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1810:	0b3a0e03 	bleq	e85024 <__Stack_Size+0xe84c24>
    1814:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1818:	01120111 	tsteq	r2, r1, lsl r1
    181c:	13010a40 	movwne	r0, #6720	; 0x1a40
    1820:	051d0000 	ldreq	r0, [sp]
    1824:	3a0e0300 	bcc	38242c <__Stack_Size+0x38202c>
    1828:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    182c:	00060213 	andeq	r0, r6, r3, lsl r2
    1830:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1834:	0b3a0e03 	bleq	e85048 <__Stack_Size+0xe84c48>
    1838:	1349053b 	movtne	r0, #38203	; 0x953b
    183c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    1840:	01000000 	tsteq	r0, r0
    1844:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1848:	0e030b13 	vmoveq.32	d3[0], r0
    184c:	01110e1b 	tsteq	r1, fp, lsl lr
    1850:	06100112 	undefined
    1854:	24020000 	strcs	r0, [r2]
    1858:	3e0b0b00 	fmacdcc	d0, d11, d0
    185c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1860:	00240300 	eoreq	r0, r4, r0, lsl #6
    1864:	0b3e0b0b 	bleq	f84498 <__Stack_Size+0xf84098>
    1868:	00000803 	andeq	r0, r0, r3, lsl #16
    186c:	03001604 	movweq	r1, #1540	; 0x604
    1870:	3b0b3a0e 	blcc	2d00b0 <__Stack_Size+0x2cfcb0>
    1874:	0013490b 	andseq	r4, r3, fp, lsl #18
    1878:	00160500 	andseq	r0, r6, r0, lsl #10
    187c:	0b3a0e03 	bleq	e85090 <__Stack_Size+0xe84c90>
    1880:	1349053b 	movtne	r0, #38203	; 0x953b
    1884:	17060000 	strne	r0, [r6, -r0]
    1888:	3a0b0b01 	bcc	2c4494 <__Stack_Size+0x2c4094>
    188c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1890:	07000013 	smladeq	r0, r3, r0, r0
    1894:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1898:	0b3b0b3a 	bleq	ec4588 <__Stack_Size+0xec4188>
    189c:	00001349 	andeq	r1, r0, r9, asr #6
    18a0:	49010108 	stmdbmi	r1, {r3, r8}
    18a4:	00130113 	andseq	r0, r3, r3, lsl r1
    18a8:	00210900 	eoreq	r0, r1, r0, lsl #18
    18ac:	0b2f1349 	bleq	bc65d8 <__Stack_Size+0xbc61d8>
    18b0:	240a0000 	strcs	r0, [sl]
    18b4:	3e0b0b00 	fmacdcc	d0, d11, d0
    18b8:	0b00000b 	bleq	18ec <__Stack_Size+0x14ec>
    18bc:	0b0b0113 	bleq	2c1d10 <__Stack_Size+0x2c1910>
    18c0:	0b3b0b3a 	bleq	ec45b0 <__Stack_Size+0xec41b0>
    18c4:	00001301 	andeq	r1, r0, r1, lsl #6
    18c8:	03000d0c 	movweq	r0, #3340	; 0xd0c
    18cc:	3b0b3a0e 	blcc	2d010c <__Stack_Size+0x2cfd0c>
    18d0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    18d4:	0d00000a 	stceq	0, cr0, [r0, #-40]
    18d8:	0b0b000f 	bleq	2c191c <__Stack_Size+0x2c151c>
    18dc:	130e0000 	movwne	r0, #57344	; 0xe000
    18e0:	0b0e0301 	bleq	3824ec <__Stack_Size+0x3820ec>
    18e4:	3b0b3a0b 	blcc	2d0118 <__Stack_Size+0x2cfd18>
    18e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    18ec:	000d0f00 	andeq	r0, sp, r0, lsl #30
    18f0:	0b3a0803 	bleq	e83904 <__Stack_Size+0xe83504>
    18f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18f8:	00000a38 	andeq	r0, r0, r8, lsr sl
    18fc:	0b000f10 	bleq	5544 <__Stack_Size+0x5144>
    1900:	0013490b 	andseq	r4, r3, fp, lsl #18
    1904:	01131100 	tsteq	r3, r0, lsl #2
    1908:	050b0e03 	streq	r0, [fp, #-3587]
    190c:	0b3b0b3a 	bleq	ec45fc <__Stack_Size+0xec41fc>
    1910:	00001301 	andeq	r1, r0, r1, lsl #6
    1914:	27001512 	smladcs	r0, r2, r5, r1
    1918:	1300000c 	movwne	r0, #12	; 0xc
    191c:	0c270115 	stfeqs	f0, [r7], #-84
    1920:	13011349 	movwne	r1, #4937	; 0x1349
    1924:	05140000 	ldreq	r0, [r4]
    1928:	00134900 	andseq	r4, r3, r0, lsl #18
    192c:	000d1500 	andeq	r1, sp, r0, lsl #10
    1930:	0b3a0e03 	bleq	e85144 <__Stack_Size+0xe84d44>
    1934:	1349053b 	movtne	r0, #38203	; 0x953b
    1938:	00000a38 	andeq	r0, r0, r8, lsr sl
    193c:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    1940:	17000013 	smladne	r0, r3, r0, r0
    1944:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1948:	0b3a0b0b 	bleq	e8457c <__Stack_Size+0xe8417c>
    194c:	1301053b 	movwne	r0, #5435	; 0x153b
    1950:	13180000 	tstne	r8, #0	; 0x0
    1954:	3a0b0b01 	bcc	2c4560 <__Stack_Size+0x2c4160>
    1958:	01053b0b 	tsteq	r5, fp, lsl #22
    195c:	19000013 	stmdbne	r0, {r0, r1, r4}
    1960:	0b0b0117 	bleq	2c1dc4 <__Stack_Size+0x2c19c4>
    1964:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1968:	00001301 	andeq	r1, r0, r1, lsl #6
    196c:	03000d1a 	movweq	r0, #3354	; 0xd1a
    1970:	3b0b3a0e 	blcc	2d01b0 <__Stack_Size+0x2cfdb0>
    1974:	00134905 	andseq	r4, r3, r5, lsl #18
    1978:	01151b00 	tsteq	r5, r0, lsl #22
    197c:	13010c27 	movwne	r0, #7207	; 0x1c27
    1980:	341c0000 	ldrcc	r0, [ip]
    1984:	3a0e0300 	bcc	38258c <__Stack_Size+0x38218c>
    1988:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    198c:	000a0213 	andeq	r0, sl, r3, lsl r2
    1990:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1994:	0b3a0e03 	bleq	e851a8 <__Stack_Size+0xe84da8>
    1998:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    199c:	0a020c3f 	beq	84aa0 <__Stack_Size+0x846a0>
    19a0:	01000000 	tsteq	r0, r0
    19a4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    19a8:	0e030b13 	vmoveq.32	d3[0], r0
    19ac:	01110e1b 	tsteq	r1, fp, lsl lr
    19b0:	06100112 	undefined
    19b4:	24020000 	strcs	r0, [r2]
    19b8:	3e0b0b00 	fmacdcc	d0, d11, d0
    19bc:	000e030b 	andeq	r0, lr, fp, lsl #6
    19c0:	00240300 	eoreq	r0, r4, r0, lsl #6
    19c4:	0b3e0b0b 	bleq	f845f8 <__Stack_Size+0xf841f8>
    19c8:	00000803 	andeq	r0, r0, r3, lsl #16
    19cc:	0b002404 	bleq	a9e4 <__Stack_Size+0xa5e4>
    19d0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    19d4:	00160500 	andseq	r0, r6, r0, lsl #10
    19d8:	0b3a0e03 	bleq	e851ec <__Stack_Size+0xe84dec>
    19dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    19e0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    19e4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    19e8:	3b0b3a0e 	blcc	2d0228 <__Stack_Size+0x2cfe28>
    19ec:	110c270b 	tstne	ip, fp, lsl #14
    19f0:	40011201 	andmi	r1, r1, r1, lsl #4
    19f4:	00130106 	andseq	r0, r3, r6, lsl #2
    19f8:	00340700 	eorseq	r0, r4, r0, lsl #14
    19fc:	0b3a0e03 	bleq	e85210 <__Stack_Size+0xe84e10>
    1a00:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a04:	00000a02 	andeq	r0, r0, r2, lsl #20
    1a08:	03003408 	movweq	r3, #1032	; 0x408
    1a0c:	3b0b3a08 	blcc	2d0234 <__Stack_Size+0x2cfe34>
    1a10:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a14:	0900000a 	stmdbeq	r0, {r1, r3}
    1a18:	13490101 	movtne	r0, #37121	; 0x9101
    1a1c:	00001301 	andeq	r1, r0, r1, lsl #6
    1a20:	0000210a 	andeq	r2, r0, sl, lsl #2
    1a24:	00150b00 	andseq	r0, r5, r0, lsl #22
    1a28:	00000c27 	andeq	r0, r0, r7, lsr #24
    1a2c:	0b000f0c 	bleq	5664 <__Stack_Size+0x5264>
    1a30:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a34:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1a38:	0b3a0e03 	bleq	e8524c <__Stack_Size+0xe84e4c>
    1a3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a40:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252
    1a44:	01000000 	tsteq	r0, r0
    1a48:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1a4c:	0e030b13 	vmoveq.32	d3[0], r0
    1a50:	01110e1b 	tsteq	r1, fp, lsl lr
    1a54:	06100112 	undefined
    1a58:	24020000 	strcs	r0, [r2]
    1a5c:	3e0b0b00 	fmacdcc	d0, d11, d0
    1a60:	000e030b 	andeq	r0, lr, fp, lsl #6
    1a64:	00240300 	eoreq	r0, r4, r0, lsl #6
    1a68:	0b3e0b0b 	bleq	f8469c <__Stack_Size+0xf8429c>
    1a6c:	00000803 	andeq	r0, r0, r3, lsl #16
    1a70:	0b002404 	bleq	aa88 <__Stack_Size+0xa688>
    1a74:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    1a78:	000f0500 	andeq	r0, pc, r0, lsl #10
    1a7c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1a80:	0b000f06 	bleq	56a0 <__Stack_Size+0x52a0>
    1a84:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a88:	00160700 	andseq	r0, r6, r0, lsl #14
    1a8c:	0b3a0e03 	bleq	e852a0 <__Stack_Size+0xe84ea0>
    1a90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a94:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    1a98:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1a9c:	3b0b3a0e 	blcc	2d02dc <__Stack_Size+0x2cfedc>
    1aa0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1aa4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1aa8:	01064001 	tsteq	r6, r1
    1aac:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1ab0:	08030005 	stmdaeq	r3, {r0, r2}
    1ab4:	0b3b0b3a 	bleq	ec47a4 <__Stack_Size+0xec43a4>
    1ab8:	06021349 	streq	r1, [r2], -r9, asr #6
    1abc:	340a0000 	strcc	r0, [sl]
    1ac0:	3a080300 	bcc	2026c8 <__Stack_Size+0x2022c8>
    1ac4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ac8:	00060213 	andeq	r0, r6, r3, lsl r2
    1acc:	00340b00 	eorseq	r0, r4, r0, lsl #22
    1ad0:	0b3a0803 	bleq	e83ae4 <__Stack_Size+0xe836e4>
    1ad4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ad8:	340c0000 	strcc	r0, [ip]
    1adc:	3a0e0300 	bcc	3826e4 <__Stack_Size+0x3822e4>
    1ae0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ae4:	00060213 	andeq	r0, r6, r3, lsl r2
    1ae8:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1aec:	0b3a0803 	bleq	e83b00 <__Stack_Size+0xe83700>
    1af0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1af4:	00000a02 	andeq	r0, r0, r2, lsl #20
    1af8:	01110100 	tsteq	r1, r0, lsl #2
    1afc:	0b130e25 	bleq	4c5398 <__Stack_Size+0x4c4f98>
    1b00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1b04:	01120111 	tsteq	r2, r1, lsl r1
    1b08:	00000610 	andeq	r0, r0, r0, lsl r6
    1b0c:	0b002402 	bleq	ab1c <__Stack_Size+0xa71c>
    1b10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1b14:	03000008 	movweq	r0, #8	; 0x8
    1b18:	0b0b0024 	bleq	2c1bb0 <__Stack_Size+0x2c17b0>
    1b1c:	0e030b3e 	vmoveq.16	d3[0], r0
    1b20:	16040000 	strne	r0, [r4], -r0
    1b24:	3a0e0300 	bcc	38272c <__Stack_Size+0x38232c>
    1b28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b2c:	05000013 	streq	r0, [r0, #-19]
    1b30:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1b34:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1b38:	00001349 	andeq	r1, r0, r9, asr #6
    1b3c:	0b011706 	bleq	4775c <__Stack_Size+0x4735c>
    1b40:	3b0b3a0b 	blcc	2d0374 <__Stack_Size+0x2cff74>
    1b44:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b48:	000d0700 	andeq	r0, sp, r0, lsl #14
    1b4c:	0b3a0e03 	bleq	e85360 <__Stack_Size+0xe84f60>
    1b50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b54:	01080000 	tsteq	r8, r0
    1b58:	01134901 	tsteq	r3, r1, lsl #18
    1b5c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1b60:	13490021 	movtne	r0, #36897	; 0x9021
    1b64:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1b68:	0b00240a 	bleq	ab98 <__Stack_Size+0xa798>
    1b6c:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    1b70:	01130b00 	tsteq	r3, r0, lsl #22
    1b74:	0b3a0b0b 	bleq	e847a8 <__Stack_Size+0xe843a8>
    1b78:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1b7c:	0d0c0000 	stceq	0, cr0, [ip]
    1b80:	3a0e0300 	bcc	382788 <__Stack_Size+0x382388>
    1b84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b88:	000a3813 	andeq	r3, sl, r3, lsl r8
    1b8c:	000f0d00 	andeq	r0, pc, r0, lsl #26
    1b90:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1b94:	0301130e 	movweq	r1, #4878	; 0x130e
    1b98:	3a0b0b0e 	bcc	2c47d8 <__Stack_Size+0x2c43d8>
    1b9c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1ba0:	0f000013 	svceq	0x00000013
    1ba4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1ba8:	0b3b0b3a 	bleq	ec4898 <__Stack_Size+0xec4498>
    1bac:	0a381349 	beq	e068d8 <__Stack_Size+0xe064d8>
    1bb0:	0f100000 	svceq	0x00100000
    1bb4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1bb8:	11000013 	tstne	r0, r3, lsl r0
    1bbc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1bc0:	0b3a050b 	bleq	e82ff4 <__Stack_Size+0xe82bf4>
    1bc4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1bc8:	15120000 	ldrne	r0, [r2]
    1bcc:	000c2700 	andeq	r2, ip, r0, lsl #14
    1bd0:	01151300 	tsteq	r5, r0, lsl #6
    1bd4:	13490c27 	movtne	r0, #39975	; 0x9c27
    1bd8:	00001301 	andeq	r1, r0, r1, lsl #6
    1bdc:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    1be0:	15000013 	strne	r0, [r0, #-19]
    1be4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1be8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1bec:	0a381349 	beq	e06918 <__Stack_Size+0xe06518>
    1bf0:	26160000 	ldrcs	r0, [r6], -r0
    1bf4:	00134900 	andseq	r4, r3, r0, lsl #18
    1bf8:	01131700 	tsteq	r3, r0, lsl #14
    1bfc:	0b0b0e03 	bleq	2c5410 <__Stack_Size+0x2c5010>
    1c00:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1c04:	00001301 	andeq	r1, r0, r1, lsl #6
    1c08:	0b011318 	bleq	46870 <__Stack_Size+0x46470>
    1c0c:	3b0b3a0b 	blcc	2d0440 <__Stack_Size+0x2d0040>
    1c10:	00130105 	andseq	r0, r3, r5, lsl #2
    1c14:	01171900 	tsteq	r7, r0, lsl #18
    1c18:	0b3a0b0b 	bleq	e8484c <__Stack_Size+0xe8444c>
    1c1c:	1301053b 	movwne	r0, #5435	; 0x153b
    1c20:	0d1a0000 	ldceq	0, cr0, [sl]
    1c24:	3a0e0300 	bcc	38282c <__Stack_Size+0x38242c>
    1c28:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c2c:	1b000013 	blne	1c80 <__Stack_Size+0x1880>
    1c30:	0c270115 	stfeqs	f0, [r7], #-84
    1c34:	00001301 	andeq	r1, r0, r1, lsl #6
    1c38:	0301041c 	movweq	r0, #5148	; 0x141c
    1c3c:	3a0b0b0e 	bcc	2c487c <__Stack_Size+0x2c447c>
    1c40:	010b3b0b 	tsteq	fp, fp, lsl #22
    1c44:	1d000013 	stcne	0, cr0, [r0, #-76]
    1c48:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1c4c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1c50:	3f012e1e 	svccc	0x00012e1e
    1c54:	3a0e030c 	bcc	38288c <__Stack_Size+0x38248c>
    1c58:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c5c:	1113490c 	tstne	r3, ip, lsl #18
    1c60:	40011201 	andmi	r1, r1, r1, lsl #4
    1c64:	00130106 	andseq	r0, r3, r6, lsl #2
    1c68:	00051f00 	andeq	r1, r5, r0, lsl #30
    1c6c:	0b3a0e03 	bleq	e85480 <__Stack_Size+0xe85080>
    1c70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c74:	00000602 	andeq	r0, r0, r2, lsl #12
    1c78:	03000520 	movweq	r0, #1312	; 0x520
    1c7c:	3b0b3a08 	blcc	2d04a4 <__Stack_Size+0x2d00a4>
    1c80:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c84:	21000006 	tstcs	r0, r6
    1c88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c8c:	0b3b0b3a 	bleq	ec497c <__Stack_Size+0xec457c>
    1c90:	00001349 	andeq	r1, r0, r9, asr #6
    1c94:	03003422 	movweq	r3, #1058	; 0x422
    1c98:	3b0b3a08 	blcc	2d04c0 <__Stack_Size+0x2d00c0>
    1c9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ca0:	2300000a 	movwcs	r0, #10	; 0xa
    1ca4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ca8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1cac:	0c3f1349 	ldceq	3, cr1, [pc], #-292
    1cb0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1cb4:	01110100 	tsteq	r1, r0, lsl #2
    1cb8:	0b130e25 	bleq	4c5554 <__Stack_Size+0x4c5154>
    1cbc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1cc0:	01120111 	tsteq	r2, r1, lsl r1
    1cc4:	00000610 	andeq	r0, r0, r0, lsl r6
    1cc8:	0b002402 	bleq	acd8 <__Stack_Size+0xa8d8>
    1ccc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1cd0:	0300000e 	movweq	r0, #14	; 0xe
    1cd4:	0b0b0024 	bleq	2c1d6c <__Stack_Size+0x2c196c>
    1cd8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1cdc:	16040000 	strne	r0, [r4], -r0
    1ce0:	3a0e0300 	bcc	3828e8 <__Stack_Size+0x3824e8>
    1ce4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ce8:	05000013 	streq	r0, [r0, #-19]
    1cec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1cf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1cf4:	00001349 	andeq	r1, r0, r9, asr #6
    1cf8:	0b011706 	bleq	47918 <__Stack_Size+0x47518>
    1cfc:	3b0b3a0b 	blcc	2d0530 <__Stack_Size+0x2d0130>
    1d00:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d04:	000d0700 	andeq	r0, sp, r0, lsl #14
    1d08:	0b3a0e03 	bleq	e8551c <__Stack_Size+0xe8511c>
    1d0c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d10:	01080000 	tsteq	r8, r0
    1d14:	01134901 	tsteq	r3, r1, lsl #18
    1d18:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1d1c:	13490021 	movtne	r0, #36897	; 0x9021
    1d20:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1d24:	0b00240a 	bleq	ad54 <__Stack_Size+0xa954>
    1d28:	000b3e0b 	andeq	r3, fp, fp, lsl #28
    1d2c:	01130b00 	tsteq	r3, r0, lsl #22
    1d30:	0b3a0b0b 	bleq	e84964 <__Stack_Size+0xe84564>
    1d34:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1d38:	0d0c0000 	stceq	0, cr0, [ip]
    1d3c:	3a0e0300 	bcc	382944 <__Stack_Size+0x382544>
    1d40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d44:	000a3813 	andeq	r3, sl, r3, lsl r8
    1d48:	000f0d00 	andeq	r0, pc, r0, lsl #26
    1d4c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1d50:	0301130e 	movweq	r1, #4878	; 0x130e
    1d54:	3a0b0b0e 	bcc	2c4994 <__Stack_Size+0x2c4594>
    1d58:	010b3b0b 	tsteq	fp, fp, lsl #22
    1d5c:	0f000013 	svceq	0x00000013
    1d60:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1d64:	0b3b0b3a 	bleq	ec4a54 <__Stack_Size+0xec4654>
    1d68:	0a381349 	beq	e06a94 <__Stack_Size+0xe06694>
    1d6c:	0f100000 	svceq	0x00100000
    1d70:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d74:	11000013 	tstne	r0, r3, lsl r0
    1d78:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1d7c:	0b3a050b 	bleq	e831b0 <__Stack_Size+0xe82db0>
    1d80:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1d84:	15120000 	ldrne	r0, [r2]
    1d88:	000c2700 	andeq	r2, ip, r0, lsl #14
    1d8c:	01151300 	tsteq	r5, r0, lsl #6
    1d90:	13490c27 	movtne	r0, #39975	; 0x9c27
    1d94:	00001301 	andeq	r1, r0, r1, lsl #6
    1d98:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    1d9c:	15000013 	strne	r0, [r0, #-19]
    1da0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1da4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1da8:	0a381349 	beq	e06ad4 <__Stack_Size+0xe066d4>
    1dac:	26160000 	ldrcs	r0, [r6], -r0
    1db0:	00134900 	andseq	r4, r3, r0, lsl #18
    1db4:	01131700 	tsteq	r3, r0, lsl #14
    1db8:	0b0b0e03 	bleq	2c55cc <__Stack_Size+0x2c51cc>
    1dbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1dc0:	00001301 	andeq	r1, r0, r1, lsl #6
    1dc4:	0b011318 	bleq	46a2c <__Stack_Size+0x4662c>
    1dc8:	3b0b3a0b 	blcc	2d05fc <__Stack_Size+0x2d01fc>
    1dcc:	00130105 	andseq	r0, r3, r5, lsl #2
    1dd0:	01171900 	tsteq	r7, r0, lsl #18
    1dd4:	0b3a0b0b 	bleq	e84a08 <__Stack_Size+0xe84608>
    1dd8:	1301053b 	movwne	r0, #5435	; 0x153b
    1ddc:	0d1a0000 	ldceq	0, cr0, [sl]
    1de0:	3a0e0300 	bcc	3829e8 <__Stack_Size+0x3825e8>
    1de4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1de8:	1b000013 	blne	1e3c <__Stack_Size+0x1a3c>
    1dec:	0c270115 	stfeqs	f0, [r7], #-84
    1df0:	00001301 	andeq	r1, r0, r1, lsl #6
    1df4:	3f012e1c 	svccc	0x00012e1c
    1df8:	3a0e030c 	bcc	382a30 <__Stack_Size+0x382630>
    1dfc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1e00:	1201110c 	andne	r1, r1, #3	; 0x3
    1e04:	01064001 	tsteq	r6, r1
    1e08:	1d000013 	stcne	0, cr0, [r0, #-76]
    1e0c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1e10:	0b3b0b3a 	bleq	ec4b00 <__Stack_Size+0xec4700>
    1e14:	06021349 	streq	r1, [r2], -r9, asr #6
    1e18:	051e0000 	ldreq	r0, [lr]
    1e1c:	3a080300 	bcc	202a24 <__Stack_Size+0x202624>
    1e20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e24:	00060213 	andeq	r0, r6, r3, lsl r2
    1e28:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1e2c:	0b3a0803 	bleq	e83e40 <__Stack_Size+0xe83a40>
    1e30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e34:	00000a02 	andeq	r0, r0, r2, lsl #20
    1e38:	03003420 	movweq	r3, #1056	; 0x420
    1e3c:	3b0b3a0e 	blcc	2d067c <__Stack_Size+0x2d027c>
    1e40:	0013490b 	andseq	r4, r3, fp, lsl #18
    1e44:	00342100 	eorseq	r2, r4, r0, lsl #2
    1e48:	0b3a0803 	bleq	e83e5c <__Stack_Size+0xe83a5c>
    1e4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e50:	34220000 	strtcc	r0, [r2]
    1e54:	3a080300 	bcc	202a5c <__Stack_Size+0x20265c>
    1e58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e5c:	00060213 	andeq	r0, r6, r3, lsl r2
    1e60:	000a2300 	andeq	r2, sl, r0, lsl #6
    1e64:	0b3a0e03 	bleq	e85678 <__Stack_Size+0xe85278>
    1e68:	00000b3b 	andeq	r0, r0, fp, lsr fp
    1e6c:	55010b24 	strpl	r0, [r1, #-2852]
    1e70:	25000006 	strcs	r0, [r0, #-6]
    1e74:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e78:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1e7c:	0c3f1349 	ldceq	3, cr1, [pc], #-292
    1e80:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1e84:	00110100 	andseq	r0, r1, r0, lsl #2
    1e88:	06550610 	undefined
    1e8c:	081b0803 	ldmdaeq	fp, {r0, r1, fp}
    1e90:	05130825 	ldreq	r0, [r3, #-2085]
    1e94:	Address 0x00001e94 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000045 	andeq	r0, r0, r5, asr #32
       4:	001f0002 	andseq	r0, pc, r2
       8:	01020000 	tsteq	r2, r0
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	tsteq	r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      20:	6d73612e 	ldfvse	f6, [r3, #-184]!
      24:	00000000 	andeq	r0, r0, r0
      28:	02050000 	andeq	r0, r5, #0	; 0x0
      2c:	00000000 	andeq	r0, r0, r0
      30:	0100cc03 	tsteq	r0, r3, lsl #24
      34:	01000602 	tsteq	r0, r2, lsl #12
      38:	02050001 	andeq	r0, r5, #1	; 0x1
      3c:	00000000 	andeq	r0, r0, r0
      40:	0100d703 	tsteq	r0, r3, lsl #14
      44:	01000602 	tsteq	r0, r2, lsl #12
      48:	00009601 	andeq	r9, r0, r1, lsl #12
      4c:	40000200 	andmi	r0, r0, r0, lsl #4
      50:	02000000 	andeq	r0, r0, #0	; 0x0
      54:	0d0efb01 	vstreq	d15, [lr, #-4]
      58:	01010100 	tsteq	r1, r0, lsl #2
      5c:	00000001 	andeq	r0, r0, r1
      60:	01000001 	tsteq	r0, r1
      64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      6c:	2f2e2e2f 	svccs	0x002e2e2f
      70:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      74:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
      78:	696c2f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, sp}^
      7c:	6f6c6762 	svcvs	0x006c6762
      80:	612f7373 	teqvs	pc, r3, ror r3
      84:	00006d72 	andeq	r6, r0, r2, ror sp
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	0100532e 	tsteq	r0, lr, lsr #6
      90:	00000000 	andeq	r0, r0, r0
      94:	00000205 	andeq	r0, r0, r5, lsl #4
      98:	d2030000 	andle	r0, r3, #0	; 0x0
      9c:	2f2f0100 	svccs	0x002f0100
      a0:	2f2f2f33 	svccs	0x002f2f33
      a4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      a8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      ac:	2f302f2f 	svccs	0x00302f2f
      b0:	2f2f302f 	svccs	0x002f302f
      b4:	2f302f2f 	svccs	0x00302f2f
      b8:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
      bc:	2f2f322e 	svccs	0x002f322e
      c0:	032f2f30 	teqeq	pc, #192	; 0xc0
      c4:	2f342e0e 	svccs	0x00342e0e
      c8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      cc:	2f2f2f2f 	svccs	0x002f2f2f
      d0:	f9032f30 	undefined instruction 0xf9032f30
      d4:	2f2f2e00 	svccs	0x002f2e00
      d8:	2f2f2f2f 	svccs	0x002f2f2f
      dc:	10023030 	andne	r3, r2, r0, lsr r0
      e0:	b6010100 	strlt	r0, [r1], -r0, lsl #2
      e4:	02000003 	andeq	r0, r0, #3	; 0x3
      e8:	0000ae00 	andeq	sl, r0, r0, lsl #28
      ec:	fb010200 	blx	408f6 <__Stack_Size+0x404f6>
      f0:	01000d0e 	tsteq	r0, lr, lsl #26
      f4:	00010101 	andeq	r0, r1, r1, lsl #2
      f8:	00010000 	andeq	r0, r1, r0
      fc:	50410100 	subpl	r0, r1, r0, lsl #2
     100:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     104:	74730063 	ldrbtvc	r0, [r3], #-99
     108:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     10c:	5f783031 	svcpl	0x00783031
     110:	2f62696c 	svccs	0x0062696c
     114:	00636e69 	rsbeq	r6, r3, r9, ror #28
     118:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     11c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     120:	73000001 	movwvc	r0, #1	; 0x1
     124:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     128:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     12c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     130:	00682e65 	rsbeq	r2, r8, r5, ror #28
     134:	73000002 	movwvc	r0, #2	; 0x2
     138:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     13c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     140:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     144:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     148:	74730000 	ldrbtvc	r0, [r3]
     14c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     150:	5f783031 	svcpl	0x00783031
     154:	6f697067 	svcvs	0x00697067
     158:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     15c:	74730000 	ldrbtvc	r0, [r3]
     160:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     164:	5f783031 	svcpl	0x00783031
     168:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     16c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     170:	74730000 	ldrbtvc	r0, [r3]
     174:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     178:	5f783031 	svcpl	0x00783031
     17c:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
     180:	00020068 	andeq	r0, r2, r8, rrx
     184:	6d747300 	ldclvs	3, cr7, [r4]
     188:	31663233 	cmncc	r6, r3, lsr r2
     18c:	755f7830 	ldrbvc	r7, [pc, #-2096]	; fffff964 <SCS_BASE+0x1fff1964>
     190:	74726173 	ldrbtvc	r6, [r2], #-371
     194:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     198:	00000000 	andeq	r0, r0, r0
     19c:	31340205 	teqcc	r4, r5, lsl #4
     1a0:	b2030800 	andlt	r0, r3, #0	; 0x0
     1a4:	67130104 	ldrvs	r0, [r3, -r4, lsl #2]
     1a8:	03781369 	cmneq	r8, #-1543503871	; 0xa4000001
     1ac:	9317580f 	tstls	r7, #983040	; 0xf0000
     1b0:	e6034d3d 	undefined
     1b4:	3d138200 	lfmcc	f0, 1, [r3]
     1b8:	4a12033d 	bmi	480eb4 <__Stack_Size+0x480ab4>
     1bc:	164d2f13 	undefined
     1c0:	4a64036a 	bmi	1900f70 <__Stack_Size+0x1900b70>
     1c4:	303e2220 	eorscc	r2, lr, r0, lsr #4
     1c8:	033d4c4d 	teqeq	sp, #19712	; 0x4d00
     1cc:	2c224a65 	stccs	10, cr4, [r2], #-404
     1d0:	033d3122 	teqeq	sp, #-2147483640	; 0x80000008
     1d4:	1f213c74 	svcne	0x00213c74
     1d8:	03ad5921 	undefined instruction 0x03ad5921
     1dc:	2d21906e 	stccs	0, cr9, [r1, #-440]!
     1e0:	675a4c21 	ldrbvs	r4, [sl, -r1, lsr #24]
     1e4:	033e3d92 	teqeq	lr, #9344	; 0x2480
     1e8:	3d328250 	lfmcc	f0, 1, [r2, #-320]!
     1ec:	3e2f2b30 	vmovcc.16	d15[2], r2
     1f0:	321c4f3f 	andscc	r4, ip, #252	; 0xfc
     1f4:	302f2f1c 	eorcc	r2, pc, ip, lsl pc
     1f8:	2f4b6931 	svccs	0x004b6931
     1fc:	221e222f 	andscs	r2, lr, #-268435454	; 0xf0000002
     200:	4d2f301e 	stcmi	0, cr3, [pc, #-120]!
     204:	58034b5b 	stmdapl	r3, {r0, r1, r3, r4, r6, r8, r9, fp, lr}
     208:	211f214a 	tstcs	pc, sl, asr #2
     20c:	6f03673d 	svcvs	0x0003673d
     210:	201d154a 	andscs	r1, sp, sl, asr #10
     214:	2f212f23 	svccs	0x00212f23
     218:	2f214b2f 	svccs	0x00214b2f
     21c:	206f032f 	rsbcs	r0, pc, pc, lsr #6
     220:	3d1f2220 	lfmcc	f2, 4, [pc, #-128]
     224:	2077033d 	rsbscs	r0, r7, sp, lsr r3
     228:	4c2d303c 	stcmi	0, cr3, [sp], #-240
     22c:	213c6203 	teqcs	ip, r3, lsl #4
     230:	1e3f211f 	mrcne	1, 1, r2, cr15, cr15, {0}
     234:	4b684b4c 	blmi	1a12f6c <__Stack_Size+0x1a12b6c>
     238:	5865034b 	stmdapl	r5!, {r0, r1, r3, r6, r8, r9}^
     23c:	3d211f21 	stccc	15, cr1, [r1, #-132]!
     240:	2e4a5003 	cdpcs	0, 4, cr5, cr10, cr3, {0}
     244:	32241c24 	eorcc	r1, r4, #9216	; 0x2400
     248:	2f2f2f4b 	svccs	0x002f2f4b
     24c:	232e7803 	teqcs	lr, #196608	; 0x30000
     250:	3d223125 	stfccs	f3, [r2, #-148]!
     254:	316a4d3e 	cmncc	sl, lr, lsr sp
     258:	513e3d30 	teqpl	lr, r0, lsr sp
     25c:	664f034c 	strbvs	r0, [pc], -ip, asr #6
     260:	63033d3d 	movwvs	r3, #15677	; 0x3d3d
     264:	0326302e 	teqeq	r6, #46	; 0x2e
     268:	4b3f207a 	blmi	fc8458 <__Stack_Size+0xfc8058>
     26c:	2d2d2121 	stfcss	f2, [sp, #-132]!
     270:	1f4c3030 	svcne	0x004c3030
     274:	302f1f21 	eorcc	r1, pc, r1, lsr #30
     278:	1f211f4d 	svcne	0x00211f4d
     27c:	4b30302d 	blmi	c0c338 <__Stack_Size+0xc0bf38>
     280:	034b4b4c 	movteq	r4, #47948	; 0xbb4c
     284:	03287443 	teqeq	r8, #1124073472	; 0x43000000
     288:	03282e78 	teqeq	r8, #1920	; 0x780
     28c:	79034a0b 	stmdbvc	r3, {r0, r1, r3, r9, fp, lr}
     290:	231f4e20 	tstcs	pc, #512	; 0x200
     294:	2f2f1c21 	svccs	0x002f1c21
     298:	24312f2f 	ldrtcs	r2, [r1], #-3887
     29c:	2f2f2f1c 	svccs	0x002f2f1c
     2a0:	a2032f2f 	andge	r2, r3, #188	; 0xbc
     2a4:	31313c7f 	teqcc	r1, pc, ror ip
     2a8:	3f31304d 	svccc	0x0031304d
     2ac:	4d3f3f3f 	ldcmi	15, cr3, [pc, #-252]!
     2b0:	3f5d3f69 	svccc	0x005d3f69
     2b4:	3d4c5b52 	vstrcc	d21, [ip, #-328]
     2b8:	587f9a03 	ldmdapl	pc!, {r0, r1, r9, fp, ip, pc}^
     2bc:	6a201c24 	bvs	807354 <__Stack_Size+0x806f54>
     2c0:	755a5921 	ldrbvc	r5, [sl, #-2337]
     2c4:	75848384 	strvc	r8, [r4, #900]
     2c8:	595b7584 	ldmdbpl	fp, {r2, r7, r8, sl, ip, sp, lr}^
     2cc:	8384755a 	orrhi	r7, r4, #377487360	; 0x16800000
     2d0:	76757684 	ldrbtvc	r7, [r5], -r4, lsl #13
     2d4:	036a4c4b 	cmneq	sl, #19200	; 0x4b00
     2d8:	2a027e8f 	bcs	9fd1c <__Stack_Size+0x9f91c>
     2dc:	31313001 	teqcc	r1, r1
     2e0:	4b303030 	blmi	c0c3a8 <__Stack_Size+0xc0bfa8>
     2e4:	0c039168 	stfeqd	f1, [r3], {104}
     2e8:	2e740366 	cdpcs	3, 7, cr0, cr4, cr6, {3}
     2ec:	660b033d 	undefined
     2f0:	3d2e7503 	cfstr32cc	mvfx7, [lr, #-12]!
     2f4:	03660a03 	cmneq	r6, #12288	; 0x3000
     2f8:	033d2e76 	teqeq	sp, #1888	; 0x760
     2fc:	77036609 	strvc	r6, [r3, -r9, lsl #12]
     300:	91913d2e 	orrsls	r3, r1, lr, lsr #26
     304:	2a023f93 	bcs	90158 <__Stack_Size+0x8fd58>
     308:	162a0213 	undefined
     30c:	211f5991 	ldrbcs	r5, [pc, -r1]
     310:	32025a22 	andcc	r5, r2, #139264	; 0x22000
     314:	132a0213 	teqne	sl, #805306369	; 0x30000001
     318:	02132d02 	andseq	r2, r3, #128	; 0x80
     31c:	2b02132a 	blcs	84fcc <__Stack_Size+0x84bcc>
     320:	132c0213 	teqne	ip, #805306369	; 0x30000001
     324:	02132c02 	andseq	r2, r3, #512	; 0x200
     328:	2b02132b 	blcs	84fdc <__Stack_Size+0x84bdc>
     32c:	132b0213 	teqne	fp, #805306369	; 0x30000001
     330:	02132d02 	andseq	r2, r3, #128	; 0x80
     334:	2f02132d 	svccs	0x0002132d
     338:	132d0213 	teqne	sp, #805306369	; 0x30000001
     33c:	02132e02 	andseq	r2, r3, #32	; 0x20
     340:	2d02132d 	stccs	3, cr1, [r2, #-180]
     344:	132d0213 	teqne	sp, #805306369	; 0x30000001
     348:	02132c02 	andseq	r2, r3, #512	; 0x200
     34c:	2c02132d 	stccs	3, cr1, [r2], {45}
     350:	13260213 	teqne	r6, #805306369	; 0x30000001
     354:	02132602 	andseq	r2, r3, #2097152	; 0x200000
     358:	28021327 	stmdacs	r2, {r0, r1, r2, r5, r8, r9, ip}
     35c:	13260213 	teqne	r6, #805306369	; 0x30000001
     360:	02132702 	andseq	r2, r3, #524288	; 0x80000
     364:	28021328 	stmdacs	r2, {r3, r5, r8, r9, ip}
     368:	13250213 	teqne	r5, #805306369	; 0x30000001
     36c:	02132702 	andseq	r2, r3, #524288	; 0x80000
     370:	26021327 	strcs	r1, [r2], -r7, lsr #6
     374:	13670213 	cmnne	r7, #805306369	; 0x30000001
     378:	02132b02 	andseq	r2, r3, #2048	; 0x800
     37c:	2b02132c 	blcs	85034 <__Stack_Size+0x84c34>
     380:	132b0213 	teqne	fp, #805306369	; 0x30000001
     384:	02132b02 	andseq	r2, r3, #2048	; 0x800
     388:	2b02132c 	blcs	85040 <__Stack_Size+0x84c40>
     38c:	132c0213 	teqne	ip, #805306369	; 0x30000001
     390:	02132a02 	andseq	r2, r3, #8192	; 0x2000
     394:	2b02132a 	blcs	85044 <__Stack_Size+0x84c44>
     398:	132b0213 	teqne	fp, #805306369	; 0x30000001
     39c:	02132a02 	andseq	r2, r3, #8192	; 0x2000
     3a0:	2a02132a 	bcs	85050 <__Stack_Size+0x84c50>
     3a4:	132b0213 	teqne	fp, #805306369	; 0x30000001
     3a8:	02132902 	andseq	r2, r3, #32768	; 0x8000
     3ac:	29021329 	stmdbcs	r2, {r0, r3, r5, r8, r9, ip}
     3b0:	132b0213 	teqne	fp, #805306369	; 0x30000001
     3b4:	02132b02 	andseq	r2, r3, #2048	; 0x800
     3b8:	2b02132d 	blcs	85074 <__Stack_Size+0x84c74>
     3bc:	13290213 	teqne	r9, #805306369	; 0x30000001
     3c0:	02132402 	andseq	r2, r3, #33554432	; 0x2000000
     3c4:	23021324 	movwcs	r1, #8996	; 0x2324
     3c8:	13230213 	teqne	r3, #805306369	; 0x30000001
     3cc:	02132502 	andseq	r2, r3, #8388608	; 0x800000
     3d0:	23021323 	movwcs	r1, #8995	; 0x2323
     3d4:	13250213 	teqne	r5, #805306369	; 0x30000001
     3d8:	02132202 	andseq	r2, r3, #536870912	; 0x20000000
     3dc:	23021323 	movwcs	r1, #8995	; 0x2323
     3e0:	13240213 	teqne	r4, #805306369	; 0x30000001
     3e4:	02132502 	andseq	r2, r3, #8388608	; 0x800000
     3e8:	38021325 	stmdacc	r2, {r0, r2, r5, r8, r9, ip}
     3ec:	132b0213 	teqne	fp, #805306369	; 0x30000001
     3f0:	02132c02 	andseq	r2, r3, #512	; 0x200
     3f4:	2c02132b 	stccs	3, cr1, [r2], {43}
     3f8:	132b0213 	teqne	fp, #805306369	; 0x30000001
     3fc:	02132b02 	andseq	r2, r3, #2048	; 0x800
     400:	2c02132c 	stccs	3, cr1, [r2], {44}
     404:	132b0213 	teqne	fp, #805306369	; 0x30000001
     408:	02132a02 	andseq	r2, r3, #8192	; 0x2000
     40c:	2a02132a 	bcs	850bc <__Stack_Size+0x84cbc>
     410:	132a0213 	teqne	sl, #805306369	; 0x30000001
     414:	02132b02 	andseq	r2, r3, #2048	; 0x800
     418:	2b02132a 	blcs	850c8 <__Stack_Size+0x84cc8>
     41c:	132a0213 	teqne	sl, #805306369	; 0x30000001
     420:	02132b02 	andseq	r2, r3, #2048	; 0x800
     424:	2a02132b 	bcs	850d8 <__Stack_Size+0x84cd8>
     428:	132a0213 	teqne	sl, #805306369	; 0x30000001
     42c:	02132b02 	andseq	r2, r3, #2048	; 0x800
     430:	2b02132b 	blcs	850e4 <__Stack_Size+0x84ce4>
     434:	13260213 	teqne	r6, #805306369	; 0x30000001
     438:	02132402 	andseq	r2, r3, #33554432	; 0x2000000
     43c:	25021323 	strcs	r1, [r2, #-803]
     440:	13230213 	teqne	r3, #805306369	; 0x30000001
     444:	02132302 	andseq	r2, r3, #134217728	; 0x8000000
     448:	23021323 	movwcs	r1, #8995	; 0x2323
     44c:	13230213 	teqne	r3, #805306369	; 0x30000001
     450:	02132302 	andseq	r2, r3, #134217728	; 0x8000000
     454:	24021323 	strcs	r1, [r2], #-803
     458:	13240213 	teqne	r4, #805306369	; 0x30000001
     45c:	02132302 	andseq	r2, r3, #134217728	; 0x8000000
     460:	2c021334 	stccs	3, cr1, [r2], {52}
     464:	132a0213 	teqne	sl, #805306369	; 0x30000001
     468:	02132a02 	andseq	r2, r3, #8192	; 0x2000
     46c:	2a02132b 	bcs	85120 <__Stack_Size+0x84d20>
     470:	13280213 	teqne	r8, #805306369	; 0x30000001
     474:	02132402 	andseq	r2, r3, #33554432	; 0x2000000
     478:	24021324 	strcs	r1, [r2], #-804
     47c:	13240213 	teqne	r4, #805306369	; 0x30000001
     480:	02132402 	andseq	r2, r3, #33554432	; 0x2000000
     484:	25021326 	strcs	r1, [r2, #-806]
     488:	13240213 	teqne	r4, #805306369	; 0x30000001
     48c:	02132402 	andseq	r2, r3, #33554432	; 0x2000000
     490:	25021325 	strcs	r1, [r2, #-805]
     494:	13250213 	teqne	r5, #805306369	; 0x30000001
     498:	01003302 	tsteq	r0, r2, lsl #6
     49c:	00015501 	andeq	r5, r1, r1, lsl #10
     4a0:	2d000200 	sfmcs	f0, 4, [r0]
     4a4:	02000000 	andeq	r0, r0, #0	; 0x0
     4a8:	0d0efb01 	vstreq	d15, [lr, #-4]
     4ac:	01010100 	tsteq	r1, r0, lsl #2
     4b0:	00000001 	andeq	r0, r0, r1
     4b4:	01000001 	tsteq	r0, r1
     4b8:	2f505041 	svccs	0x00505041
     4bc:	00637273 	rsbeq	r7, r3, r3, ror r2
     4c0:	6d747300 	ldclvs	3, cr7, [r4]
     4c4:	31663233 	cmncc	r6, r3, lsr r2
     4c8:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^
     4cc:	00632e74 	rsbeq	r2, r3, r4, ror lr
     4d0:	00000001 	andeq	r0, r0, r1
     4d4:	4c020500 	cfstr32mi	mvfx0, [r2], {0}
     4d8:	03080063 	movweq	r0, #32867	; 0x8063
     4dc:	03130123 	tsteq	r3, #-1073741816	; 0xc0000008
     4e0:	0f032e0a 	svceq	0x00032e0a
     4e4:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
     4e8:	032e0f03 	teqeq	lr, #12	; 0xc
     4ec:	03132e0f 	tsteq	r3, #240	; 0xf0
     4f0:	03132e0a 	tsteq	r3, #160	; 0xa0
     4f4:	03132e0a 	tsteq	r3, #160	; 0xa0
     4f8:	03132e16 	tsteq	r3, #352	; 0x160
     4fc:	03132e0a 	tsteq	r3, #160	; 0xa0
     500:	03132e0a 	tsteq	r3, #160	; 0xa0
     504:	03132e0a 	tsteq	r3, #160	; 0xa0
     508:	03132e0a 	tsteq	r3, #160	; 0xa0
     50c:	03132e0a 	tsteq	r3, #160	; 0xa0
     510:	03132e0a 	tsteq	r3, #160	; 0xa0
     514:	03132e0a 	tsteq	r3, #160	; 0xa0
     518:	03132e0a 	tsteq	r3, #160	; 0xa0
     51c:	03132e0a 	tsteq	r3, #160	; 0xa0
     520:	03132e0a 	tsteq	r3, #160	; 0xa0
     524:	03132e0a 	tsteq	r3, #160	; 0xa0
     528:	03132e0a 	tsteq	r3, #160	; 0xa0
     52c:	03132e0a 	tsteq	r3, #160	; 0xa0
     530:	03132e0a 	tsteq	r3, #160	; 0xa0
     534:	03132e0a 	tsteq	r3, #160	; 0xa0
     538:	03132e0a 	tsteq	r3, #160	; 0xa0
     53c:	03132e0a 	tsteq	r3, #160	; 0xa0
     540:	03132e0b 	tsteq	r3, #176	; 0xb0
     544:	03132e0b 	tsteq	r3, #176	; 0xb0
     548:	03132e0b 	tsteq	r3, #176	; 0xb0
     54c:	03132e0a 	tsteq	r3, #160	; 0xa0
     550:	03132e0a 	tsteq	r3, #160	; 0xa0
     554:	03132e0a 	tsteq	r3, #160	; 0xa0
     558:	03132e0a 	tsteq	r3, #160	; 0xa0
     55c:	03132e0b 	tsteq	r3, #176	; 0xb0
     560:	03132e0b 	tsteq	r3, #176	; 0xb0
     564:	03132e0a 	tsteq	r3, #160	; 0xa0
     568:	03132e16 	tsteq	r3, #352	; 0x160
     56c:	03132e0a 	tsteq	r3, #160	; 0xa0
     570:	03132e0a 	tsteq	r3, #160	; 0xa0
     574:	03132e0a 	tsteq	r3, #160	; 0xa0
     578:	03132e0a 	tsteq	r3, #160	; 0xa0
     57c:	03132e0a 	tsteq	r3, #160	; 0xa0
     580:	03132e0a 	tsteq	r3, #160	; 0xa0
     584:	03132e0a 	tsteq	r3, #160	; 0xa0
     588:	03132e16 	tsteq	r3, #352	; 0x160
     58c:	03132e0a 	tsteq	r3, #160	; 0xa0
     590:	03132e0a 	tsteq	r3, #160	; 0xa0
     594:	03132e0a 	tsteq	r3, #160	; 0xa0
     598:	03132e0a 	tsteq	r3, #160	; 0xa0
     59c:	03132e0a 	tsteq	r3, #160	; 0xa0
     5a0:	03132e0b 	tsteq	r3, #176	; 0xb0
     5a4:	03132e0b 	tsteq	r3, #176	; 0xb0
     5a8:	03132e0a 	tsteq	r3, #160	; 0xa0
     5ac:	03132e0a 	tsteq	r3, #160	; 0xa0
     5b0:	03132e0a 	tsteq	r3, #160	; 0xa0
     5b4:	03132e0a 	tsteq	r3, #160	; 0xa0
     5b8:	03132e0a 	tsteq	r3, #160	; 0xa0
     5bc:	03132e0a 	tsteq	r3, #160	; 0xa0
     5c0:	03132e0a 	tsteq	r3, #160	; 0xa0
     5c4:	03132e0a 	tsteq	r3, #160	; 0xa0
     5c8:	03132e0a 	tsteq	r3, #160	; 0xa0
     5cc:	03132e0a 	tsteq	r3, #160	; 0xa0
     5d0:	03132e0a 	tsteq	r3, #160	; 0xa0
     5d4:	03132e0a 	tsteq	r3, #160	; 0xa0
     5d8:	03132e0a 	tsteq	r3, #160	; 0xa0
     5dc:	03132e0b 	tsteq	r3, #176	; 0xb0
     5e0:	2f2e7e89 	svccs	0x002e7e89
     5e4:	7f9a032f 	svcvc	0x009a032f
     5e8:	032f2f2e 	teqeq	pc, #184	; 0xb8
     5ec:	2f2e7db9 	svccs	0x002e7db9
     5f0:	0002022f 	andeq	r0, r2, pc, lsr #4
     5f4:	006d0101 	rsbeq	r0, sp, r1, lsl #2
     5f8:	00020000 	andeq	r0, r2, r0
     5fc:	00000028 	andeq	r0, r0, r8, lsr #32
     600:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     604:	0101000d 	tsteq	r1, sp
     608:	00000101 	andeq	r0, r0, r1, lsl #2
     60c:	00000100 	andeq	r0, r0, r0, lsl #2
     610:	50504101 	subspl	r4, r0, r1, lsl #2
     614:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     618:	78640000 	stmdavc	r4!, {}^
     61c:	61685f6c 	cmnvs	r8, ip, ror #30
     620:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     624:	00000001 	andeq	r0, r0, r1
     628:	78020500 	stmdavc	r2, {r8, sl}
     62c:	03080064 	movweq	r0, #32868	; 0x8064
     630:	320100c7 	andcc	r0, r1, #199	; 0xc7
     634:	2e72032f 	cdpcs	3, 7, cr0, cr2, cr15, {1}
     638:	4b251b33 	blmi	94730c <__Stack_Size+0x946f0c>
     63c:	202e6803 	eorcs	r6, lr, r3, lsl #16
     640:	594a0903 	stmdbpl	sl, {r0, r1, r8, fp}^
     644:	441d232b 	ldrmi	r2, [sp], #-811
     648:	203c6303 	eorscs	r6, ip, r3, lsl #6
     64c:	034e3b52 	movteq	r3, #60242	; 0xeb52
     650:	2f312e6e 	svccs	0x00312e6e
     654:	322e7403 	eorcc	r7, lr, #50331648	; 0x3000000
     658:	2e70032f 	cdpcs	3, 7, cr0, cr0, cr15, {1}
     65c:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     660:	03023026 	movweq	r3, #8230	; 0x2026
     664:	42010100 	andmi	r0, r1, #0	; 0x0
     668:	02000001 	andeq	r0, r0, #1	; 0x1
     66c:	00002a00 	andeq	r2, r0, r0, lsl #20
     670:	fb010200 	blx	40e7a <__Stack_Size+0x40a7a>
     674:	01000d0e 	tsteq	r0, lr, lsl #26
     678:	00010101 	andeq	r0, r1, r1, lsl #2
     67c:	00010000 	andeq	r0, r1, r0
     680:	50410100 	subpl	r0, r1, r0, lsl #2
     684:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     688:	64000063 	strvs	r0, [r0], #-99
     68c:	6d616e79 	stclvs	14, cr6, [r1, #-484]!
     690:	6c657869 	stclvs	8, cr7, [r5], #-420
     694:	0100632e 	tsteq	r0, lr, lsr #6
     698:	00000000 	andeq	r0, r0, r0
     69c:	65040205 	strvs	r0, [r4, #-517]
     6a0:	e6030800 	str	r0, [r3], -r0, lsl #16
     6a4:	30010101 	andcc	r0, r1, r1, lsl #2
     6a8:	4d2f134d 	stcmi	3, cr1, [pc, #-308]!
     6ac:	134d2f13 	movtne	r2, #57107	; 0xdf13
     6b0:	2f133f3d 	svccs	0x00133f3d
     6b4:	4d6b014d 	stfmie	f0, [fp, #-308]!
     6b8:	014d3001 	cmpeq	sp, r1
     6bc:	3f163f3e 	svccc	0x00163f3e
     6c0:	23250123 	teqcs	r5, #-1073741816	; 0xc0000008
     6c4:	c2033f15 	andgt	r3, r3, #84	; 0x54
     6c8:	1c24207e 	stcne	0, cr2, [r4], #-504
     6cc:	306d4d24 	rsbcc	r4, sp, r4, lsr #26
     6d0:	2f963f2f 	svccs	0x00963f2f
     6d4:	211f211f 	tstcs	pc, pc, lsl r1
     6d8:	4a0e0322 	bmi	381368 <__Stack_Size+0x380f68>
     6dc:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     6e0:	03341e22 	teqeq	r4, #544	; 0x220
     6e4:	303d3c70 	eorscc	r3, sp, r0, ror ip
     6e8:	0386442f 	orreq	r4, r6, #788529152	; 0x2f000000
     6ec:	0b03667a 	bleq	da0dc <__Stack_Size+0xd9cdc>
     6f0:	812f304a 	teqhi	pc, sl, asr #32
     6f4:	687c3f4d 	ldmdavs	ip!, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}^
     6f8:	211f3d4f 	tstcs	pc, pc, asr #26
     6fc:	1f2f5922 	svcne	0x002f5922
     700:	28211f21 	stmdacs	r1!, {r0, r5, r8, r9, sl, fp, ip}
     704:	51667a03 	cmnpl	r6, r3, lsl #20
     708:	33a04e57 	movcc	r4, #1392	; 0x570
     70c:	d6032f2f 	strle	r2, [r3], -pc, lsr #30
     710:	1b25d67e 	blne	976110 <__Stack_Size+0x975d10>
     714:	221e4325 	andscs	r4, lr, #-1811939328	; 0x94000000
     718:	c243222c 	subgt	r2, r3, #-1073741822	; 0xc0000002
     71c:	213d403d 	teqcs	sp, sp, lsr r0
     720:	5a4c573d 	bpl	131641c <__Stack_Size+0x131601c>
     724:	1f2f315e 	svcne	0x002f315e
     728:	3d3f3e2f 	ldccc	14, cr3, [pc, #-188]!
     72c:	3e3e3d40 	cdpcc	13, 3, cr3, cr14, cr0, {2}
     730:	00ed033d 	rsceq	r0, sp, sp, lsr r3
     734:	43302290 	teqmi	r0, #9	; 0x9
     738:	033f301e 	teqeq	pc, #30	; 0x1e
     73c:	214a0182 	smlalbbcs	r0, sl, r2, r1
     740:	211f211f 	tstcs	pc, pc, lsl r1
     744:	b5032122 	strlt	r2, [r3, #-290]
     748:	cd032e7f 	stcgt	14, cr2, [r3, #-508]
     74c:	2f212e00 	svccs	0x00212e00
     750:	2223221b 	eorcs	r2, r3, #-1342177279	; 0xb0000001
     754:	8263032f 	rsbhi	r0, r3, #-1140850688	; 0xbc000000
     758:	30211f21 	eorcc	r1, r1, r1, lsr #30
     75c:	1c213021 	stcne	0, cr3, [r1], #-132
     760:	03252222 	teqeq	r5, #536870914	; 0x20000002
     764:	2f2e7fb5 	svccs	0x002e7fb5
     768:	4a00cd03 	bmi	33b7c <__Stack_Size+0x3377c>
     76c:	21906403 	orrscs	r6, r0, r3, lsl #8
     770:	211f211f 	tstcs	pc, pc, lsl r1
     774:	1c312122 	ldfnes	f2, [r1], #-136
     778:	222f2122 	eorcs	r2, pc, #-2147483640	; 0x80000008
     77c:	7467032f 	strbtvc	r0, [r7], #-815
     780:	30211f21 	eorcc	r1, r1, r1, lsr #30
     784:	1c2f3021 	stcne	0, cr3, [pc], #-132
     788:	4d241e24 	stcmi	14, cr1, [r4, #-144]!
     78c:	219e6903 	orrscs	r6, lr, r3, lsl #18
     790:	2130211f 	teqcs	r0, pc, lsl r1
     794:	22221e2f 	eorcs	r1, r2, #752	; 0x2f0
     798:	7def032f 	stclvc	3, cr0, [pc, #188]!
     79c:	032f2f74 	teqeq	pc, #464	; 0x1d0
     7a0:	46242e6e 	strtmi	r2, [r4], -lr, ror #28
     7a4:	4f3d4d24 	svcmi	0x003d4d24
     7a8:	01000902 	tsteq	r0, r2, lsl #18
     7ac:	00021f01 	andeq	r1, r2, r1, lsl #30
     7b0:	88000200 	stmdahi	r0, {r9}
     7b4:	02000000 	andeq	r0, r0, #0	; 0x0
     7b8:	0d0efb01 	vstreq	d15, [lr, #-4]
     7bc:	01010100 	tsteq	r1, r0, lsl #2
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	01000001 	tsteq	r0, r1
     7c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     7cc:	30316632 	eorscc	r6, r1, r2, lsr r6
     7d0:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7d4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     7d8:	74730063 	ldrbtvc	r0, [r3], #-99
     7dc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     7e0:	5f783031 	svcpl	0x00783031
     7e4:	2f62696c 	svccs	0x0062696c
     7e8:	00636e69 	rsbeq	r6, r3, r9, ror #28
     7ec:	6d747300 	ldclvs	3, cr7, [r4]
     7f0:	31663233 	cmncc	r6, r3, lsr r2
     7f4:	665f7830 	undefined
     7f8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     7fc:	0100632e 	tsteq	r0, lr, lsr #6
     800:	74730000 	ldrbtvc	r0, [r3]
     804:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     808:	5f783031 	svcpl	0x00783031
     80c:	65707974 	ldrbvs	r7, [r0, #-2420]!
     810:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     814:	74730000 	ldrbtvc	r0, [r3]
     818:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     81c:	5f783031 	svcpl	0x00783031
     820:	2e70616d 	rpwcssz	f6, f0, #5.0
     824:	00020068 	andeq	r0, r2, r8, rrx
     828:	6d747300 	ldclvs	3, cr7, [r4]
     82c:	31663233 	cmncc	r6, r3, lsr r2
     830:	665f7830 	undefined
     834:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     838:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     83c:	00000000 	andeq	r0, r0, r0
     840:	69100205 	ldmdbvs	r0, {r0, r2, r9}
     844:	d6030800 	strle	r0, [r3], -r0, lsl #16
     848:	59170100 	ldmdbpl	r7, {r8}
     84c:	4a0d033d 	bmi	341548 <__Stack_Size+0x341148>
     850:	033d5917 	teqeq	sp, #376832	; 0x5c000
     854:	59174a0d 	ldmdbpl	r7, {r0, r2, r3, r9, fp, lr}
     858:	4a0b033d 	bmi	2c1554 <__Stack_Size+0x2c1154>
     85c:	033d3d14 	teqeq	sp, #1280	; 0x500
     860:	5914660a 	ldmdbpl	r4, {r1, r3, r9, sl, sp, lr}
     864:	3c03f503 	cfstr32cc	mvfx15, [r3], {3}
     868:	0a033d14 	beq	cfcc0 <__Stack_Size+0xcf8c0>
     86c:	032f143c 	teqeq	pc, #1006632960	; 0x3c000000
     870:	03154a0b 	tsteq	r5, #45056	; 0xb000
     874:	0a035809 	beq	d68a0 <__Stack_Size+0xd64a0>
     878:	0a03153c 	beq	c5d70 <__Stack_Size+0xc5970>
     87c:	3c0e0358 	stccc	3, cr0, [lr], {88}
     880:	5a5d2317 	bpl	17494e4 <__Stack_Size+0x17490e4>
     884:	183c1003 	ldmdane	ip!, {r0, r1, ip}
     888:	580b0330 	stmdapl	fp, {r4, r5, r8, r9}
     88c:	03660b03 	cmneq	r6, #3072	; 0xc00
     890:	2f173c0f 	svccs	0x00173c0f
     894:	154a0b03 	strbne	r0, [sl, #-2819]
     898:	0c036c7a 	stceq	12, cr6, [r3], {122}
     89c:	3c0c0366 	stccc	3, cr0, [ip], {102}
     8a0:	03205c03 	teqeq	r0, #768	; 0x300
     8a4:	5c032024 	stcpl	0, cr2, [r3], {36}
     8a8:	20240320 	eorcs	r0, r4, r0, lsr #6
     8ac:	5e205c03 	cdppl	12, 2, cr5, cr0, cr3, {0}
     8b0:	7438036c 	ldrtvc	r0, [r8], #-876
     8b4:	7fba0322 	svcvc	0x00ba0322
     8b8:	036c6c90 	cmneq	ip, #36864	; 0x9000
     8bc:	51036623 	tstpl	r3, r3, lsr #12
     8c0:	00c4032e 	sbceq	r0, r4, lr, lsr #6
     8c4:	65032220 	strvs	r2, [r3, #-544]
     8c8:	0343a52e 	movteq	sl, #13614	; 0x352e
     8cc:	034a7def 	movteq	r7, #44527	; 0xadef
     8d0:	77032009 	strvc	r2, [r3, -r9]
     8d4:	2009032e 	andcs	r0, r9, lr, lsr #6
     8d8:	2e760321 	cdpcs	3, 7, cr0, cr6, cr1, {1}
     8dc:	23200a03 	teqcs	r0, #12288	; 0x3000
     8e0:	03207303 	teqeq	r0, #201326592	; 0xc000000
     8e4:	31302e0d 	teqcc	r0, sp, lsl #28
     8e8:	773e1e22 	ldrvc	r1, [lr, -r2, lsr #28]!
     8ec:	036b233e 	cmneq	fp, #-134217728	; 0xf8000000
     8f0:	42827f8e 	addmi	r7, r2, #568	; 0x238
     8f4:	0335314c 	teqeq	r5, #19	; 0x13
     8f8:	3e212e79 	mcrcc	14, 1, r2, cr1, cr9, {3}
     8fc:	4d3d1c24 	ldcmi	12, cr1, [sp, #-144]!
     900:	4c693130 	stfmie	f3, [r9], #-192
     904:	4c4e4e22 	mcrrmi	14, 2, r4, lr, cr2
     908:	6c238731 	stcvs	7, cr8, [r3], #-196
     90c:	827ef803 	rsbshi	pc, lr, #196608	; 0x30000
     910:	200f0320 	andcs	r0, pc, r0, lsr #6
     914:	7403313e 	strvc	r3, [r3], #-318
     918:	2e0c032e 	cdpcs	3, 0, cr0, cr12, cr14, {1}
     91c:	73033d21 	movwvc	r3, #15649	; 0x3d21
     920:	200d0320 	andcs	r0, sp, r0, lsr #6
     924:	22221e30 	eorcs	r1, r2, #768	; 0x300
     928:	03231d23 	teqeq	r3, #2240	; 0x8c0
     92c:	15032e6d 	strne	r2, [r3, #-3693]
     930:	1d23a03c 	stcne	0, cr10, [r3, #-240]!
     934:	2e670323 	cdpcs	3, 6, cr0, cr7, cr3, {1}
     938:	a03c1c03 	eorsge	r1, ip, r3, lsl #24
     93c:	03231d23 	teqeq	r3, #2240	; 0x8c0
     940:	23032e60 	movwcs	r2, #15968	; 0x3e60
     944:	1d23a020 	stcne	0, cr10, [r3, #-128]!
     948:	87233123 	strhi	r3, [r3, -r3, lsr #2]!
     94c:	827f9003 	rsbshi	r9, pc, #3	; 0x3
     950:	7a032620 	bvc	ca1d8 <__Stack_Size+0xc9dd8>
     954:	31302620 	teqcc	r0, r0, lsr #12
     958:	20780336 	rsbscs	r0, r8, r6, lsr r3
     95c:	234b3f21 	movtcs	r3, #48929	; 0xbf21
     960:	036b2330 	cmneq	fp, #-1073741824	; 0xc0000000
     964:	20587fbb 	ldrhcs	r7, [r8], #-251
     968:	20790327 	rsbscs	r0, r9, r7, lsr #6
     96c:	24313027 	ldrtcs	r3, [r1], #-39
     970:	30224c1c 	eorcc	r4, r2, ip, lsl ip
     974:	ab036b23 	blge	db608 <__Stack_Size+0xdb208>
     978:	27204a7f 	undefined
     97c:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
     980:	1b253230 	blne	94d248 <__Stack_Size+0x94ce48>
     984:	3230314c 	eorscc	r3, r0, #19	; 0x13
     988:	3c0a0331 	stccc	3, cr0, [sl], {49}
     98c:	93036c23 	movwls	r6, #15395	; 0x3c23
     990:	4c244a7f 	stcmi	10, cr4, [r4], #-508
     994:	78033631 	stmdavc	r3, {r0, r4, r5, r9, sl, ip, sp}
     998:	243f212e 	ldrtcs	r2, [pc], #302	; 9a0 <__Stack_Size+0x5a0>
     99c:	304d3d1c 	subcc	r3, sp, ip, lsl sp
     9a0:	2b236931 	blcs	8dae6c <__Stack_Size+0x8daa6c>
     9a4:	231d233f 	tstcs	sp, #-67108864	; 0xfc000000
     9a8:	232e0a03 	teqcs	lr, #12288	; 0x3000
     9ac:	7fab036c 	svcvc	0x00ab036c
     9b0:	314c2482 	smlalbbcc	r2, ip, r2, r4
     9b4:	3f2b234b 	svccc	0x002b234b
     9b8:	036b233e 	cmneq	fp, #-134217728	; 0xf8000000
     9bc:	4c433c42 	mcrrmi	12, 4, r3, r3, cr2
     9c0:	25292531 	strcs	r2, [r9, #-1329]!
     9c4:	4d213d1b 	stcmi	13, cr3, [r1, #-108]!
     9c8:	026b2330 	rsbeq	r2, fp, #-1073741824	; 0xc0000000
     9cc:	01010005 	tsteq	r1, r5
     9d0:	00000174 	andeq	r0, r0, r4, ror r1
     9d4:	00860002 	addeq	r0, r6, r2
     9d8:	01020000 	tsteq	r2, r0
     9dc:	000d0efb 	strdeq	r0, [sp], -fp
     9e0:	01010101 	tsteq	r1, r1, lsl #2
     9e4:	01000000 	tsteq	r0, r0
     9e8:	73010000 	movwvc	r0, #4096	; 0x1000
     9ec:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     9f0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     9f4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     9f8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     9fc:	6d747300 	ldclvs	3, cr7, [r4]
     a00:	31663233 	cmncc	r6, r3, lsr r2
     a04:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     a08:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     a0c:	0000636e 	andeq	r6, r0, lr, ror #6
     a10:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a14:	30316632 	eorscc	r6, r1, r2, lsr r6
     a18:	70675f78 	rsbvc	r5, r7, r8, ror pc
     a1c:	632e6f69 	teqvs	lr, #420	; 0x1a4
     a20:	00000100 	andeq	r0, r0, r0, lsl #2
     a24:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a28:	30316632 	eorscc	r6, r1, r2, lsr r6
     a2c:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a30:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     a34:	00000200 	andeq	r0, r0, r0, lsl #4
     a38:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a3c:	30316632 	eorscc	r6, r1, r2, lsr r6
     a40:	616d5f78 	smcvs	54776
     a44:	00682e70 	rsbeq	r2, r8, r0, ror lr
     a48:	73000002 	movwvc	r0, #2	; 0x2
     a4c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     a50:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     a54:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     a58:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     a5c:	00000002 	andeq	r0, r0, r2
     a60:	38020500 	stmdacc	r2, {r8, sl}
     a64:	0308006e 	movweq	r0, #32878	; 0x806e
     a68:	030100fc 	movweq	r0, #4348	; 0x10fc
     a6c:	0c03200a 	stceq	0, cr2, [r3], {10}
     a70:	20760320 	rsbscs	r0, r6, r0, lsr #6
     a74:	2e790333 	mrccs	3, 3, r0, cr9, cr3, {1}
     a78:	6a033335 	bvs	cd754 <__Stack_Size+0xcd354>
     a7c:	2016032e 	andscs	r0, r6, lr, lsr #6
     a80:	303e3222 	eorscc	r3, lr, r2, lsr #4
     a84:	2b312132 	blcs	c48f54 <__Stack_Size+0xc48b54>
     a88:	7a032331 	bvc	c9754 <__Stack_Size+0xc9354>
     a8c:	273a2820 	ldrcs	r2, [sl, -r0, lsr #16]!
     a90:	3c660322 	stclcc	3, cr0, [r6], #-136
     a94:	253c1f03 	ldrcs	r1, [ip, #-3843]!
     a98:	2f5a3130 	svccs	0x005a3130
     a9c:	2b312132 	blcs	c48f6c <__Stack_Size+0xc48b6c>
     aa0:	7a032331 	bvc	c976c <__Stack_Size+0xc936c>
     aa4:	253a2820 	ldrcs	r2, [sl, #-2080]!
     aa8:	3c690322 	stclcc	3, cr0, [r9], #-136
     aac:	223c1b03 	eorscs	r1, ip, #3072	; 0xc00
     ab0:	143c0b03 	ldrtne	r0, [ip], #-2819
     ab4:	032f2f3d 	teqeq	pc, #244	; 0xf4
     ab8:	0319200c 	tsteq	r9, #12	; 0xc
     abc:	0a035809 	beq	d6ae8 <__Stack_Size+0xd66e8>
     ac0:	032f1620 	teqeq	pc, #33554432	; 0x2000000
     ac4:	03192e0c 	tsteq	r9, #192	; 0xc0
     ac8:	0a035809 	beq	d6af4 <__Stack_Size+0xd66f4>
     acc:	032f1620 	teqeq	pc, #33554432	; 0x2000000
     ad0:	21172e0d 	tstcs	r7, sp, lsl #28
     ad4:	17200d03 	strne	r0, [r0, -r3, lsl #26]!
     ad8:	20100321 	andscs	r0, r0, r1, lsr #6
     adc:	22322218 	eorscs	r2, r2, #-2147483647	; 0x80000001
     ae0:	162e0c03 	strtne	r0, [lr], -r3, lsl #24
     ae4:	200d0321 	andcs	r0, sp, r1, lsr #6
     ae8:	22223019 	eorcs	r3, r2, #25	; 0x19
     aec:	03212222 	teqeq	r1, #536870914	; 0x20000002
     af0:	3019200f 	andscc	r2, r9, pc
     af4:	302d312c 	eorcc	r3, sp, ip, lsr #2
     af8:	0b032f22 	bleq	cc788 <__Stack_Size+0xcc388>
     afc:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
     b00:	0c034a26 	stceq	10, cr4, [r3], {38}
     b04:	76032c20 	strvc	r2, [r3], -r0, lsr #24
     b08:	22232720 	eorcs	r2, r3, #8388608	; 0x800000
     b0c:	1f233329 	svcne	0x00233329
     b10:	6b3f4c2f 	blvs	fd3bd4 <__Stack_Size+0xfd37d4>
     b14:	5b223167 	blpl	88d0b8 <__Stack_Size+0x88ccb8>
     b18:	4a0f032f 	bmi	3c17dc <__Stack_Size+0x3c13dc>
     b1c:	1f2f3e27 	svcne	0x002f3e27
     b20:	a703599f 	undefined
     b24:	2d214a7c 	fstmdbscs	r1!, {s8-s131}
     b28:	034b2f21 	movteq	r2, #48929	; 0xbf21
     b2c:	1c242e45 	stcne	14, cr2, [r4], #-276
     b30:	08241c24 	stmdaeq	r4!, {r2, r5, sl, fp, ip}
     b34:	4b324ba1 	blmi	c939c0 <__Stack_Size+0xc935c0>
     b38:	4b324b32 	blmi	c93808 <__Stack_Size+0xc93408>
     b3c:	4b324b32 	blmi	c9380c <__Stack_Size+0xc9340c>
     b40:	025e5932 	subseq	r5, lr, #819200	; 0xc8000
     b44:	01010006 	tsteq	r1, r6
     b48:	000001a6 	andeq	r0, r0, r6, lsr #3
     b4c:	00860002 	addeq	r0, r6, r2
     b50:	01020000 	tsteq	r2, r0
     b54:	000d0efb 	strdeq	r0, [sp], -fp
     b58:	01010101 	tsteq	r1, r1, lsl #2
     b5c:	01000000 	tsteq	r0, r0
     b60:	73010000 	movwvc	r0, #4096	; 0x1000
     b64:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     b68:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     b6c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     b70:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     b74:	6d747300 	ldclvs	3, cr7, [r4]
     b78:	31663233 	cmncc	r6, r3, lsr r2
     b7c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     b80:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     b84:	0000636e 	andeq	r6, r0, lr, ror #6
     b88:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     b8c:	30316632 	eorscc	r6, r1, r2, lsr r6
     b90:	766e5f78 	uqsub16vc	r5, lr, r8
     b94:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
     b98:	00000100 	andeq	r0, r0, r0, lsl #2
     b9c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ba0:	30316632 	eorscc	r6, r1, r2, lsr r6
     ba4:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ba8:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     bac:	00000200 	andeq	r0, r0, r0, lsl #4
     bb0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     bb4:	30316632 	eorscc	r6, r1, r2, lsr r6
     bb8:	616d5f78 	smcvs	54776
     bbc:	00682e70 	rsbeq	r2, r8, r0, ror lr
     bc0:	73000002 	movwvc	r0, #2	; 0x2
     bc4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     bc8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     bcc:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     bd0:	00682e63 	rsbeq	r2, r8, r3, ror #28
     bd4:	00000002 	andeq	r0, r0, r2
     bd8:	c0020500 	andgt	r0, r2, r0, lsl #10
     bdc:	03080070 	movweq	r0, #32880	; 0x8070
     be0:	3d150124 	ldfccs	f0, [r5, #-144]
     be4:	7a03352d 	bvc	ce0a0 <__Stack_Size+0xcdca0>
     be8:	322f2f20 	eorcc	r2, pc, #128	; 0x80
     bec:	302c241c 	eorcc	r2, ip, ip, lsl r4
     bf0:	0b03242c 	bleq	c9ca8 <__Stack_Size+0xc98a8>
     bf4:	1e3e153c 	mrcne	5, 1, r1, cr14, cr12, {1}
     bf8:	21212f21 	teqcs	r1, r1, lsr #30
     bfc:	2f213e23 	svccs	0x00213e23
     c00:	16032121 	strne	r2, [r3], -r1, lsr #2
     c04:	03671766 	cmneq	r7, #26738688	; 0x1980000
     c08:	0a034a0d 	beq	d3444 <__Stack_Size+0xd3044>
     c0c:	1c243f20 	stcne	15, cr3, [r4], #-128
     c10:	03200a03 	teqeq	r0, #12288	; 0x3000
     c14:	3d5c2076 	ldclcc	0, cr2, [ip, #-472]
     c18:	1f312b3f 	svcne	0x00312b3f
     c1c:	6a222b24 	bvs	88b8b4 <__Stack_Size+0x88b4b4>
     c20:	3122301e 	teqcc	r2, lr, lsl r0
     c24:	0b039388 	bleq	e5a4c <__Stack_Size+0xe564c>
     c28:	212f1458 	teqcs	pc, r8, asr r4
     c2c:	d7032121 	strle	r2, [r3, -r1, lsr #2]
     c30:	67132000 	ldrvs	r2, [r3, -r0]
     c34:	19660b03 	stmdbne	r6!, {r0, r1, r8, r9, fp}^
     c38:	9e09034c 	cdpls	3, 0, cr0, cr9, cr12, {2}
     c3c:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     c40:	4a0a032f 	bmi	281904 <__Stack_Size+0x281504>
     c44:	0b039116 	bleq	e50a4 <__Stack_Size+0xe4ca4>
     c48:	034b133c 	movteq	r1, #45884	; 0xb33c
     c4c:	4c194a0b 	ldcmi	10, cr4, [r9], {11}
     c50:	039e0903 	orrseq	r0, lr, #49152	; 0xc000
     c54:	2f134a0b 	svccs	0x00134a0b
     c58:	174a1003 	strbne	r1, [sl, -r3]
     c5c:	3c0a0375 	stccc	3, cr0, [sl], {117}
     c60:	0a033d13 	beq	d00b4 <__Stack_Size+0xcfcb4>
     c64:	033d1358 	teqeq	sp, #1610612737	; 0x60000001
     c68:	22175811 	andscs	r5, r7, #1114112	; 0x110000
     c6c:	11035a5c 	tstne	r3, ip, asr sl
     c70:	225a193c 	subscs	r1, sl, #983040	; 0xf0000
     c74:	18035a5c 	stmdane	r3, {r2, r3, r4, r6, r9, fp, ip, lr}
     c78:	2009034a 	andcs	r0, r9, sl, asr #6
     c7c:	31694b78 	smccc	38072
     c80:	2e79033f 	mrccs	3, 3, r0, cr9, cr15, {1}
     c84:	207a0328 	rsbscs	r0, sl, r8, lsr #6
     c88:	03597525 	cmpeq	r9, #155189248	; 0x9400000
     c8c:	23194a10 	tstcs	r9, #65536	; 0x10000
     c90:	820b034c 	andhi	r0, fp, #805306369	; 0x30000001
     c94:	033c0f03 	teqeq	ip, #12	; 0xc
     c98:	03830109 	orreq	r0, r3, #1073741826	; 0x40000002
     c9c:	09034a0e 	stmdbeq	r3, {r1, r2, r3, r9, fp, lr}
     ca0:	14039101 	strne	r9, [r3], #-257
     ca4:	010a033c 	tsteq	sl, ip, lsr r3
     ca8:	820b035a 	andhi	r0, fp, #1744830465	; 0x68000001
     cac:	193c1103 	ldmdbne	ip!, {r0, r1, r8, ip}
     cb0:	303e3e23 	eorscc	r3, lr, r3, lsr #28
     cb4:	28587803 	ldmdacs	r8, {r0, r1, fp, ip, sp, lr}^
     cb8:	36207803 	strtcc	r7, [r0], -r3, lsl #16
     cbc:	4140224b 	cmpmi	r0, fp, asr #4
     cc0:	3c0f0331 	stccc	3, cr0, [pc], {49}
     cc4:	30010903 	andcc	r0, r1, r3, lsl #18
     cc8:	23241c32 	teqcs	r4, #12800	; 0x3200
     ccc:	3c7c8d03 	ldclcc	13, cr8, [ip], #-12
     cd0:	6f032f2f 	svcvs	0x00032f2f
     cd4:	241c242e 	ldrcs	r2, [ip], #-1070
     cd8:	3c6d032f 	stclcc	3, cr0, [sp], #-188
     cdc:	72032f2f 	andvc	r2, r3, #188	; 0xbc
     ce0:	032f2f2e 	teqeq	pc, #184	; 0xb8
     ce4:	2f2f2e72 	svccs	0x002f2e72
     ce8:	2f2e7203 	svccs	0x002e7203
     cec:	0002022f 	andeq	r0, r2, pc, lsr #4
     cf0:	00d20101 	sbcseq	r0, r2, r1, lsl #2
     cf4:	00020000 	andeq	r0, r2, r0
     cf8:	00000071 	andeq	r0, r0, r1, ror r0
     cfc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d00:	0101000d 	tsteq	r1, sp
     d04:	00000101 	andeq	r0, r0, r1, lsl #2
     d08:	00000100 	andeq	r0, r0, r0, lsl #2
     d0c:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     d10:	31663233 	cmncc	r6, r3, lsr r2
     d14:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     d18:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     d1c:	73006372 	movwvc	r6, #882	; 0x372
     d20:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     d24:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     d28:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     d2c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     d30:	74730000 	ldrbtvc	r0, [r3]
     d34:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d38:	5f783031 	svcpl	0x00783031
     d3c:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
     d40:	00010063 	andeq	r0, r1, r3, rrx
     d44:	6d747300 	ldclvs	3, cr7, [r4]
     d48:	31663233 	cmncc	r6, r3, lsr r2
     d4c:	745f7830 	ldrbvc	r7, [pc], #2096	; d54 <__Stack_Size+0x954>
     d50:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     d54:	00020068 	andeq	r0, r2, r8, rrx
     d58:	6d747300 	ldclvs	3, cr7, [r4]
     d5c:	31663233 	cmncc	r6, r3, lsr r2
     d60:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
     d64:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     d68:	00000200 	andeq	r0, r0, r0, lsl #4
     d6c:	02050000 	andeq	r0, r5, #0	; 0x0
     d70:	08007444 	stmdaeq	r0, {r2, r6, sl, ip, sp, lr}
     d74:	0100d103 	tsteq	r0, r3, lsl #2
     d78:	0b032f16 	bleq	cc9d8 <__Stack_Size+0xcc5d8>
     d7c:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
     d80:	31184a14 	tstcc	r8, r4, lsl sl
     d84:	03212331 	teqeq	r1, #-1006632960	; 0xc4000000
     d88:	2f164a0b 	svccs	0x00164a0b
     d8c:	4a00d803 	bmi	36da0 <__Stack_Size+0x369a0>
     d90:	660b0318 	undefined
     d94:	164a0d03 	strbne	r0, [sl], -r3, lsl #26
     d98:	3c430359 	mcrrcc	3, 5, r0, r3, cr9
     d9c:	1e221e14 	mcrne	14, 1, r1, cr2, cr4, {0}
     da0:	934d3f22 	movtls	r3, #57122	; 0xdf22
     da4:	4a49032f 	bmi	1241a68 <__Stack_Size+0x1241668>
     da8:	2078031a 	rsbscs	r0, r8, sl, lsl r3
     dac:	20780328 	rsbscs	r0, r8, r8, lsr #6
     db0:	31200b03 	teqcc	r0, r3, lsl #22
     db4:	1d692323 	stclne	3, cr2, [r9, #-140]!
     db8:	3041233f 	subcc	r2, r1, pc, lsr r3
     dbc:	4a7ef503 	bmi	1fbe1d0 <__Stack_Size+0x1fbddd0>
     dc0:	024b6721 	subeq	r6, fp, #8650752	; 0x840000
     dc4:	01010001 	tsteq	r1, r1
     dc8:	000001b4 	strheq	r0, [r0], -r4
     dcc:	00840002 	addeq	r0, r4, r2
     dd0:	01020000 	tsteq	r2, r0
     dd4:	000d0efb 	strdeq	r0, [sp], -fp
     dd8:	01010101 	tsteq	r1, r1, lsl #2
     ddc:	01000000 	tsteq	r0, r0
     de0:	73010000 	movwvc	r0, #4096	; 0x1000
     de4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     de8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     dec:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     df0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     df4:	6d747300 	ldclvs	3, cr7, [r4]
     df8:	31663233 	cmncc	r6, r3, lsr r2
     dfc:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     e00:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     e04:	0000636e 	andeq	r6, r0, lr, ror #6
     e08:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e0c:	30316632 	eorscc	r6, r1, r2, lsr r6
     e10:	63725f78 	cmnvs	r2, #480	; 0x1e0
     e14:	00632e63 	rsbeq	r2, r3, r3, ror #28
     e18:	73000001 	movwvc	r0, #1	; 0x1
     e1c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     e20:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e24:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     e28:	00682e65 	rsbeq	r2, r8, r5, ror #28
     e2c:	73000002 	movwvc	r0, #2	; 0x2
     e30:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     e34:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e38:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     e3c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e40:	74730000 	ldrbtvc	r0, [r3]
     e44:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e48:	5f783031 	svcpl	0x00783031
     e4c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     e50:	00020068 	andeq	r0, r2, r8, rrx
     e54:	05000000 	streq	r0, [r0]
     e58:	00752402 	rsbseq	r2, r5, r2, lsl #8
     e5c:	00fc0308 	rscseq	r0, ip, r8, lsl #6
     e60:	5b5b1401 	blpl	16c5e6c <__Stack_Size+0x16c5a6c>
     e64:	2f4d4d69 	svccs	0x004d4d69
     e68:	18661103 	stmdane	r6!, {r0, r1, r8, ip}^
     e6c:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
     e70:	415c4d4d 	cmpmi	ip, sp, asr #26
     e74:	3c0c0350 	stccc	3, cr0, [ip], {80}
     e78:	06a30321 	strteq	r0, [r3], r1, lsr #6
     e7c:	79dd0320 	ldmibvc	sp, {r5, r8, r9}^
     e80:	06a30320 	strteq	r0, [r3], r0, lsr #6
     e84:	79e50320 	stmibvc	r5!, {r5, r8, r9}^
     e88:	212d2f20 	teqcs	sp, r0, lsr #30
     e8c:	58069a03 	stmdapl	r6, {r0, r1, r9, fp, ip, pc}
     e90:	5879f303 	ldmdapl	r9!, {r0, r1, r8, r9, ip, sp, lr, pc}^
     e94:	184a0c03 	stmdane	sl, {r0, r1, sl, fp}^
     e98:	21313131 	teqcs	r1, r1, lsr r1
     e9c:	163c0d03 	ldrtne	r0, [ip], -r3, lsl #26
     ea0:	4a14032f 	bmi	501b64 <__Stack_Size+0x501764>
     ea4:	214d3419 	cmpcs	sp, r9, lsl r4
     ea8:	163c0c03 	ldrtne	r0, [ip], -r3, lsl #24
     eac:	4a0e032f 	bmi	381b70 <__Stack_Size+0x381770>
     eb0:	23313118 	teqcs	r1, #6	; 0x6
     eb4:	4a0e0321 	bmi	381b40 <__Stack_Size+0x381740>
     eb8:	15034b13 	strne	r4, [r3, #-2835]
     ebc:	3131184a 	teqcc	r1, sl, asr #16
     ec0:	11032123 	tstne	r3, r3, lsr #2
     ec4:	3131184a 	teqcc	r1, sl, asr #16
     ec8:	11032123 	tstne	r3, r3, lsr #2
     ecc:	3131184a 	teqcc	r1, sl, asr #16
     ed0:	13032131 	movwne	r2, #12593	; 0x3131
     ed4:	5d23173c 	stcpl	7, cr1, [r3, #-240]!
     ed8:	3c10035a 	ldccc	3, cr0, [r0], {90}
     edc:	10032f16 	andne	r2, r3, r6, lsl pc
     ee0:	3131184a 	teqcc	r1, sl, asr #16
     ee4:	0f032123 	svceq	0x00032123
     ee8:	0334184a 	teqeq	r4, #4849664	; 0x4a0000
     eec:	2723207a 	undefined
     ef0:	3c09032a 	stccc	3, cr0, [r9], {42}
     ef4:	4a0c0334 	bmi	301bcc <__Stack_Size+0x3017cc>
     ef8:	11032f16 	tstne	r3, r6, lsl pc
     efc:	034b174a 	movteq	r1, #46922	; 0xb74a
     f00:	2f164a0d 	svccs	0x00164a0d
     f04:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
     f08:	0322241c 	teqeq	r2, #469762048	; 0x1c000000
     f0c:	4c21660c 	stcmi	6, cr6, [r1], #-48
     f10:	273a3022 	ldrcs	r3, [sl, -r2, lsr #32]!
     f14:	267a7869 	ldrbtcs	r7, [sl], -r9, ror #16
     f18:	34207a03 	strtcc	r7, [r0], #-2563
     f1c:	77331b25 	ldrvc	r1, [r3, -r5, lsr #22]!
     f20:	36416941 	strbcc	r6, [r1], -r1, asr #18
     f24:	3f207803 	svccc	0x00207803
     f28:	15036741 	strne	r6, [r3, #-1857]
     f2c:	5c221790 	stcpl	7, cr1, [r2], #-576
     f30:	3c14035a 	ldccc	3, cr0, [r4], {90}
     f34:	5a5c2217 	bpl	1709798 <__Stack_Size+0x1709398>
     f38:	173c1503 	ldrne	r1, [ip, -r3, lsl #10]!
     f3c:	035a5c22 	cmpeq	sl, #8704	; 0x2200
     f40:	22173c13 	andscs	r3, r7, #4864	; 0x1300
     f44:	14035a5c 	strne	r5, [r3], #-2652
     f48:	5c22173c 	stcpl	7, cr1, [r2], #-240
     f4c:	3c0b035a 	stccc	3, cr0, [fp], {90}
     f50:	0b032f16 	bleq	ccbb0 <__Stack_Size+0xcc7b0>
     f54:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
     f58:	2f174a10 	svccs	0x00174a10
     f5c:	034a1603 	movteq	r1, #42499	; 0xa603
     f60:	30220109 	eorcc	r0, r2, r9, lsl #2
     f64:	03943092 	orrseq	r3, r4, #146	; 0x92
     f68:	0d038211 	sfmeq	f0, 1, [r3, #-68]
     f6c:	0359143c 	cmpeq	r9, #1006632960	; 0x3c000000
     f70:	03193c11 	tsteq	r9, #4352	; 0x1100
     f74:	1103660b 	tstne	r3, fp, lsl #12
     f78:	022f184a 	eoreq	r1, pc, #4849664	; 0x4a0000
     f7c:	01010004 	tsteq	r1, r4
     f80:	000000b9 	strheq	r0, [r0], -r9
     f84:	00750002 	rsbseq	r0, r5, r2
     f88:	01020000 	tsteq	r2, r0
     f8c:	000d0efb 	strdeq	r0, [sp], -fp
     f90:	01010101 	tsteq	r1, r1, lsl #2
     f94:	01000000 	tsteq	r0, r0
     f98:	73010000 	movwvc	r0, #4096	; 0x1000
     f9c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     fa0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     fa4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     fa8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     fac:	6d747300 	ldclvs	3, cr7, [r4]
     fb0:	31663233 	cmncc	r6, r3, lsr r2
     fb4:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     fb8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     fbc:	0000636e 	andeq	r6, r0, lr, ror #6
     fc0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     fc4:	30316632 	eorscc	r6, r1, r2, lsr r6
     fc8:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     fcc:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
     fd0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
     fd4:	73000001 	movwvc	r0, #1	; 0x1
     fd8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     fdc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     fe0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     fe4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fe8:	73000002 	movwvc	r0, #2	; 0x2
     fec:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     ff0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     ff4:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     ff8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	78c80205 	stmiavc	r8, {r0, r2, r9}^
    1004:	2b030800 	blcs	c300c <__Stack_Size+0xc2c0c>
    1008:	4e301601 	cfmsuba32mi	mvax0, mvax1, mvfx0, mvfx1
    100c:	3c0b035a 	stccc	3, cr0, [fp], {90}
    1010:	0e032f16 	mcreq	15, 0, r2, cr3, cr6, {0}
    1014:	4c30164a 	ldcmi	6, cr1, [r0], #-296
    1018:	033e6a3e 	teqeq	lr, #253952	; 0x3e000
    101c:	22164a0b 	andscs	r4, r6, #45056	; 0xb000
    1020:	0a035a5c 	beq	d7998 <__Stack_Size+0xd7598>
    1024:	032f133c 	teqeq	pc, #-268435456	; 0xf0000000
    1028:	0a034a0e 	beq	d3868 <__Stack_Size+0xd3468>
    102c:	2e760301 	cdpcs	3, 7, cr0, cr6, cr1, {0}
    1030:	22200a03 	eorcs	r0, r0, #12288	; 0x3000
    1034:	580c0378 	stmdapl	ip, {r3, r4, r5, r6, r8, r9}
    1038:	01000402 	tsteq	r0, r2, lsl #8
    103c:	0005eb01 	andeq	lr, r5, r1, lsl #22
    1040:	84000200 	strhi	r0, [r0], #-512
    1044:	02000000 	andeq	r0, r0, #0	; 0x0
    1048:	0d0efb01 	vstreq	d15, [lr, #-4]
    104c:	01010100 	tsteq	r1, r0, lsl #2
    1050:	00000001 	andeq	r0, r0, r1
    1054:	01000001 	tsteq	r0, r1
    1058:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    105c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1060:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1064:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1068:	74730063 	ldrbtvc	r0, [r3], #-99
    106c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1070:	5f783031 	svcpl	0x00783031
    1074:	2f62696c 	svccs	0x0062696c
    1078:	00636e69 	rsbeq	r6, r3, r9, ror #28
    107c:	6d747300 	ldclvs	3, cr7, [r4]
    1080:	31663233 	cmncc	r6, r3, lsr r2
    1084:	745f7830 	ldrbvc	r7, [pc], #2096	; 108c <__Stack_Size+0xc8c>
    1088:	632e6d69 	teqvs	lr, #6720	; 0x1a40
    108c:	00000100 	andeq	r0, r0, r0, lsl #2
    1090:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1094:	30316632 	eorscc	r6, r1, r2, lsr r6
    1098:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    109c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    10a0:	00000200 	andeq	r0, r0, r0, lsl #4
    10a4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    10a8:	30316632 	eorscc	r6, r1, r2, lsr r6
    10ac:	616d5f78 	smcvs	54776
    10b0:	00682e70 	rsbeq	r2, r8, r0, ror lr
    10b4:	73000002 	movwvc	r0, #2	; 0x2
    10b8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    10bc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    10c0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    10c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	796c0205 	stmdbvc	ip!, {r0, r2, r9}^
    10d0:	c6030800 	strgt	r0, [r3], -r0, lsl #16
    10d4:	03190101 	tsteq	r9, #1073741824	; 0x40000000
    10d8:	3d272079 	stccc	0, cr2, [r7, #-484]!
    10dc:	28587803 	ldmdacs	r8, {r0, r1, fp, ip, sp, lr}^
    10e0:	7803283f 	stmdavc	r3, {r0, r1, r2, r3, r4, r5, fp, sp}
    10e4:	72032320 	andvc	r2, r3, #-2147483648	; 0x80000000
    10e8:	200e0320 	andcs	r0, lr, r0, lsr #6
    10ec:	3ea13e23 	cdpcc	14, 10, cr3, cr1, cr3, {1}
    10f0:	03660f03 	cmneq	r6, #12	; 0xc
    10f4:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    10f8:	200a0320 	andcs	r0, sl, r0, lsr #6
    10fc:	7003235b 	andvc	r2, r3, fp, asr r3
    1100:	20100320 	andscs	r0, r0, r0, lsr #6
    1104:	200c0323 	andcs	r0, ip, r3, lsr #6
    1108:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    110c:	312b200c 	teqcc	fp, ip
    1110:	261d231d 	undefined
    1114:	2e740331 	mrccs	3, 3, r0, cr4, cr1, {1}
    1118:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    111c:	03665903 	cmneq	r6, #49152	; 0xc000
    1120:	59032027 	stmdbpl	r3, {r0, r1, r2, r5, sp}
    1124:	2027034a 	eorcs	r0, r7, sl, asr #6
    1128:	3f2b4d28 	svccc	0x002b4d28
    112c:	2a324d23 	bcs	c945c0 <__Stack_Size+0xc941c0>
    1130:	31314735 	teqcc	r1, r5, lsr r7
    1134:	4d2e5403 	cfstrsmi	mvf5, [lr, #-12]!
    1138:	23202c03 	teqcs	r0, #768	; 0x300
    113c:	0f032123 	svceq	0x00032123
    1140:	010a0374 	tsteq	sl, r4, ror r3
    1144:	03207603 	teqeq	r0, #3145728	; 0x300000
    1148:	235b200a 	cmpcs	fp, #10	; 0xa
    114c:	03200c03 	teqeq	r0, #768	; 0x300
    1150:	03232e74 	teqeq	r3, #1856	; 0x740
    1154:	77032009 	strvc	r2, [r3, -r9]
    1158:	200c0320 	andcs	r0, ip, r0, lsr #6
    115c:	1d31231d 	ldcne	3, cr2, [r1, #-116]!
    1160:	74033f23 	strvc	r3, [r3], #-3875
    1164:	200c0320 	andcs	r0, ip, r0, lsr #6
    1168:	66590322 	ldrbvs	r0, [r9], -r2, lsr #6
    116c:	03202703 	teqeq	r0, #786432	; 0xc0000
    1170:	27034a59 	smlsdcs	r3, r9, sl, r4
    1174:	2b4d282e 	blcs	134b234 <__Stack_Size+0x134ae34>
    1178:	5f4d313f 	svcpl	0x004d313f
    117c:	2b314d2b 	blcs	c54630 <__Stack_Size+0xc54230>
    1180:	3c540323 	mrrccc	3, 2, r0, r4, cr3
    1184:	3c2d034d 	stccc	3, cr0, [sp], #-308
    1188:	03212323 	teqeq	r1, #-1946157056	; 0x8c000000
    118c:	0a03740f 	beq	de1d0 <__Stack_Size+0xdddd0>
    1190:	20760301 	rsbscs	r0, r6, r1, lsl #6
    1194:	5b200a03 	blpl	8039a8 <__Stack_Size+0x8035a8>
    1198:	200c0323 	andcs	r0, ip, r3, lsr #6
    119c:	232e7403 	teqcs	lr, #50331648	; 0x3000000
    11a0:	03200903 	teqeq	r0, #49152	; 0xc000
    11a4:	0c032077 	stceq	0, cr2, [r3], {119}
    11a8:	31231d20 	teqcc	r3, r0, lsr #26
    11ac:	033f231d 	teqeq	pc, #1946157056	; 0x74000000
    11b0:	0c032074 	stceq	0, cr2, [r3], {116}
    11b4:	59032220 	stmdbpl	r3, {r5, r9, sp}
    11b8:	20270366 	eorcs	r0, r7, r6, ror #6
    11bc:	034a5903 	movteq	r5, #43267	; 0xa903
    11c0:	4d282e27 	stcmi	14, cr2, [r8, #-156]!
    11c4:	4d313f2b 	ldcmi	15, cr3, [r1, #-172]!
    11c8:	314d2b5f 	cmpcc	sp, pc, asr fp
    11cc:	5403232b 	strpl	r2, [r3], #-811
    11d0:	2d034d3c 	stccs	13, cr4, [r3, #-240]
    11d4:	21232320 	teqcs	r3, r0, lsr #6
    11d8:	03740f03 	cmneq	r4, #12	; 0xc
    11dc:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    11e0:	200a0320 	andcs	r0, sl, r0, lsr #6
    11e4:	2073035b 	rsbscs	r0, r3, fp, asr r3
    11e8:	31200d03 	teqcc	r0, r3, lsl #26
    11ec:	03201203 	teqeq	r0, #805306368	; 0x30000000
    11f0:	2631206e 	ldrtcs	r2, [r1], -lr, rrx
    11f4:	03207a03 	teqeq	r0, #12288	; 0x3000
    11f8:	7a032012 	bvc	c9248 <__Stack_Size+0xc8e48>
    11fc:	1b302620 	blne	c0aa84 <__Stack_Size+0xc0a684>
    1200:	90590325 	subsls	r0, r9, r5, lsr #6
    1204:	252e2703 	strcs	r2, [lr, #-1795]!
    1208:	03231d31 	teqeq	r3, #3136	; 0xc40
    120c:	3f4d4a67 	svccc	0x004d4a67
    1210:	31201703 	teqcc	r0, r3, lsl #14
    1214:	4d206603 	stcmi	6, cr6, [r0, #-12]!
    1218:	03231d31 	teqeq	r3, #3136	; 0xc40
    121c:	03213c17 	teqeq	r1, #5888	; 0x1700
    1220:	0903740f 	stmdbeq	r3, {r0, r1, r2, r3, sl, ip, sp, lr}
    1224:	20770301 	rsbscs	r0, r7, r1, lsl #6
    1228:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    122c:	2013a003 	andscs	sl, r3, r3
    1230:	206ce303 	rsbcs	lr, ip, r3, lsl #6
    1234:	20139d03 	andscs	r9, r3, r3, lsl #26
    1238:	4a6ce303 	bmi	1b39e4c <__Stack_Size+0x1b39a4c>
    123c:	3c139d03 	ldccc	13, cr9, [r3], {3}
    1240:	4d242122 	stfmis	f2, [r4, #-136]!
    1244:	231d312b 	tstcs	sp, #-1073741814	; 0xc000000a
    1248:	23322a21 	teqcs	r2, #135168	; 0x21000
    124c:	7cef0321 	stclvc	3, cr0, [pc], #132
    1250:	6fea0320 	svcvs	0x00ea0320
    1254:	10960320 	addsne	r0, r6, r0, lsr #6
    1258:	e9035b20 	stmdb	r3, {r5, r8, r9, fp, ip, lr}
    125c:	c4034a6f 	strgt	r4, [r3], #-2671
    1260:	bf032e13 	svclt	0x00032e13
    1264:	c103206c 	tstgt	r3, ip, rrx
    1268:	bf032e13 	svclt	0x00032e13
    126c:	c1034a6c 	tstgt	r3, ip, ror #20
    1270:	21222e13 	teqcs	r2, r3, lsl lr
    1274:	7a034224 	bvc	d1b0c <__Stack_Size+0xd170c>
    1278:	331b262e 	tstcc	fp, #48234496	; 0x2e00000
    127c:	322a251b 	eorcc	r2, sl, #113246208	; 0x6c00000
    1280:	2131241c 	teqcs	r1, ip, lsl r4
    1284:	207cdb03 	rsbscs	sp, ip, r3, lsl #22
    1288:	206fd803 	rsbcs	sp, pc, r3, lsl #16
    128c:	2010a803 	andscs	sl, r0, r3, lsl #16
    1290:	6fd7035b 	svcvs	0x00d7035b
    1294:	13ea0374 	mvnne	r0, #-805306367	; 0xd0000001
    1298:	25216866 	strcs	r6, [r1, #-2150]!
    129c:	1c242a32 	stcne	10, cr2, [r4], #-200
    12a0:	2a321c24 	bcs	c88338 <__Stack_Size+0xc87f38>
    12a4:	31241c24 	teqcc	r4, r4, lsr #24
    12a8:	7cc80321 	stclvc	3, cr0, [r8], {33}
    12ac:	6fc60320 	svcvs	0x00c60320
    12b0:	10ba0320 	adcsne	r0, sl, r0, lsr #6
    12b4:	d4035b20 	strle	r5, [r3], #-2848
    12b8:	21684a03 	cmncs	r8, r3, lsl #20
    12bc:	242a4025 	strtcs	r4, [sl], #-37
    12c0:	241c321c 	ldrcs	r3, [ip], #-540
    12c4:	241c322a 	ldrcs	r3, [ip], #-554
    12c8:	b5032131 	strlt	r2, [r3, #-305]
    12cc:	b403207c 	strlt	r2, [r3], #-124
    12d0:	cc03206f 	stcgt	0, cr2, [r3], {111}
    12d4:	035b2010 	cmpeq	fp, #16	; 0x10
    12d8:	03666fb3 	cmneq	r6, #716	; 0x2cc
    12dc:	1b032010 	blne	c9324 <__Stack_Size+0xc8f24>
    12e0:	2e6d032e 	cdpcs	3, 6, cr0, cr13, cr14, {1}
    12e4:	03200a03 	teqeq	r0, #12288	; 0x3000
    12e8:	0a032076 	beq	c94c8 <__Stack_Size+0xc90c8>
    12ec:	6609034a 	strvs	r0, [r9], -sl, asr #6
    12f0:	2e12cd03 	cdpcs	13, 1, cr12, cr2, cr3, {0}
    12f4:	69242168 	stmdbvs	r4!, {r3, r5, r6, r8, sp}
    12f8:	231d232b 	tstcs	sp, #-1409286144	; 0xac000000
    12fc:	03213f21 	teqeq	r1, #132	; 0x84
    1300:	03207cef 	teqeq	r0, #61184	; 0xef00
    1304:	032070bc 	teqeq	r0, #188	; 0xbc
    1308:	5b2e0fc4 	blpl	b85220 <__Stack_Size+0xb84e20>
    130c:	4a03ad03 	bmi	ec720 <__Stack_Size+0xec320>
    1310:	42242168 	eormi	r2, r4, #26	; 0x1a
    1314:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    1318:	251b331b 	ldrcs	r3, [fp, #-795]
    131c:	2131322a 	teqcs	r1, sl, lsr #4
    1320:	207cdb03 	rsbscs	sp, ip, r3, lsl #22
    1324:	03910369 	orrseq	r0, r1, #-1543503871	; 0xa4000001
    1328:	24216866 	strtcs	r6, [r1], #-2150
    132c:	2e7a0342 	cdpcs	3, 7, cr0, cr10, cr2, {2}
    1330:	1b331b26 	blne	cc7fd0 <__Stack_Size+0xcc7bd0>
    1334:	1c322a25 	ldcne	10, cr2, [r2], #-148
    1338:	03213124 	teqeq	r1, #9	; 0x9
    133c:	03207cdb 	teqeq	r0, #56064	; 0xdb00
    1340:	032070af 	teqeq	r0, #175	; 0xaf
    1344:	5b2e0fd1 	blpl	b85290 <__Stack_Size+0xb84e90>
    1348:	6602e303 	strvs	lr, [r2], -r3, lsl #6
    134c:	40242168 	eormi	r2, r4, r8, ror #2
    1350:	321c242a 	andscc	r2, ip, #704643072	; 0x2a000000
    1354:	242a241c 	strtcs	r2, [sl], #-1052
    1358:	ef032123 	svc	0x00032123
    135c:	0369207c 	cmneq	r9, #124	; 0x7c
    1360:	034a70d0 	movteq	r7, #41168	; 0xa0d0
    1364:	0d032e0e 	stceq	14, cr2, [r3, #-56]
    1368:	0b03f701 	bleq	fef74 <__Stack_Size+0xfeb74>
    136c:	3d3d142e 	cfldrscc	mvf1, [sp, #-184]!
    1370:	032f2121 	teqeq	pc, #1073741832	; 0x40000008
    1374:	3d142e0b 	ldccc	14, cr2, [r4, #-44]
    1378:	21212121 	teqcs	r1, r1, lsr #2
    137c:	03212121 	teqeq	r1, #1073741832	; 0x40000008
    1380:	3d142e0b 	ldccc	14, cr2, [r4, #-44]
    1384:	213d3d21 	teqcs	sp, r1, lsr #26
    1388:	14200b03 	strtne	r0, [r0], #-2819
    138c:	2121213d 	teqcs	r1, sp, lsr r1
    1390:	03212121 	teqeq	r1, #1073741832	; 0x40000008
    1394:	2317200c 	tstcs	r7, #12	; 0xc
    1398:	0c03685d 	stceq	8, cr6, [r3], {93}
    139c:	6b23172e 	blvs	8c705c <__Stack_Size+0x8c6c5c>
    13a0:	20170368 	andscs	r0, r7, r8, ror #6
    13a4:	5a5d2319 	bpl	174a010 <__Stack_Size+0x1749c10>
    13a8:	19201203 	stmdbne	r0!, {r0, r1, r9, ip}
    13ac:	20170321 	andscs	r0, r7, r1, lsr #6
    13b0:	15033d19 	strne	r3, [r3, #-3353]
    13b4:	5d231920 	stcpl	9, cr1, [r3, #-128]!
    13b8:	200b035a 	andcs	r0, fp, sl, asr r3
    13bc:	10036717 	andne	r6, r3, r7, lsl r7
    13c0:	0292032e 	addseq	r0, r2, #-1207959552	; 0xb8000000
    13c4:	234d2301 	movtcs	r2, #54017	; 0xd301
    13c8:	207dee03 	rsbscs	lr, sp, r3, lsl #28
    13cc:	2e160359 	mrccs	3, 0, r0, cr6, cr9, {2}
    13d0:	78032820 	stmdavc	r3, {r5, fp, sp}
    13d4:	ea033620 	b	cec5c <__Stack_Size+0xce85c>
    13d8:	2168200f 	cmncs	r8, pc
    13dc:	7a033424 	bvc	ce474 <__Stack_Size+0xce074>
    13e0:	7a03262e 	bvc	caca0 <__Stack_Size+0xca8a0>
    13e4:	331b2620 	tstcc	fp, #33554432	; 0x2000000
    13e8:	242a322a 	strtcs	r3, [sl], #-554
    13ec:	682e4503 	stmdavs	lr!, {r0, r1, r8, sl, lr}
    13f0:	2a402421 	bcs	100a47c <__Stack_Size+0x100a07c>
    13f4:	1c321c24 	ldcne	12, cr1, [r2], #-144
    13f8:	23242a32 	teqcs	r4, #204800	; 0x32000
    13fc:	729f0321 	addsvc	r0, pc, #-2080374784	; 0x84000000
    1400:	314d2320 	cmpcc	sp, r0, lsr #6
    1404:	207e9a03 	rsbscs	r9, lr, r3, lsl #20
    1408:	2e180359 	mrccs	3, 0, r0, cr8, cr9, {2}
    140c:	0100df03 	tsteq	r0, r3, lsl #30
    1410:	a5038534 	strge	r8, [r3, #-1332]
    1414:	4e25207f 	mcrmi	0, 1, r2, cr5, cr15, {3}
    1418:	18032131 	stmdane	r3, {r0, r4, r5, r8, sp}
    141c:	012d0320 	teqeq	sp, r0, lsr #6
    1420:	55038534 	strpl	r8, [r3, #-1332]
    1424:	18035920 	stmdane	r3, {r5, r8, fp, ip, lr}
    1428:	0109032e 	tsteq	r9, lr, lsr #6
    142c:	03218534 	teqeq	r1, #218103808	; 0xd000000
    1430:	23182011 	tstcs	r8, #17	; 0x11
    1434:	2e120321 	cdpcs	3, 1, cr0, cr2, cr1, {1}
    1438:	234d2319 	movtcs	r2, #54041	; 0xd319
    143c:	20150321 	andscs	r0, r5, r1, lsr #6
    1440:	234d231a 	movtcs	r2, #54042	; 0xd31a
    1444:	201c0321 	andscs	r0, ip, r1, lsr #6
    1448:	03010c03 	movweq	r0, #7171	; 0x1c03
    144c:	0f032e74 	svceq	0x00032e74
    1450:	33272320 	teqcc	r7, #-2147483648	; 0x80000000
    1454:	77033329 	strvc	r3, [r3, -r9, lsr #6]
    1458:	03253220 	teqeq	r5, #2	; 0x2
    145c:	25322077 	ldrcs	r2, [r2, #-119]!
    1460:	33207703 	teqcc	r0, #786432	; 0xc0000
    1464:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    1468:	23233232 	teqcs	r3, #536870915	; 0x20000003
    146c:	11032123 	tstne	r3, r3, lsr #2
    1470:	4d23192e 	stcmi	9, cr1, [r3, #-184]!
    1474:	11032123 	tstne	r3, r3, lsr #2
    1478:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    147c:	1103213f 	tstne	r3, pc, lsr r1
    1480:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    1484:	11032123 	tstne	r3, r3, lsr #2
    1488:	4d231820 	stcmi	8, cr1, [r3, #-128]!
    148c:	0d03213f 	stfeqs	f2, [r3, #-252]
    1490:	5d231720 	stcpl	7, cr1, [r3, #-128]!
    1494:	2e0c0368 	cdpcs	3, 0, cr0, cr12, cr8, {3}
    1498:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    149c:	172e0d03 	strne	r0, [lr, -r3, lsl #26]!
    14a0:	03685d23 	cmneq	r8, #2240	; 0x8c0
    14a4:	23172e0d 	tstcs	r7, #208	; 0xd0
    14a8:	1003685d 	andne	r6, r3, sp, asr r8
    14ac:	4d23192e 	stcmi	9, cr1, [r3, #-184]!
    14b0:	10032123 	andne	r2, r3, r3, lsr #2
    14b4:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    14b8:	1003213f 	andne	r2, r3, pc, lsr r1
    14bc:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    14c0:	10032123 	andne	r2, r3, r3, lsr #2
    14c4:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    14c8:	0f03213f 	svceq	0x0003213f
    14cc:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    14d0:	0f032123 	svceq	0x00032123
    14d4:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    14d8:	0f03213f 	svceq	0x0003213f
    14dc:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    14e0:	0f032123 	svceq	0x00032123
    14e4:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    14e8:	0f03213f 	svceq	0x0003213f
    14ec:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    14f0:	0f032123 	svceq	0x00032123
    14f4:	31231920 	teqcc	r3, r0, lsr #18
    14f8:	0f03213f 	svceq	0x0003213f
    14fc:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    1500:	0f032123 	svceq	0x00032123
    1504:	31231920 	teqcc	r3, r0, lsr #18
    1508:	0f03213f 	svceq	0x0003213f
    150c:	4b231920 	blmi	8c7994 <__Stack_Size+0x8c7594>
    1510:	0e032123 	adfeqsp	f2, f3, f3
    1514:	4b231920 	blmi	8c799c <__Stack_Size+0x8c759c>
    1518:	0f032123 	svceq	0x00032123
    151c:	4b231920 	blmi	8c79a4 <__Stack_Size+0x8c75a4>
    1520:	0e03213f 	mcreq	1, 0, r2, cr3, cr15, {1}
    1524:	4b231920 	blmi	8c79ac <__Stack_Size+0x8c75ac>
    1528:	0f03213f 	svceq	0x0003213f
    152c:	4b231920 	blmi	8c79b4 <__Stack_Size+0x8c75b4>
    1530:	0e03213f 	mcreq	1, 0, r2, cr3, cr15, {1}
    1534:	4b231920 	blmi	8c79bc <__Stack_Size+0x8c75bc>
    1538:	0f03213f 	svceq	0x0003213f
    153c:	4b231920 	blmi	8c79c4 <__Stack_Size+0x8c75c4>
    1540:	1303213f 	movwne	r2, #12607	; 0x313f
    1544:	1d311920 	ldcne	9, cr1, [r1, #-128]!
    1548:	11034b85 	smlabbne	r3, r5, fp, r4
    154c:	1d311920 	ldcne	9, cr1, [r1, #-128]!
    1550:	1d034b85 	vstrne	d4, [r3, #-532]
    1554:	79031920 	stmdbvc	r3, {r5, r8, fp, ip}
    1558:	7903272e 	stmdbvc	r3, {r1, r2, r3, r5, r8, r9, sl, sp}
    155c:	033e2720 	teqeq	lr, #8388608	; 0x800000
    1560:	22278277 	eorcs	r8, r7, #1879048199	; 0x70000007
    1564:	af5e9323 	svcge	0x005e9323
    1568:	2e0c0368 	cdpcs	3, 0, cr0, cr12, cr8, {3}
    156c:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    1570:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    1574:	03685d23 	cmneq	r8, #2240	; 0x8c0
    1578:	23172e0c 	tstcs	r7, #192	; 0xc0
    157c:	0e03685d 	mcreq	8, 0, r6, cr3, cr13, {2}
    1580:	4b69182e 	blmi	1a47640 <__Stack_Size+0x1a47240>
    1584:	192e1703 	stmdbne	lr!, {r0, r1, r8, r9, sl, ip}
    1588:	11034b69 	tstne	r3, r9, ror #22
    158c:	4b69182e 	blmi	1a4764c <__Stack_Size+0x1a4724c>
    1590:	182e1003 	stmdane	lr!, {r0, r1, ip}
    1594:	0b034b69 	bleq	d4340 <__Stack_Size+0xd3f40>
    1598:	0321172e 	teqeq	r1, #12058624	; 0xb80000
    159c:	2117200b 	tstcs	r7, fp
    15a0:	17200c03 	strne	r0, [r0, -r3, lsl #24]!
    15a4:	200c0321 	andcs	r0, ip, r1, lsr #6
    15a8:	0c032117 	stfeqs	f2, [r3], {23}
    15ac:	03211720 	teqeq	r1, #8388608	; 0x800000
    15b0:	2f17200c 	svccs	0x0017200c
    15b4:	182e1203 	stmdane	lr!, {r0, r1, r9, ip}
    15b8:	12034b69 	andne	r4, r3, #107520	; 0x1a400
    15bc:	6769182e 	strbvs	r1, [r9, -lr, lsr #16]!
    15c0:	182e1203 	stmdane	lr!, {r0, r1, r9, ip}
    15c4:	12034b69 	andne	r4, r3, #107520	; 0x1a400
    15c8:	6769182e 	strbvs	r1, [r9, -lr, lsr #16]!
    15cc:	182e1003 	stmdane	lr!, {r0, r1, ip}
    15d0:	0a034b3f 	beq	d42d4 <__Stack_Size+0xd3ed4>
    15d4:	032f1720 	teqeq	pc, #8388608	; 0x800000
    15d8:	2f172e0b 	svccs	0x00172e0b
    15dc:	172e0b03 	strne	r0, [lr, -r3, lsl #22]!
    15e0:	2e0b032f 	cdpcs	3, 0, cr0, cr11, cr15, {1}
    15e4:	0a033d17 	beq	d0a48 <__Stack_Size+0xd0648>
    15e8:	032f1720 	teqeq	pc, #8388608	; 0x800000
    15ec:	2f172e0a 	svccs	0x00172e0a
    15f0:	1a2e1803 	bne	b87604 <__Stack_Size+0xb87204>
    15f4:	03580903 	cmpeq	r8, #49152	; 0xc000
    15f8:	4b182018 	blmi	609660 <__Stack_Size+0x609260>
    15fc:	032e1503 	teqeq	lr, #12582912	; 0xc00000
    1600:	22220109 	eorcs	r0, r2, #1073741826	; 0x40000002
    1604:	03900903 	orrseq	r0, r0, #49152	; 0xc000
    1608:	4b182015 	blmi	609664 <__Stack_Size+0x609264>
    160c:	2e69b203 	cdpcs	2, 6, cr11, cr9, cr3, {0}
    1610:	1c241c24 	stcne	12, cr1, [r4], #-144
    1614:	59d90824 	ldmibpl	r9, {r2, r5, fp}^
    1618:	4b324b40 	blmi	c94320 <__Stack_Size+0xc93f20>
    161c:	4b324b32 	blmi	c942ec <__Stack_Size+0xc93eec>
    1620:	4b324b32 	blmi	c942f0 <__Stack_Size+0xc93ef0>
    1624:	025e595c 	subseq	r5, lr, #1507328	; 0x170000
    1628:	01010009 	tsteq	r1, r9
    162c:	000001fa 	strdeq	r0, [r0], -sl
    1630:	009b0002 	addseq	r0, fp, r2
    1634:	01020000 	tsteq	r2, r0
    1638:	000d0efb 	strdeq	r0, [sp], -fp
    163c:	01010101 	tsteq	r1, r1, lsl #2
    1640:	01000000 	tsteq	r0, r0
    1644:	73010000 	movwvc	r0, #4096	; 0x1000
    1648:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    164c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1650:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1654:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1658:	6d747300 	ldclvs	3, cr7, [r4]
    165c:	31663233 	cmncc	r6, r3, lsr r2
    1660:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1664:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    1668:	0000636e 	andeq	r6, r0, lr, ror #6
    166c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1670:	30316632 	eorscc	r6, r1, r2, lsr r6
    1674:	73755f78 	cmnvc	r5, #480	; 0x1e0
    1678:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    167c:	00010063 	andeq	r0, r1, r3, rrx
    1680:	6d747300 	ldclvs	3, cr7, [r4]
    1684:	31663233 	cmncc	r6, r3, lsr r2
    1688:	745f7830 	ldrbvc	r7, [pc], #2096	; 1690 <__Stack_Size+0x1290>
    168c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1690:	00020068 	andeq	r0, r2, r8, rrx
    1694:	6d747300 	ldclvs	3, cr7, [r4]
    1698:	31663233 	cmncc	r6, r3, lsr r2
    169c:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
    16a0:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    16a4:	00000200 	andeq	r0, r0, r0, lsl #4
    16a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    16ac:	30316632 	eorscc	r6, r1, r2, lsr r6
    16b0:	73755f78 	cmnvc	r5, #480	; 0x1e0
    16b4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    16b8:	00020068 	andeq	r0, r2, r8, rrx
    16bc:	6d747300 	ldclvs	3, cr7, [r4]
    16c0:	31663233 	cmncc	r6, r3, lsr r2
    16c4:	725f7830 	subsvc	r7, pc, #3145728	; 0x300000
    16c8:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    16cc:	00000200 	andeq	r0, r0, r0, lsl #4
    16d0:	02050000 	andeq	r0, r5, #0	; 0x0
    16d4:	080086f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, pc}
    16d8:	0101e803 	tsteq	r1, r3, lsl #16
    16dc:	213d3d14 	teqcs	sp, r4, lsl sp
    16e0:	033d3d21 	teqeq	sp, #2112	; 0x840
    16e4:	18032e0f 	stmdane	r3, {r0, r1, r2, r3, r9, sl, fp, sp}
    16e8:	3c730301 	ldclcc	3, cr0, [r3], #-4
    16ec:	03200d03 	teqeq	r0, #192	; 0xc0
    16f0:	0b035875 	bleq	d78cc <__Stack_Size+0xd74cc>
    16f4:	2e75032e 	cdpcs	3, 7, cr0, cr5, cr14, {1}
    16f8:	03200b03 	teqeq	r0, #3072	; 0xc00
    16fc:	0b032075 	bleq	c98d8 <__Stack_Size+0xc94d8>
    1700:	0b033d20 	bleq	d0b88 <__Stack_Size+0xd0788>
    1704:	213d1420 	teqcs	sp, r0, lsr #8
    1708:	0e032121 	adfeqsp	f2, f3, f1
    170c:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    1710:	2e1c0368 	cdpcs	3, 1, cr0, cr12, cr8, {3}
    1714:	41010d03 	tstmi	r1, r3, lsl #26
    1718:	033c6e03 	teqeq	ip, #48	; 0x30
    171c:	03302012 	teqeq	r0, #18	; 0x12
    1720:	14032e6c 	strne	r2, [r3], #-3692
    1724:	3e302220 	cdpcc	2, 3, cr2, cr0, cr0, {1}
    1728:	40222232 	eormi	r2, r2, r2, lsr r2
    172c:	3c13034c 	ldccc	3, cr0, [r3], {76}
    1730:	5a5e2418 	bpl	178a798 <__Stack_Size+0x178a398>
    1734:	18200d03 	stmdane	r0!, {r0, r1, r8, sl, fp}
    1738:	10034b68 	andne	r4, r3, r8, ror #22
    173c:	4b67172e 	blmi	19c73fc <__Stack_Size+0x19c6ffc>
    1740:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    1744:	03685d23 	cmneq	r8, #2240	; 0x8c0
    1748:	67172e11 	undefined
    174c:	2e0e034b 	cdpcs	3, 0, cr0, cr14, cr11, {2}
    1750:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    1754:	182e0d03 	stmdane	lr!, {r0, r1, r8, sl, fp}
    1758:	200c033d 	andcs	r0, ip, sp, lsr r3
    175c:	0c033d17 	stceq	13, cr3, [r3], {23}
    1760:	03591720 	cmpeq	r9, #8388608	; 0x800000
    1764:	3e17200d 	wxorcc	wr2, wr7, wr13
    1768:	2e0e0359 	mcrcs	3, 0, r0, cr14, cr9, {2}
    176c:	034b4c17 	movteq	r4, #48151	; 0xbc17
    1770:	23172e0e 	tstcs	r7, #224	; 0xe0
    1774:	0e03685d 	mcreq	8, 0, r6, cr3, cr13, {2}
    1778:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    177c:	2e0e0368 	cdpcs	3, 0, cr0, cr14, cr8, {3}
    1780:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    1784:	172e1003 	strne	r1, [lr, -r3]!
    1788:	0e034b67 	fnmacdeq	d4, d3, d23
    178c:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    1790:	2e190368 	cdpcs	3, 1, cr0, cr9, cr8, {3}
    1794:	5809031a 	stmdapl	r9, {r1, r3, r4, r8, r9}
    1798:	18202303 	stmdane	r0!, {r0, r1, r8, r9, sp}
    179c:	2e1a034b 	cdpcs	3, 1, cr0, cr10, cr11, {2}
    17a0:	41010a03 	tstmi	r1, r3, lsl #20
    17a4:	242c305a 	strtcs	r3, [ip], #-90
    17a8:	3d4f3230 	sfmcc	f3, 2, [pc, #-192]
    17ac:	9e0a0330 	mcrls	3, 0, r0, cr10, cr0, {1}
    17b0:	032e2303 	teqeq	lr, #201326592	; 0xc000000
    17b4:	0375010b 	cmneq	r5, #-1073741822	; 0xc0000002
    17b8:	032079a6 	teqeq	r0, #2719744	; 0x298000
    17bc:	09030115 	stmdbeq	r3, {r0, r2, r4, r8}
    17c0:	20790320 	rsbscs	r0, r9, r0, lsr #6
    17c4:	5f033151 	svcpl	0x00033151
    17c8:	202d0320 	eorcs	r0, sp, r0, lsr #6
    17cc:	03205303 	teqeq	r0, #201326592	; 0xc000000
    17d0:	7603202d 	strvc	r2, [r3], -sp, lsr #32
    17d4:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    17d8:	032e7603 	teqeq	lr, #3145728	; 0x300000
    17dc:	76032e0a 	strvc	r2, [r3], -sl, lsl #28
    17e0:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    17e4:	2009033f 	andcs	r0, r9, pc, lsr r3
    17e8:	03207903 	teqeq	r0, #49152	; 0xc000
    17ec:	39034a4e 	stmdbcc	r3, {r1, r2, r3, r6, r9, fp, lr}
    17f0:	20470320 	subcs	r0, r7, r0, lsr #6
    17f4:	03203903 	teqeq	r0, #49152	; 0xc000
    17f8:	12032047 	andne	r2, r3, #71	; 0x47
    17fc:	202b0320 	eorcs	r0, fp, r0, lsr #6
    1800:	200b033d 	andcs	r0, fp, sp, lsr r3
    1804:	22207503 	eorcs	r7, r0, #12582912	; 0xc00000
    1808:	32832432 	addcc	r2, r3, #838860800	; 0x32000000
    180c:	4b93321c 	blmi	fe4ce084 <SCS_BASE+0x1e4c0084>
    1810:	667efd03 	ldrbtvs	pc, [lr], -r3, lsl #26
    1814:	1c241c24 	stcne	12, cr1, [r4], #-144
    1818:	59230824 	stmdbpl	r3!, {r2, r5, fp}
    181c:	5940596a 	stmdbpl	r0, {r1, r3, r5, r6, r8, fp, ip, lr}^
    1820:	59405940 	stmdbpl	r0, {r6, r8, fp, ip, lr}^
    1824:	0006025e 	andeq	r0, r6, lr, asr r2
    1828:	00a00101 	adceq	r0, r0, r1, lsl #2
    182c:	00020000 	andeq	r0, r2, r0
    1830:	00000039 	andeq	r0, r0, r9, lsr r0
    1834:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1838:	0101000d 	tsteq	r1, sp
    183c:	00000101 	andeq	r0, r0, r1, lsl #2
    1840:	00000100 	andeq	r0, r0, r0, lsl #2
    1844:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    1848:	31663233 	cmncc	r6, r3, lsr r2
    184c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1850:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1854:	00006372 	andeq	r6, r0, r2, ror r3
    1858:	74726f63 	ldrbtvc	r6, [r2], #-3939
    185c:	336d7865 	cmncc	sp, #6619136	; 0x650000
    1860:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
    1864:	732e6f72 	teqvc	lr, #456	; 0x1c8
    1868:	00000100 	andeq	r0, r0, r0, lsl #2
    186c:	02050000 	andeq	r0, r5, #0	; 0x0
    1870:	08008ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, pc}
    1874:	21013403 	tstcs	r1, r3, lsl #8
    1878:	21200b03 	teqcs	r0, r3, lsl #22
    187c:	21200b03 	teqcs	r0, r3, lsl #22
    1880:	2f200b03 	svccs	0x00200b03
    1884:	2f200b03 	svccs	0x00200b03
    1888:	2f200b03 	svccs	0x00200b03
    188c:	21200b03 	teqcs	r0, r3, lsl #22
    1890:	2f200b03 	svccs	0x00200b03
    1894:	2f200b03 	svccs	0x00200b03
    1898:	200a032f 	andcs	r0, sl, pc, lsr #6
    189c:	200b032f 	andcs	r0, fp, pc, lsr #6
    18a0:	200b032f 	andcs	r0, fp, pc, lsr #6
    18a4:	200b032f 	andcs	r0, fp, pc, lsr #6
    18a8:	200a032f 	andcs	r0, sl, pc, lsr #6
    18ac:	200b0321 	andcs	r0, fp, r1, lsr #6
    18b0:	200b0321 	andcs	r0, fp, r1, lsr #6
    18b4:	200b0321 	andcs	r0, fp, r1, lsr #6
    18b8:	200b0321 	andcs	r0, fp, r1, lsr #6
    18bc:	200b032f 	andcs	r0, fp, pc, lsr #6
    18c0:	200a032f 	andcs	r0, sl, pc, lsr #6
    18c4:	200b0321 	andcs	r0, fp, r1, lsr #6
    18c8:	00010221 	andeq	r0, r1, r1, lsr #4
    18cc:	005a0101 	subseq	r0, sl, r1, lsl #2
    18d0:	00020000 	andeq	r0, r2, r0
    18d4:	0000003b 	andeq	r0, r0, fp, lsr r0
    18d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    18dc:	0101000d 	tsteq	r1, sp
    18e0:	00000101 	andeq	r0, r0, r1, lsl #2
    18e4:	00000100 	andeq	r0, r0, r0, lsl #2
    18e8:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    18ec:	31663233 	cmncc	r6, r3, lsr r2
    18f0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    18f4:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    18f8:	00006372 	andeq	r6, r0, r2, ror r3
    18fc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1900:	30316632 	eorscc	r6, r1, r2, lsr r6
    1904:	65765f78 	ldrbvs	r5, [r6, #-3960]!
    1908:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    190c:	0100632e 	tsteq	r0, lr, lsr #6
    1910:	00000000 	andeq	r0, r0, r0
    1914:	8b200205 	blhi	802130 <__Stack_Size+0x801d30>
    1918:	91030800 	tstls	r3, r0, lsl #16
    191c:	27580101 	ldrbcs	r0, [r8, -r1, lsl #2]
    1920:	2260563e 	rsbcs	r5, r0, #65011712	; 0x3e00000
    1924:	022f3648 	eoreq	r3, pc, #75497472	; 0x4800000
    1928:	0101000e 	tsteq	r1, lr
    192c:	00000070 	andeq	r0, r0, r0, ror r0
    1930:	00570002 	subseq	r0, r7, r2
    1934:	01020000 	tsteq	r2, r0
    1938:	000d0efb 	strdeq	r0, [sp], -fp
    193c:	01010101 	tsteq	r1, r1, lsl #2
    1940:	01000000 	tsteq	r0, r0
    1944:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1948:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    194c:	2f2e2e2f 	svccs	0x002e2e2f
    1950:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1954:	63672f2e 	cmnvs	r7, #184	; 0xb8
    1958:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    195c:	2f302e33 	svccs	0x00302e33
    1960:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1964:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1968:	2f636269 	svccs	0x00636269
    196c:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    1970:	00006269 	andeq	r6, r0, r9, ror #4
    1974:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1978:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    197c:	00000100 	andeq	r0, r0, r0, lsl #2
    1980:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1984:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    1988:	00000100 	andeq	r0, r0, r0, lsl #2
    198c:	02050000 	andeq	r0, r5, #0	; 0x0
    1990:	00000000 	andeq	r0, r0, r0
    1994:	4b013f03 	blmi	515a8 <__Stack_Size+0x511a8>
    1998:	02672f2d 	rsbeq	r2, r7, #180	; 0xb4
    199c:	01010006 	tsteq	r1, r6
    19a0:	000000eb 	andeq	r0, r0, fp, ror #1
    19a4:	00d00002 	sbcseq	r0, r0, r2
    19a8:	01020000 	tsteq	r2, r0
    19ac:	000d0efb 	strdeq	r0, [sp], -fp
    19b0:	01010101 	tsteq	r1, r1, lsl #2
    19b4:	01000000 	tsteq	r0, r0
    19b8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    19bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    19c0:	2f2e2e2f 	svccs	0x002e2e2f
    19c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    19c8:	63672f2e 	cmnvs	r7, #184	; 0xb8
    19cc:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    19d0:	2f302e33 	svccs	0x00302e33
    19d4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    19d8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    19dc:	2f636269 	svccs	0x00636269
    19e0:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    19e4:	63006269 	movwvs	r6, #617	; 0x269
    19e8:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    19ec:	6d72616e 	ldfvse	f6, [r2, #-440]!
    19f0:	75622f73 	strbvc	r2, [r2, #-3955]!
    19f4:	2f646c69 	svccs	0x00646c69
    19f8:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    19fc:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1a00:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1a04:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1a08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1a0c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1a10:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1a14:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1a18:	3a630073 	bcc	18c1bec <__Stack_Size+0x18c17ec>
    1a1c:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1a20:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1a24:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1a28:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1a2c:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    1a30:	646c6975 	strbtvs	r6, [ip], #-2421
    1a34:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1a38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1a3c:	6564756c 	strbvs	r7, [r4, #-1388]!
    1a40:	78650000 	stmdavc	r5!, {}^
    1a44:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    1a48:	00000100 	andeq	r0, r0, r0, lsl #2
    1a4c:	6b636f6c 	blvs	18dd804 <__Stack_Size+0x18dd404>
    1a50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1a54:	745f0000 	ldrbvc	r0, [pc], #0	; 1a5c <__Stack_Size+0x165c>
    1a58:	73657079 	cmnvc	r5, #121	; 0x79
    1a5c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1a60:	74730000 	ldrbtvc	r0, [r3]
    1a64:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1a68:	0300682e 	movweq	r6, #2094	; 0x82e
    1a6c:	65720000 	ldrbvs	r0, [r2]!
    1a70:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1a74:	00020068 	andeq	r0, r2, r8, rrx
    1a78:	05000000 	streq	r0, [r0]
    1a7c:	00000002 	andeq	r0, r0, r2
    1a80:	013b0300 	teqeq	fp, r0, lsl #6
    1a84:	302f2d13 	eorcc	r2, pc, r3, lsl sp
    1a88:	06024b83 	streq	r4, [r2], -r3, lsl #23
    1a8c:	d7010100 	strle	r0, [r1, -r0, lsl #2]
    1a90:	02000000 	andeq	r0, r0, #0	; 0x0
    1a94:	0000d100 	andeq	sp, r0, r0, lsl #2
    1a98:	fb010200 	blx	422a2 <__Stack_Size+0x41ea2>
    1a9c:	01000d0e 	tsteq	r0, lr, lsl #26
    1aa0:	00010101 	andeq	r0, r1, r1, lsl #2
    1aa4:	00010000 	andeq	r0, r1, r0
    1aa8:	3a630100 	bcc	18c1eb0 <__Stack_Size+0x18c1ab0>
    1aac:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1ab0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1ab4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1ab8:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1abc:	342d6363 	strtcc	r6, [sp], #-867
    1ac0:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1ac4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1ac8:	2f62696c 	svccs	0x0062696c
    1acc:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1ad0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1ad4:	6564756c 	strbvs	r7, [r4, #-1388]!
    1ad8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1adc:	2f3a6300 	svccs	0x003a6300
    1ae0:	616e6977 	smcvs	59031
    1ae4:	2f736d72 	svccs	0x00736d72
    1ae8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1aec:	63672f64 	cmnvs	r7, #400	; 0x190
    1af0:	75622d63 	strbvc	r2, [r2, #-3427]!
    1af4:	2f646c69 	svccs	0x00646c69
    1af8:	2f636367 	svccs	0x00636367
    1afc:	6c636e69 	stclvs	14, cr6, [r3], #-420
    1b00:	00656475 	rsbeq	r6, r5, r5, ror r4
    1b04:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1b08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1b0c:	2f2e2e2f 	svccs	0x002e2e2f
    1b10:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    1b14:	342d6363 	strtcc	r6, [sp], #-867
    1b18:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1b1c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1b20:	2f62696c 	svccs	0x0062696c
    1b24:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1b28:	6565722f 	strbvs	r7, [r5, #-559]!
    1b2c:	0000746e 	andeq	r7, r0, lr, ror #8
    1b30:	6b636f6c 	blvs	18dd8e8 <__Stack_Size+0x18dd4e8>
    1b34:	0100682e 	tsteq	r0, lr, lsr #16
    1b38:	745f0000 	ldrbvc	r0, [pc], #0	; 1b40 <__Stack_Size+0x1740>
    1b3c:	73657079 	cmnvc	r5, #121	; 0x79
    1b40:	0100682e 	tsteq	r0, lr, lsr #16
    1b44:	74730000 	ldrbtvc	r0, [r3]
    1b48:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1b4c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1b50:	65720000 	ldrbvs	r0, [r2]!
    1b54:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1b58:	00010068 	andeq	r0, r1, r8, rrx
    1b5c:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    1b60:	2e657275 	mcrcs	2, 3, r7, cr5, cr5, {3}
    1b64:	00030063 	andeq	r0, r3, r3, rrx
    1b68:	00a20000 	adceq	r0, r2, r0
    1b6c:	00020000 	andeq	r0, r2, r0
    1b70:	0000007a 	andeq	r0, r0, sl, ror r0
    1b74:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1b78:	0101000d 	tsteq	r1, sp
    1b7c:	00000101 	andeq	r0, r0, r1, lsl #2
    1b80:	00000100 	andeq	r0, r0, r0, lsl #2
    1b84:	2f2e2e01 	svccs	0x002e2e01
    1b88:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1b8c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1b90:	2f2e2e2f 	svccs	0x002e2e2f
    1b94:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1b98:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1b9c:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1ba0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1ba4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1ba8:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1bac:	63006373 	movwvs	r6, #883	; 0x373
    1bb0:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1bb4:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1bb8:	75622f73 	strbvc	r2, [r2, #-3955]!
    1bbc:	2f646c69 	svccs	0x00646c69
    1bc0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1bc4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1bc8:	63672f64 	cmnvs	r7, #400	; 0x190
    1bcc:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1bd0:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1bd4:	69000065 	stmdbvs	r0, {r0, r2, r5, r6}
    1bd8:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    1bdc:	00010063 	andeq	r0, r1, r3, rrx
    1be0:	64747300 	ldrbtvs	r7, [r4], #-768
    1be4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1be8:	00020068 	andeq	r0, r2, r8, rrx
    1bec:	05000000 	streq	r0, [r0]
    1bf0:	00000002 	andeq	r0, r0, r2
    1bf4:	01310300 	teqeq	r1, r0, lsl #6
    1bf8:	65676732 	strbvs	r6, [r7, #-1842]!
    1bfc:	65032f69 	strvs	r2, [r3, #-3945]
    1c00:	67673282 	strbvs	r3, [r7, -r2, lsl #5]!
    1c04:	67306965 	ldrvs	r6, [r0, -r5, ror #18]!
    1c08:	02686567 	rsbeq	r6, r8, #432013312	; 0x19c00000
    1c0c:	0101000c 	tsteq	r1, ip
    1c10:	000000d8 	ldrdeq	r0, [r0], -r8
    1c14:	007e0002 	rsbseq	r0, lr, r2
    1c18:	01020000 	tsteq	r2, r0
    1c1c:	000d0efb 	strdeq	r0, [sp], -fp
    1c20:	01010101 	tsteq	r1, r1, lsl #2
    1c24:	01000000 	tsteq	r0, r0
    1c28:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1c2c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1c30:	2f2e2e2f 	svccs	0x002e2e2f
    1c34:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1c38:	63672f2e 	cmnvs	r7, #184	; 0xb8
    1c3c:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    1c40:	2f302e33 	svccs	0x00302e33
    1c44:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1c48:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1c4c:	2f636269 	svccs	0x00636269
    1c50:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1c54:	6300676e 	movwvs	r6, #1902	; 0x76e
    1c58:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1c5c:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1c60:	75622f73 	strbvc	r2, [r2, #-3955]!
    1c64:	2f646c69 	svccs	0x00646c69
    1c68:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1c6c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1c70:	63672f64 	cmnvs	r7, #400	; 0x190
    1c74:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1c78:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1c7c:	6d000065 	stcvs	0, cr0, [r0, #-404]
    1c80:	65736d65 	ldrbvs	r6, [r3, #-3429]!
    1c84:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1c88:	73000001 	movwvc	r0, #1	; 0x1
    1c8c:	65646474 	strbvs	r6, [r4, #-1140]!
    1c90:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1c94:	00000002 	andeq	r0, r0, r2
    1c98:	00020500 	andeq	r0, r2, r0, lsl #10
    1c9c:	03000000 	movweq	r0, #0	; 0x0
    1ca0:	1203012e 	andne	r0, r3, #-2147483637	; 0x8000000b
    1ca4:	2e6e0301 	cdpcs	3, 6, cr0, cr14, cr1, {0}
    1ca8:	032e0b03 	teqeq	lr, #3072	; 0xc00
    1cac:	0f032e75 	svceq	0x00032e75
    1cb0:	1303312e 	movwne	r3, #12590	; 0x312e
    1cb4:	2e760366 	cdpcs	3, 7, cr0, cr6, cr6, {3}
    1cb8:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    1cbc:	2e7a036c 	cdpcs	3, 7, cr0, cr10, cr12, {3}
    1cc0:	2f2f2f30 	svccs	0x002f2f30
    1cc4:	032e5603 	teqeq	lr, #3145728	; 0x300000
    1cc8:	5b032e25 	blpl	cd564 <__Stack_Size+0xcd164>
    1ccc:	822e032e 	eorhi	r0, lr, #-1207959552	; 0xb8000000
    1cd0:	032e5203 	teqeq	lr, #805306368	; 0x30000000
    1cd4:	77032e2e 	strvc	r2, [r3, -lr, lsr #28]
    1cd8:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    1cdc:	66520348 	ldrbvs	r0, [r2], -r8, asr #6
    1ce0:	319e3403 	orrscc	r3, lr, r3, lsl #8
    1ce4:	02514884 	subseq	r4, r1, #8650752	; 0x840000
    1ce8:	01010006 	tsteq	r1, r6
    1cec:	00000123 	andeq	r0, r0, r3, lsr #2
    1cf0:	00e00002 	rsceq	r0, r0, r2
    1cf4:	01020000 	tsteq	r2, r0
    1cf8:	000d0efb 	strdeq	r0, [sp], -fp
    1cfc:	01010101 	tsteq	r1, r1, lsl #2
    1d00:	01000000 	tsteq	r0, r0
    1d04:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1d08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d0c:	2f2e2e2f 	svccs	0x002e2e2f
    1d10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1d14:	63672f2e 	cmnvs	r7, #184	; 0xb8
    1d18:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    1d1c:	2f302e33 	svccs	0x00302e33
    1d20:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1d24:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1d28:	2f636269 	svccs	0x00636269
    1d2c:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    1d30:	63006269 	movwvs	r6, #617	; 0x269
    1d34:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1d38:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1d3c:	75622f73 	strbvc	r2, [r2, #-3955]!
    1d40:	2f646c69 	svccs	0x00646c69
    1d44:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1d48:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1d4c:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1d50:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1d54:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1d58:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1d5c:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1d60:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1d64:	3a630073 	bcc	18c1f38 <__Stack_Size+0x18c1b38>
    1d68:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1d6c:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1d70:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1d74:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1d78:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    1d7c:	646c6975 	strbtvs	r6, [ip], #-2421
    1d80:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1d84:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1d88:	6564756c 	strbvs	r7, [r4, #-1388]!
    1d8c:	5f5f0000 	svcpl	0x005f0000
    1d90:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1d94:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    1d98:	00000100 	andeq	r0, r0, r0, lsl #2
    1d9c:	6b636f6c 	blvs	18ddb54 <__Stack_Size+0x18dd754>
    1da0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1da4:	745f0000 	ldrbvc	r0, [pc], #0	; 1dac <__Stack_Size+0x19ac>
    1da8:	73657079 	cmnvc	r5, #121	; 0x79
    1dac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1db0:	74730000 	ldrbtvc	r0, [r3]
    1db4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1db8:	0300682e 	movweq	r6, #2094	; 0x82e
    1dbc:	65720000 	ldrbvs	r0, [r2]!
    1dc0:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1dc4:	00020068 	andeq	r0, r2, r8, rrx
    1dc8:	65746100 	ldrbvs	r6, [r4, #-256]!
    1dcc:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    1dd0:	00010068 	andeq	r0, r1, r8, rrx
    1dd4:	05000000 	streq	r0, [r0]
    1dd8:	00000002 	andeq	r0, r0, r2
    1ddc:	01160300 	tsteq	r6, r0, lsl #6
    1de0:	03010a03 	movweq	r0, #6659	; 0x1a03
    1de4:	0a032e76 	beq	cd7c4 <__Stack_Size+0xcd3c4>
    1de8:	032f4b2e 	teqeq	pc, #47104	; 0xb800
    1dec:	0d032e74 	stceq	14, cr2, [r3, #-464]
    1df0:	032f2d2e 	teqeq	pc, #2944	; 0xb80
    1df4:	0d032e73 	stceq	14, cr2, [r3, #-460]
    1df8:	4a170366 	bmi	5c2b98 <__Stack_Size+0x5c2798>
    1dfc:	a34a1b03 	movtge	r1, #43779	; 0xab03
    1e00:	4c4a7603 	mcrrmi	6, 0, r7, sl, cr3
    1e04:	322d2f2b 	eorcc	r2, sp, #172	; 0xac
    1e08:	2c302f2b 	ldccs	15, cr2, [r0], #-172
    1e0c:	0602312d 	streq	r3, [r2], -sp, lsr #2
    1e10:	1b010100 	blne	42218 <__Stack_Size+0x41e18>
    1e14:	02000001 	andeq	r0, r0, #1	; 0x1
    1e18:	0000d900 	andeq	sp, r0, r0, lsl #18
    1e1c:	fb010200 	blx	42626 <__Stack_Size+0x42226>
    1e20:	01000d0e 	tsteq	r0, lr, lsl #26
    1e24:	00010101 	andeq	r0, r1, r1, lsl #2
    1e28:	00010000 	andeq	r0, r1, r0
    1e2c:	2e2e0100 	sufcse	f0, f6, f0
    1e30:	2f2e2e2f 	svccs	0x002e2e2f
    1e34:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1e38:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1e3c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1e40:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    1e44:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    1e48:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1e4c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1e50:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    1e54:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    1e58:	3a630062 	bcc	18c1fe8 <__Stack_Size+0x18c1be8>
    1e5c:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1e60:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1e64:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1e68:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1e6c:	342d6363 	strtcc	r6, [sp], #-867
    1e70:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1e74:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1e78:	2f62696c 	svccs	0x0062696c
    1e7c:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1e80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1e84:	6564756c 	strbvs	r7, [r4, #-1388]!
    1e88:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1e8c:	2f3a6300 	svccs	0x003a6300
    1e90:	616e6977 	smcvs	59031
    1e94:	2f736d72 	svccs	0x00736d72
    1e98:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1e9c:	63672f64 	cmnvs	r7, #400	; 0x190
    1ea0:	75622d63 	strbvc	r2, [r2, #-3427]!
    1ea4:	2f646c69 	svccs	0x00646c69
    1ea8:	2f636367 	svccs	0x00636367
    1eac:	6c636e69 	stclvs	14, cr6, [r3], #-420
    1eb0:	00656475 	rsbeq	r6, r5, r5, ror r4
    1eb4:	635f5f00 	cmpvs	pc, #0	; 0x0
    1eb8:	5f6c6c61 	svcpl	0x006c6c61
    1ebc:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1ec0:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    1ec4:	00000100 	andeq	r0, r0, r0, lsl #2
    1ec8:	6b636f6c 	blvs	18ddc80 <__Stack_Size+0x18dd880>
    1ecc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1ed0:	745f0000 	ldrbvc	r0, [pc], #0	; 1ed8 <__Stack_Size+0x1ad8>
    1ed4:	73657079 	cmnvc	r5, #121	; 0x79
    1ed8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1edc:	74730000 	ldrbtvc	r0, [r3]
    1ee0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1ee4:	0300682e 	movweq	r6, #2094	; 0x82e
    1ee8:	65720000 	ldrbvs	r0, [r2]!
    1eec:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1ef0:	00020068 	andeq	r0, r2, r8, rrx
    1ef4:	05000000 	streq	r0, [r0]
    1ef8:	00000002 	andeq	r0, r0, r2
    1efc:	01110300 	tsteq	r1, r0, lsl #6
    1f00:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1f04:	034a4a76 	movteq	r4, #43638	; 0xaa76
    1f08:	77034a2c 	strvc	r4, [r3, -ip, lsr #20]
    1f0c:	2e69032e 	cdpcs	3, 6, cr0, cr9, cr14, {1}
    1f10:	7903c151 	stmdbvc	r3, {r0, r4, r6, r8, lr, pc}
    1f14:	663e039e 	undefined
    1f18:	2d664f03 	stclcs	15, cr4, [r6, #-12]!
    1f1c:	31304b2f 	teqcc	r0, pc, lsr #22
    1f20:	30316350 	eorscc	r6, r1, r0, asr r3
    1f24:	77038967 	strvc	r8, [r3, -r7, ror #18]
    1f28:	4a09039e 	bmi	242da8 <__Stack_Size+0x2429a8>
    1f2c:	000a02d1 	ldrdeq	r0, [sl], -r1
    1f30:	00450101 	subeq	r0, r5, r1, lsl #2
    1f34:	00020000 	andeq	r0, r2, r0
    1f38:	0000001f 	andeq	r0, r0, pc, lsl r0
    1f3c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1f40:	0101000d 	tsteq	r1, sp
    1f44:	00000101 	andeq	r0, r0, r1, lsl #2
    1f48:	00000100 	andeq	r0, r0, r0, lsl #2
    1f4c:	72630001 	rsbvc	r0, r3, #1	; 0x1
    1f50:	612e6e74 	teqvs	lr, r4, ror lr
    1f54:	00006d73 	andeq	r6, r0, r3, ror sp
    1f58:	00000000 	andeq	r0, r0, r0
    1f5c:	00000205 	andeq	r0, r0, r5, lsl #4
    1f60:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1f64:	06020100 	streq	r0, [r2], -r0, lsl #2
    1f68:	00010100 	andeq	r0, r1, r0, lsl #2
    1f6c:	00000205 	andeq	r0, r0, r5, lsl #4
    1f70:	d2030000 	andle	r0, r3, #0	; 0x0
    1f74:	06020100 	streq	r0, [r2], -r0, lsl #2
    1f78:	Address 0x00001f78 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 	undefined instruction 0xffffffff
       8:	7c010001 	stcvc	0, cr0, [r1], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000018 	andeq	r0, r0, r8, lsl r0
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
      2c:	00000018 	andeq	r0, r0, r8, lsl r0
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000000 	andeq	r0, r0, r0
      38:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
      3c:	00000030 	andeq	r0, r0, r0, lsr r0
      40:	0000000c 	andeq	r0, r0, ip
      44:	00000000 	andeq	r0, r0, r0
      48:	08003194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp}
      4c:	00000014 	andeq	r0, r0, r4, lsl r0
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000000 	andeq	r0, r0, r0
      58:	080031a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, sp}
      5c:	0000000c 	andeq	r0, r0, ip
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000000 	andeq	r0, r0, r0
      68:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
      6c:	00000014 	andeq	r0, r0, r4, lsl r0
      70:	00000014 	andeq	r0, r0, r4, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	080031c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp}
      7c:	0000002c 	andeq	r0, r0, ip, lsr #32
      80:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
      84:	00028401 	andeq	r8, r2, r1, lsl #8
      88:	00000014 	andeq	r0, r0, r4, lsl r0
      8c:	00000000 	andeq	r0, r0, r0
      90:	080031f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, sp}
      94:	00000016 	andeq	r0, r0, r6, lsl r0
      98:	46040e42 	strmi	r0, [r4], -r2, asr #28
      9c:	018e080e 	orreq	r0, lr, lr, lsl #16
      a0:	00000018 	andeq	r0, r0, r8, lsl r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	0800320c 	stmdaeq	r0, {r2, r3, r9, ip, sp}
      ac:	00000038 	andeq	r0, r0, r8, lsr r0
      b0:	440c0e42 	strmi	r0, [ip], #-3650
      b4:	018e100e 	orreq	r1, lr, lr
      b8:	03840285 	orreq	r0, r4, #1342177288	; 0x50000008
      bc:	00000014 	andeq	r0, r0, r4, lsl r0
      c0:	00000000 	andeq	r0, r0, r0
      c4:	08003244 	stmdaeq	r0, {r2, r6, r9, ip, sp}
      c8:	00000054 	andeq	r0, r0, r4, asr r0
      cc:	46040e42 	strmi	r0, [r4], -r2, asr #28
      d0:	018e080e 	orreq	r0, lr, lr, lsl #16
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
      e0:	00000090 	muleq	r0, r0, r0
      e4:	42100e42 	andsmi	r0, r0, #1056	; 0x420
      e8:	018e300e 	orreq	r3, lr, lr
      ec:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
      f0:	00000484 	andeq	r0, r0, r4, lsl #9
      f4:	00000014 	andeq	r0, r0, r4, lsl r0
      f8:	00000000 	andeq	r0, r0, r0
      fc:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
     100:	00000020 	andeq	r0, r0, r0, lsr #32
     104:	44040e42 	strmi	r0, [r4], #-3650
     108:	018e080e 	orreq	r0, lr, lr, lsl #16
     10c:	00000014 	andeq	r0, r0, r4, lsl r0
     110:	00000000 	andeq	r0, r0, r0
     114:	08003348 	stmdaeq	r0, {r3, r6, r8, r9, ip, sp}
     118:	00000028 	andeq	r0, r0, r8, lsr #32
     11c:	8e080e44 	cdphi	14, 0, cr0, cr8, cr4, {2}
     120:	00028401 	andeq	r8, r2, r1, lsl #8
     124:	00000014 	andeq	r0, r0, r4, lsl r0
     128:	00000000 	andeq	r0, r0, r0
     12c:	08003370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip, sp}
     130:	00000014 	andeq	r0, r0, r4, lsl r0
     134:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
     138:	00028401 	andeq	r8, r2, r1, lsl #8
     13c:	00000018 	andeq	r0, r0, r8, lsl r0
     140:	00000000 	andeq	r0, r0, r0
     144:	08003384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp}
     148:	0000001a 	andeq	r0, r0, sl, lsl r0
     14c:	8e0c0e42 	cdphi	14, 0, cr0, cr12, cr2, {2}
     150:	84028501 	strhi	r8, [r2], #-1281
     154:	100e4403 	andne	r4, lr, r3, lsl #8
     158:	00000014 	andeq	r0, r0, r4, lsl r0
     15c:	00000000 	andeq	r0, r0, r0
     160:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     164:	00000044 	andeq	r0, r0, r4, asr #32
     168:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
     16c:	00028401 	andeq	r8, r2, r1, lsl #8
     170:	00000014 	andeq	r0, r0, r4, lsl r0
     174:	00000000 	andeq	r0, r0, r0
     178:	080033e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, sp}
     17c:	00000014 	andeq	r0, r0, r4, lsl r0
     180:	44040e42 	strmi	r0, [r4], #-3650
     184:	018e080e 	orreq	r0, lr, lr, lsl #16
     188:	0000001c 	andeq	r0, r0, ip, lsl r0
     18c:	00000000 	andeq	r0, r0, r0
     190:	080033f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp}
     194:	00000080 	andeq	r0, r0, r0, lsl #1
     198:	42100e42 	andsmi	r0, r0, #1056	; 0x420
     19c:	018e200e 	orreq	r2, lr, lr
     1a0:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     1a4:	00000484 	andeq	r0, r0, r4, lsl #9
     1a8:	00000014 	andeq	r0, r0, r4, lsl r0
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	08003478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, sp}
     1b4:	00000010 	andeq	r0, r0, r0, lsl r0
     1b8:	44040e42 	strmi	r0, [r4], #-3650
     1bc:	018e080e 	orreq	r0, lr, lr, lsl #16
     1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	08003488 	stmdaeq	r0, {r3, r7, sl, ip, sp}
     1cc:	00000088 	andeq	r0, r0, r8, lsl #1
     1d0:	42100e42 	andsmi	r0, r0, #1056	; 0x420
     1d4:	018e180e 	orreq	r1, lr, lr, lsl #16
     1d8:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     1dc:	00000484 	andeq	r0, r0, r4, lsl #9
     1e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	08003510 	stmdaeq	r0, {r4, r8, sl, ip, sp}
     1ec:	00000052 	andeq	r0, r0, r2, asr r0
     1f0:	46100e42 	ldrmi	r0, [r0], -r2, asr #28
     1f4:	018e180e 	orreq	r1, lr, lr, lsl #16
     1f8:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     1fc:	00000484 	andeq	r0, r0, r4, lsl #9
     200:	00000014 	andeq	r0, r0, r4, lsl r0
     204:	00000000 	andeq	r0, r0, r0
     208:	08003564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp}
     20c:	00000084 	andeq	r0, r0, r4, lsl #1
     210:	42040e42 	andmi	r0, r4, #1056	; 0x420
     214:	018e080e 	orreq	r0, lr, lr, lsl #16
     218:	0000001c 	andeq	r0, r0, ip, lsl r0
     21c:	00000000 	andeq	r0, r0, r0
     220:	080035e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip, sp}
     224:	00000188 	andeq	r0, r0, r8, lsl #3
     228:	44140e42 	ldrmi	r0, [r4], #-3650
     22c:	018e180e 	orreq	r1, lr, lr, lsl #16
     230:	03860287 	orreq	r0, r6, #1879048200	; 0x70000008
     234:	05840485 	streq	r0, [r4, #1157]
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	00000000 	andeq	r0, r0, r0
     240:	08003770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, ip, sp}
     244:	00002bdc 	ldrdeq	r2, [r0], -ip
     248:	42140e42 	andsmi	r0, r4, #1056	; 0x420
     24c:	018e180e 	orreq	r1, lr, lr, lsl #16
     250:	03860287 	orreq	r0, r6, #1879048200	; 0x70000008
     254:	05840485 	streq	r0, [r4, #1157]
     258:	0000000c 	.word	0x0000000c
     25c:	ffffffff 	.word	0xffffffff
     260:	7c010001 	.word	0x7c010001
     264:	000d0c0e 	.word	0x000d0c0e
     268:	0000000c 	.word	0x0000000c
     26c:	00000258 	.word	0x00000258
     270:	0800634c 	.word	0x0800634c
     274:	00000002 	.word	0x00000002
     278:	0000000c 	.word	0x0000000c
     27c:	00000258 	.word	0x00000258
     280:	08006350 	.word	0x08006350
     284:	00000002 	.word	0x00000002
     288:	0000000c 	.word	0x0000000c
     28c:	00000258 	.word	0x00000258
     290:	08006354 	.word	0x08006354
     294:	00000002 	.word	0x00000002
     298:	0000000c 	.word	0x0000000c
     29c:	00000258 	.word	0x00000258
     2a0:	08006358 	.word	0x08006358
     2a4:	00000002 	.word	0x00000002
     2a8:	0000000c 	.word	0x0000000c
     2ac:	00000258 	.word	0x00000258
     2b0:	0800635c 	.word	0x0800635c
     2b4:	00000002 	.word	0x00000002
     2b8:	0000000c 	.word	0x0000000c
     2bc:	00000258 	.word	0x00000258
     2c0:	08006360 	.word	0x08006360
     2c4:	00000002 	.word	0x00000002
     2c8:	0000000c 	.word	0x0000000c
     2cc:	00000258 	.word	0x00000258
     2d0:	08006364 	.word	0x08006364
     2d4:	00000002 	.word	0x00000002
     2d8:	0000000c 	.word	0x0000000c
     2dc:	00000258 	.word	0x00000258
     2e0:	08006368 	.word	0x08006368
     2e4:	00000002 	.word	0x00000002
     2e8:	0000000c 	.word	0x0000000c
     2ec:	00000258 	.word	0x00000258
     2f0:	0800636c 	.word	0x0800636c
     2f4:	00000002 	.word	0x00000002
     2f8:	0000000c 	.word	0x0000000c
     2fc:	00000258 	.word	0x00000258
     300:	08006370 	.word	0x08006370
     304:	00000002 	.word	0x00000002
     308:	0000000c 	.word	0x0000000c
     30c:	00000258 	.word	0x00000258
     310:	08006374 	.word	0x08006374
     314:	00000002 	.word	0x00000002
     318:	0000000c 	.word	0x0000000c
     31c:	00000258 	.word	0x00000258
     320:	08006378 	.word	0x08006378
     324:	00000002 	.word	0x00000002
     328:	0000000c 	.word	0x0000000c
     32c:	00000258 	.word	0x00000258
     330:	0800637c 	.word	0x0800637c
     334:	00000002 	.word	0x00000002
     338:	0000000c 	.word	0x0000000c
     33c:	00000258 	.word	0x00000258
     340:	08006380 	.word	0x08006380
     344:	00000002 	.word	0x00000002
     348:	0000000c 	.word	0x0000000c
     34c:	00000258 	.word	0x00000258
     350:	08006384 	.word	0x08006384
     354:	00000002 	.word	0x00000002
     358:	0000000c 	.word	0x0000000c
     35c:	00000258 	.word	0x00000258
     360:	08006388 	.word	0x08006388
     364:	00000002 	.word	0x00000002
     368:	0000000c 	.word	0x0000000c
     36c:	00000258 	.word	0x00000258
     370:	0800638c 	.word	0x0800638c
     374:	00000002 	.word	0x00000002
     378:	0000000c 	.word	0x0000000c
     37c:	00000258 	.word	0x00000258
     380:	08006390 	.word	0x08006390
     384:	00000002 	.word	0x00000002
     388:	0000000c 	.word	0x0000000c
     38c:	00000258 	.word	0x00000258
     390:	08006394 	.word	0x08006394
     394:	00000002 	.word	0x00000002
     398:	0000000c 	.word	0x0000000c
     39c:	00000258 	.word	0x00000258
     3a0:	08006398 	.word	0x08006398
     3a4:	00000002 	.word	0x00000002
     3a8:	0000000c 	.word	0x0000000c
     3ac:	00000258 	.word	0x00000258
     3b0:	0800639c 	.word	0x0800639c
     3b4:	00000002 	.word	0x00000002
     3b8:	0000000c 	.word	0x0000000c
     3bc:	00000258 	.word	0x00000258
     3c0:	080063a0 	.word	0x080063a0
     3c4:	00000002 	.word	0x00000002
     3c8:	0000000c 	.word	0x0000000c
     3cc:	00000258 	.word	0x00000258
     3d0:	080063a4 	.word	0x080063a4
     3d4:	00000002 	.word	0x00000002
     3d8:	0000000c 	.word	0x0000000c
     3dc:	00000258 	.word	0x00000258
     3e0:	080063a8 	.word	0x080063a8
     3e4:	00000002 	.word	0x00000002
     3e8:	0000000c 	.word	0x0000000c
     3ec:	00000258 	.word	0x00000258
     3f0:	080063ac 	.word	0x080063ac
     3f4:	00000002 	.word	0x00000002
     3f8:	0000000c 	.word	0x0000000c
     3fc:	00000258 	.word	0x00000258
     400:	080063b0 	.word	0x080063b0
     404:	00000002 	.word	0x00000002
     408:	0000000c 	.word	0x0000000c
     40c:	00000258 	.word	0x00000258
     410:	080063b4 	.word	0x080063b4
     414:	00000002 	.word	0x00000002
     418:	0000000c 	.word	0x0000000c
     41c:	00000258 	.word	0x00000258
     420:	080063b8 	.word	0x080063b8
     424:	00000002 	.word	0x00000002
     428:	0000000c 	.word	0x0000000c
     42c:	00000258 	.word	0x00000258
     430:	080063bc 	.word	0x080063bc
     434:	00000002 	.word	0x00000002
     438:	0000000c 	.word	0x0000000c
     43c:	00000258 	.word	0x00000258
     440:	080063c0 	.word	0x080063c0
     444:	00000002 	.word	0x00000002
     448:	0000000c 	.word	0x0000000c
     44c:	00000258 	.word	0x00000258
     450:	080063c4 	.word	0x080063c4
     454:	00000002 	.word	0x00000002
     458:	0000000c 	.word	0x0000000c
     45c:	00000258 	.word	0x00000258
     460:	080063c8 	.word	0x080063c8
     464:	00000002 	.word	0x00000002
     468:	0000000c 	.word	0x0000000c
     46c:	00000258 	.word	0x00000258
     470:	080063cc 	.word	0x080063cc
     474:	00000002 	.word	0x00000002
     478:	0000000c 	.word	0x0000000c
     47c:	00000258 	.word	0x00000258
     480:	080063d0 	.word	0x080063d0
     484:	00000002 	.word	0x00000002
     488:	0000000c 	.word	0x0000000c
     48c:	00000258 	.word	0x00000258
     490:	080063d4 	.word	0x080063d4
     494:	00000002 	.word	0x00000002
     498:	0000000c 	.word	0x0000000c
     49c:	00000258 	.word	0x00000258
     4a0:	d8          	.byte	0xd8
     4a1:	63          	.byte	0x63
     4a2:	0800      	.short	0x0800
     4a4:	00000002 	.word	0x00000002
     4a8:	0000000c 	.word	0x0000000c
     4ac:	00000258 	.word	0x00000258
     4b0:	080063dc 	.word	0x080063dc
     4b4:	00000002 	.word	0x00000002
     4b8:	0000000c 	.word	0x0000000c
     4bc:	00000258 	.word	0x00000258
     4c0:	080063e0 	.word	0x080063e0
     4c4:	00000002 	.word	0x00000002
     4c8:	0000000c 	.word	0x0000000c
     4cc:	00000258 	.word	0x00000258
     4d0:	080063e4 	.word	0x080063e4
     4d4:	00000002 	.word	0x00000002
     4d8:	0000000c 	.word	0x0000000c
     4dc:	00000258 	.word	0x00000258
     4e0:	080063e8 	.word	0x080063e8
     4e4:	00000002 	.word	0x00000002
     4e8:	0000000c 	.word	0x0000000c
     4ec:	00000258 	.word	0x00000258
     4f0:	080063ec 	.word	0x080063ec
     4f4:	00000002 	.word	0x00000002
     4f8:	0000000c 	.word	0x0000000c
     4fc:	00000258 	.word	0x00000258
     500:	080063f0 	.word	0x080063f0
     504:	00000002 	.word	0x00000002
     508:	0000000c 	.word	0x0000000c
     50c:	00000258 	.word	0x00000258
     510:	080063f4 	.word	0x080063f4
     514:	00000002 	.word	0x00000002
     518:	0000000c 	.word	0x0000000c
     51c:	00000258 	.word	0x00000258
     520:	080063f8 	.word	0x080063f8
     524:	00000002 	.word	0x00000002
     528:	0000000c 	.word	0x0000000c
     52c:	00000258 	.word	0x00000258
     530:	080063fc 	.word	0x080063fc
     534:	00000002 	.word	0x00000002
     538:	0000000c 	.word	0x0000000c
     53c:	00000258 	.word	0x00000258
     540:	08006400 	.word	0x08006400
     544:	00000002 	.word	0x00000002
     548:	0000000c 	.word	0x0000000c
     54c:	00000258 	.word	0x00000258
     550:	08006404 	.word	0x08006404
     554:	00000002 	.word	0x00000002
     558:	0000000c 	.word	0x0000000c
     55c:	00000258 	.word	0x00000258
     560:	08006408 	.word	0x08006408
     564:	00000002 	.word	0x00000002
     568:	0000000c 	.word	0x0000000c
     56c:	00000258 	.word	0x00000258
     570:	0800640c 	.word	0x0800640c
     574:	00000002 	.word	0x00000002
     578:	0000000c 	.word	0x0000000c
     57c:	00000258 	.word	0x00000258
     580:	08006410 	.word	0x08006410
     584:	00000002 	.word	0x00000002
     588:	0000000c 	.word	0x0000000c
     58c:	00000258 	.word	0x00000258
     590:	08006414 	.word	0x08006414
     594:	00000002 	.word	0x00000002
     598:	0000000c 	.word	0x0000000c
     59c:	00000258 	.word	0x00000258
     5a0:	08006418 	.word	0x08006418
     5a4:	00000002 	.word	0x00000002
     5a8:	0000000c 	.word	0x0000000c
     5ac:	00000258 	.word	0x00000258
     5b0:	0800641c 	.word	0x0800641c
     5b4:	00000002 	.word	0x00000002
     5b8:	0000000c 	.word	0x0000000c
     5bc:	00000258 	.word	0x00000258
     5c0:	08006420 	.word	0x08006420
     5c4:	00000002 	.word	0x00000002
     5c8:	0000000c 	.word	0x0000000c
     5cc:	00000258 	.word	0x00000258
     5d0:	08006424 	.word	0x08006424
     5d4:	00000002 	.word	0x00000002
     5d8:	0000000c 	.word	0x0000000c
     5dc:	00000258 	.word	0x00000258
     5e0:	08006428 	.word	0x08006428
     5e4:	00000002 	.word	0x00000002
     5e8:	0000000c 	.word	0x0000000c
     5ec:	00000258 	.word	0x00000258
     5f0:	0800642c 	.word	0x0800642c
     5f4:	00000002 	.word	0x00000002
     5f8:	0000000c 	.word	0x0000000c
     5fc:	00000258 	.word	0x00000258
     600:	08006430 	.word	0x08006430
     604:	00000002 	.word	0x00000002
     608:	0000000c 	.word	0x0000000c
     60c:	00000258 	.word	0x00000258
     610:	08006434 	.word	0x08006434
     614:	00000002 	.word	0x00000002
     618:	0000000c 	.word	0x0000000c
     61c:	00000258 	.word	0x00000258
     620:	08006438 	.word	0x08006438
     624:	00000002 	.word	0x00000002
     628:	0000000c 	.word	0x0000000c
     62c:	00000258 	.word	0x00000258
     630:	0800643c 	.word	0x0800643c
     634:	00000002 	.word	0x00000002
     638:	0000000c 	.word	0x0000000c
     63c:	00000258 	.word	0x00000258
     640:	08006440 	.word	0x08006440
     644:	00000002 	.word	0x00000002
     648:	0000000c 	.word	0x0000000c
     64c:	00000258 	.word	0x00000258
     650:	08006444 	.word	0x08006444
     654:	00000002 	.word	0x00000002
     658:	0000000c 	.word	0x0000000c
     65c:	00000258 	.word	0x00000258
     660:	08006448 	.word	0x08006448
     664:	00000002 	.word	0x00000002
     668:	0000000c 	.word	0x0000000c
     66c:	00000258 	.word	0x00000258
     670:	0800644c 	.word	0x0800644c
     674:	00000002 	.word	0x00000002
     678:	0000000c 	.word	0x0000000c
     67c:	00000258 	.word	0x00000258
     680:	08006450 	.word	0x08006450
     684:	00000002 	.word	0x00000002
     688:	00000014 	.word	0x00000014
     68c:	00000258 	.word	0x00000258
     690:	08006454 	.word	0x08006454
     694:	0000000c 	.word	0x0000000c
     698:	42040e42 	.word	0x42040e42
     69c:	018e080e 	.word	0x018e080e
     6a0:	00000014 	.word	0x00000014
     6a4:	00000258 	.word	0x00000258
     6a8:	08006460 	.word	0x08006460
     6ac:	0000000c 	.word	0x0000000c
     6b0:	42040e42 	.word	0x42040e42
     6b4:	018e080e 	.word	0x018e080e
     6b8:	00000014 	.word	0x00000014
     6bc:	00000258 	.word	0x00000258
     6c0:	0800646c 	.word	0x0800646c
     6c4:	0000000c 	.word	0x0000000c
     6c8:	42040e42 	.word	0x42040e42
     6cc:	018e080e 	.word	0x018e080e
     6d0:	0000000c 	.word	0x0000000c
     6d4:	ffffffff 	.word	0xffffffff
     6d8:	7c010001 	.word	0x7c010001
     6dc:	000d0c0e 	.word	0x000d0c0e
     6e0:	00000014 	.word	0x00000014
     6e4:	000006d0 	.word	0x000006d0
     6e8:	08006478 	.word	0x08006478
     6ec:	0000000c 	.word	0x0000000c
     6f0:	42040e42 	.word	0x42040e42
     6f4:	018e080e 	.word	0x018e080e
     6f8:	00000014 	.word	0x00000014
     6fc:	000006d0 	.word	0x000006d0
     700:	08006484 	.word	0x08006484
     704:	00000014 	.word	0x00000014
     708:	46040e42 	.word	0x46040e42
     70c:	018e080e 	.word	0x018e080e
     710:	00000018 	.word	0x00000018
     714:	000006d0 	.word	0x000006d0
     718:	08006498 	.word	0x08006498
     71c:	00000026 	.word	0x00000026
     720:	8e100e42 	.word	0x8e100e42
     724:	85028601 	.word	0x85028601
     728:	00048403 	.word	0x00048403
     72c:	00000018 	.word	0x00000018
     730:	000006d0 	.word	0x000006d0
     734:	080064c0 	.word	0x080064c0
     738:	0000001c 	.word	0x0000001c
     73c:	8e100e42 	.word	0x8e100e42
     740:	85028601 	.word	0x85028601
     744:	00048403 	.word	0x00048403
     748:	00000014 	.word	0x00000014
     74c:	000006d0 	.word	0x000006d0
     750:	080064dc 	.word	0x080064dc
     754:	0000000c 	.word	0x0000000c
     758:	42040e42 	.word	0x42040e42
     75c:	018e080e 	.word	0x018e080e
     760:	00000014 	.word	0x00000014
     764:	000006d0 	.word	0x000006d0
     768:	080064e8 	.word	0x080064e8
     76c:	0000000c 	.word	0x0000000c
     770:	42040e42 	.word	0x42040e42
     774:	018e080e 	.word	0x018e080e
     778:	00000014 	.word	0x00000014
     77c:	000006d0 	.word	0x000006d0
     780:	080064f4 	.word	0x080064f4
     784:	00000010 	.word	0x00000010
     788:	44040e42 	.word	0x44040e42
     78c:	018e080e 	.word	0x018e080e
     790:	0000000c 	.word	0x0000000c
     794:	ffffffff 	.word	0xffffffff
     798:	7c010001 	.word	0x7c010001
     79c:	000d0c0e 	.word	0x000d0c0e
     7a0:	0000000c 	.word	0x0000000c
     7a4:	00000790 	.word	0x00000790
     7a8:	08006504 	.word	0x08006504
     7ac:	0000000c 	.word	0x0000000c
     7b0:	0000000c 	.word	0x0000000c
     7b4:	00000790 	.word	0x00000790
     7b8:	08006510 	.word	0x08006510
     7bc:	0000000c 	.word	0x0000000c
     7c0:	0000000c 	.word	0x0000000c
     7c4:	00000790 	.word	0x00000790
     7c8:	0800651c 	.word	0x0800651c
     7cc:	0000000c 	.word	0x0000000c
     7d0:	0000000c 	.word	0x0000000c
     7d4:	00000790 	.word	0x00000790
     7d8:	08006528 	.word	0x08006528
     7dc:	0000000c 	.word	0x0000000c
     7e0:	0000000c 	.word	0x0000000c
     7e4:	00000790 	.word	0x00000790
     7e8:	08006534 	.word	0x08006534
     7ec:	0000000c 	.word	0x0000000c
     7f0:	0000000c 	.word	0x0000000c
     7f4:	00000790 	.word	0x00000790
     7f8:	08006540 	.word	0x08006540
     7fc:	00000014 	.word	0x00000014
     800:	0000000c 	.word	0x0000000c
     804:	00000790 	.word	0x00000790
     808:	08006554 	.word	0x08006554
     80c:	0000000c 	.word	0x0000000c
     810:	0000000c 	.word	0x0000000c
     814:	00000790 	.word	0x00000790
     818:	08006560 	.word	0x08006560
     81c:	0000000c 	.word	0x0000000c
     820:	0000000c 	.word	0x0000000c
     824:	00000790 	.word	0x00000790
     828:	0800656c 	.word	0x0800656c
     82c:	00000008 	.word	0x00000008
     830:	0000000c 	.word	0x0000000c
     834:	00000790 	.word	0x00000790
     838:	08006574 	.word	0x08006574
     83c:	00000004 	.word	0x00000004
     840:	0000000c 	.word	0x0000000c
     844:	00000790 	.word	0x00000790
     848:	08006578 	.word	0x08006578
     84c:	00000008 	.word	0x00000008
     850:	00000018 	.word	0x00000018
     854:	00000790 	.word	0x00000790
     858:	08006580 	.word	0x08006580
     85c:	00000168 	.word	0x00000168
     860:	440c0e42 	.word	0x440c0e42
     864:	018e100e 	.word	0x018e100e
     868:	03840285 	.word	0x03840285
     86c:	00000018 	.word	0x00000018
     870:	00000790 	.word	0x00000790
     874:	080066e8 	.word	0x080066e8
     878:	000000c4 	.word	0x000000c4
     87c:	440c0e42 	.word	0x440c0e42
     880:	018e100e 	.word	0x018e100e
     884:	03840285 	.word	0x03840285
     888:	00000014 	.word	0x00000014
     88c:	00000790 	.word	0x00000790
     890:	080067ac 	.word	0x080067ac
     894:	00000020 	.word	0x00000020
     898:	8e080e42 	.word	0x8e080e42
     89c:	00028401 	.word	0x00028401
     8a0:	00000014 	.word	0x00000014
     8a4:	00000790 	.word	0x00000790
     8a8:	080067cc 	.word	0x080067cc
     8ac:	00000038 	.word	0x00000038
     8b0:	44040e42 	.word	0x44040e42
     8b4:	018e080e 	.word	0x018e080e
     8b8:	00000014 	.word	0x00000014
     8bc:	00000790 	.word	0x00000790
     8c0:	08006804 	.word	0x08006804
     8c4:	0000003c 	.word	0x0000003c
     8c8:	44040e42 	.word	0x44040e42
     8cc:	018e080e 	.word	0x018e080e
     8d0:	00000014 	.word	0x00000014
     8d4:	00000790 	.word	0x00000790
     8d8:	08006840 	.word	0x08006840
     8dc:	00000030 	.word	0x00000030
     8e0:	44040e42 	.word	0x44040e42
     8e4:	018e080e 	.word	0x018e080e
     8e8:	00000014 	.word	0x00000014
     8ec:	00000790 	.word	0x00000790
     8f0:	08006870 	.word	0x08006870
     8f4:	00000038 	.word	0x00000038
     8f8:	44040e42 	.word	0x44040e42
     8fc:	018e080e 	.word	0x018e080e
     900:	00000014 	.word	0x00000014
     904:	00000790 	.word	0x00000790
     908:	080068a8 	.word	0x080068a8
     90c:	00000028 	.word	0x00000028
     910:	44040e42 	.word	0x44040e42
     914:	018e080e 	.word	0x018e080e
     918:	00000014 	.word	0x00000014
     91c:	00000790 	.word	0x00000790
     920:	080068d0 	.word	0x080068d0
     924:	0000000c 	.word	0x0000000c
     928:	42040e42 	.word	0x42040e42
     92c:	018e080e 	.word	0x018e080e
     930:	00000014 	.word	0x00000014
     934:	00000790 	.word	0x00000790
     938:	080068dc 	.word	0x080068dc
     93c:	00000034 	.word	0x00000034
     940:	4a040e42 	.word	0x4a040e42
     944:	018e080e 	.word	0x018e080e
     948:	0000000c 	.word	0x0000000c
     94c:	ffffffff 	.word	0xffffffff
     950:	7c010001 	.word	0x7c010001
     954:	000d0c0e 	.word	0x000d0c0e
     958:	0000000c 	.word	0x0000000c
     95c:	00000948 	.word	0x00000948
     960:	08006910 	.word	0x08006910
     964:	00000018 	.word	0x00000018
     968:	0000000c 	.word	0x0000000c
     96c:	00000948 	.word	0x00000948
     970:	08006928 	.word	0x08006928
     974:	00000018 	.word	0x00000018
     978:	0000000c 	.word	0x0000000c
     97c:	00000948 	.word	0x00000948
     980:	08006940 	.word	0x08006940
     984:	00000018 	.word	0x00000018
     988:	0000000c 	.word	0x0000000c
     98c:	00000948 	.word	0x00000948
     990:	08006958 	.word	0x08006958
     994:	00000018 	.word	0x00000018
     998:	0000000c 	.word	0x0000000c
     99c:	00000948 	.word	0x00000948
     9a0:	08006970 	.word	0x08006970
     9a4:	00000010 	.word	0x00000010
     9a8:	0000000c 	.word	0x0000000c
     9ac:	00000948 	.word	0x00000948
     9b0:	08006980 	.word	0x08006980
     9b4:	0000000c 	.word	0x0000000c
     9b8:	0000000c 	.word	0x0000000c
     9bc:	00000948 	.word	0x00000948
     9c0:	0800698c 	.word	0x0800698c
     9c4:	0000000c 	.word	0x0000000c
     9c8:	0000000c 	.word	0x0000000c
     9cc:	00000948 	.word	0x00000948
     9d0:	08006998 	.word	0x08006998
     9d4:	00000010 	.word	0x00000010
     9d8:	0000000c 	.word	0x0000000c
     9dc:	00000948 	.word	0x00000948
     9e0:	080069a8 	.word	0x080069a8
     9e4:	00000010 	.word	0x00000010
     9e8:	0000000c 	.word	0x0000000c
     9ec:	00000948 	.word	0x00000948
     9f0:	080069b8 	.word	0x080069b8
     9f4:	0000001c 	.word	0x0000001c
     9f8:	0000000c 	.word	0x0000000c
     9fc:	00000948 	.word	0x00000948
     a00:	080069d4 	.word	0x080069d4
     a04:	00000020 	.word	0x00000020
     a08:	0000000c 	.word	0x0000000c
     a0c:	00000948 	.word	0x00000948
     a10:	080069f4 	.word	0x080069f4
     a14:	0000000c 	.word	0x0000000c
     a18:	0000000c 	.word	0x0000000c
     a1c:	00000948 	.word	0x00000948
     a20:	08006a00 	.word	0x08006a00
     a24:	0000002c 	.word	0x0000002c
     a28:	00000018 	.word	0x00000018
     a2c:	00000948 	.word	0x00000948
     a30:	08006a2c 	.word	0x08006a2c
     a34:	00000094 	.word	0x00000094
     a38:	44080e42 	.word	0x44080e42
     a3c:	018e100e 	.word	0x018e100e
     a40:	00000284 	.word	0x00000284
     a44:	0000001c 	.word	0x0000001c
     a48:	00000948 	.word	0x00000948
     a4c:	08006ac0 	.word	0x08006ac0
     a50:	0000005c 	.word	0x0000005c
     a54:	8e140e42 	.word	0x8e140e42
     a58:	86028701 	.word	0x86028701
     a5c:	84048503 	.word	0x84048503
     a60:	180e4605 	.word	0x180e4605
     a64:	00000018 	.word	0x00000018
     a68:	00000948 	.word	0x00000948
     a6c:	08006b1c 	.word	0x08006b1c
     a70:	0000009c 	.word	0x0000009c
     a74:	8e0c0e42 	.word	0x8e0c0e42
     a78:	84028501 	.word	0x84028501
     a7c:	100e4403 	.word	0x100e4403
     a80:	00000014 	.word	0x00000014
     a84:	00000948 	.word	0x00000948
     a88:	08006bb8 	.word	0x08006bb8
     a8c:	000000c0 	.word	0x000000c0
     a90:	8e080e42 	.word	0x8e080e42
     a94:	00028401 	.word	0x00028401
     a98:	00000018 	.word	0x00000018
     a9c:	00000948 	.word	0x00000948
     aa0:	08006c78 	.word	0x08006c78
     aa4:	00000044 	.word	0x00000044
     aa8:	8e100e42 	.word	0x8e100e42
     aac:	85028601 	.word	0x85028601
     ab0:	00048403 	.word	0x00048403
     ab4:	00000018 	.word	0x00000018
     ab8:	00000948 	.word	0x00000948
     abc:	08006cbc 	.word	0x08006cbc
     ac0:	00000038 	.word	0x00000038
     ac4:	8e100e42 	.word	0x8e100e42
     ac8:	85028601 	.word	0x85028601
     acc:	00048403 	.word	0x00048403
     ad0:	00000018 	.word	0x00000018
     ad4:	00000948 	.word	0x00000948
     ad8:	08006cf4 	.word	0x08006cf4
     adc:	00000048 	.word	0x00000048
     ae0:	8e100e42 	.word	0x8e100e42
     ae4:	85028601 	.word	0x85028601
     ae8:	00048403 	.word	0x00048403
     aec:	00000014 	.word	0x00000014
     af0:	00000948 	.word	0x00000948
     af4:	08006d3c 	.word	0x08006d3c
     af8:	00000078 	.word	0x00000078
     afc:	8e080e42 	.word	0x8e080e42
     b00:	00028401 	.word	0x00028401
     b04:	00000014 	.word	0x00000014
     b08:	00000948 	.word	0x00000948
     b0c:	08006db4 	.word	0x08006db4
     b10:	0000003c 	.word	0x0000003c
     b14:	8e080e42 	.word	0x8e080e42
     b18:	00028401 	.word	0x00028401
     b1c:	00000018 	.word	0x00000018
     b20:	00000948 	.word	0x00000948
     b24:	08006df0 	.word	0x08006df0
     b28:	00000048 	.word	0x00000048
     b2c:	8e0c0e42 	.word	0x8e0c0e42
     b30:	84028501 	.word	0x84028501
     b34:	100e4403 	.word	0x100e4403
     b38:	0000000c 	.word	0x0000000c
     b3c:	ffffffff 	.word	0xffffffff
     b40:	7c010001 	.word	0x7c010001
     b44:	000d0c0e 	.word	0x000d0c0e
     b48:	0000001c 	.word	0x0000001c
     b4c:	00000b38 	.word	0x00000b38
     b50:	08006e38 	.word	0x08006e38
     b54:	000000a6 	.word	0x000000a6
     b58:	8e140e42 	.word	0x8e140e42
     b5c:	86028701 	.word	0x86028701
     b60:	84048503 	.word	0x84048503
     b64:	200e5a05 	.word	0x200e5a05
     b68:	0000000c 	.word	0x0000000c
     b6c:	00000b38 	.word	0x00000b38
     b70:	08006ee0 	.word	0x08006ee0
     b74:	00000010 	.word	0x00000010
     b78:	0000000c 	.word	0x0000000c
     b7c:	00000b38 	.word	0x00000b38
     b80:	08006ef0 	.word	0x08006ef0
     b84:	0000000c 	.word	0x0000000c
     b88:	0000000c 	.word	0x0000000c
     b8c:	00000b38 	.word	0x00000b38
     b90:	08006efc 	.word	0x08006efc
     b94:	00000006 	.word	0x00000006
     b98:	0000000c 	.word	0x0000000c
     b9c:	00000b38 	.word	0x00000b38
     ba0:	08006f04 	.word	0x08006f04
     ba4:	0000000c 	.word	0x0000000c
     ba8:	0000000c 	.word	0x0000000c
     bac:	00000b38 	.word	0x00000b38
     bb0:	08006f10 	.word	0x08006f10
     bb4:	00000006 	.word	0x00000006
     bb8:	0000000c 	.word	0x0000000c
     bbc:	00000b38 	.word	0x00000b38
     bc0:	08006f18 	.word	0x08006f18
     bc4:	00000004 	.word	0x00000004
     bc8:	0000000c 	.word	0x0000000c
     bcc:	00000b38 	.word	0x00000b38
     bd0:	08006f1c 	.word	0x08006f1c
     bd4:	00000004 	.word	0x00000004
     bd8:	0000000c 	.word	0x0000000c
     bdc:	00000b38 	.word	0x00000b38
     be0:	08006f20 	.word	0x08006f20
     be4:	0000000a 	.word	0x0000000a
     be8:	0000000c 	.word	0x0000000c
     bec:	00000b38 	.word	0x00000b38
     bf0:	08006f2c 	.word	0x08006f2c
     bf4:	00000004 	.word	0x00000004
     bf8:	0000000c 	.word	0x0000000c
     bfc:	00000b38 	.word	0x00000b38
     c00:	08006f30 	.word	0x08006f30
     c04:	00000010 	.word	0x00000010
     c08:	0000000c 	.word	0x0000000c
     c0c:	00000b38 	.word	0x00000b38
     c10:	08006f40 	.word	0x08006f40
     c14:	00000020 	.word	0x00000020
     c18:	0000000c 	.word	0x0000000c
     c1c:	00000b38 	.word	0x00000b38
     c20:	08006f60 	.word	0x08006f60
     c24:	0000000c 	.word	0x0000000c
     c28:	00000018 	.word	0x00000018
     c2c:	00000b38 	.word	0x00000b38
     c30:	08006f6c 	.word	0x08006f6c
     c34:	00000060 	.word	0x00000060
     c38:	8e0c0e42 	.word	0x8e0c0e42
     c3c:	84028501 	.word	0x84028501
     c40:	00000003 	.word	0x00000003
     c44:	00000014 	.word	0x00000014
     c48:	00000b38 	.word	0x00000b38
     c4c:	08006fcc 	.word	0x08006fcc
     c50:	00000034 	.word	0x00000034
     c54:	8e080e42 	.word	0x8e080e42
     c58:	00028401 	.word	0x00028401
     c5c:	00000014 	.word	0x00000014
     c60:	00000b38 	.word	0x00000b38
     c64:	08007000 	.word	0x08007000
     c68:	00000018 	.word	0x00000018
     c6c:	46040e42 	.word	0x46040e42
     c70:	018e080e 	.word	0x018e080e
     c74:	00000014 	.word	0x00000014
     c78:	00000b38 	.word	0x00000b38
     c7c:	08007018 	.word	0x08007018
     c80:	000000a8 	.word	0x000000a8
     c84:	44040e42 	.word	0x44040e42
     c88:	018e100e 	.word	0x018e100e
     c8c:	0000000c 	.word	0x0000000c
     c90:	ffffffff 	.word	0xffffffff
     c94:	7c010001 	.word	0x7c010001
     c98:	000d0c0e 	.word	0x000d0c0e
     c9c:	0000000c 	.word	0x0000000c
     ca0:	00000c8c 	.word	0x00000c8c
     ca4:	080070c0 	.word	0x080070c0
     ca8:	00000034 	.word	0x00000034
     cac:	0000000c 	.word	0x0000000c
     cb0:	00000c8c 	.word	0x00000c8c
     cb4:	080070f4 	.word	0x080070f4
     cb8:	00000030 	.word	0x00000030
     cbc:	0000000c 	.word	0x0000000c
     cc0:	00000c8c 	.word	0x00000c8c
     cc4:	08007124 	.word	0x08007124
     cc8:	00000014 	.word	0x00000014
     ccc:	00000018 	.word	0x00000018
     cd0:	00000c8c 	.word	0x00000c8c
     cd4:	08007138 	.word	0x08007138
     cd8:	0000007c 	.word	0x0000007c
     cdc:	8e0c0e42 	.word	0x8e0c0e42
     ce0:	84028501 	.word	0x84028501
     ce4:	00000003 	.word	0x00000003
     ce8:	0000000c 	.word	0x0000000c
     cec:	00000c8c 	.word	0x00000c8c
     cf0:	080071b4 	.word	0x080071b4
     cf4:	0000000c 	.word	0x0000000c
     cf8:	0000000c 	.word	0x0000000c
     cfc:	00000c8c 	.word	0x00000c8c
     d00:	080071c0 	.word	0x080071c0
     d04:	00000018 	.word	0x00000018
     d08:	0000000c 	.word	0x0000000c
     d0c:	00000c8c 	.word	0x00000c8c
     d10:	080071d8 	.word	0x080071d8
     d14:	00000024 	.word	0x00000024
     d18:	0000000c 	.word	0x0000000c
     d1c:	00000c8c 	.word	0x00000c8c
     d20:	080071fc 	.word	0x080071fc
     d24:	0000000c 	.word	0x0000000c
     d28:	0000000c 	.word	0x0000000c
     d2c:	00000c8c 	.word	0x00000c8c
     d30:	08007208 	.word	0x08007208
     d34:	00000018 	.word	0x00000018
     d38:	0000000c 	.word	0x0000000c
     d3c:	00000c8c 	.word	0x00000c8c
     d40:	08007220 	.word	0x08007220
     d44:	00000010 	.word	0x00000010
     d48:	0000000c 	.word	0x0000000c
     d4c:	00000c8c 	.word	0x00000c8c
     d50:	08007230 	.word	0x08007230
     d54:	00000024 	.word	0x00000024
     d58:	0000000c 	.word	0x0000000c
     d5c:	00000c8c 	.word	0x00000c8c
     d60:	08007254 	.word	0x08007254
     d64:	0000000c 	.word	0x0000000c
     d68:	0000000c 	.word	0x0000000c
     d6c:	00000c8c 	.word	0x00000c8c
     d70:	08007260 	.word	0x08007260
     d74:	00000014 	.word	0x00000014
     d78:	0000000c 	.word	0x0000000c
     d7c:	00000c8c 	.word	0x00000c8c
     d80:	08007274 	.word	0x08007274
     d84:	00000010 	.word	0x00000010
     d88:	0000000c 	.word	0x0000000c
     d8c:	00000c8c 	.word	0x00000c8c
     d90:	08007284 	.word	0x08007284
     d94:	00000010 	.word	0x00000010
     d98:	0000000c 	.word	0x0000000c
     d9c:	00000c8c 	.word	0x00000c8c
     da0:	08007294 	.word	0x08007294
     da4:	0000001c 	.word	0x0000001c
     da8:	0000000c 	.word	0x0000000c
     dac:	00000c8c 	.word	0x00000c8c
     db0:	080072b0 	.word	0x080072b0
     db4:	00000028 	.word	0x00000028
     db8:	00000014 	.word	0x00000014
     dbc:	00000c8c 	.word	0x00000c8c
     dc0:	080072d8 	.word	0x080072d8
     dc4:	00000058 	.word	0x00000058
     dc8:	8e080e42 	.word	0x8e080e42
     dcc:	00028401 	.word	0x00028401
     dd0:	0000000c 	.word	0x0000000c
     dd4:	00000c8c 	.word	0x00000c8c
     dd8:	08007330 	.word	0x08007330
     ddc:	00000020 	.word	0x00000020
     de0:	0000000c 	.word	0x0000000c
     de4:	00000c8c 	.word	0x00000c8c
     de8:	08007350 	.word	0x08007350
     dec:	00000018 	.word	0x00000018
     df0:	0000000c 	.word	0x0000000c
     df4:	00000c8c 	.word	0x00000c8c
     df8:	08007368 	.word	0x08007368
     dfc:	00000018 	.word	0x00000018
     e00:	0000000c 	.word	0x0000000c
     e04:	00000c8c 	.word	0x00000c8c
     e08:	08007380 	.word	0x08007380
     e0c:	00000020 	.word	0x00000020
     e10:	0000000c 	.word	0x0000000c
     e14:	00000c8c 	.word	0x00000c8c
     e18:	080073a0 	.word	0x080073a0
     e1c:	00000044 	.word	0x00000044
     e20:	0000000c 	.word	0x0000000c
     e24:	00000c8c 	.word	0x00000c8c
     e28:	080073e4 	.word	0x080073e4
     e2c:	00000014 	.word	0x00000014
     e30:	00000014 	.word	0x00000014
     e34:	00000c8c 	.word	0x00000c8c
     e38:	080073f8 	.word	0x080073f8
     e3c:	0000000c 	.word	0x0000000c
     e40:	42040e42 	.word	0x42040e42
     e44:	018e080e 	.word	0x018e080e
     e48:	00000014 	.word	0x00000014
     e4c:	00000c8c 	.word	0x00000c8c
     e50:	08007404 	.word	0x08007404
     e54:	0000000e 	.word	0x0000000e
     e58:	44040e42 	.word	0x44040e42
     e5c:	018e080e 	.word	0x018e080e
     e60:	00000014 	.word	0x00000014
     e64:	00000c8c 	.word	0x00000c8c
     e68:	08007414 	.word	0x08007414
     e6c:	0000000c 	.word	0x0000000c
     e70:	42040e42 	.word	0x42040e42
     e74:	018e080e 	.word	0x018e080e
     e78:	00000014 	.word	0x00000014
     e7c:	00000c8c 	.word	0x00000c8c
     e80:	08007420 	.word	0x08007420
     e84:	0000000c 	.word	0x0000000c
     e88:	42040e42 	.word	0x42040e42
     e8c:	018e080e 	.word	0x018e080e
     e90:	00000014 	.word	0x00000014
     e94:	00000c8c 	.word	0x00000c8c
     e98:	0800742c 	.word	0x0800742c
     e9c:	0000000c 	.word	0x0000000c
     ea0:	42040e42 	.word	0x42040e42
     ea4:	018e080e 	.word	0x018e080e
     ea8:	00000014 	.word	0x00000014
     eac:	00000c8c 	.word	0x00000c8c
     eb0:	08007438 	.word	0x08007438
     eb4:	0000000c 	.word	0x0000000c
     eb8:	42040e42 	.word	0x42040e42
     ebc:	018e080e 	.word	0x018e080e
     ec0:	0000000c 	.word	0x0000000c
     ec4:	ffffffff 	.word	0xffffffff
     ec8:	7c010001 	.word	0x7c010001
     ecc:	000d0c0e 	.word	0x000d0c0e
     ed0:	0000000c 	.word	0x0000000c
     ed4:	00000ec0 	.word	0x00000ec0
     ed8:	08007444 	.word	0x08007444
     edc:	0000000c 	.word	0x0000000c
     ee0:	0000000c 	.word	0x0000000c
     ee4:	00000ec0 	.word	0x00000ec0
     ee8:	08007450 	.word	0x08007450
     eec:	0000000c 	.word	0x0000000c
     ef0:	0000000c 	.word	0x0000000c
     ef4:	00000ec0 	.word	0x00000ec0
     ef8:	0800745c 	.word	0x0800745c
     efc:	00000014 	.word	0x00000014
     f00:	0000000c 	.word	0x0000000c
     f04:	00000ec0 	.word	0x00000ec0
     f08:	08007470 	.word	0x08007470
     f0c:	0000000c 	.word	0x0000000c
     f10:	0000000c 	.word	0x0000000c
     f14:	00000ec0 	.word	0x00000ec0
     f18:	0800747c 	.word	0x0800747c
     f1c:	00000014 	.word	0x00000014
     f20:	0000000c 	.word	0x0000000c
     f24:	00000ec0 	.word	0x00000ec0
     f28:	08007490 	.word	0x08007490
     f2c:	00000010 	.word	0x00000010
     f30:	00000014 	.word	0x00000014
     f34:	00000ec0 	.word	0x00000ec0
     f38:	080074a0 	.word	0x080074a0
     f3c:	00000034 	.word	0x00000034
     f40:	44040e44 	.word	0x44040e44
     f44:	018e080e 	.word	0x018e080e
     f48:	00000014 	.word	0x00000014
     f4c:	00000ec0 	.word	0x00000ec0
     f50:	080074d4 	.word	0x080074d4
     f54:	00000038 	.word	0x00000038
     f58:	44040e44 	.word	0x44040e44
     f5c:	018e080e 	.word	0x018e080e
     f60:	00000014 	.word	0x00000014
     f64:	00000ec0 	.word	0x00000ec0
     f68:	0800750c 	.word	0x0800750c
     f6c:	00000018 	.word	0x00000018
     f70:	8e080e42 	.word	0x8e080e42
     f74:	00028401 	.word	0x00028401
     f78:	0000000c 	.word	0x0000000c
     f7c:	ffffffff 	.word	0xffffffff
     f80:	7c010001 	.word	0x7c010001
     f84:	000d0c0e 	.word	0x000d0c0e
     f88:	0000000c 	.word	0x0000000c
     f8c:	00000f78 	.word	0x00000f78
     f90:	08007524 	.word	0x08007524
     f94:	00000040 	.word	0x00000040
     f98:	0000000c 	.word	0x0000000c
     f9c:	00000f78 	.word	0x00000f78
     fa0:	08007564 	.word	0x08007564
     fa4:	00000034 	.word	0x00000034
     fa8:	00000010 	.word	0x00000010
     fac:	00000f78 	.word	0x00000f78
     fb0:	08007598 	.word	0x08007598
     fb4:	00000030 	.word	0x00000030
     fb8:	00080e42 	.word	0x00080e42
     fbc:	0000000c 	.word	0x0000000c
     fc0:	00000f78 	.word	0x00000f78
     fc4:	080075c8 	.word	0x080075c8
     fc8:	00000014 	.word	0x00000014
     fcc:	0000000c 	.word	0x0000000c
     fd0:	00000f78 	.word	0x00000f78
     fd4:	080075dc 	.word	0x080075dc
     fd8:	0000000c 	.word	0x0000000c
     fdc:	0000000c 	.word	0x0000000c
     fe0:	00000f78 	.word	0x00000f78
     fe4:	080075e8 	.word	0x080075e8
     fe8:	00000014 	.word	0x00000014
     fec:	0000000c 	.word	0x0000000c
     ff0:	00000f78 	.word	0x00000f78
     ff4:	080075fc 	.word	0x080075fc
     ff8:	0000000c 	.word	0x0000000c
     ffc:	0000000c 	.word	0x0000000c
    1000:	00000f78 	.word	0x00000f78
    1004:	08007608 	.word	0x08007608
    1008:	00000014 	.word	0x00000014
    100c:	0000000c 	.word	0x0000000c
    1010:	00000f78 	.word	0x00000f78
    1014:	0800761c 	.word	0x0800761c
    1018:	00000010 	.word	0x00000010
    101c:	0000000c 	.word	0x0000000c
    1020:	00000f78 	.word	0x00000f78
    1024:	0800762c 	.word	0x0800762c
    1028:	00000014 	.word	0x00000014
    102c:	0000000c 	.word	0x0000000c
    1030:	00000f78 	.word	0x00000f78
    1034:	08007640 	.word	0x08007640
    1038:	00000014 	.word	0x00000014
    103c:	0000000c 	.word	0x0000000c
    1040:	00000f78 	.word	0x00000f78
    1044:	08007654 	.word	0x08007654
    1048:	00000014 	.word	0x00000014
    104c:	0000000c 	.word	0x0000000c
    1050:	00000f78 	.word	0x00000f78
    1054:	08007668 	.word	0x08007668
    1058:	0000001c 	.word	0x0000001c
    105c:	0000000c 	.word	0x0000000c
    1060:	00000f78 	.word	0x00000f78
    1064:	08007684 	.word	0x08007684
    1068:	0000000c 	.word	0x0000000c
    106c:	0000000c 	.word	0x0000000c
    1070:	00000f78 	.word	0x00000f78
    1074:	08007690 	.word	0x08007690
    1078:	00000014 	.word	0x00000014
    107c:	0000000c 	.word	0x0000000c
    1080:	00000f78 	.word	0x00000f78
    1084:	080076a4 	.word	0x080076a4
    1088:	00000020 	.word	0x00000020
    108c:	0000000c 	.word	0x0000000c
    1090:	00000f78 	.word	0x00000f78
    1094:	080076c4 	.word	0x080076c4
    1098:	0000000c 	.word	0x0000000c
    109c:	0000000c 	.word	0x0000000c
    10a0:	00000f78 	.word	0x00000f78
    10a4:	080076d0 	.word	0x080076d0
    10a8:	00000010 	.word	0x00000010
    10ac:	0000000c 	.word	0x0000000c
    10b0:	00000f78 	.word	0x00000f78
    10b4:	080076e0 	.word	0x080076e0
    10b8:	0000000c 	.word	0x0000000c
    10bc:	0000000c 	.word	0x0000000c
    10c0:	00000f78 	.word	0x00000f78
    10c4:	080076ec 	.word	0x080076ec
    10c8:	000000b8 	.word	0x000000b8
    10cc:	0000000c 	.word	0x0000000c
    10d0:	00000f78 	.word	0x00000f78
    10d4:	080077a4 	.word	0x080077a4
    10d8:	0000001c 	.word	0x0000001c
    10dc:	0000000c 	.word	0x0000000c
    10e0:	00000f78 	.word	0x00000f78
    10e4:	080077c0 	.word	0x080077c0
    10e8:	0000001c 	.word	0x0000001c
    10ec:	0000000c 	.word	0x0000000c
    10f0:	00000f78 	.word	0x00000f78
    10f4:	080077dc 	.word	0x080077dc
    10f8:	0000001c 	.word	0x0000001c
    10fc:	0000000c 	.word	0x0000000c
    1100:	00000f78 	.word	0x00000f78
    1104:	080077f8 	.word	0x080077f8
    1108:	0000001c 	.word	0x0000001c
    110c:	0000000c 	.word	0x0000000c
    1110:	00000f78 	.word	0x00000f78
    1114:	08007814 	.word	0x08007814
    1118:	0000001c 	.word	0x0000001c
    111c:	0000000c 	.word	0x0000000c
    1120:	00000f78 	.word	0x00000f78
    1124:	08007830 	.word	0x08007830
    1128:	0000000c 	.word	0x0000000c
    112c:	0000000c 	.word	0x0000000c
    1130:	00000f78 	.word	0x00000f78
    1134:	0800783c 	.word	0x0800783c
    1138:	0000000c 	.word	0x0000000c
    113c:	0000000c 	.word	0x0000000c
    1140:	00000f78 	.word	0x00000f78
    1144:	08007848 	.word	0x08007848
    1148:	0000000c 	.word	0x0000000c
    114c:	0000000c 	.word	0x0000000c
    1150:	00000f78 	.word	0x00000f78
    1154:	08007854 	.word	0x08007854
    1158:	00000044 	.word	0x00000044
    115c:	0000000c 	.word	0x0000000c
    1160:	00000f78 	.word	0x00000f78
    1164:	08007898 	.word	0x08007898
    1168:	00000010 	.word	0x00000010
    116c:	0000000c 	.word	0x0000000c
    1170:	00000f78 	.word	0x00000f78
    1174:	080078a8 	.word	0x080078a8
    1178:	00000014 	.word	0x00000014
    117c:	0000000c 	.word	0x0000000c
    1180:	00000f78 	.word	0x00000f78
    1184:	080078bc 	.word	0x080078bc
    1188:	0000000c 	.word	0x0000000c
    118c:	0000000c 	.word	0x0000000c
    1190:	ffffffff 	.word	0xffffffff
    1194:	7c010001 	.word	0x7c010001
    1198:	000d0c0e 	.word	0x000d0c0e
    119c:	0000000c 	.word	0x0000000c
    11a0:	0000118c 	.word	0x0000118c
    11a4:	080078c8 	.word	0x080078c8
    11a8:	0000001c 	.word	0x0000001c
    11ac:	0000000c 	.word	0x0000000c
    11b0:	0000118c 	.word	0x0000118c
    11b4:	080078e4 	.word	0x080078e4
    11b8:	0000000c 	.word	0x0000000c
    11bc:	0000000c 	.word	0x0000000c
    11c0:	0000118c 	.word	0x0000118c
    11c4:	080078f0 	.word	0x080078f0
    11c8:	0000002c 	.word	0x0000002c
    11cc:	0000000c 	.word	0x0000000c
    11d0:	0000118c 	.word	0x0000118c
    11d4:	0800791c 	.word	0x0800791c
    11d8:	0000001c 	.word	0x0000001c
    11dc:	0000000c 	.word	0x0000000c
    11e0:	0000118c 	.word	0x0000118c
    11e4:	08007938 	.word	0x08007938
    11e8:	0000000c 	.word	0x0000000c
    11ec:	0000000c 	.word	0x0000000c
    11f0:	0000118c 	.word	0x0000118c
    11f4:	08007944 	.word	0x08007944
    11f8:	00000028 	.word	0x00000028
    11fc:	0000000c 	.word	0x0000000c
    1200:	ffffffff 	.word	0xffffffff
    1204:	7c010001 	.word	0x7c010001
    1208:	000d0c0e 	.word	0x000d0c0e
    120c:	00000010 	.word	0x00000010
    1210:	000011fc 	.word	0x000011fc
    1214:	0800796c 	.word	0x0800796c
    1218:	00000054 	.word	0x00000054
    121c:	00080e44 	.word	0x00080e44
    1220:	0000001c 	.word	0x0000001c
    1224:	000011fc 	.word	0x000011fc
    1228:	080079c0 	.word	0x080079c0
    122c:	000000b0 	.word	0x000000b0
    1230:	8e140e54 	.word	0x8e140e54
    1234:	86028701 	.word	0x86028701
    1238:	84048503 	.word	0x84048503
    123c:	200e7605 	.word	0x200e7605
    1240:	00000020 	.word	0x00000020
    1244:	000011fc 	.word	0x000011fc
    1248:	08007a70 	.word	0x08007a70
    124c:	000000b8 	.word	0x000000b8
    1250:	8e140e44 	.word	0x8e140e44
    1254:	86028701 	.word	0x86028701
    1258:	84048503 	.word	0x84048503
    125c:	0e400205 	.word	0x0e400205
    1260:	00000020 	.word	0x00000020
    1264:	00000020 	.word	0x00000020
    1268:	000011fc 	.word	0x000011fc
    126c:	08007b28 	.word	0x08007b28
    1270:	000000b4 	.word	0x000000b4
    1274:	8e140e44 	.word	0x8e140e44
    1278:	86028701 	.word	0x86028701
    127c:	84048503 	.word	0x84048503
    1280:	0e400205 	.word	0x0e400205
    1284:	00000020 	.word	0x00000020
    1288:	0000001c 	.word	0x0000001c
    128c:	000011fc 	.word	0x000011fc
    1290:	08007bdc 	.word	0x08007bdc
    1294:	00000094 	.word	0x00000094
    1298:	4e140e44 	.word	0x4e140e44
    129c:	018e280e 	.word	0x018e280e
    12a0:	03860287 	.word	0x03860287
    12a4:	05840485 	.word	0x05840485
    12a8:	00000018 	.word	0x00000018
    12ac:	000011fc 	.word	0x000011fc
    12b0:	08007c70 	.word	0x08007c70
    12b4:	0000016c 	.word	0x0000016c
    12b8:	8e0c0e44 	.word	0x8e0c0e44
    12bc:	84028501 	.word	0x84028501
    12c0:	00000003 	.word	0x00000003
    12c4:	0000001c 	.word	0x0000001c
    12c8:	000011fc 	.word	0x000011fc
    12cc:	08007ddc 	.word	0x08007ddc
    12d0:	0000015a 	.word	0x0000015a
    12d4:	8e140e44 	.word	0x8e140e44
    12d8:	86028701 	.word	0x86028701
    12dc:	84048503 	.word	0x84048503
    12e0:	00000005 	.word	0x00000005
    12e4:	0000000c 	.word	0x0000000c
    12e8:	000011fc 	.word	0x000011fc
    12ec:	08007f38 	.word	0x08007f38
    12f0:	00000022 	.word	0x00000022
    12f4:	0000000c 	.word	0x0000000c
    12f8:	000011fc 	.word	0x000011fc
    12fc:	08007f5c 	.word	0x08007f5c
    1300:	00000016 	.word	0x00000016
    1304:	0000000c 	.word	0x0000000c
    1308:	000011fc 	.word	0x000011fc
    130c:	08007f74 	.word	0x08007f74
    1310:	00000016 	.word	0x00000016
    1314:	0000000c 	.word	0x0000000c
    1318:	000011fc 	.word	0x000011fc
    131c:	08007f8c 	.word	0x08007f8c
    1320:	00000018 	.word	0x00000018
    1324:	0000000c 	.word	0x0000000c
    1328:	000011fc 	.word	0x000011fc
    132c:	08007fa4 	.word	0x08007fa4
    1330:	00000014 	.word	0x00000014
    1334:	0000000c 	.word	0x0000000c
    1338:	000011fc 	.word	0x000011fc
    133c:	08007fb8 	.word	0x08007fb8
    1340:	0000001a 	.word	0x0000001a
    1344:	0000000c 	.word	0x0000000c
    1348:	000011fc 	.word	0x000011fc
    134c:	08007fd4 	.word	0x08007fd4
    1350:	0000001c 	.word	0x0000001c
    1354:	0000000c 	.word	0x0000000c
    1358:	000011fc 	.word	0x000011fc
    135c:	08007ff0 	.word	0x08007ff0
    1360:	00000018 	.word	0x00000018
    1364:	0000000c 	.word	0x0000000c
    1368:	000011fc 	.word	0x000011fc
    136c:	08008008 	.word	0x08008008
    1370:	00000004 	.word	0x00000004
    1374:	0000000c 	.word	0x0000000c
    1378:	000011fc 	.word	0x000011fc
    137c:	0800800c 	.word	0x0800800c
    1380:	00000008 	.word	0x00000008
    1384:	0000000c 	.word	0x0000000c
    1388:	000011fc 	.word	0x000011fc
    138c:	08008014 	.word	0x08008014
    1390:	00000018 	.word	0x00000018
    1394:	0000000c 	.word	0x0000000c
    1398:	000011fc 	.word	0x000011fc
    139c:	0800802c 	.word	0x0800802c
    13a0:	0000000e 	.word	0x0000000e
    13a4:	0000000c 	.word	0x0000000c
    13a8:	000011fc 	.word	0x000011fc
    13ac:	0800803c 	.word	0x0800803c
    13b0:	0000001a 	.word	0x0000001a
    13b4:	00000014 	.word	0x00000014
    13b8:	000011fc 	.word	0x000011fc
    13bc:	08008058 	.word	0x08008058
    13c0:	00000092 	.word	0x00000092
    13c4:	8e080e42 	.word	0x8e080e42
    13c8:	00028401 	.word	0x00028401
    13cc:	0000000c 	.word	0x0000000c
    13d0:	000011fc 	.word	0x000011fc
    13d4:	080080ec 	.word	0x080080ec
    13d8:	00000028 	.word	0x00000028
    13dc:	0000000c 	.word	0x0000000c
    13e0:	000011fc 	.word	0x000011fc
    13e4:	08008114 	.word	0x08008114
    13e8:	00000022 	.word	0x00000022
    13ec:	0000000c 	.word	0x0000000c
    13f0:	000011fc 	.word	0x000011fc
    13f4:	08008138 	.word	0x08008138
    13f8:	00000018 	.word	0x00000018
    13fc:	0000000c 	.word	0x0000000c
    1400:	000011fc 	.word	0x000011fc
    1404:	08008150 	.word	0x08008150
    1408:	00000006 	.word	0x00000006
    140c:	0000000c 	.word	0x0000000c
    1410:	000011fc 	.word	0x000011fc
    1414:	08008158 	.word	0x08008158
    1418:	00000010 	.word	0x00000010
    141c:	0000000c 	.word	0x0000000c
    1420:	000011fc 	.word	0x000011fc
    1424:	08008168 	.word	0x08008168
    1428:	00000010 	.word	0x00000010
    142c:	00000018 	.word	0x00000018
    1430:	000011fc 	.word	0x000011fc
    1434:	08008178 	.word	0x08008178
    1438:	00000046 	.word	0x00000046
    143c:	8e0c0e46 	.word	0x8e0c0e46
    1440:	84028501 	.word	0x84028501
    1444:	00000003 	.word	0x00000003
    1448:	0000000c 	.word	0x0000000c
    144c:	000011fc 	.word	0x000011fc
    1450:	080081c0 	.word	0x080081c0
    1454:	00000010 	.word	0x00000010
    1458:	0000000c 	.word	0x0000000c
    145c:	000011fc 	.word	0x000011fc
    1460:	080081d0 	.word	0x080081d0
    1464:	00000014 	.word	0x00000014
    1468:	0000000c 	.word	0x0000000c
    146c:	000011fc 	.word	0x000011fc
    1470:	080081e4 	.word	0x080081e4
    1474:	00000010 	.word	0x00000010
    1478:	0000000c 	.word	0x0000000c
    147c:	000011fc 	.word	0x000011fc
    1480:	080081f4 	.word	0x080081f4
    1484:	00000014 	.word	0x00000014
    1488:	0000000c 	.word	0x0000000c
    148c:	000011fc 	.word	0x000011fc
    1490:	08008208 	.word	0x08008208
    1494:	0000001a 	.word	0x0000001a
    1498:	0000000c 	.word	0x0000000c
    149c:	000011fc 	.word	0x000011fc
    14a0:	08008224 	.word	0x08008224
    14a4:	0000001a 	.word	0x0000001a
    14a8:	0000000c 	.word	0x0000000c
    14ac:	000011fc 	.word	0x000011fc
    14b0:	08008240 	.word	0x08008240
    14b4:	0000001a 	.word	0x0000001a
    14b8:	0000000c 	.word	0x0000000c
    14bc:	000011fc 	.word	0x000011fc
    14c0:	0800825c 	.word	0x0800825c
    14c4:	0000001a 	.word	0x0000001a
    14c8:	0000000c 	.word	0x0000000c
    14cc:	000011fc 	.word	0x000011fc
    14d0:	08008278 	.word	0x08008278
    14d4:	00000010 	.word	0x00000010
    14d8:	0000000c 	.word	0x0000000c
    14dc:	000011fc 	.word	0x000011fc
    14e0:	08008288 	.word	0x08008288
    14e4:	00000014 	.word	0x00000014
    14e8:	0000000c 	.word	0x0000000c
    14ec:	000011fc 	.word	0x000011fc
    14f0:	0800829c 	.word	0x0800829c
    14f4:	00000010 	.word	0x00000010
    14f8:	0000000c 	.word	0x0000000c
    14fc:	000011fc 	.word	0x000011fc
    1500:	080082ac 	.word	0x080082ac
    1504:	00000014 	.word	0x00000014
    1508:	0000000c 	.word	0x0000000c
    150c:	000011fc 	.word	0x000011fc
    1510:	080082c0 	.word	0x080082c0
    1514:	00000010 	.word	0x00000010
    1518:	0000000c 	.word	0x0000000c
    151c:	000011fc 	.word	0x000011fc
    1520:	080082d0 	.word	0x080082d0
    1524:	00000014 	.word	0x00000014
    1528:	0000000c 	.word	0x0000000c
    152c:	000011fc 	.word	0x000011fc
    1530:	080082e4 	.word	0x080082e4
    1534:	00000010 	.word	0x00000010
    1538:	0000000c 	.word	0x0000000c
    153c:	000011fc 	.word	0x000011fc
    1540:	080082f4 	.word	0x080082f4
    1544:	00000014 	.word	0x00000014
    1548:	0000000c 	.word	0x0000000c
    154c:	000011fc 	.word	0x000011fc
    1550:	08008308 	.word	0x08008308
    1554:	00000010 	.word	0x00000010
    1558:	0000000c 	.word	0x0000000c
    155c:	000011fc 	.word	0x000011fc
    1560:	08008318 	.word	0x08008318
    1564:	00000010 	.word	0x00000010
    1568:	0000000c 	.word	0x0000000c
    156c:	000011fc 	.word	0x000011fc
    1570:	08008328 	.word	0x08008328
    1574:	00000010 	.word	0x00000010
    1578:	0000000c 	.word	0x0000000c
    157c:	000011fc 	.word	0x000011fc
    1580:	08008338 	.word	0x08008338
    1584:	00000010 	.word	0x00000010
    1588:	0000000c 	.word	0x0000000c
    158c:	000011fc 	.word	0x000011fc
    1590:	08008348 	.word	0x08008348
    1594:	00000010 	.word	0x00000010
    1598:	0000000c 	.word	0x0000000c
    159c:	000011fc 	.word	0x000011fc
    15a0:	08008358 	.word	0x08008358
    15a4:	00000010 	.word	0x00000010
    15a8:	0000000c 	.word	0x0000000c
    15ac:	000011fc 	.word	0x000011fc
    15b0:	08008368 	.word	0x08008368
    15b4:	00000014 	.word	0x00000014
    15b8:	0000000c 	.word	0x0000000c
    15bc:	000011fc 	.word	0x000011fc
    15c0:	0800837c 	.word	0x0800837c
    15c4:	00000014 	.word	0x00000014
    15c8:	0000000c 	.word	0x0000000c
    15cc:	000011fc 	.word	0x000011fc
    15d0:	08008390 	.word	0x08008390
    15d4:	00000014 	.word	0x00000014
    15d8:	0000000c 	.word	0x0000000c
    15dc:	000011fc 	.word	0x000011fc
    15e0:	080083a4 	.word	0x080083a4
    15e4:	00000014 	.word	0x00000014
    15e8:	0000000c 	.word	0x0000000c
    15ec:	000011fc 	.word	0x000011fc
    15f0:	080083b8 	.word	0x080083b8
    15f4:	00000014 	.word	0x00000014
    15f8:	0000000c 	.word	0x0000000c
    15fc:	000011fc 	.word	0x000011fc
    1600:	080083cc 	.word	0x080083cc
    1604:	00000020 	.word	0x00000020
    1608:	0000000c 	.word	0x0000000c
    160c:	000011fc 	.word	0x000011fc
    1610:	080083ec 	.word	0x080083ec
    1614:	00000020 	.word	0x00000020
    1618:	00000010 	.word	0x00000010
    161c:	000011fc 	.word	0x000011fc
    1620:	0800840c 	.word	0x0800840c
    1624:	00000068 	.word	0x00000068
    1628:	00080e4a 	.word	0x00080e4a
    162c:	0000000c 	.word	0x0000000c
    1630:	000011fc 	.word	0x000011fc
    1634:	08008474 	.word	0x08008474
    1638:	0000001a 	.word	0x0000001a
    163c:	0000000c 	.word	0x0000000c
    1640:	000011fc 	.word	0x000011fc
    1644:	08008490 	.word	0x08008490
    1648:	0000001a 	.word	0x0000001a
    164c:	0000000c 	.word	0x0000000c
    1650:	000011fc 	.word	0x000011fc
    1654:	080084ac 	.word	0x080084ac
    1658:	0000001a 	.word	0x0000001a
    165c:	0000000c 	.word	0x0000000c
    1660:	000011fc 	.word	0x000011fc
    1664:	080084c8 	.word	0x080084c8
    1668:	00000016 	.word	0x00000016
    166c:	0000000c 	.word	0x0000000c
    1670:	000011fc 	.word	0x000011fc
    1674:	080084e0 	.word	0x080084e0
    1678:	00000016 	.word	0x00000016
    167c:	0000000c 	.word	0x0000000c
    1680:	000011fc 	.word	0x000011fc
    1684:	080084f8 	.word	0x080084f8
    1688:	00000016 	.word	0x00000016
    168c:	0000000c 	.word	0x0000000c
    1690:	000011fc 	.word	0x000011fc
    1694:	08008510 	.word	0x08008510
    1698:	00000016 	.word	0x00000016
    169c:	0000000c 	.word	0x0000000c
    16a0:	000011fc 	.word	0x000011fc
    16a4:	08008528 	.word	0x08008528
    16a8:	00000004 	.word	0x00000004
    16ac:	0000000c 	.word	0x0000000c
    16b0:	000011fc 	.word	0x000011fc
    16b4:	0800852c 	.word	0x0800852c
    16b8:	00000004 	.word	0x00000004
    16bc:	0000000c 	.word	0x0000000c
    16c0:	000011fc 	.word	0x000011fc
    16c4:	08008530 	.word	0x08008530
    16c8:	00000004 	.word	0x00000004
    16cc:	0000000c 	.word	0x0000000c
    16d0:	000011fc 	.word	0x000011fc
    16d4:	08008534 	.word	0x08008534
    16d8:	00000004 	.word	0x00000004
    16dc:	0000000c 	.word	0x0000000c
    16e0:	000011fc 	.word	0x000011fc
    16e4:	08008538 	.word	0x08008538
    16e8:	00000004 	.word	0x00000004
    16ec:	0000000c 	.word	0x0000000c
    16f0:	000011fc 	.word	0x000011fc
    16f4:	0800853c 	.word	0x0800853c
    16f8:	00000006 	.word	0x00000006
    16fc:	0000000c 	.word	0x0000000c
    1700:	000011fc 	.word	0x000011fc
    1704:	08008544 	.word	0x08008544
    1708:	00000016 	.word	0x00000016
    170c:	000c      	.short	0x000c
    170e:	00          	.byte	0x00
    170f:	00          	.byte	0x00
    1710:	000011fc 	.word	0x000011fc
    1714:	0800855c 	.word	0x0800855c
    1718:	0000001a 	.word	0x0000001a
    171c:	0000000c 	.word	0x0000000c
    1720:	000011fc 	.word	0x000011fc
    1724:	08008578 	.word	0x08008578
    1728:	00000016 	.word	0x00000016
    172c:	0000000c 	.word	0x0000000c
    1730:	000011fc 	.word	0x000011fc
    1734:	08008590 	.word	0x08008590
    1738:	0000001a 	.word	0x0000001a
    173c:	0000000c 	.word	0x0000000c
    1740:	000011fc 	.word	0x000011fc
    1744:	080085ac 	.word	0x080085ac
    1748:	00000010 	.word	0x00000010
    174c:	0000000c 	.word	0x0000000c
    1750:	000011fc 	.word	0x000011fc
    1754:	080085bc 	.word	0x080085bc
    1758:	00000006 	.word	0x00000006
    175c:	0000000c 	.word	0x0000000c
    1760:	000011fc 	.word	0x000011fc
    1764:	080085c4 	.word	0x080085c4
    1768:	00000006 	.word	0x00000006
    176c:	0000000c 	.word	0x0000000c
    1770:	000011fc 	.word	0x000011fc
    1774:	080085cc 	.word	0x080085cc
    1778:	00000006 	.word	0x00000006
    177c:	0000000c 	.word	0x0000000c
    1780:	000011fc 	.word	0x000011fc
    1784:	080085d4 	.word	0x080085d4
    1788:	00000008 	.word	0x00000008
    178c:	0000000c 	.word	0x0000000c
    1790:	000011fc 	.word	0x000011fc
    1794:	080085dc 	.word	0x080085dc
    1798:	00000006 	.word	0x00000006
    179c:	0000000c 	.word	0x0000000c
    17a0:	000011fc 	.word	0x000011fc
    17a4:	080085e4 	.word	0x080085e4
    17a8:	00000006 	.word	0x00000006
    17ac:	0000000c 	.word	0x0000000c
    17b0:	000011fc 	.word	0x000011fc
    17b4:	080085ec 	.word	0x080085ec
    17b8:	0000000c 	.word	0x0000000c
    17bc:	0000000c 	.word	0x0000000c
    17c0:	000011fc 	.word	0x000011fc
    17c4:	080085f8 	.word	0x080085f8
    17c8:	0000000a 	.word	0x0000000a
    17cc:	0000000c 	.word	0x0000000c
    17d0:	000011fc 	.word	0x000011fc
    17d4:	08008604 	.word	0x08008604
    17d8:	00000018 	.word	0x00000018
    17dc:	0000000c 	.word	0x0000000c
    17e0:	000011fc 	.word	0x000011fc
    17e4:	0800861c 	.word	0x0800861c
    17e8:	0000000a 	.word	0x0000000a
    17ec:	00000014 	.word	0x00000014
    17f0:	000011fc 	.word	0x000011fc
    17f4:	08008628 	.word	0x08008628
    17f8:	000000cc 	.word	0x000000cc
    17fc:	44040e42 	.word	0x44040e42
    1800:	018e100e 	.word	0x018e100e
    1804:	0000000c 	.word	0x0000000c
    1808:	ffffffff 	.word	0xffffffff
    180c:	7c010001 	.word	0x7c010001
    1810:	000d0c0e 	.word	0x000d0c0e
    1814:	0000000c 	.word	0x0000000c
    1818:	00001804 	.word	0x00001804
    181c:	080086f4 	.word	0x080086f4
    1820:	0000001e 	.word	0x0000001e
    1824:	0000000c 	.word	0x0000000c
    1828:	00001804 	.word	0x00001804
    182c:	08008714 	.word	0x08008714
    1830:	00000028 	.word	0x00000028
    1834:	0000000c 	.word	0x0000000c
    1838:	00001804 	.word	0x00001804
    183c:	0800873c 	.word	0x0800873c
    1840:	0000000e 	.word	0x0000000e
    1844:	0000000c 	.word	0x0000000c
    1848:	00001804 	.word	0x00001804
    184c:	0800874c 	.word	0x0800874c
    1850:	0000001a 	.word	0x0000001a
    1854:	00000010 	.word	0x00000010
    1858:	00001804 	.word	0x00001804
    185c:	08008768 	.word	0x08008768
    1860:	0000003e 	.word	0x0000003e
    1864:	00080e4e 	.word	0x00080e4e
    1868:	0000000c 	.word	0x0000000c
    186c:	00001804 	.word	0x00001804
    1870:	080087a8 	.word	0x080087a8
    1874:	00000018 	.word	0x00000018
    1878:	0000000c 	.word	0x0000000c
    187c:	00001804 	.word	0x00001804
    1880:	080087c0 	.word	0x080087c0
    1884:	00000016 	.word	0x00000016
    1888:	0000000c 	.word	0x0000000c
    188c:	00001804 	.word	0x00001804
    1890:	080087d8 	.word	0x080087d8
    1894:	00000016 	.word	0x00000016
    1898:	0000000c 	.word	0x0000000c
    189c:	00001804 	.word	0x00001804
    18a0:	080087f0 	.word	0x080087f0
    18a4:	0000001a 	.word	0x0000001a
    18a8:	0000000c 	.word	0x0000000c
    18ac:	00001804 	.word	0x00001804
    18b0:	0800880c 	.word	0x0800880c
    18b4:	00000016 	.word	0x00000016
    18b8:	0000000c 	.word	0x0000000c
    18bc:	00001804 	.word	0x00001804
    18c0:	08008824 	.word	0x08008824
    18c4:	0000001a 	.word	0x0000001a
    18c8:	0000000c 	.word	0x0000000c
    18cc:	00001804 	.word	0x00001804
    18d0:	08008840 	.word	0x08008840
    18d4:	00000008 	.word	0x00000008
    18d8:	0000000c 	.word	0x0000000c
    18dc:	00001804 	.word	0x00001804
    18e0:	08008848 	.word	0x08008848
    18e4:	00000008 	.word	0x00000008
    18e8:	0000000c 	.word	0x0000000c
    18ec:	00001804 	.word	0x00001804
    18f0:	08008850 	.word	0x08008850
    18f4:	0000000c 	.word	0x0000000c
    18f8:	0000000c 	.word	0x0000000c
    18fc:	00001804 	.word	0x00001804
    1900:	0800885c 	.word	0x0800885c
    1904:	00000012 	.word	0x00000012
    1908:	0000000c 	.word	0x0000000c
    190c:	00001804 	.word	0x00001804
    1910:	08008870 	.word	0x08008870
    1914:	00000012 	.word	0x00000012
    1918:	0000000c 	.word	0x0000000c
    191c:	00001804 	.word	0x00001804
    1920:	08008884 	.word	0x08008884
    1924:	0000001a 	.word	0x0000001a
    1928:	0000000c 	.word	0x0000000c
    192c:	00001804 	.word	0x00001804
    1930:	080088a0 	.word	0x080088a0
    1934:	0000001a 	.word	0x0000001a
    1938:	0000000c 	.word	0x0000000c
    193c:	00001804 	.word	0x00001804
    1940:	080088bc 	.word	0x080088bc
    1944:	0000001a 	.word	0x0000001a
    1948:	0000000c 	.word	0x0000000c
    194c:	00001804 	.word	0x00001804
    1950:	080088d8 	.word	0x080088d8
    1954:	00000016 	.word	0x00000016
    1958:	0000000c 	.word	0x0000000c
    195c:	00001804 	.word	0x00001804
    1960:	080088f0 	.word	0x080088f0
    1964:	0000001a 	.word	0x0000001a
    1968:	0000000c 	.word	0x0000000c
    196c:	00001804 	.word	0x00001804
    1970:	0800890c 	.word	0x0800890c
    1974:	0000000c 	.word	0x0000000c
    1978:	0000000c 	.word	0x0000000c
    197c:	00001804 	.word	0x00001804
    1980:	08008918 	.word	0x08008918
    1984:	0000000a 	.word	0x0000000a
    1988:	0000000c 	.word	0x0000000c
    198c:	00001804 	.word	0x00001804
    1990:	08008924 	.word	0x08008924
    1994:	0000004a 	.word	0x0000004a
    1998:	0000000c 	.word	0x0000000c
    199c:	00001804 	.word	0x00001804
    19a0:	08008970 	.word	0x08008970
    19a4:	00000010 	.word	0x00000010
    19a8:	0000001c 	.word	0x0000001c
    19ac:	00001804 	.word	0x00001804
    19b0:	08008980 	.word	0x08008980
    19b4:	0000009c 	.word	0x0000009c
    19b8:	8e100e54 	.word	0x8e100e54
    19bc:	85028601 	.word	0x85028601
    19c0:	6c048403 	.word	0x6c048403
    19c4:	0000300e 	.word	0x0000300e
    19c8:	00000014 	.word	0x00000014
    19cc:	00001804 	.word	0x00001804
    19d0:	08008a1c 	.word	0x08008a1c
    19d4:	00000094 	.word	0x00000094
    19d8:	44040e42 	.word	0x44040e42
    19dc:	018e100e 	.word	0x018e100e
    19e0:	0000000c 	.word	0x0000000c
    19e4:	ffffffff 	.word	0xffffffff
    19e8:	7c010001 	.word	0x7c010001
    19ec:	000d0c0e 	.word	0x000d0c0e
    19f0:	00000018 	.word	0x00000018
    19f4:	000019e0 	.word	0x000019e0
    19f8:	08008b20 	.word	0x08008b20
    19fc:	00000054 	.word	0x00000054
    1a00:	000d0946 	.word	0x000d0946
    1a04:	8e080e44 	.word	0x8e080e44
    1a08:	00028d01 	.word	0x00028d01
    1a0c:	0000000c 	.word	0x0000000c
    1a10:	ffffffff 	.word	0xffffffff
    1a14:	7c010001 	.word	0x7c010001
    1a18:	000d0c0e 	.word	0x000d0c0e
    1a1c:	00000014 	.word	0x00000014
    1a20:	00001a0c 	.word	0x00001a0c
    1a24:	00000000 	.word	0x00000000
    1a28:	00000028 	.word	0x00000028
    1a2c:	4c040e44 	.word	0x4c040e44
    1a30:	018e080e 	.word	0x018e080e
    1a34:	0000000c 	.word	0x0000000c
    1a38:	ffffffff 	.word	0xffffffff
    1a3c:	7c010001 	.word	0x7c010001
    1a40:	000d0c0e 	.word	0x000d0c0e
    1a44:	0000000c 	.word	0x0000000c
    1a48:	00001a34 	.word	0x00001a34
    1a4c:	00000000 	.word	0x00000000
    1a50:	00000030 	.word	0x00000030
    1a54:	0000000c 	.word	0x0000000c
    1a58:	ffffffff 	.word	0xffffffff
    1a5c:	7c010001 	.word	0x7c010001
    1a60:	000d0c0e 	.word	0x000d0c0e
    1a64:	00000018 	.word	0x00000018
    1a68:	00001a54 	.word	0x00001a54
    1a6c:	00000000 	.word	0x00000000
    1a70:	00000048 	.word	0x00000048
    1a74:	8e100e44 	.word	0x8e100e44
    1a78:	85028601 	.word	0x85028601
    1a7c:	00048403 	.word	0x00048403
    1a80:	00000018 	.word	0x00000018
    1a84:	00001a54 	.word	0x00001a54
    1a88:	00000000 	.word	0x00000000
    1a8c:	00000080 	.word	0x00000080
    1a90:	8e100e44 	.word	0x8e100e44
    1a94:	85028601 	.word	0x85028601
    1a98:	00048403 	.word	0x00048403
    1a9c:	0000000c 	.word	0x0000000c
    1aa0:	ffffffff 	.word	0xffffffff
    1aa4:	7c010001 	.word	0x7c010001
    1aa8:	000d0c0e 	.word	0x000d0c0e
    1aac:	00000014 	.word	0x00000014
    1ab0:	00001a9c 	.word	0x00001a9c
    1ab4:	00000000 	.word	0x00000000
    1ab8:	000000d0 	.word	0x000000d0
    1abc:	85080e48 	.word	0x85080e48
    1ac0:	00028401 	.word	0x00028401
    1ac4:	0000000c 	.word	0x0000000c
    1ac8:	ffffffff 	.word	0xffffffff
    1acc:	7c010001 	.word	0x7c010001
    1ad0:	000d0c0e 	.word	0x000d0c0e
    1ad4:	0000001c 	.word	0x0000001c
    1ad8:	00001ac4 	.word	0x00001ac4
    1adc:	00000000 	.word	0x00000000
    1ae0:	0000009c 	.word	0x0000009c
    1ae4:	88140e48 	.word	0x88140e48
    1ae8:	86028701 	.word	0x86028701
    1aec:	84048503 	.word	0x84048503
    1af0:	00000005 	.word	0x00000005
    1af4:	0000000c 	.word	0x0000000c
    1af8:	ffffffff 	.word	0xffffffff
    1afc:	7c010001 	.word	0x7c010001
    1b00:	000d0c0e 	.word	0x000d0c0e
    1b04:	00000024 	.word	0x00000024
    1b08:	00001af4 	.word	0x00001af4
    1b0c:	00000000 	.word	0x00000000
    1b10:	0000010c 	.word	0x0000010c
    1b14:	8e240e44 	.word	0x8e240e44
    1b18:	8a028b01 	.word	0x8a028b01
    1b1c:	88048903 	.word	0x88048903
    1b20:	86068705 	.word	0x86068705
    1b24:	84088507 	.word	0x84088507
    1b28:	300e4c09 	.word	0x300e4c09

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	646f4d5f 	strbtvs	r4, [pc], #3423	; c <_Minimum_Stack_Size-0xf4>
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	52524500 	subspl	r4, r2, #0	; 0x0
      14:	5300524f 	movwpl	r5, #591	; 0x24f
      18:	74726174 	ldrbtvc	r6, [r2], #-372
      1c:	656d6954 	strbvs	r6, [sp, #-2388]!
      20:	4d495400 	cfstrdmi	mvd5, [r9]
      24:	6572505f 	ldrbvs	r5, [r2, #-95]!
      28:	6c616373 	stclvs	3, cr6, [r1], #-460
      2c:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
      30:	00525253 	subseq	r5, r2, r3, asr r2
      34:	61656c43 	cmnvs	r5, r3, asr #24
      38:	66754272 	undefined
      3c:	32726566 	rsbscc	r6, r2, #427819008	; 0x19800000
      40:	54003635 	strpl	r3, [r0], #-1589
      44:	4f5f4d49 	svcmi	0x005f4d49
      48:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
      4c:	70795474 	rsbsvc	r5, r9, r4, ror r4
      50:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      54:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      58:	6f4d5f4f 	svcvs	0x004d5f4f
      5c:	47006564 	strmi	r6, [r0, -r4, ror #10]
      60:	506c616f 	rsbpl	r6, ip, pc, ror #2
      64:	0032736f 	eorseq	r7, r2, pc, ror #6
      68:	6c616f47 	stclvs	15, cr6, [r1], #-284
      6c:	33736f50 	cmncc	r3, #320	; 0x140
      70:	616f4700 	cmnvs	pc, r0, lsl #14
      74:	736f506c 	cmnvc	pc, #108	; 0x6c
      78:	6f470034 	svcvs	0x00470034
      7c:	6f506c61 	svcvs	0x00506c61
      80:	47003573 	smlsdxmi	r0, r3, r5, r3
      84:	506c616f 	rsbpl	r6, ip, pc, ror #2
      88:	0036736f 	eorseq	r7, r6, pc, ror #6
      8c:	5f4d4954 	svcpl	0x004d4954
      90:	6f50434f 	svcvs	0x0050434f
      94:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
      98:	47007974 	smlsdxmi	r0, r4, r9, r7
      9c:	506c616f 	rsbpl	r6, ip, pc, ror #2
      a0:	0038736f 	eorseq	r7, r8, pc, ror #6
      a4:	6c616f47 	stclvs	15, cr6, [r1], #-284
      a8:	39736f50 	ldmdbcc	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
      ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      b0:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      b4:	6162006e 	cmnvs	r2, lr, rrx
      b8:	61726475 	cmnvs	r2, r5, ror r4
      bc:	69006574 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
      c0:	00303164 	eorseq	r3, r0, r4, ror #2
      c4:	31316469 	teqcc	r1, r9, ror #8
      c8:	31646900 	cmncc	r4, r0, lsl #18
      cc:	64690032 	strbtvs	r0, [r9], #-50
      d0:	69003331 	stmdbvs	r0, {r0, r4, r5, r8, r9, ip, sp}
      d4:	00343164 	eorseq	r3, r4, r4, ror #2
      d8:	35316469 	ldrcc	r6, [r1, #-1129]!
      dc:	31646900 	cmncc	r4, r0, lsl #18
      e0:	64690036 	strbtvs	r0, [r9], #-54
      e4:	69003731 	stmdbvs	r0, {r0, r4, r5, r8, r9, sl, ip, sp}
      e8:	00383164 	eorseq	r3, r8, r4, ror #2
      ec:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
      f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      f4:	74536c61 	ldrbvc	r6, [r3], #-3169
      f8:	00657461 	rsbeq	r7, r5, r1, ror #8
      fc:	64756142 	ldrbtvs	r6, [r5], #-322
     100:	65746172 	ldrbvs	r6, [r4, #-370]!
     104:	4c58445f 	cfldrdmi	mvd4, [r8], {95}
     108:	72724500 	rsbsvc	r4, r2, #0	; 0x0
     10c:	7453726f 	ldrbvc	r7, [r3], #-623
     110:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     114:	78546200 	ldmdavc	r4, {r9, sp, lr}^
     118:	74614464 	strbtvc	r4, [r1], #-1124
     11c:	6f470061 	svcvs	0x00470061
     120:	6f506c61 	svcvs	0x00506c61
     124:	00303173 	eorseq	r3, r0, r3, ror r1
     128:	6c616f47 	stclvs	15, cr6, [r1], #-284
     12c:	31736f50 	cmncc	r3, r0, asr pc
     130:	53550032 	cmppl	r5, #50	; 0x32
     134:	5f545241 	svcpl	0x00545241
     138:	64726f57 	ldrbtvs	r6, [r2], #-3927
     13c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     140:	54006874 	strpl	r6, [r0], #-2164
     144:	505f4d49 	subspl	r4, pc, r9, asr #26
     148:	6f697265 	svcvs	0x00697265
     14c:	4d620064 	stclmi	0, cr0, [r2, #-400]!
     150:	6e69766f 	cdpvs	6, 6, cr7, cr9, cr15, {3}
     154:	53550067 	cmppl	r5, #103	; 0x67
     158:	5f545241 	svcpl	0x00545241
     15c:	706f7453 	rsbvc	r7, pc, r3, asr r4
     160:	73746942 	cmnvc	r4, #1081344	; 0x108000
     164:	4d495400 	cfstrdmi	mvd5, [r9]
     168:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     16c:	53656c64 	cmnpl	r5, #25600	; 0x6400
     170:	65746174 	ldrbvs	r6, [r4, #-372]!
     174:	52434300 	subpl	r4, r3, #0	; 0x0
     178:	61565f31 	cmpvs	r6, r1, lsr pc
     17c:	5047006c 	subpl	r0, r7, ip, rrx
     180:	535f4f49 	cmppl	pc, #292	; 0x124
     184:	64656570 	strbtvs	r6, [r5], #-1392
     188:	484d325f 	stmdami	sp, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
     18c:	5447007a 	strbpl	r0, [r7], #-122
     190:	47005250 	smlsdmi	r0, r0, r2, r5
     194:	506c616f 	rsbpl	r6, ip, pc, ror #2
     198:	3131736f 	teqcc	r1, pc, ror #6
     19c:	44785400 	ldrbtmi	r5, [r8], #-1024
     1a0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     1a4:	4700676e 	strmi	r6, [r0, -lr, ror #14]
     1a8:	506c616f 	rsbpl	r6, ip, pc, ror #2
     1ac:	3331736f 	teqcc	r1, #-1140850687	; 0xbc000001
     1b0:	616f4700 	cmnvs	pc, r0, lsl #14
     1b4:	736f506c 	cmnvc	pc, #108	; 0x6c
     1b8:	47003431 	smladxmi	r0, r1, r4, r3
     1bc:	506c616f 	rsbpl	r6, ip, pc, ror #2
     1c0:	3531736f 	ldrcc	r7, [r1, #-879]!
     1c4:	616f4700 	cmnvs	pc, r0, lsl #14
     1c8:	736f506c 	cmnvc	pc, #108	; 0x6c
     1cc:	47003631 	smladxmi	r0, r1, r6, r3
     1d0:	506c616f 	rsbpl	r6, ip, pc, ror #2
     1d4:	3731736f 	ldrcc	r7, [r1, -pc, ror #6]!
     1d8:	616f4700 	cmnvs	pc, r0, lsl #14
     1dc:	736f506c 	cmnvc	pc, #108	; 0x6c
     1e0:	54003831 	strpl	r3, [r0], #-2097
     1e4:	505f4d49 	subspl	r4, pc, r9, asr #26
     1e8:	65736c75 	ldrbvs	r6, [r3, #-3189]!
     1ec:	41535500 	cmpmi	r3, r0, lsl #10
     1f0:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     1f4:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     1f8:	00657461 	rsbeq	r7, r5, r1, ror #8
     1fc:	5f4d4954 	svcpl	0x004d4954
     200:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     204:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     208:	6f697369 	svcvs	0x00697369
     20c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     210:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffff2cb <SCS_BASE+0x1fff12cb>
     214:	74757074 	ldrbtvc	r7, [r5], #-116
     218:	74617453 	strbtvc	r7, [r1], #-1107
     21c:	44420065 	strbmi	r0, [r2], #-101
     220:	62005254 	andvs	r5, r0, #1073741829	; 0x40000005
     224:	61746144 	cmnvs	r4, r4, asr #2
     228:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     22c:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     230:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     234:	65446570 	strbvs	r6, [r4, #-1392]
     238:	53620066 	cmnpl	r2, #102	; 0x66
     23c:	44746e65 	ldrbtmi	r6, [r4], #-3685
     240:	00617461 	rsbeq	r7, r1, r1, ror #8
     244:	31524343 	cmpcc	r2, r3, asr #6
     248:	52434300 	subpl	r4, r3, #0	; 0x0
     24c:	43430032 	movtmi	r0, #12338	; 0x3032
     250:	43003352 	movwmi	r3, #850	; 0x352
     254:	00345243 	eorseq	r5, r4, r3, asr #4
     258:	524d4343 	subpl	r4, sp, #201326593	; 0xc000001
     25c:	43430031 	movtmi	r0, #12337	; 0x3031
     260:	0032524d 	eorseq	r5, r2, sp, asr #4
     264:	4f495047 	svcmi	0x00495047
     268:	6570535f 	ldrbvs	r5, [r0, #-863]!
     26c:	315f6465 	cmpcc	pc, r5, ror #8
     270:	7a484d30 	bvc	1213738 <__Stack_Size+0x1213338>
     274:	44785400 	ldrbtmi	r5, [r8], #-1024
     278:	65747942 	ldrbvs	r7, [r4, #-2370]!
     27c:	0043505f 	subeq	r5, r3, pc, asr r0
     280:	74706163 	ldrbtvc	r6, [r0], #-355
     284:	00657275 	rsbeq	r7, r5, r5, ror r2
     288:	6e655377 	mcrvs	3, 3, r5, cr5, cr7, {3}
     28c:	74614474 	strbtvc	r4, [r1], #-1140
     290:	50410061 	subpl	r0, r1, r1, rrx
     294:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     298:	616d2f63 	cmnvs	sp, r3, ror #30
     29c:	632e6e69 	teqvs	lr, #1680	; 0x690
     2a0:	6c6f5600 	stclvs	6, cr5, [pc]
     2a4:	65676174 	strbvs	r6, [r7, #-372]!
     2a8:	44785200 	ldrbtmi	r5, [r8], #-512
     2ac:	746e4930 	strbtvc	r4, [lr], #-2352
     2b0:	75727265 	ldrbvc	r7, [r2, #-613]!
     2b4:	47007470 	smlsdxmi	r0, r0, r4, r7
     2b8:	5f4f4950 	svcpl	0x004f4950
     2bc:	65646f4d 	strbvs	r6, [r4, #-3917]!
     2c0:	4450495f 	ldrbmi	r4, [r0], #-2399
     2c4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2c8:	6f4d5f4f 	svcvs	0x004d5f4f
     2cc:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^
     2d0:	47005550 	smlsdmi	r0, r0, r5, r5
     2d4:	506c616f 	rsbpl	r6, ip, pc, ror #2
     2d8:	0031736f 	eorseq	r7, r1, pc, ror #6
     2dc:	6c616f47 	stclvs	15, cr6, [r1], #-284
     2e0:	37736f50 	undefined
     2e4:	44785400 	ldrbtmi	r5, [r8], #-1024
     2e8:	65747942 	ldrbvs	r7, [r4, #-2370]!
     2ec:	4c58445f 	cfldrdmi	mvd4, [r8], {95}
     2f0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     2f4:	6f4d5f4f 	svcvs	0x004d5f4f
     2f8:	4f5f6564 	svcmi	0x005f6564
     2fc:	4f5f7475 	svcmi	0x005f7475
     300:	78540044 	ldmdavc	r4, {r2, r6}^
     304:	726f5744 	rsbvc	r5, pc, #17825792	; 0x1100000
     308:	00363164 	eorseq	r3, r6, r4, ror #2
     30c:	6d317767 	ldcvs	7, cr7, [r1, #-412]!
     310:	756f4373 	strbvc	r4, [pc, #-883]!	; ffffffa5 <SCS_BASE+0x1fff1fa5>
     314:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     318:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     31c:	52495f43 	subpl	r5, r9, #268	; 0x10c
     320:	61684351 	cmnvs	r8, r1, asr r3
     324:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     328:	00646d43 	rsbeq	r6, r4, r3, asr #26
     32c:	52454944 	subpl	r4, r5, #1114112	; 0x110000
     330:	54776700 	ldrbtpl	r6, [r7], #-1792
     334:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
     338:	6c654467 	cfstrdvs	mvd4, [r5], #-412
     33c:	54007961 	strpl	r7, [r0], #-2401
     340:	4f5f4d49 	svcmi	0x005f4d49
     344:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
     348:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
     34c:	75746375 	ldrbvc	r6, [r4, #-885]!
     350:	54006572 	strpl	r6, [r0], #-1394
     354:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
     358:	74657065 	strbtvc	r7, [r5], #-101
     35c:	6f697469 	svcvs	0x00697469
     360:	756f436e 	strbvc	r4, [pc, #-878]!	; fffffffa <SCS_BASE+0x1fff1ffa>
     364:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     368:	5c3a4300 	ldcpl	3, cr4, [sl]
     36c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     370:	69475c73 	stmdbvs	r7, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
     374:	72616d6c 	rsbvc	r6, r1, #6912	; 0x1b00
     378:	6f72445c 	svcvs	0x0072445c
     37c:	786f6270 	stmdavc	pc!, {r4, r5, r6, r9, sp, lr}^
     380:	30304c5c 	eorscc	r4, r0, ip, asr ip
     384:	202d2038 	eorcs	r2, sp, r8, lsr r0
     388:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     38c:	6544206f 	strbvs	r2, [r4, #-111]
     390:	5c61746c 	cfstrdpl	mvd7, [r1], #-432
     394:	62617254 	rsbvs	r7, r1, #1073741829	; 0x40000005
     398:	6f686c61 	svcvs	0x00686c61
     39c:	7064705c 	rsbvc	r7, r4, ip, asr r0
     3a0:	44505c64 	ldrbmi	r5, [r0], #-3172
     3a4:	4c204450 	cfstrsmi	mvf4, [r0], #-320
     3a8:	5c534249 	lfmpl	f4, 2, [r3], {73}
     3ac:	33354d43 	teqcc	r5, #4288	; 0x10c0
     3b0:	39305c30 	ldmdbcc	r0!, {r4, r5, sl, fp, ip, lr}
     3b4:	4c584420 	cfldrdmi	mvd4, [r8], {32}
     3b8:	41455220 	cmpmi	r5, r0, lsr #4
     3bc:	52575f44 	subspl	r5, r7, #272	; 0x110
     3c0:	00455449 	subeq	r5, r5, r9, asr #8
     3c4:	5f4d4954 	svcpl	0x004d4954
     3c8:	504e434f 	subpl	r4, lr, pc, asr #6
     3cc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
     3d0:	00797469 	rsbseq	r7, r9, r9, ror #8
     3d4:	6c65446d 	cfstrdvs	mvd4, [r5], #-436
     3d8:	55007961 	strpl	r7, [r0, #-2401]
     3dc:	54524153 	ldrbpl	r4, [r2], #-339
     3e0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     3e4:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
     3e8:	75746375 	ldrbvc	r6, [r4, #-885]!
     3ec:	43006572 	movwmi	r6, #1394	; 0x572
     3f0:	00524543 	subseq	r4, r2, r3, asr #10
     3f4:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     3f8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     3fc:	75614200 	strbvc	r4, [r1, #-512]!
     400:	74617264 	strbtvc	r7, [r1], #-612
     404:	43505f65 	cmpmi	r0, #404	; 0x194
     408:	43555300 	cmpmi	r5, #0	; 0x0
     40c:	53534543 	cmppl	r3, #281018368	; 0x10c00000
     410:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     414:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     418:	74537469 	ldrbvc	r7, [r3], #-1129
     41c:	74637572 	strbtvc	r7, [r3], #-1394
     420:	00657275 	rsbeq	r7, r5, r5, ror r2
     424:	41534944 	cmpmi	r3, r4, asr #18
     428:	00454c42 	subeq	r4, r5, r2, asr #24
     42c:	63656843 	cmnvs	r5, #4390912	; 0x430000
     430:	77654e6b 	strbvc	r4, [r5, -fp, ror #28]!
     434:	69727241 	ldmdbvs	r2!, {r0, r6, r9, ip, sp, lr}^
     438:	54006576 	strpl	r6, [r0], #-1398
     43c:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     440:	746e756f 	strbtvc	r7, [lr], #-1391
     444:	6f4d7265 	svcvs	0x004d7265
     448:	55006564 	strpl	r6, [r0, #-1380]
     44c:	54524153 	ldrbpl	r4, [r2], #-339
     450:	646f4d5f 	strbtvs	r4, [pc], #3423	; 458 <__Stack_Size+0x58>
     454:	53550065 	cmppl	r5, #101	; 0x65
     458:	31545241 	cmpcc	r4, r1, asr #4
     45c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     460:	75676966 	strbvc	r6, [r7, #-2406]!
     464:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     468:	53006e6f 	movwpl	r6, #3695	; 0xe6f
     46c:	0052434d 	subseq	r4, r2, sp, asr #6
     470:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     474:	61485f54 	cmpvs	r8, r4, asr pc
     478:	61776472 	cmnvs	r7, r2, ror r4
     47c:	6c466572 	cfstr64vs	mvdx6, [r6], {114}
     480:	6f43776f 	svcvs	0x0043776f
     484:	6f72746e 	svcvs	0x0072746e
     488:	6f50006c 	svcvs	0x0050006c
     48c:	61636973 	smcvs	13971
     490:	6954006f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6}^
     494:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
     498:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     49c:	74707572 	ldrbtvc	r7, [r0], #-1394
     4a0:	736d315f 	cmnvc	sp, #-1073741801	; 0xc0000017
     4a4:	73795300 	cmnvc	r9, #0	; 0x0
     4a8:	6b636954 	blvs	18daa00 <__Stack_Size+0x18da600>
     4ac:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4b0:	75676966 	strbvc	r6, [r7, #-2406]!
     4b4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4b8:	50006e6f 	andpl	r6, r0, pc, ror #28
     4bc:	0054524f 	subseq	r5, r4, pc, asr #4
     4c0:	52706267 	rsbspl	r6, r0, #1879048198	; 0x70000006
     4c4:	746e4978 	strbtvc	r4, [lr], #-2424
     4c8:	75727265 	ldrbvc	r7, [r2, #-613]!
     4cc:	75427470 	strbvc	r7, [r2, #-1136]
     4d0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     4d4:	43435200 	movtmi	r5, #12800	; 0x3200
     4d8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4dc:	75676966 	strbvc	r6, [r7, #-2406]!
     4e0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4e4:	54006e6f 	strpl	r6, [r0], #-3695
     4e8:	4f5f4d49 	svcmi	0x005f4d49
     4ec:	64494e43 	strbvs	r4, [r9], #-3651
     4f0:	7453656c 	ldrbvc	r6, [r3], #-1388
     4f4:	00657461 	rsbeq	r7, r5, r1, ror #8
     4f8:	4f495047 	svcmi	0x00495047
     4fc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     500:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
     504:	75746375 	ldrbvc	r6, [r4, #-885]!
     508:	77006572 	smlsdxvc	r0, r2, r5, r6
     50c:	73657250 	cmnvc	r5, #5	; 0x5
     510:	50746e65 	rsbspl	r6, r4, r5, ror #28
     514:	6200736f 	andvs	r7, r0, #-1140850687	; 0xbc000001
     518:	706d6554 	rsbvc	r6, sp, r4, asr r5
     51c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     520:	52495f43 	subpl	r5, r9, #268	; 0x10c
     524:	61684351 	cmnvs	r8, r1, asr r3
     528:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     52c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     530:	6f4d5f4f 	svcvs	0x004d5f4f
     534:	415f6564 	cmpmi	pc, r4, ror #10
     538:	444f5f46 	strbmi	r5, [pc], #3910	; 540 <__Stack_Size+0x140>
     53c:	6d695400 	cfstrdvs	mvd5, [r9]
     540:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
     544:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     548:	61727567 	cmnvs	r2, r7, ror #10
     54c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     550:	554e4700 	strbpl	r4, [lr, #-1792]
     554:	34204320 	strtcc	r4, [r0], #-800
     558:	302e332e 	eorcc	r3, lr, lr, lsr #6
     55c:	44785400 	ldrbtmi	r5, [r8], #-1024
     560:	65747942 	ldrbvs	r7, [r4, #-2370]!
     564:	47003631 	smladxmi	r0, r1, r6, r3
     568:	534f4950 	movtpl	r4, #63824	; 0xf950
     56c:	64656570 	strbtvs	r6, [r5], #-1392
     570:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     574:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     578:	4d495400 	cfstrdmi	mvd5, [r9]
     57c:	4d434f5f 	stclmi	15, cr4, [r3, #-380]
     580:	0065646f 	rsbeq	r6, r5, pc, ror #8
     584:	4f495047 	svcmi	0x00495047
     588:	646f4d5f 	strbtvs	r4, [pc], #3423	; 590 <__Stack_Size+0x190>
     58c:	49415f65 	stmdbmi	r1, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     590:	4552004e 	ldrbmi	r0, [r2, #-78]
     594:	56524553 	undefined
     598:	00304445 	eorseq	r4, r0, r5, asr #8
     59c:	45534552 	ldrbmi	r4, [r3, #-1362]
     5a0:	44455652 	strbmi	r5, [r5], #-1618
     5a4:	45520031 	ldrbmi	r0, [r2, #-49]
     5a8:	56524553 	undefined
     5ac:	00324445 	eorseq	r4, r2, r5, asr #8
     5b0:	45534552 	ldrbmi	r4, [r3, #-1362]
     5b4:	44455652 	strbmi	r5, [r5], #-1618
     5b8:	45520033 	ldrbmi	r0, [r2, #-51]
     5bc:	56524553 	undefined
     5c0:	00344445 	eorseq	r4, r4, r5, asr #8
     5c4:	45534552 	ldrbmi	r4, [r3, #-1362]
     5c8:	44455652 	strbmi	r5, [r5], #-1618
     5cc:	45520035 	ldrbmi	r0, [r2, #-53]
     5d0:	56524553 	undefined
     5d4:	00364445 	eorseq	r4, r6, r5, asr #8
     5d8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     5dc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     5e0:	45520074 	ldrbmi	r0, [r2, #-116]
     5e4:	56524553 	undefined
     5e8:	00384445 	eorseq	r4, r8, r5, asr #8
     5ec:	45534552 	ldrbmi	r4, [r3, #-1362]
     5f0:	44455652 	strbmi	r5, [r5], #-1618
     5f4:	50470039 	subpl	r0, r7, r9, lsr r0
     5f8:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
     5fc:	5f65646f 	svcpl	0x0065646f
     600:	505f4641 	subspl	r4, pc, r1, asr #12
     604:	4d440050 	stclmi	0, cr0, [r4, #-320]
     608:	47005241 	strmi	r5, [r0, -r1, asr #4]
     60c:	5f4f4950 	svcpl	0x004f4950
     610:	65657053 	strbvs	r7, [r5, #-83]!
     614:	68430064 	stmdavs	r3, {r2, r5, r6}^
     618:	546b6365 	strbtpl	r6, [fp], #-869
     61c:	4f656d69 	svcmi	0x00656d69
     620:	52007475 	andpl	r7, r0, #1962934272	; 0x75000000
     624:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
     628:	445f6574 	ldrbmi	r6, [pc], #1396	; 630 <__Stack_Size+0x230>
     62c:	44004c58 	strmi	r4, [r0], #-3160
     630:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     634:	5355656c 	cmppl	r5, #452984832	; 0x1b000000
     638:	31545241 	cmpcc	r4, r1, asr #4
     63c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     640:	646f4d4f 	strbtvs	r4, [pc], #3407	; 648 <__Stack_Size+0x248>
     644:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     648:	65446570 	strbvs	r6, [r4, #-1392]
     64c:	74530066 	ldrbvc	r0, [r3], #-102
     650:	44747261 	ldrbtmi	r7, [r4], #-609
     654:	6f637369 	svcvs	0x00637369
     658:	00746e75 	rsbseq	r6, r4, r5, ror lr
     65c:	5f4d4954 	svcpl	0x004d4954
     660:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     664:	534e7475 	movtpl	r7, #58485	; 0xe475
     668:	65746174 	ldrbvs	r6, [r4, #-372]!
     66c:	414e4500 	cmpmi	lr, r0, lsl #10
     670:	00454c42 	subeq	r4, r5, r2, asr #24
     674:	5f4d4954 	svcpl	0x004d4954
     678:	656d6954 	strbvs	r6, [sp, #-2388]!
     67c:	65736142 	ldrbvs	r6, [r3, #-322]!
     680:	75727453 	ldrbvc	r7, [r2, #-1107]!
     684:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     688:	50470065 	subpl	r0, r7, r5, rrx
     68c:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
     690:	5474696e 	ldrbtpl	r6, [r4], #-2414
     694:	44657079 	strbtmi	r7, [r5], #-121
     698:	75006665 	strvc	r6, [r0, #-1637]
     69c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     6a0:	2064656e 	rsbcs	r6, r4, lr, ror #10
     6a4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     6a8:	6d546200 	lfmvs	f6, 2, [r4]
     6ac:	50470070 	subpl	r0, r7, r0, ror r0
     6b0:	535f4f49 	cmppl	pc, #292	; 0x124
     6b4:	64656570 	strbtvs	r6, [r5], #-1392
     6b8:	4d30355f 	cfldr32mi	mvfx3, [r0, #-380]!
     6bc:	55007a48 	strpl	r7, [r0, #-2632]
     6c0:	54524153 	ldrbpl	r4, [r2], #-339
     6c4:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     6c8:	75676966 	strbvc	r6, [r7, #-2406]!
     6cc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     6d0:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
     6d4:	5f434956 	svcpl	0x00434956
     6d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6dc:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     6e0:	6f697461 	svcvs	0x00697461
     6e4:	4552006e 	ldrbmi	r0, [r2, #-110]
     6e8:	56524553 	undefined
     6ec:	30314445 	eorscc	r4, r1, r5, asr #8
     6f0:	53455200 	movtpl	r5, #20992	; 0x5200
     6f4:	45565245 	ldrbmi	r5, [r6, #-581]
     6f8:	00313144 	eorseq	r3, r1, r4, asr #2
     6fc:	45534552 	ldrbmi	r4, [r3, #-1362]
     700:	44455652 	strbmi	r5, [r5], #-1618
     704:	52003231 	andpl	r3, r0, #268435459	; 0x10000003
     708:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     70c:	31444556 	cmpcc	r4, r6, asr r5
     710:	45520033 	ldrbmi	r0, [r2, #-51]
     714:	56524553 	undefined
     718:	34314445 	ldrtcc	r4, [r1], #-1093
     71c:	53455200 	movtpl	r5, #20992	; 0x5200
     720:	45565245 	ldrbmi	r5, [r6, #-581]
     724:	00353144 	eorseq	r3, r5, r4, asr #2
     728:	45534552 	ldrbmi	r4, [r3, #-1362]
     72c:	44455652 	strbmi	r5, [r5], #-1618
     730:	52003631 	andpl	r3, r0, #51380224	; 0x3100000
     734:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     738:	31444556 	cmpcc	r4, r6, asr r5
     73c:	45520037 	ldrbmi	r0, [r2, #-55]
     740:	56524553 	undefined
     744:	38314445 	ldmdacc	r1!, {r0, r2, r6, sl, lr}
     748:	53455200 	movtpl	r5, #20992	; 0x5200
     74c:	45565245 	ldrbmi	r5, [r6, #-581]
     750:	00393144 	eorseq	r3, r9, r4, asr #2
     754:	4f495047 	svcmi	0x00495047
     758:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     75c:	75676966 	strbvc	r6, [r7, #-2406]!
     760:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     764:	55006e6f 	strpl	r6, [r0, #-3695]
     768:	54524153 	ldrbpl	r4, [r2], #-339
     76c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     770:	70795474 	rsbsvc	r5, r9, r4, ror r4
     774:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     778:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     77c:	52495f43 	subpl	r5, r9, #268	; 0x10c
     780:	61684351 	cmnvs	r8, r1, asr r3
     784:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     788:	50627553 	rsbpl	r7, r2, r3, asr r5
     78c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     790:	00797469 	rsbseq	r7, r9, r9, ror #8
     794:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     798:	61505f54 	cmpvs	r0, r4, asr pc
     79c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7a0:	495f5f00 	ldmdbmi	pc, {r8, r9, sl, fp, ip, lr}^
     7a4:	445f5253 	ldrbmi	r5, [pc], #595	; 7ac <__Stack_Size+0x3ac>
     7a8:	59414c45 	stmdbpl	r1, {r0, r2, r6, sl, fp, lr}^
     7ac:	4d495400 	cfstrdmi	mvd5, [r9]
     7b0:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!
     7b4:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
     7b8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     7bc:	70795474 	rsbsvc	r5, r9, r4, ror r4
     7c0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     7c4:	52626700 	rsbpl	r6, r2, #0	; 0x0
     7c8:	66754278 	undefined
     7cc:	52726566 	rsbspl	r6, r2, #427819008	; 0x19800000
     7d0:	50646165 	rsbpl	r6, r4, r5, ror #2
     7d4:	746e696f 	strbtvc	r6, [lr], #-2415
     7d8:	73007265 	movwvc	r7, #613	; 0x265
     7dc:	74726f68 	ldrbtvc	r6, [r2], #-3944
     7e0:	736e7520 	cmnvc	lr, #134217728	; 0x8000000
     7e4:	656e6769 	strbvs	r6, [lr, #-1897]!
     7e8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     7ec:	616d0074 	smcvs	53252
     7f0:	4e006e69 	cdpmi	14, 0, cr6, cr0, cr9, {3}
     7f4:	5f434956 	svcpl	0x00434956
     7f8:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     7fc:	6e6e6168 	powvsez	f6, f6, #0.0
     800:	72506c65 	subsvc	r6, r0, #25856	; 0x6500
     804:	706d6565 	rsbvc	r6, sp, r5, ror #10
     808:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     80c:	6f697250 	svcvs	0x00697250
     810:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     814:	756f6400 	strbvc	r6, [pc, #-1024]!	; 41c <__Stack_Size+0x1c>
     818:	00656c62 	rsbeq	r6, r5, r2, ror #24
     81c:	4f495047 	svcmi	0x00495047
     820:	646f4d5f 	strbtvs	r4, [pc], #3423	; 828 <__Stack_Size+0x428>
     824:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
     828:	4f4c465f 	svcmi	0x004c465f
     82c:	4e495441 	cdpmi	4, 4, cr5, cr9, cr1, {2}
     830:	45520047 	ldrbmi	r0, [r2, #-71]
     834:	56524553 	undefined
     838:	00374445 	eorseq	r4, r7, r5, asr #8
     83c:	6d69546e 	cfstrdvs	mvd5, [r9, #-440]!
     840:	62670065 	rsbvs	r0, r7, #101	; 0x65
     844:	75427852 	strbvc	r7, [r2, #-2130]
     848:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     84c:	74697257 	strbtvc	r7, [r9], #-599
     850:	696f5065 	stmdbvs	pc!, {r0, r2, r5, r6, ip, lr}^
     854:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     858:	45534800 	ldrbmi	r4, [r3, #-2048]
     85c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     860:	53705574 	cmnpl	r0, #486539264	; 0x1d000000
     864:	75746174 	ldrbvc	r6, [r4, #-372]!
     868:	434c0073 	movtmi	r0, #49267	; 0xc073
     86c:	4200524b 	andmi	r5, r0, #-1342177276	; 0xb0000004
     870:	61467375 	cmpvs	r6, r5, ror r3
     874:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     878:	70656378 	rsbvc	r6, r5, r8, ror r3
     87c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     880:	54584500 	ldrbpl	r4, [r8], #-1280
     884:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^
     888:	61485152 	cmpvs	r8, r2, asr r1
     88c:	656c646e 	strbvs	r6, [ip, #-1134]!
     890:	4d440072 	stclmi	0, cr0, [r4, #-456]
     894:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     898:	6e6e6168 	powvsez	f6, f6, #0.0
     89c:	5f326c65 	svcpl	0x00326c65
     8a0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     8a4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     8a8:	54007265 	strpl	r7, [r0], #-613
     8ac:	5f314d49 	svcpl	0x00314d49
     8b0:	5f4b5242 	svcpl	0x004b5242
     8b4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     8b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     8bc:	45007265 	strmi	r7, [r0, #-613]
     8c0:	30495458 	subcc	r5, r9, r8, asr r4
     8c4:	5152495f 	cmppl	r2, pc, asr r9
     8c8:	646e6148 	strbtvs	r6, [lr], #-328
     8cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8d0:	5f445650 	svcpl	0x00445650
     8d4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     8d8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     8dc:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     8e0:	46647261 	strbtmi	r7, [r4], -r1, ror #4
     8e4:	746c7561 	strbtvc	r7, [ip], #-1377
     8e8:	65637845 	strbvs	r7, [r3, #-2117]!
     8ec:	6f697470 	svcvs	0x00697470
     8f0:	4441006e 	strbmi	r0, [r1], #-110
     8f4:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
     8f8:	5152495f 	cmppl	r2, pc, asr r9
     8fc:	646e6148 	strbtvs	r6, [lr], #-328
     900:	0072656c 	rsbseq	r6, r2, ip, ror #10
     904:	504d4154 	subpl	r4, sp, r4, asr r1
     908:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     90c:	61485152 	cmpvs	r8, r2, asr r1
     910:	656c646e 	strbvs	r6, [ip, #-1134]!
     914:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     918:	545f384d 	ldrbpl	r3, [pc], #2125	; 920 <__Stack_Size+0x520>
     91c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     920:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     924:	61485152 	cmpvs	r8, r2, asr r1
     928:	656c646e 	strbvs	r6, [ip, #-1134]!
     92c:	41430072 	cmpmi	r3, r2, ror r0
     930:	58525f4e 	ldmdapl	r2, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     934:	52495f31 	subpl	r5, r9, #196	; 0xc4
     938:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     93c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     940:	73795300 	cmnvc	r9, #0	; 0x0
     944:	6b636954 	blvs	18dae9c <__Stack_Size+0x18daa9c>
     948:	646e6148 	strbtvs	r6, [lr], #-328
     94c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     950:	75626544 	strbvc	r6, [r2, #-1348]!
     954:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     958:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     95c:	414d4400 	cmpmi	sp, r0, lsl #8
     960:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     964:	656e6e61 	strbvs	r6, [lr, #-3681]!
     968:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^
     96c:	61485152 	cmpvs	r8, r2, asr r1
     970:	656c646e 	strbvs	r6, [ip, #-1134]!
     974:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     978:	555f314d 	ldrbpl	r3, [pc, #-333]	; 833 <__Stack_Size+0x433>
     97c:	52495f50 	subpl	r5, r9, #320	; 0x140
     980:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     984:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     988:	4d495400 	cfstrdmi	mvd5, [r9]
     98c:	50555f38 	subspl	r5, r5, r8, lsr pc
     990:	5152495f 	cmppl	r2, pc, asr r9
     994:	646e6148 	strbtvs	r6, [lr], #-328
     998:	0072656c 	rsbseq	r6, r2, ip, ror #10
     99c:	314d4954 	cmpcc	sp, r4, asr r9
     9a0:	5f43435f 	svcpl	0x0043435f
     9a4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     9a8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9ac:	54007265 	strpl	r7, [r0], #-613
     9b0:	5f384d49 	svcpl	0x00384d49
     9b4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
     9b8:	61485152 	cmpvs	r8, r2, asr r1
     9bc:	656c646e 	strbvs	r6, [ip, #-1134]!
     9c0:	4d440072 	stclmi	0, cr0, [r4, #-456]
     9c4:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     9c8:	6e6e6168 	powvsez	f6, f6, #0.0
     9cc:	5f336c65 	svcpl	0x00336c65
     9d0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     9d4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     9d8:	45007265 	strmi	r7, [r0, #-613]
     9dc:	31495458 	cmpcc	r9, r8, asr r4
     9e0:	30315f35 	eorscc	r5, r1, r5, lsr pc
     9e4:	5152495f 	cmppl	r2, pc, asr r9
     9e8:	646e6148 	strbtvs	r6, [lr], #-328
     9ec:	0072656c 	rsbseq	r6, r2, ip, ror #10
     9f0:	31414d44 	cmpcc	r1, r4, asr #26
     9f4:	6168435f 	cmnvs	r8, pc, asr r3
     9f8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     9fc:	52495f31 	subpl	r5, r9, #196	; 0xc4
     a00:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a04:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a08:	43565300 	cmpmi	r6, #0	; 0x0
     a0c:	646e6148 	strbtvs	r6, [lr], #-328
     a10:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a14:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     a18:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^
     a1c:	61485152 	cmpvs	r8, r2, asr r1
     a20:	656c646e 	strbvs	r6, [ip, #-1134]!
     a24:	54520072 	ldrbpl	r0, [r2], #-114
     a28:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a2c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a30:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a34:	4d495400 	cfstrdmi	mvd5, [r9]
     a38:	52495f35 	subpl	r5, r9, #212	; 0xd4
     a3c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a40:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     a44:	414d4400 	cmpmi	sp, r0, lsl #8
     a48:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     a4c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     a50:	355f346c 	ldrbcc	r3, [pc, #-1132]	; 5ec <__Stack_Size+0x1ec>
     a54:	5152495f 	cmppl	r2, pc, asr r9
     a58:	646e6148 	strbtvs	r6, [lr], #-328
     a5c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a60:	324d4954 	subcc	r4, sp, #1376256	; 0x150000
     a64:	5152495f 	cmppl	r2, pc, asr r9
     a68:	646e6148 	strbtvs	r6, [lr], #-328
     a6c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a70:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!
     a74:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     a78:	63784565 	cmnvs	r8, #423624704	; 0x19400000
     a7c:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     a80:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
     a84:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
     a88:	74706563 	ldrbtvc	r6, [r0], #-1379
     a8c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     a90:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     a94:	52495f33 	subpl	r5, r9, #204	; 0xcc
     a98:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     a9c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     aa0:	42535500 	subsmi	r5, r3, #0	; 0x0
     aa4:	656b6157 	strbvs	r6, [fp, #-343]!
     aa8:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     aac:	61485152 	cmpvs	r8, r2, asr r1
     ab0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ab4:	44530072 	ldrbmi	r0, [r3], #-114
     ab8:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
     abc:	61485152 	cmpvs	r8, r2, asr r1
     ac0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ac4:	4c460072 	mcrrmi	0, 7, r0, r6, cr2
     ac8:	5f485341 	svcpl	0x00485341
     acc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ad0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     ad4:	55007265 	strpl	r7, [r0, #-613]
     ad8:	65676173 	strbvs	r6, [r7, #-371]!
     adc:	6c756146 	ldfvse	f6, [r5], #-280
     ae0:	63784574 	cmnvs	r8, #486539264	; 0x1d000000
     ae4:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     ae8:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     aec:	5f314332 	svcpl	0x00314332
     af0:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^
     af4:	61485152 	cmpvs	r8, r2, asr r1
     af8:	656c646e 	strbvs	r6, [ip, #-1134]!
     afc:	54520072 	ldrbpl	r0, [r2], #-114
     b00:	616c4143 	cmnvs	ip, r3, asr #2
     b04:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     b08:	61485152 	cmpvs	r8, r2, asr r1
     b0c:	656c646e 	strbvs	r6, [ip, #-1134]!
     b10:	4d440072 	stclmi	0, cr0, [r4, #-456]
     b14:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     b18:	6e6e6168 	powvsez	f6, f6, #0.0
     b1c:	5f366c65 	svcpl	0x00366c65
     b20:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b24:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b28:	53007265 	movwpl	r7, #613	; 0x265
     b2c:	5f334950 	svcpl	0x00334950
     b30:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b34:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b38:	54007265 	strpl	r7, [r0], #-613
     b3c:	5f334d49 	svcpl	0x00334d49
     b40:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b44:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b48:	43007265 	movwmi	r7, #613	; 0x265
     b4c:	535f4e41 	cmppl	pc, #1040	; 0x410
     b50:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^
     b54:	61485152 	cmpvs	r8, r2, asr r1
     b58:	656c646e 	strbvs	r6, [ip, #-1134]!
     b5c:	4d440072 	stclmi	0, cr0, [r4, #-456]
     b60:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     b64:	6e6e6168 	powvsez	f6, f6, #0.0
     b68:	5f346c65 	svcpl	0x00346c65
     b6c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b70:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b74:	46007265 	strmi	r7, [r0], -r5, ror #4
     b78:	5f434d53 	svcpl	0x00434d53
     b7c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b80:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b84:	45007265 	strmi	r7, [r0, #-613]
     b88:	31495458 	cmpcc	r9, r8, asr r4
     b8c:	5152495f 	cmppl	r2, pc, asr r9
     b90:	646e6148 	strbtvs	r6, [lr], #-328
     b94:	0072656c 	rsbseq	r6, r2, ip, ror #10
     b98:	33434441 	movtcc	r4, #13377	; 0x3441
     b9c:	5152495f 	cmppl	r2, pc, asr r9
     ba0:	646e6148 	strbtvs	r6, [lr], #-328
     ba4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ba8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     bac:	5f56455f 	svcpl	0x0056455f
     bb0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bb4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     bb8:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     bbc:	5f324332 	svcpl	0x00324332
     bc0:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     bc4:	61485152 	cmpvs	r8, r2, asr r1
     bc8:	656c646e 	strbvs	r6, [ip, #-1134]!
     bcc:	53550072 	cmppl	r5, #114	; 0x72
     bd0:	31545241 	cmpcc	r4, r1, asr #4
     bd4:	5152495f 	cmppl	r2, pc, asr r9
     bd8:	646e6148 	strbtvs	r6, [lr], #-328
     bdc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     be0:	5f425355 	svcpl	0x00425355
     be4:	435f504c 	cmpmi	pc, #76	; 0x4c
     be8:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     bec:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^
     bf0:	61485152 	cmpvs	r8, r2, asr r1
     bf4:	656c646e 	strbvs	r6, [ip, #-1134]!
     bf8:	53550072 	cmppl	r5, #114	; 0x72
     bfc:	50485f42 	subpl	r5, r8, r2, asr #30
     c00:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
     c04:	5f58545f 	svcpl	0x0058545f
     c08:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     c0c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     c10:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     c14:	5f314332 	svcpl	0x00314332
     c18:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     c1c:	61485152 	cmpvs	r8, r2, asr r1
     c20:	656c646e 	strbvs	r6, [ip, #-1134]!
     c24:	50530072 	subspl	r0, r3, r2, ror r0
     c28:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     c2c:	61485152 	cmpvs	r8, r2, asr r1
     c30:	656c646e 	strbvs	r6, [ip, #-1134]!
     c34:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     c38:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     c3c:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     c40:	61485152 	cmpvs	r8, r2, asr r1
     c44:	656c646e 	strbvs	r6, [ip, #-1134]!
     c48:	4d440072 	stclmi	0, cr0, [r4, #-456]
     c4c:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     c50:	6e6e6168 	powvsez	f6, f6, #0.0
     c54:	5f326c65 	svcpl	0x00326c65
     c58:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     c5c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     c60:	55007265 	strpl	r7, [r0, #-613]
     c64:	34545241 	ldrbcc	r5, [r4], #-577
     c68:	5152495f 	cmppl	r2, pc, asr r9
     c6c:	646e6148 	strbtvs	r6, [lr], #-328
     c70:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c74:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     c78:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^
     c7c:	61485152 	cmpvs	r8, r2, asr r1
     c80:	656c646e 	strbvs	r6, [ip, #-1134]!
     c84:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     c88:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^
     c8c:	61485152 	cmpvs	r8, r2, asr r1
     c90:	656c646e 	strbvs	r6, [ip, #-1134]!
     c94:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     c98:	545f314d 	ldrbpl	r3, [pc], #333	; ca0 <__Stack_Size+0x8a0>
     c9c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     ca0:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     ca4:	61485152 	cmpvs	r8, r2, asr r1
     ca8:	656c646e 	strbvs	r6, [ip, #-1134]!
     cac:	43520072 	cmpmi	r2, #114	; 0x72
     cb0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     cb4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     cb8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     cbc:	414d4400 	cmpmi	sp, r0, lsl #8
     cc0:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     cc4:	656e6e61 	strbvs	r6, [lr, #-3681]!
     cc8:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     ccc:	61485152 	cmpvs	r8, r2, asr r1
     cd0:	656c646e 	strbvs	r6, [ip, #-1134]!
     cd4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     cd8:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^
     cdc:	61485152 	cmpvs	r8, r2, asr r1
     ce0:	656c646e 	strbvs	r6, [ip, #-1134]!
     ce4:	57570072 	undefined
     ce8:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^
     cec:	61485152 	cmpvs	r8, r2, asr r1
     cf0:	656c646e 	strbvs	r6, [ip, #-1134]!
     cf4:	50530072 	subspl	r0, r3, r2, ror r0
     cf8:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^
     cfc:	61485152 	cmpvs	r8, r2, asr r1
     d00:	656c646e 	strbvs	r6, [ip, #-1134]!
     d04:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     d08:	5f344954 	svcpl	0x00344954
     d0c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d10:	6c646e61 	stclvs	14, cr6, [r4], #-388
     d14:	45007265 	strmi	r7, [r0, #-613]
     d18:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     d1c:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     d20:	61485152 	cmpvs	r8, r2, asr r1
     d24:	656c646e 	strbvs	r6, [ip, #-1134]!
     d28:	65500072 	ldrbvs	r0, [r0, #-114]
     d2c:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     d30:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
     d34:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^
     d38:	61485152 	cmpvs	r8, r2, asr r1
     d3c:	656c646e 	strbvs	r6, [ip, #-1134]!
     d40:	50410072 	subpl	r0, r1, r2, ror r0
     d44:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     d48:	74732f63 	ldrbtvc	r2, [r3], #-3939
     d4c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d50:	5f783031 	svcpl	0x00783031
     d54:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
     d58:	414d4400 	cmpmi	sp, r0, lsl #8
     d5c:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     d60:	656e6e61 	strbvs	r6, [lr, #-3681]!
     d64:	495f376c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, sl, ip, sp}^
     d68:	61485152 	cmpvs	r8, r2, asr r1
     d6c:	656c646e 	strbvs	r6, [ip, #-1134]!
     d70:	41550072 	cmpmi	r5, r2, ror r0
     d74:	5f355452 	svcpl	0x00355452
     d78:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d7c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     d80:	44007265 	strmi	r7, [r0], #-613
     d84:	5f31414d 	svcpl	0x0031414d
     d88:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     d8c:	356c656e 	strbcc	r6, [ip, #-1390]!
     d90:	5152495f 	cmppl	r2, pc, asr r9
     d94:	646e6148 	strbtvs	r6, [lr], #-328
     d98:	0072656c 	rsbseq	r6, r2, ip, ror #10
     d9c:	5f6c7864 	svcpl	0x006c7864
     da0:	5f6c6168 	svcpl	0x006c6168
     da4:	64007874 	strvs	r7, [r0], #-2164
     da8:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     dac:	6f5f6c61 	svcvs	0x005f6c61
     db0:	006e6570 	rsbeq	r6, lr, r0, ror r5
     db4:	5f6c7864 	svcpl	0x006c7864
     db8:	5f6c6168 	svcpl	0x006c6168
     dbc:	61656c63 	cmnvs	r5, r3, ror #24
     dc0:	754e0072 	strbvc	r0, [lr, #-114]
     dc4:	7663526d 	strbtvc	r5, [r3], -sp, ror #4
     dc8:	65747942 	ldrbvs	r7, [r4, #-2370]!
     dcc:	6c786400 	cfldrdvs	mvd6, [r8]
     dd0:	6c61685f 	stclvs	8, cr6, [r1], #-380
     dd4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     dd8:	74756f65 	ldrbtvc	r6, [r5], #-3941
     ddc:	6c786400 	cfldrdvs	mvd6, [r8]
     de0:	6c61685f 	stclvs	8, cr6, [r1], #-380
     de4:	7465735f 	strbtvc	r7, [r5], #-863
     de8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     dec:	74756f65 	ldrbtvc	r6, [r5], #-3941
     df0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     df4:	65646e49 	strbvs	r6, [r4, #-3657]!
     df8:	50410078 	subpl	r0, r1, r8, ror r0
     dfc:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     e00:	78642f63 	stmdavc	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     e04:	61685f6c 	cmnvs	r8, ip, ror #30
     e08:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     e0c:	63615070 	cmnvs	r1, #112	; 0x70
     e10:	0074656b 	rsbseq	r6, r4, fp, ror #10
     e14:	506d756e 	rsbpl	r7, sp, lr, ror #10
     e18:	656b6361 	strbvs	r6, [fp, #-865]!
     e1c:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
     e20:	61685f6c 	cmnvs	r8, ip, ror #30
     e24:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     e28:	6c786400 	cfldrdvs	mvd6, [r8]
     e2c:	6c61685f 	stclvs	8, cr6, [r1], #-380
     e30:	6f6c635f 	svcvs	0x006c635f
     e34:	67006573 	smlsdxvs	r0, r3, r5, r6
     e38:	50785262 	rsbspl	r5, r8, r2, ror #4
     e3c:	656b6361 	strbvs	r6, [fp, #-865]!
     e40:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
     e44:	00687467 	rsbeq	r7, r8, r7, ror #8
     e48:	5f6c7864 	svcpl	0x006c7864
     e4c:	705f7874 	subsvc	r7, pc, r4, ror r8
     e50:	656b6361 	strbvs	r6, [fp, #-865]!
     e54:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
     e58:	69705f6c 	ldmdbvs	r0!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     e5c:	6400676e 	strvs	r6, [r0], #-1902
     e60:	695f6c78 	ldmdbvs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     e64:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     e68:	7a696c61 	bvc	1a5bff4 <__Stack_Size+0x1a5bbf4>
     e6c:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     e70:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     e74:	775f6461 	ldrbvc	r6, [pc, -r1, ror #8]
     e78:	0064726f 	rsbeq	r7, r4, pc, ror #4
     e7c:	6f436267 	svcvs	0x00436267
     e80:	74536d6d 	ldrbvc	r6, [r3], #-3437
     e84:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     e88:	6c786400 	cfldrdvs	mvd6, [r8]
     e8c:	7465675f 	strbtvc	r6, [r5], #-1887
     e90:	7078725f 	rsbsvc	r7, r8, pc, asr r2
     e94:	656b6361 	strbvs	r6, [fp, #-865]!
     e98:	656c5f74 	strbvs	r5, [ip, #-3956]!
     e9c:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     ea0:	6c786400 	cfldrdvs	mvd6, [r8]
     ea4:	7465675f 	strbtvc	r6, [r5], #-1887
     ea8:	6769685f 	undefined
     eac:	74796268 	ldrbtvc	r6, [r9], #-616
     eb0:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     eb4:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     eb8:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
     ebc:	00657479 	rsbeq	r7, r5, r9, ror r4
     ec0:	5f6c7864 	svcpl	0x006c7864
     ec4:	5f746573 	svcpl	0x00746573
     ec8:	61707874 	cmnvs	r0, r4, ror r8
     ecc:	74656b63 	strbtvc	r6, [r5], #-2915
     ed0:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
     ed4:	74656d61 	strbtvc	r6, [r5], #-3425
     ed8:	64007265 	strvs	r7, [r0], #-613
     edc:	675f6c78 	undefined
     ee0:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     ee4:	7962776f 	stmdbvc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     ee8:	64006574 	strvs	r6, [r0], #-1396
     eec:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     ef0:	61705f78 	cmnvs	r0, r8, ror pc
     ef4:	74656b63 	strbtvc	r6, [r5], #-2915
     ef8:	65686300 	strbvs	r6, [r8, #-768]!
     efc:	75736b63 	ldrbvc	r6, [r3, #-2915]!
     f00:	7864006d 	stmdavc	r4!, {r0, r2, r3, r5, r6}^
     f04:	65675f6c 	strbvs	r5, [r7, #-3948]!
     f08:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f0c:	6b636170 	blvs	18d94d4 <__Stack_Size+0x18d90d4>
     f10:	655f7465 	ldrbvs	r7, [pc, #-1125]	; ab3 <__Stack_Size+0x6b3>
     f14:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     f18:	6c786400 	cfldrdvs	mvd6, [r8]
     f1c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     f20:	775f6574 	undefined
     f24:	0064726f 	rsbeq	r7, r4, pc, ror #4
     f28:	2f505041 	svccs	0x00505041
     f2c:	2f637273 	svccs	0x00637273
     f30:	616e7964 	cmnvs	lr, r4, ror #18
     f34:	6578696d 	ldrbvs	r6, [r8, #-2413]!
     f38:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     f3c:	6c616552 	cfstr64vs	mvdx6, [r1], #-328
     f40:	754e7854 	strbvc	r7, [lr, #-2132]
     f44:	7479426d 	ldrbtvc	r4, [r9], #-621
     f48:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     f4c:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
     f50:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f54:	6b636170 	blvs	18d951c <__Stack_Size+0x18d911c>
     f58:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     f5c:	74676e65 	strbtvc	r6, [r7], #-3685
     f60:	78640068 	stmdavc	r4!, {r3, r5, r6}^
     f64:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
     f68:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f6c:	6b636170 	blvs	18d9534 <__Stack_Size+0x18d9134>
     f70:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
     f74:	78640064 	stmdavc	r4!, {r2, r5, r6}^
     f78:	72775f6c 	rsbsvc	r5, r7, #432	; 0x1b0
     f7c:	5f657469 	svcpl	0x00657469
     f80:	65747962 	ldrbvs	r7, [r4, #-2402]!
     f84:	53626700 	cmnpl	r2, #0	; 0x0
     f88:	75746174 	ldrbvc	r6, [r4, #-372]!
     f8c:	63615073 	cmnvs	r1, #115	; 0x73
     f90:	0074656b 	rsbseq	r6, r4, fp, ror #10
     f94:	5f6c7864 	svcpl	0x006c7864
     f98:	5f746567 	svcpl	0x00746567
     f9c:	75736572 	ldrbvc	r6, [r3, #-1394]!
     fa0:	6700746c 	strvs	r7, [r0, -ip, ror #8]
     fa4:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
     fa8:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
     fac:	78640067 	stmdavc	r4!, {r0, r1, r2, r5, r6}^
     fb0:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     fb4:	705f7872 	subsvc	r7, pc, r2, ror r8
     fb8:	656b6361 	strbvs	r6, [fp, #-865]!
     fbc:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
     fc0:	616d5f6c 	cmnvs	sp, ip, ror #30
     fc4:	6f77656b 	svcvs	0x0077656b
     fc8:	64006472 	strvs	r6, [r0], #-1138
     fcc:	675f6c78 	undefined
     fd0:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
     fd4:	63617078 	cmnvs	r1, #120	; 0x78
     fd8:	5f74656b 	svcpl	0x0074656b
     fdc:	61726170 	cmnvs	r2, r0, ror r1
     fe0:	6574656d 	ldrbvs	r6, [r4, #-1389]!
     fe4:	62670072 	rsbvs	r0, r7, #114	; 0x72
     fe8:	65477852 	strbvs	r7, [r7, #-2130]
     fec:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
     ff0:	00687467 	rsbeq	r7, r8, r7, ror #8
     ff4:	5f6c7864 	svcpl	0x006c7864
     ff8:	5f746573 	svcpl	0x00746573
     ffc:	61707874 	cmnvs	r0, r4, ror r8
    1000:	74656b63 	strbtvc	r6, [r5], #-2915
    1004:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    1008:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    100c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1010:	6d657400 	cfstrdvs	mvd7, [r5]
    1014:	72650070 	rsbvc	r0, r5, #112	; 0x70
    1018:	74696272 	strbtvc	r6, [r9], #-626
    101c:	65526e00 	ldrbvs	r6, [r2, #-3584]
    1020:	69006461 	stmdbvs	r0, {r0, r5, r6, sl, sp, lr}
    1024:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1028:	49626700 	stmdbmi	r2!, {r8, r9, sl, sp, lr}^
    102c:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
    1030:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1034:	61506e6f 	cmpvs	r0, pc, ror #28
    1038:	74656b63 	strbtvc	r6, [r5], #-2915
    103c:	75616200 	strbvc	r6, [r1, #-512]!
    1040:	6d756e64 	ldclvs	14, cr6, [r5, #-400]!
    1044:	6c786400 	cfldrdvs	mvd6, [r8]
    1048:	7265745f 	rsbvc	r7, r5, #1593835520	; 0x5f000000
    104c:	616e696d 	cmnvs	lr, sp, ror #18
    1050:	46006574 	undefined
    1054:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1058:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    105c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1060:	424f0067 	submi	r0, pc, #103	; 0x67
    1064:	4457495f 	ldrbmi	r4, [r7], #-2399
    1068:	52570047 	subspl	r0, r7, #71	; 0x47
    106c:	445f3250 	ldrbmi	r3, [pc], #592	; 1074 <__Stack_Size+0xc74>
    1070:	00617461 	rsbeq	r7, r1, r1, ror #8
    1074:	535f424f 	cmppl	pc, #-268435452	; 0xf0000004
    1078:	00504f54 	subseq	r4, r0, r4, asr pc
    107c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1080:	72455f48 	subvc	r5, r5, #288	; 0x120
    1084:	4f657361 	svcmi	0x00657361
    1088:	6f697470 	svcvs	0x00697470
    108c:	7479426e 	ldrbtvc	r4, [r9], #-622
    1090:	72007365 	andvc	r7, r0, #-1811939327	; 0x94000001
    1094:	6f646165 	svcvs	0x00646165
    1098:	74737475 	ldrbtvc	r7, [r3], #-1141
    109c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    10a0:	414c4600 	cmpmi	ip, r0, lsl #12
    10a4:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 859 <__Stack_Size+0x459>
    10a8:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
    10ac:	5052575f 	subspl	r5, r2, pc, asr r7
    10b0:	414c4600 	cmpmi	ip, r0, lsl #12
    10b4:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 869 <__Stack_Size+0x469>
    10b8:	65736172 	ldrbvs	r6, [r3, #-370]!
    10bc:	65676150 	strbvs	r6, [r7, #-336]!
    10c0:	414c4600 	cmpmi	ip, r0, lsl #12
    10c4:	4c5f4853 	mrrcmi	8, 5, r4, pc, cr3
    10c8:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    10cc:	46007963 	strmi	r7, [r0], -r3, ror #18
    10d0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    10d4:	7465475f 	strbtvc	r4, [r5], #-1887
    10d8:	66657250 	undefined
    10dc:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    10e0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    10e4:	74537265 	ldrbvc	r7, [r3], #-613
    10e8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    10ec:	6c656400 	cfstrdvs	mvd6, [r5]
    10f0:	57007961 	strpl	r7, [r0, -r1, ror #18]
    10f4:	00525052 	subseq	r5, r2, r2, asr r0
    10f8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    10fc:	6e555f48 	cdpvs	15, 5, cr5, cr5, cr8, {2}
    1100:	6b636f6c 	blvs	18dceb8 <__Stack_Size+0x18dcab8>
    1104:	414c4600 	cmpmi	ip, r0, lsl #12
    1108:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 8bd <__Stack_Size+0x4bd>
    110c:	65736172 	ldrbvs	r6, [r3, #-370]!
    1110:	506c6c41 	rsbpl	r6, ip, r1, asr #24
    1114:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    1118:	414c4600 	cmpmi	ip, r0, lsl #12
    111c:	535f4853 	cmppl	pc, #5439488	; 0x530000
    1120:	75746174 	ldrbvc	r6, [r4, #-372]!
    1124:	654e0073 	strbvs	r0, [lr, #-115]
    1128:	61745377 	cmnvs	r4, r7, ror r3
    112c:	57006574 	smlsdxpl	r0, r4, r5, r6
    1130:	00305052 	eorseq	r5, r0, r2, asr r0
    1134:	31505257 	cmpcc	r0, r7, asr r2
    1138:	50525700 	subspl	r5, r2, r0, lsl #14
    113c:	52570032 	subspl	r0, r7, #50	; 0x32
    1140:	46003350 	undefined
    1144:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1148:	7465475f 	strbtvc	r4, [r5], #-1887
    114c:	74697257 	strbtvc	r7, [r9], #-599
    1150:	6f725065 	svcvs	0x00725065
    1154:	74636574 	strbtvc	r6, [r3], #-1396
    1158:	4f6e6f69 	svcmi	0x006e6f69
    115c:	6f697470 	svcvs	0x00697470
    1160:	7479426e 	ldrbtvc	r4, [r9], #-622
    1164:	504f0065 	subpl	r0, pc, r5, rrx
    1168:	59454b54 	stmdbpl	r5, {r2, r4, r6, r8, r9, fp, lr}^
    116c:	4c460052 	mcrrmi	0, 5, r0, r6, cr2
    1170:	5f485341 	svcpl	0x00485341
    1174:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1178:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    117c:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1180:	6f436574 	svcvs	0x00436574
    1184:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1188:	414c4600 	cmpmi	ip, r0, lsl #12
    118c:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
    1190:	4f646165 	svcmi	0x00646165
    1194:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    1198:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    119c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    11a0:	616c6600 	cmnvs	ip, r0, lsl #12
    11a4:	74736873 	ldrbtvc	r6, [r3], #-2163
    11a8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    11ac:	74696200 	strbtvc	r6, [r9], #-512
    11b0:	74617473 	strbtvc	r7, [r1], #-1139
    11b4:	50007375 	andpl	r7, r0, r5, ror r3
    11b8:	5f656761 	svcpl	0x00656761
    11bc:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    11c0:	00737365 	rsbseq	r7, r3, r5, ror #6
    11c4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    11c8:	52455f48 	subpl	r5, r5, #288	; 0x120
    11cc:	5f524f52 	svcpl	0x00524f52
    11d0:	46004750 	undefined
    11d4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    11d8:	636f4c5f 	cmnvs	pc, #24320	; 0x5f00
    11dc:	5257006b 	subspl	r0, r7, #107	; 0x6b
    11e0:	445f3350 	ldrbmi	r3, [pc], #848	; 11e8 <__Stack_Size+0xde8>
    11e4:	00617461 	rsbeq	r7, r1, r1, ror #8
    11e8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    11ec:	30316632 	eorscc	r6, r1, r2, lsr r6
    11f0:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    11f4:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    11f8:	74732f63 	ldrbtvc	r2, [r3], #-3939
    11fc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1200:	5f783031 	svcpl	0x00783031
    1204:	73616c66 	cmnvc	r1, #26112	; 0x6600
    1208:	00632e68 	rsbeq	r2, r3, r8, ror #28
    120c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1210:	72505f48 	subsvc	r5, r0, #288	; 0x120
    1214:	74656665 	strbtvc	r6, [r5], #-1637
    1218:	75426863 	strbvc	r6, [r2, #-2147]
    121c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1220:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1224:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1228:	65475f48 	strbvs	r5, [r7, #-3912]
    122c:	616c4674 	smcvs	50276
    1230:	61745367 	cmnvs	r4, r7, ror #6
    1234:	00737574 	rsbseq	r7, r3, r4, ror r5
    1238:	53414c46 	movtpl	r4, #7238	; 0x1c46
    123c:	6c435f48 	mcrrvs	15, 4, r5, r3, cr8
    1240:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1244:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1248:	53414c46 	movtpl	r4, #7238	; 0x1c46
    124c:	4f435f48 	svcmi	0x00435f48
    1250:	454c504d 	strbmi	r5, [ip, #-77]
    1254:	46004554 	undefined
    1258:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    125c:	5355425f 	cmppl	r5, #-268435451	; 0xf0000005
    1260:	52570059 	subspl	r0, r7, #89	; 0x59
    1264:	445f3150 	ldrbmi	r3, [pc], #336	; 126c <__Stack_Size+0xe6c>
    1268:	00617461 	rsbeq	r7, r1, r1, ror #8
    126c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1270:	49545f48 	ldmdbmi	r4, {r3, r6, r8, r9, sl, fp, ip, lr}^
    1274:	554f454d 	strbpl	r4, [pc, #-1357]	; d2f <__Stack_Size+0x92f>
    1278:	69540054 	ldmdbvs	r4, {r2, r4, r6}^
    127c:	756f656d 	strbvc	r6, [pc, #-1389]!	; d17 <__Stack_Size+0x917>
    1280:	4c460074 	mcrrmi	0, 7, r0, r6, cr4
    1284:	5f485341 	svcpl	0x00485341
    1288:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    128c:	4f646165 	svcmi	0x00646165
    1290:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    1294:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    1298:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    129c:	74617453 	strbtvc	r7, [r1], #-1107
    12a0:	4f007375 	svcmi	0x00007375
    12a4:	54535f42 	ldrbpl	r5, [r3], #-3906
    12a8:	00594244 	subseq	r4, r9, r4, asr #4
    12ac:	30505257 	subscc	r5, r0, r7, asr r2
    12b0:	7461445f 	strbtvc	r4, [r1], #-1119
    12b4:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    12b8:	5f485341 	svcpl	0x00485341
    12bc:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    12c0:	6c637943 	stclvs	9, cr7, [r3], #-268
    12c4:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    12c8:	00737365 	rsbseq	r7, r3, r5, ror #6
    12cc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    12d0:	65475f48 	strbvs	r5, [r7, #-3912]
    12d4:	61745374 	cmnvs	r4, r4, ror r3
    12d8:	00737574 	rsbseq	r7, r3, r4, ror r5
    12dc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    12e0:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
    12e4:	656c6261 	strbvs	r6, [ip, #-609]!
    12e8:	74697257 	strbtvc	r7, [r9], #-599
    12ec:	6f725065 	svcvs	0x00725065
    12f0:	74636574 	strbtvc	r6, [r3], #-1396
    12f4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12f8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    12fc:	65535f48 	ldrbvs	r5, [r3, #-3912]
    1300:	74614c74 	strbtvc	r4, [r1], #-3188
    1304:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1308:	414c4600 	cmpmi	ip, r0, lsl #12
    130c:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^
    1310:	43666c61 	cmnmi	r6, #24832	; 0x6100
    1314:	656c6379 	strbvs	r6, [ip, #-889]!
    1318:	65636341 	strbvs	r6, [r3, #-833]!
    131c:	6d437373 	stclvs	3, cr7, [r3, #-460]
    1320:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
    1324:	5f485341 	svcpl	0x00485341
    1328:	676f7250 	undefined
    132c:	4f6d6172 	svcmi	0x006d6172
    1330:	6f697470 	svcvs	0x00697470
    1334:	7479426e 	ldrbtvc	r4, [r9], #-622
    1338:	74614465 	strbtvc	r4, [r1], #-1125
    133c:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    1340:	5f485341 	svcpl	0x00485341
    1344:	55746547 	ldrbpl	r6, [r4, #-1351]!
    1348:	4f726573 	svcmi	0x00726573
    134c:	6f697470 	svcvs	0x00697470
    1350:	7479426e 	ldrbtvc	r4, [r9], #-622
    1354:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    1358:	5f485341 	svcpl	0x00485341
    135c:	676f7250 	undefined
    1360:	486d6172 	stmdami	sp!, {r1, r4, r5, r6, r8, sp, lr}^
    1364:	57666c61 	strbpl	r6, [r6, -r1, ror #24]!
    1368:	0064726f 	rsbeq	r7, r4, pc, ror #4
    136c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1370:	4c465f48 	mcrrmi	15, 4, r5, r6, cr8
    1374:	55004741 	strpl	r4, [r0, #-1857]
    1378:	00524553 	subseq	r4, r2, r3, asr r5
    137c:	61746144 	cmnvs	r4, r4, asr #2
    1380:	61440030 	cmpvs	r4, r0, lsr r0
    1384:	00316174 	eorseq	r6, r1, r4, ror r1
    1388:	53414c46 	movtpl	r4, #7238	; 0x1c46
    138c:	61505f48 	cmpvs	r0, r8, asr #30
    1390:	00736567 	rsbseq	r6, r3, r7, ror #10
    1394:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1398:	54495f48 	strbpl	r5, [r9], #-3912
    139c:	414c4600 	cmpmi	ip, r0, lsl #12
    13a0:	505f4853 	subspl	r4, pc, r3, asr r8
    13a4:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    13a8:	6f576d61 	svcvs	0x00576d61
    13ac:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
    13b0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    13b4:	00444556 	subeq	r4, r4, r6, asr r5
    13b8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    13bc:	61575f48 	cmpvs	r7, r8, asr #30
    13c0:	6f467469 	svcvs	0x00467469
    13c4:	73614c72 	cmnvc	r1, #29184	; 0x7200
    13c8:	65704f74 	ldrbvs	r4, [r0, #-3956]!
    13cc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    13d0:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    13d4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    13d8:	6572505f 	ldrbvs	r5, [r2, #-95]!
    13dc:	63746566 	cmnvs	r4, #427819008	; 0x19800000
    13e0:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
    13e4:	00726566 	rsbseq	r6, r2, r6, ror #10
    13e8:	4f495047 	svcmi	0x00495047
    13ec:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    13f0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    13f4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    13f8:	00736f70 	rsbseq	r6, r3, r0, ror pc
    13fc:	5f746942 	svcpl	0x00746942
    1400:	00544553 	subseq	r4, r4, r3, asr r5
    1404:	4f495047 	svcmi	0x00495047
    1408:	6165525f 	cmnvs	r5, pc, asr r2
    140c:	74754f64 	ldrbtvc	r4, [r5], #-3940
    1410:	44747570 	ldrbtmi	r7, [r4], #-1392
    1414:	00617461 	rsbeq	r7, r1, r1, ror #8
    1418:	4f495047 	svcmi	0x00495047
    141c:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    1420:	754f746e 	strbvc	r7, [pc, #-1134]	; fba <__Stack_Size+0xbba>
    1424:	74757074 	ldrbtvc	r7, [r5], #-116
    1428:	00646d43 	rsbeq	r6, r4, r3, asr #26
    142c:	4f495047 	svcmi	0x00495047
    1430:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1434:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1438:	0074696e 	rsbseq	r6, r4, lr, ror #18
    143c:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    1440:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1444:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    1448:	54455345 	strbpl	r5, [r5], #-837
    144c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1450:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1454:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    1458:	47007469 	strmi	r7, [r0, -r9, ror #8]
    145c:	5f4f4950 	svcpl	0x004f4950
    1460:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1464:	00737469 	rsbseq	r7, r3, r9, ror #8
    1468:	4f495047 	svcmi	0x00495047
    146c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1470:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    1474:	52434954 	subpl	r4, r3, #1376256	; 0x150000
    1478:	6d747300 	ldclvs	3, cr7, [r4]
    147c:	31663233 	cmncc	r6, r3, lsr r2
    1480:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1484:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1488:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    148c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1490:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1494:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1498:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    149c:	6d6e6970 	stclvs	9, cr6, [lr, #-448]!
    14a0:	006b7361 	rsbeq	r7, fp, r1, ror #6
    14a4:	4f495047 	svcmi	0x00495047
    14a8:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    14ac:	756f5374 	strbvc	r5, [pc, #-884]!	; 1140 <__Stack_Size+0xd40>
    14b0:	00656372 	rsbeq	r6, r5, r2, ror r3
    14b4:	4f495047 	svcmi	0x00495047
    14b8:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    14bc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    14c0:	4f495047 	svcmi	0x00495047
    14c4:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    14c8:	754f746e 	strbvc	r7, [pc, #-1134]	; 1062 <__Stack_Size+0xc62>
    14cc:	74757074 	ldrbtvc	r7, [r5], #-116
    14d0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    14d4:	47006769 	strmi	r6, [r0, -r9, ror #14]
    14d8:	5f4f4950 	svcpl	0x004f4950
    14dc:	616d6552 	cmnvs	sp, r2, asr r5
    14e0:	50470070 	subpl	r0, r7, r0, ror r0
    14e4:	525f4f49 	subspl	r4, pc, #292	; 0x124
    14e8:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    14ec:	7475706e 	ldrbtvc	r7, [r5], #-110
    14f0:	61746144 	cmnvs	r4, r4, asr #2
    14f4:	00746942 	rsbseq	r6, r4, r2, asr #18
    14f8:	72706d74 	rsbsvc	r6, r0, #7424	; 0x1d00
    14fc:	47006765 	strmi	r6, [r0, -r5, ror #14]
    1500:	5f4f4950 	svcpl	0x004f4950
    1504:	65736552 	ldrbvs	r6, [r3, #-1362]!
    1508:	74694274 	strbtvc	r4, [r9], #-628
    150c:	6f500073 	svcvs	0x00500073
    1510:	61567472 	cmpvs	r6, r2, ror r4
    1514:	7563006c 	strbvc	r0, [r3, #-108]!
    1518:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    151c:	646f6d74 	strbtvs	r6, [pc], #3444	; 1524 <__Stack_Size+0x1124>
    1520:	50470065 	subpl	r0, r7, r5, rrx
    1524:	505f4f49 	subspl	r4, pc, r9, asr #30
    1528:	65526e69 	ldrbvs	r6, [r2, #-3689]
    152c:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
    1530:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1534:	50470067 	subpl	r0, r7, r7, rrx
    1538:	505f4f49 	subspl	r4, pc, r9, asr #30
    153c:	6f536e69 	svcvs	0x00536e69
    1540:	65637275 	strbvs	r7, [r3, #-629]!
    1544:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1548:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    154c:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1550:	44747570 	ldrbtmi	r7, [r4], #-1392
    1554:	00617461 	rsbeq	r7, r1, r1, ror #8
    1558:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!
    155c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1560:	4f495047 	svcmi	0x00495047
    1564:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1568:	6b636f4c 	blvs	18dd2a0 <__Stack_Size+0x18dcea0>
    156c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1570:	63006769 	movwvs	r6, #1897	; 0x769
    1574:	65727275 	ldrbvs	r7, [r2, #-629]!
    1578:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    157c:	5047006e 	subpl	r0, r7, lr, rrx
    1580:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    1584:	65746972 	ldrbvs	r6, [r4, #-2418]!
    1588:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    158c:	50470031 	subpl	r0, r7, r1, lsr r0
    1590:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 64f <__Stack_Size+0x24f>
    1594:	4c495458 	cfstrdmi	mvd5, [r9], {88}
    1598:	43656e69 	cmnmi	r5, #1680	; 0x690
    159c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15a0:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
    15a4:	74634174 	strbtvc	r4, [r3], #-372
    15a8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    15ac:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    15b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    15b4:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    15b8:	5f4f4950 	svcpl	0x004f4950
    15bc:	74696e49 	strbtvc	r6, [r9], #-3657
    15c0:	75727453 	ldrbvc	r7, [r2, #-1107]!
    15c4:	45007463 	strmi	r7, [r0, #-1123]
    15c8:	00524356 	subseq	r4, r2, r6, asr r3
    15cc:	4f495047 	svcmi	0x00495047
    15d0:	6165525f 	cmnvs	r5, pc, asr r2
    15d4:	74754f64 	ldrbtvc	r4, [r5], #-3940
    15d8:	44747570 	ldrbtmi	r7, [r4], #-1392
    15dc:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    15e0:	47007469 	strmi	r7, [r0, -r9, ror #8]
    15e4:	5f4f4950 	svcpl	0x004f4950
    15e8:	4f494641 	svcmi	0x00494641
    15ec:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    15f0:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    15f4:	00524241 	subseq	r4, r2, r1, asr #4
    15f8:	4349564e 	movtmi	r5, #38478	; 0x964e
    15fc:	656c435f 	strbvs	r4, [ip, #-863]!
    1600:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
    1604:	61684351 	cmnvs	r8, r1, asr r3
    1608:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    160c:	646e6550 	strbtvs	r6, [lr], #-1360
    1610:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1614:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1618:	5f434956 	svcpl	0x00434956
    161c:	74696e49 	strbtvc	r6, [r9], #-3657
    1620:	75727453 	ldrbvc	r7, [r2, #-1107]!
    1624:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    1628:	5f434956 	svcpl	0x00434956
    162c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1630:	65727275 	ldrbvs	r7, [r2, #-629]!
    1634:	6550746e 	ldrbvs	r7, [r0, #-1134]
    1638:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    163c:	51524967 	cmppl	r2, r7, ror #18
    1640:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1644:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1648:	4349564e 	movtmi	r5, #38478	; 0x964e
    164c:	7465475f 	strbtvc	r4, [r5], #-1887
    1650:	6c756146 	ldfvse	f6, [r5], #-280
    1654:	64644174 	strbtvs	r4, [r4], #-372
    1658:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    165c:	73795300 	cmnvc	r9, #0	; 0x0
    1660:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1664:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1668:	75537265 	ldrbvc	r7, [r3, #-613]
    166c:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1670:	7469726f 	strbtvc	r7, [r9], #-623
    1674:	564e0079 	undefined
    1678:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    167c:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1680:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1684:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1688:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    168c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    1690:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    1694:	65747379 	ldrbvs	r7, [r4, #-889]!
    1698:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
    169c:	74007465 	strvc	r7, [r0], #-1125
    16a0:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    16a4:	564e0065 	strbpl	r0, [lr], -r5, rrx
    16a8:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    16ac:	54455345 	strbpl	r5, [r5], #-837
    16b0:	4d495250 	sfmmi	f5, 2, [r9, #-320]
    16b4:	004b5341 	subeq	r5, fp, r1, asr #6
    16b8:	6c756166 	ldfvse	f6, [r5], #-408
    16bc:	64646174 	strbtvs	r6, [r4], #-372
    16c0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    16c4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    16c8:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    16cc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    16d0:	646e6148 	strbtvs	r6, [lr], #-328
    16d4:	5072656c 	rsbspl	r6, r2, ip, ror #10
    16d8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    16dc:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    16e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16e4:	74730067 	ldrbtvc	r0, [r3], #-103
    16e8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    16ec:	5f783031 	svcpl	0x00783031
    16f0:	2f62696c 	svccs	0x0062696c
    16f4:	2f637273 	svccs	0x00637273
    16f8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    16fc:	30316632 	eorscc	r6, r1, r2, lsr r6
    1700:	766e5f78 	uqsub16vc	r5, lr, r8
    1704:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
    1708:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    170c:	65475f43 	strbvs	r5, [r7, #-3907]
    1710:	55504374 	ldrbpl	r4, [r0, #-884]
    1714:	4e004449 	cdpmi	4, 0, cr4, cr0, cr9, {2}
    1718:	5f434956 	svcpl	0x00434956
    171c:	6f697250 	svcvs	0x00697250
    1720:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1724:	756f7247 	strbvc	r7, [pc, #-583]!	; 14e5 <__Stack_Size+0x10e5>
    1728:	564e0070 	undefined
    172c:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    1730:	54455345 	strbpl	r5, [r5], #-837
    1734:	4c554146 	ldfmie	f4, [r5], {70}
    1738:	53414d54 	movtpl	r4, #7508	; 0x1d54
    173c:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1740:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1744:	75437465 	strbvc	r7, [r3, #-1125]
    1748:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    174c:	74634174 	strbtvc	r4, [r3], #-372
    1750:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    1754:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1758:	53007265 	movwpl	r7, #613	; 0x265
    175c:	65747379 	ldrbvs	r7, [r4, #-889]!
    1760:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1764:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1768:	53434900 	movtpl	r4, #14592	; 0x3900
    176c:	53520052 	cmppl	r2, #82	; 0x52
    1770:	45565245 	ldrbmi	r5, [r6, #-581]
    1774:	4e003144 	adfmism	f3, f0, f4
    1778:	5f434956 	svcpl	0x00434956
    177c:	656e6547 	strbvs	r6, [lr, #-1351]!
    1780:	65746172 	ldrbvs	r6, [r4, #-370]!
    1784:	65726f43 	ldrbvs	r6, [r2, #-3907]!
    1788:	65736552 	ldrbvs	r6, [r3, #-1362]!
    178c:	564e0074 	undefined
    1790:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1794:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1798:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    179c:	646e6148 	strbtvs	r6, [lr], #-328
    17a0:	4172656c 	cmnmi	r2, ip, ror #10
    17a4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    17a8:	74694265 	strbtvc	r4, [r9], #-613
    17ac:	74617453 	strbtvc	r7, [r1], #-1107
    17b0:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    17b4:	5f434956 	svcpl	0x00434956
    17b8:	45534142 	ldrbmi	r4, [r3, #-322]
    17bc:	43495250 	movtmi	r5, #37456	; 0x9250
    17c0:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    17c4:	46420047 	strbmi	r0, [r2], -r7, asr #32
    17c8:	4e005241 	cdpmi	2, 0, cr5, cr0, cr1, {2}
    17cc:	5f434956 	svcpl	0x00434956
    17d0:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    17d4:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    17d8:	656e6e61 	strbvs	r6, [lr, #-3681]!
    17dc:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    17e0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    17e4:	00746942 	rsbseq	r6, r4, r2, asr #18
    17e8:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    17ec:	4300736f 	movwmi	r7, #879	; 0x36f
    17f0:	00525346 	subseq	r5, r2, r6, asr #6
    17f4:	4349564e 	movtmi	r5, #38478	; 0x964e
    17f8:	7465535f 	strbtvc	r5, [r5], #-863
    17fc:	74737953 	ldrbtvc	r7, [r3], #-2387
    1800:	61486d65 	cmpvs	r8, r5, ror #26
    1804:	656c646e 	strbvs	r6, [ip, #-1134]!
    1808:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    180c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1810:	00746942 	rsbseq	r6, r4, r2, asr #18
    1814:	43524941 	cmpmi	r2, #1064960	; 0x104000
    1818:	564e0052 	undefined
    181c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1820:	65567465 	ldrbvs	r7, [r6, #-1125]
    1824:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1828:	6c626154 	stfvse	f6, [r2], #-336
    182c:	43490065 	movtmi	r0, #36965	; 0x9065
    1830:	4e005250 	mcrmi	2, 0, r5, cr0, cr0, {2}
    1834:	5f434956 	svcpl	0x00434956
    1838:	74696e49 	strbtvc	r6, [r9], #-3657
    183c:	50485300 	subpl	r5, r8, r0, lsl #6
    1840:	48530052 	ldmdami	r3, {r1, r4, r6}^
    1844:	00525343 	subseq	r5, r2, r3, asr #6
    1848:	4349564e 	movtmi	r5, #38478	; 0x964e
    184c:	7465475f 	strbtvc	r4, [r5], #-1887
    1850:	45534142 	ldrbmi	r4, [r3, #-322]
    1854:	00495250 	subeq	r5, r9, r0, asr r2
    1858:	41464d4d 	cmpmi	r6, sp, asr #26
    185c:	6d740052 	ldclvs	0, cr0, [r4, #-328]!
    1860:	62757370 	rsbsvs	r7, r5, #-1073741823	; 0xc0000001
    1864:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1868:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    186c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    1870:	646e6148 	strbtvs	r6, [lr], #-328
    1874:	4372656c 	cmnmi	r2, #452984832	; 0x1b000000
    1878:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    187c:	564e0067 	strbpl	r0, [lr], -r7, rrx
    1880:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1884:	65747379 	ldrbvs	r7, [r4, #-889]!
    1888:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    188c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1890:	664f0067 	strbvs	r0, [pc], -r7, rrx
    1894:	74657366 	strbtvc	r7, [r5], #-870
    1898:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    189c:	74535f43 	ldrbvc	r5, [r3], #-3907
    18a0:	74637572 	strbtvc	r7, [r3], #-1394
    18a4:	74696e49 	strbtvc	r6, [r9], #-3657
    18a8:	45434900 	strbmi	r4, [r3, #-2304]
    18ac:	6d740052 	ldclvs	0, cr0, [r4, #-328]!
    18b0:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    18b4:	7469726f 	strbtvc	r7, [r9], #-623
    18b8:	54560079 	ldrbpl	r0, [r6], #-121
    18bc:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    18c0:	00525053 	subseq	r5, r2, r3, asr r0
    18c4:	52534644 	subspl	r4, r3, #71303168	; 0x4400000
    18c8:	53464800 	movtpl	r4, #26624	; 0x6800
    18cc:	564e0052 	undefined
    18d0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    18d4:	41465445 	cmpmi	r6, r5, asr #8
    18d8:	4d544c55 	ldclmi	12, cr4, [r4, #-340]
    18dc:	004b5341 	subeq	r5, fp, r1, asr #6
    18e0:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
    18e4:	45534900 	ldrbmi	r4, [r3, #-2304]
    18e8:	564e0052 	undefined
    18ec:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    18f0:	61467465 	cmpvs	r6, r5, ror #8
    18f4:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    18f8:	6c646e61 	stclvs	14, cr6, [r4], #-388
    18fc:	6f537265 	svcvs	0x00537265
    1900:	65637275 	strbvs	r7, [r3, #-629]!
    1904:	6d740073 	ldclvs	0, cr0, [r4, #-460]!
    1908:	4e003270 	mcrmi	2, 0, r3, cr0, cr0, {3}
    190c:	5f434956 	svcpl	0x00434956
    1910:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1914:	65747379 	ldrbvs	r7, [r4, #-889]!
    1918:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    191c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1920:	646e6550 	strbtvs	r6, [lr], #-1360
    1924:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1928:	74537469 	ldrbvc	r7, [r3], #-1129
    192c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1930:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1934:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1938:	53726165 	cmnpl	r2, #1073741849	; 0x40000019
    193c:	65747379 	ldrbvs	r7, [r4, #-889]!
    1940:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1944:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1948:	646e6550 	strbtvs	r6, [lr], #-1360
    194c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1950:	66007469 	strvs	r7, [r0], -r9, ror #8
    1954:	746c7561 	strbtvc	r7, [ip], #-1377
    1958:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
    195c:	00736563 	rsbseq	r6, r3, r3, ror #10
    1960:	74737953 	ldrbtvc	r7, [r3], #-2387
    1964:	61486d65 	cmpvs	r8, r5, ror #26
    1968:	656c646e 	strbvs	r6, [ip, #-1134]!
    196c:	65725072 	ldrbvs	r5, [r2, #-114]!
    1970:	74706d65 	ldrbtvc	r6, [r0], #-3429
    1974:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    1978:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    197c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1980:	4349564e 	movtmi	r5, #38478	; 0x964e
    1984:	7465475f 	strbtvc	r4, [r5], #-1887
    1988:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    198c:	6e6e6168 	powvsez	f6, f6, #0.0
    1990:	65506c65 	ldrbvs	r6, [r0, #-3173]
    1994:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1998:	74694267 	strbtvc	r4, [r9], #-615
    199c:	74617453 	strbtvc	r7, [r1], #-1107
    19a0:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    19a4:	5f434956 	svcpl	0x00434956
    19a8:	44424353 	strbmi	r4, [r2], #-851
    19ac:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    19b0:	654e0074 	strbvs	r0, [lr, #-116]
    19b4:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
    19b8:	7469726f 	strbtvc	r7, [r9], #-623
    19bc:	564e0079 	undefined
    19c0:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    19c4:	54746365 	ldrbtpl	r6, [r4], #-869
    19c8:	61006261 	tstvs	r0, r1, ror #4
    19cc:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    19d0:	71726965 	cmnvc	r2, r5, ror #18
    19d4:	74617473 	strbtvc	r7, [r1], #-1139
    19d8:	68007375 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    19dc:	6c646e61 	stclvs	14, cr6, [r4], #-388
    19e0:	616d7265 	cmnvs	sp, r5, ror #4
    19e4:	4c006b73 	stcmi	11, cr6, [r0], {115}
    19e8:	6f50776f 	svcvs	0x0050776f
    19ec:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!
    19f0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    19f4:	4349564e 	movtmi	r5, #38478	; 0x964e
    19f8:	7465475f 	strbtvc	r4, [r5], #-1887
    19fc:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1a00:	6e6e6168 	powvsez	f6, f6, #0.0
    1a04:	63416c65 	movtvs	r6, #7269	; 0x1c65
    1a08:	65766974 	ldrbvs	r6, [r6, #-2420]!
    1a0c:	53746942 	cmnpl	r4, #1081344	; 0x108000
    1a10:	75746174 	ldrbvc	r6, [r4, #-372]!
    1a14:	564e0073 	undefined
    1a18:	445f4349 	ldrbmi	r4, [pc], #841	; 1a20 <__Stack_Size+0x1620>
    1a1c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1a20:	564e0074 	undefined
    1a24:	505f4349 	subspl	r4, pc, r9, asr #6
    1a28:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1a2c:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1a30:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1a34:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a38:	70006769 	andvc	r6, r0, r9, ror #14
    1a3c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1a40:	7269676e 	rsbvc	r6, r9, #28835840	; 0x1b80000
    1a44:	61747371 	cmnvs	r4, r1, ror r3
    1a48:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a4c:	5f525750 	svcpl	0x00525750
    1a50:	65746e45 	ldrbvs	r6, [r4, #-3653]!
    1a54:	41545372 	cmpmi	r4, r2, ror r3
    1a58:	5942444e 	stmdbpl	r2, {r1, r2, r3, r6, sl, lr}^
    1a5c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1a60:	52575000 	subspl	r5, r7, #0	; 0x0
    1a64:	656c435f 	strbvs	r4, [ip, #-863]!
    1a68:	6c467261 	sfmvs	f7, 2, [r6], {97}
    1a6c:	50006761 	andpl	r6, r0, r1, ror #14
    1a70:	445f5257 	ldrbmi	r5, [pc], #599	; 1a78 <__Stack_Size+0x1678>
    1a74:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1a78:	57500074 	undefined
    1a7c:	65525f52 	ldrbvs	r5, [r2, #-3922]
    1a80:	616c7567 	cmnvs	ip, r7, ror #10
    1a84:	00726f74 	rsbseq	r6, r2, r4, ror pc
    1a88:	5f525750 	svcpl	0x00525750
    1a8c:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    1a90:	6c657665 	stclvs	6, cr7, [r5], #-404
    1a94:	52575000 	subspl	r5, r7, #0	; 0x0
    1a98:	414c465f 	cmpmi	ip, pc, asr r6
    1a9c:	57500047 	ldrbpl	r0, [r0, -r7, asr #32]
    1aa0:	56505f52 	usubaddxpl	r5, r0, r2
    1aa4:	646d4344 	strbtvs	r4, [sp], #-836
    1aa8:	6d747300 	ldclvs	3, cr7, [r4]
    1aac:	31663233 	cmncc	r6, r3, lsr r2
    1ab0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1ab4:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1ab8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    1abc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1ac0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1ac4:	7277705f 	rsbsvc	r7, r7, #95	; 0x5f
    1ac8:	5000632e 	andpl	r6, r0, lr, lsr #6
    1acc:	505f5257 	subspl	r5, pc, r7, asr r2
    1ad0:	654c4456 	strbvs	r4, [ip, #-1110]
    1ad4:	436c6576 	cmnmi	ip, #494927872	; 0x1d800000
    1ad8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1adc:	57500067 	ldrbpl	r0, [r0, -r7, rrx]
    1ae0:	65475f52 	strbvs	r5, [r7, #-3922]
    1ae4:	616c4674 	smcvs	50276
    1ae8:	61745367 	cmnvs	r4, r7, ror #6
    1aec:	00737574 	rsbseq	r7, r3, r4, ror r5
    1af0:	5f525750 	svcpl	0x00525750
    1af4:	65746e45 	ldrbvs	r6, [r4, #-3653]!
    1af8:	4f545372 	svcmi	0x00545372
    1afc:	646f4d50 	strbtvs	r4, [pc], #3408	; 1b04 <__Stack_Size+0x1704>
    1b00:	57500065 	ldrbpl	r0, [r0, -r5, rrx]
    1b04:	54535f52 	ldrbpl	r5, [r3], #-3922
    1b08:	6e45504f 	cdpvs	0, 4, cr5, cr5, cr15, {2}
    1b0c:	00797274 	rsbseq	r7, r9, r4, ror r2
    1b10:	5f525750 	svcpl	0x00525750
    1b14:	6b636142 	blvs	18da024 <__Stack_Size+0x18d9c24>
    1b18:	63417075 	movtvs	r7, #4213	; 0x1075
    1b1c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1b20:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1b24:	5f525750 	svcpl	0x00525750
    1b28:	656b6157 	strbvs	r6, [fp, #-343]!
    1b2c:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    1b30:	646d436e 	strbtvs	r4, [sp], #-878
    1b34:	42504100 	subsmi	r4, r0, #0	; 0x0
    1b38:	54535231 	ldrbpl	r5, [r3], #-561
    1b3c:	43520052 	cmpmi	r2, #82	; 0x52
    1b40:	43485f43 	movtmi	r5, #36675	; 0x8f43
    1b44:	52004b4c 	andpl	r4, r0, #77824	; 0x13000
    1b48:	415f4343 	cmpmi	pc, r3, asr #6
    1b4c:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    1b50:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1b54:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b58:	5f434352 	svcpl	0x00434352
    1b5c:	61656c43 	cmnvs	r5, r3, asr #24
    1b60:	50544972 	subspl	r4, r4, r2, ror r9
    1b64:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1b68:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1b6c:	43520074 	cmpmi	r2, #116	; 0x74
    1b70:	50415f43 	subpl	r5, r1, r3, asr #30
    1b74:	65503242 	ldrbvs	r3, [r0, #-578]
    1b78:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b7c:	65736552 	ldrbvs	r6, [r3, #-1362]!
    1b80:	646d4374 	strbtvs	r4, [sp], #-884
    1b84:	43435200 	movtmi	r5, #12800	; 0x3200
    1b88:	45534c5f 	ldrbmi	r4, [r3, #-3167]
    1b8c:	43435200 	movtmi	r5, #12800	; 0x3200
    1b90:	7465475f 	strbtvc	r4, [r5], #-1887
    1b94:	74535449 	ldrbvc	r5, [r3], #-1097
    1b98:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1b9c:	43444200 	movtmi	r4, #16896	; 0x4200
    1ba0:	43520052 	cmpmi	r2, #82	; 0x52
    1ba4:	50415f43 	subpl	r5, r1, r3, asr #30
    1ba8:	65503242 	ldrbvs	r3, [r0, #-578]
    1bac:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1bb0:	43435200 	movtmi	r5, #12800	; 0x3200
    1bb4:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    1bb8:	5200324b 	andpl	r3, r0, #-1342177276	; 0xb0000004
    1bbc:	505f4343 	subspl	r4, pc, r3, asr #6
    1bc0:	6d434c4c 	stclvs	12, cr4, [r3, #-304]
    1bc4:	43520064 	cmpmi	r2, #100	; 0x64
    1bc8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1bcc:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1bd0:	65707954 	ldrbvs	r7, [r0, #-2388]!
    1bd4:	00666544 	rsbeq	r6, r6, r4, asr #10
    1bd8:	5f434352 	svcpl	0x00434352
    1bdc:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]
    1be0:	52006c75 	andpl	r6, r0, #29952	; 0x7500
    1be4:	415f4343 	cmpmi	pc, r3, asr #6
    1be8:	65504248 	ldrbvs	r4, [r0, #-584]
    1bec:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1bf0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1bf4:	646d436b 	strbtvs	r4, [sp], #-875
    1bf8:	47464300 	strbmi	r4, [r6, -r0, lsl #6]
    1bfc:	43480052 	movtmi	r0, #32850	; 0x8052
    1c00:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1c04:	75716572 	ldrbvc	r6, [r1, #-1394]!
    1c08:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1c0c:	42504100 	subsmi	r4, r0, #0	; 0x0
    1c10:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    1c14:	65727000 	ldrbvs	r7, [r2]!
    1c18:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    1c1c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]
    1c20:	6f434f43 	svcvs	0x00434f43
    1c24:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c28:	43435200 	movtmi	r5, #12800	; 0x3200
    1c2c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1c30:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c34:	5f434352 	svcpl	0x00434352
    1c38:	74696157 	strbtvc	r6, [r9], #-343
    1c3c:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1c40:	74534553 	ldrbvc	r4, [r3], #-1363
    1c44:	55747261 	ldrbpl	r7, [r4, #-609]!
    1c48:	43520070 	cmpmi	r2, #112	; 0x70
    1c4c:	54525f43 	ldrbpl	r5, [r2], #-3907
    1c50:	4b4c4343 	blmi	1312964 <__Stack_Size+0x1312564>
    1c54:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1c58:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1c5c:	415f4343 	cmpmi	pc, r3, asr #6
    1c60:	50314250 	eorspl	r4, r1, r0, asr r2
    1c64:	70697265 	rsbvc	r7, r9, r5, ror #4
    1c68:	73655268 	cmnvc	r5, #-2147483642	; 0x80000006
    1c6c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    1c70:	43520064 	cmpmi	r2, #100	; 0x64
    1c74:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1c78:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    1c7c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c80:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!
    1c84:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    1c88:	5f434352 	svcpl	0x00434352
    1c8c:	43425355 	movtmi	r5, #9045	; 0x2355
    1c90:	6f434b4c 	svcvs	0x00434b4c
    1c94:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c98:	43435200 	movtmi	r5, #12800	; 0x3200
    1c9c:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    1ca0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1ca4:	5f434352 	svcpl	0x00434352
    1ca8:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1cac:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1cb0:	756f534b 	strbvc	r5, [pc, #-843]!	; 196d <__Stack_Size+0x156d>
    1cb4:	00656372 	rsbeq	r6, r5, r2, ror r3
    1cb8:	32425041 	subcc	r5, r2, #65	; 0x41
    1cbc:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    1cc0:	43435200 	movtmi	r5, #12800	; 0x3200
    1cc4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1cc8:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1ccc:	00687069 	rsbeq	r7, r8, r9, rrx
    1cd0:	736c6c70 	cmnvc	ip, #28672	; 0x7000
    1cd4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1cd8:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
    1cdc:	524e4542 	subpl	r4, lr, #276824064	; 0x10800000
    1ce0:	43435200 	movtmi	r5, #12800	; 0x3200
    1ce4:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    1ce8:	6f43314b 	svcvs	0x0043314b
    1cec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1cf0:	61747300 	cmnvs	r4, r0, lsl #6
    1cf4:	72737574 	rsbsvc	r7, r3, #486539264	; 0x1d000000
    1cf8:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
    1cfc:	415f4343 	cmpmi	pc, r3, asr #6
    1d00:	50314250 	eorspl	r4, r1, r0, asr r2
    1d04:	70697265 	rsbvc	r7, r9, r5, ror #4
    1d08:	6f6c4368 	svcvs	0x006c4368
    1d0c:	6d436b63 	vstrvs	d22, [r3, #-396]
    1d10:	50410064 	subpl	r0, r1, r4, rrx
    1d14:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    1d18:	74530052 	ldrbvc	r0, [r3], #-82
    1d1c:	55747261 	ldrbpl	r7, [r4, #-609]!
    1d20:	756f4370 	strbvc	r4, [pc, #-880]!	; 19b8 <__Stack_Size+0x15b8>
    1d24:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1d28:	43435200 	movtmi	r5, #12800	; 0x3200
    1d2c:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    1d30:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    1d34:	74657365 	strbtvc	r7, [r5], #-869
    1d38:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1d3c:	5f434352 	svcpl	0x00434352
    1d40:	756a6441 	strbvc	r6, [sl, #-1089]!
    1d44:	53487473 	movtpl	r7, #33907	; 0x8473
    1d48:	6c614349 	stclvs	3, cr4, [r1], #-292
    1d4c:	61726269 	cmnvs	r2, r9, ror #4
    1d50:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1d54:	756c6156 	strbvc	r6, [ip, #-342]!
    1d58:	44410065 	strbmi	r0, [r1], #-101
    1d5c:	4b4c4343 	blmi	1312a70 <__Stack_Size+0x1312670>
    1d60:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    1d64:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1d68:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1d6c:	465f4343 	ldrbmi	r4, [pc], -r3, asr #6
    1d70:	0047414c 	subeq	r4, r7, ip, asr #2
    1d74:	5f434352 	svcpl	0x00434352
    1d78:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1d7c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d80:	43520065 	cmpmi	r2, #101	; 0x65
    1d84:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1d88:	4b4c4353 	blmi	1312adc <__Stack_Size+0x13126dc>
    1d8c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1d90:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1d94:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1d98:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    1d9c:	74536761 	ldrbvc	r6, [r3], #-1889
    1da0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1da4:	43435200 	movtmi	r5, #12800	; 0x3200
    1da8:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1dac:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1db0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1db4:	43520067 	cmpmi	r2, #103	; 0x67
    1db8:	53555f43 	cmppl	r5, #268	; 0x10c
    1dbc:	4b4c4342 	blmi	1312acc <__Stack_Size+0x13126cc>
    1dc0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1dc4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1dc8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1dcc:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1dd0:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1dd4:	43435200 	movtmi	r5, #12800	; 0x3200
    1dd8:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1ddc:	004b4c43 	subeq	r4, fp, r3, asr #24
    1de0:	53455348 	movtpl	r5, #21320	; 0x5348
    1de4:	75746174 	ldrbvc	r6, [r4, #-372]!
    1de8:	43520073 	cmpmi	r2, #115	; 0x73
    1dec:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1df0:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1df4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1df8:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1dfc:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1e00:	75716572 	ldrbvc	r6, [r1, #-1394]!
    1e04:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1e08:	43435200 	movtmi	r5, #12800	; 0x3200
    1e0c:	6f6c435f 	svcvs	0x006c435f
    1e10:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1e14:	4b4c4350 	blmi	1312b5c <__Stack_Size+0x131275c>
    1e18:	72465f32 	subvc	r5, r6, #200	; 0xc8
    1e1c:	65757165 	ldrbvs	r7, [r5, #-357]!
    1e20:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1e24:	5f434352 	svcpl	0x00434352
    1e28:	6f435449 	svcvs	0x00435449
    1e2c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1e30:	43435200 	movtmi	r5, #12800	; 0x3200
    1e34:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1e38:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1e3c:	43687069 	cmnmi	r8, #105	; 0x69
    1e40:	6b636f6c 	blvs	18ddbf8 <__Stack_Size+0x18dd7f8>
    1e44:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1e48:	5f434352 	svcpl	0x00434352
    1e4c:	00455348 	subeq	r5, r5, r8, asr #6
    1e50:	5f434352 	svcpl	0x00434352
    1e54:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1e58:	6f534b4c 	svcvs	0x00534b4c
    1e5c:	65637275 	strbvs	r7, [r3, #-629]!
    1e60:	4c435000 	marmi	acc0, r5, r3
    1e64:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    1e68:	75716572 	ldrbvc	r6, [r1, #-1394]!
    1e6c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1e70:	43435200 	movtmi	r5, #12800	; 0x3200
    1e74:	45534c5f 	ldrbmi	r4, [r3, #-3167]
    1e78:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e7c:	41006769 	tstmi	r0, r9, ror #14
    1e80:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    1e84:	65725042 	ldrbvs	r5, [r2, #-66]!
    1e88:	61546373 	cmpvs	r4, r3, ror r3
    1e8c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1e90:	5f434352 	svcpl	0x00434352
    1e94:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1e98:	6b636f6c 	blvs	18ddc50 <__Stack_Size+0x18dd850>
    1e9c:	65724673 	ldrbvs	r4, [r2, #-1651]!
    1ea0:	74730071 	ldrbtvc	r0, [r3], #-113
    1ea4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1ea8:	5f783031 	svcpl	0x00783031
    1eac:	2f62696c 	svccs	0x0062696c
    1eb0:	2f637273 	svccs	0x00637273
    1eb4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1eb8:	30316632 	eorscc	r6, r1, r2, lsr r6
    1ebc:	63725f78 	cmnvs	r2, #480	; 0x1e0
    1ec0:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1ec4:	5f434352 	svcpl	0x00434352
    1ec8:	43435452 	movtmi	r5, #13394	; 0x3452
    1ecc:	6d434b4c 	vstrvs	d20, [r3, #-304]
    1ed0:	43520064 	cmpmi	r2, #100	; 0x64
    1ed4:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1ed8:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1edc:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    1ee0:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    1ee4:	65747379 	ldrbvs	r7, [r4, #-889]!
    1ee8:	646d436d 	strbtvs	r4, [sp], #-877
    1eec:	43435200 	movtmi	r5, #12800	; 0x3200
    1ef0:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1ef4:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1ef8:	00676966 	rsbeq	r6, r7, r6, ror #18
    1efc:	5f434352 	svcpl	0x00434352
    1f00:	43495348 	movtmi	r5, #37704	; 0x9348
    1f04:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1f08:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]
    1f0c:	52004f43 	andpl	r4, r0, #268	; 0x10c
    1f10:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
    1f14:	43520054 	cmpmi	r2, #84	; 0x54
    1f18:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1f1c:	72655042 	rsbvc	r5, r5, #66	; 0x42
    1f20:	00687069 	rsbeq	r7, r8, r9, rrx
    1f24:	5f434352 	svcpl	0x00434352
    1f28:	4b4c4350 	blmi	1312c70 <__Stack_Size+0x1312870>
    1f2c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1f30:	00676966 	rsbeq	r6, r7, r6, ror #18
    1f34:	50434441 	subpl	r4, r3, r1, asr #8
    1f38:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1f3c:	6c626154 	stfvse	f6, [r2], #-336
    1f40:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
    1f44:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1f48:	65475f6b 	strbvs	r5, [r7, #-3947]
    1f4c:	756f4374 	strbvc	r4, [pc, #-884]!	; 1be0 <__Stack_Size+0x17e0>
    1f50:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1f54:	73795300 	cmnvc	r9, #0	; 0x0
    1f58:	6b636954 	blvs	18dc4b0 <__Stack_Size+0x18dc0b0>
    1f5c:	7465535f 	strbtvc	r5, [r5], #-863
    1f60:	6f6c6552 	svcvs	0x006c6552
    1f64:	53006461 	movwpl	r6, #1121	; 0x461
    1f68:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1f6c:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    1f70:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    1f74:	74536761 	ldrbvc	r6, [r3], #-1889
    1f78:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f7c:	73795300 	cmnvc	r9, #0	; 0x0
    1f80:	6b636954 	blvs	18dc4d8 <__Stack_Size+0x18dc0d8>
    1f84:	414c465f 	cmpmi	ip, pc, asr r6
    1f88:	41430047 	cmpmi	r3, r7, asr #32
    1f8c:	0042494c 	subeq	r4, r2, ip, asr #18
    1f90:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1f94:	30316632 	eorscc	r6, r1, r2, lsr r6
    1f98:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1f9c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1fa0:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1fa4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1fa8:	5f783031 	svcpl	0x00783031
    1fac:	74737973 	ldrbtvc	r7, [r3], #-2419
    1fb0:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    1fb4:	54430063 	strbpl	r0, [r3], #-99
    1fb8:	53004c52 	movwpl	r4, #3154	; 0xc52
    1fbc:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1fc0:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1fc4:	746e756f 	strbtvc	r7, [lr], #-1391
    1fc8:	6d437265 	sfmvs	f7, 2, [r3, #-404]
    1fcc:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    1fd0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1fd4:	6f435f6b 	svcvs	0x00435f6b
    1fd8:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    1fdc:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
    1fe0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1fe4:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    1fe8:	756f534b 	strbvc	r5, [pc, #-843]!	; 1ca5 <__Stack_Size+0x18a5>
    1fec:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    1ff0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ff4:	4f4c0067 	svcmi	0x004c0067
    1ff8:	53004441 	movwpl	r4, #1089	; 0x441
    1ffc:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2000:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2004:	6f534b4c 	svcvs	0x00534b4c
    2008:	65637275 	strbvs	r7, [r3, #-629]!
    200c:	73795300 	cmnvc	r9, #0	; 0x0
    2010:	6b636954 	blvs	18dc568 <__Stack_Size+0x18dc168>
    2014:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    2018:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    201c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2020:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2024:	73614634 	cmnvc	r1, #54525952	; 0x3400000
    2028:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    202c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2030:	5f4d4954 	svcpl	0x004d4954
    2034:	5031434f 	eorspl	r4, r1, pc, asr #6
    2038:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    203c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2040:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2044:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2048:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    204c:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2050:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    2054:	54007469 	strpl	r7, [r0], #-1129
    2058:	4f5f4d49 	svcmi	0x005f4d49
    205c:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    2060:	616f6c65 	cmnvs	pc, r5, ror #24
    2064:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    2068:	00676966 	rsbeq	r6, r7, r6, ror #18
    206c:	5f4d4954 	svcpl	0x004d4954
    2070:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2074:	61706d6f 	cmnvs	r0, pc, ror #26
    2078:	00316572 	eorseq	r6, r1, r2, ror r5
    207c:	5f4d4954 	svcpl	0x004d4954
    2080:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2084:	61706d6f 	cmnvs	r0, pc, ror #26
    2088:	00326572 	eorseq	r6, r2, r2, ror r5
    208c:	5f4d4954 	svcpl	0x004d4954
    2090:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2094:	61706d6f 	cmnvs	r0, pc, ror #26
    2098:	00346572 	eorseq	r6, r4, r2, ror r5
    209c:	5f4d4954 	svcpl	0x004d4954
    20a0:	4e33434f 	cdpmi	3, 3, cr4, cr3, cr15, {2}
    20a4:	616c6f50 	cmnvs	ip, r0, asr pc
    20a8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    20ac:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    20b0:	54006769 	strpl	r6, [r0], #-1897
    20b4:	4f5f4d49 	svcmi	0x005f4d49
    20b8:	65725043 	ldrbvs	r5, [r2, #-67]!
    20bc:	64616f6c 	strbtvs	r6, [r1], #-3948
    20c0:	4d495400 	cfstrdmi	mvd5, [r9]
    20c4:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    20c8:	6c657250 	sfmvs	f7, 2, [r5], #-320
    20cc:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    20d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    20d4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    20d8:	65475f4d 	strbvs	r5, [r7, #-3917]
    20dc:	616c4674 	smcvs	50276
    20e0:	61745367 	cmnvs	r4, r7, ror #6
    20e4:	00737574 	rsbseq	r7, r3, r4, ror r5
    20e8:	5f324954 	svcpl	0x00324954
    20ec:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    20f0:	54006769 	strpl	r6, [r0], #-1897
    20f4:	4f5f4d49 	svcmi	0x005f4d49
    20f8:	73614643 	cmnvc	r1, #70254592	; 0x4300000
    20fc:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2100:	4b435f4d 	blmi	10d9e3c <__Stack_Size+0x10d9a3c>
    2104:	49540044 	ldmdbmi	r4, {r2, r6}^
    2108:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    210c:	74696e49 	strbtvc	r6, [r9], #-3657
    2110:	65707954 	ldrbvs	r7, [r0, #-2388]!
    2114:	00666544 	rsbeq	r6, r6, r4, asr #10
    2118:	5f4d4954 	svcpl	0x004d4954
    211c:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    2120:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2124:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2128:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    212c:	54006563 	strpl	r6, [r0], #-1379
    2130:	445f4d49 	ldrbmi	r4, [pc], #3401	; 2138 <__Stack_Size+0x1d38>
    2134:	6142414d 	cmpvs	r2, sp, asr #2
    2138:	54006573 	strpl	r6, [r0], #-1395
    213c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 13fb <__Stack_Size+0xffb>
    2140:	52547478 	subspl	r7, r4, #2013265920	; 0x78000000
    2144:	65725047 	ldrbvs	r5, [r2, #-71]!
    2148:	6c616373 	stclvs	3, cr6, [r1], #-460
    214c:	54007265 	strpl	r7, [r0], #-613
    2150:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2154:	434e7843 	movtmi	r7, #59459	; 0xe843
    2158:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    215c:	616e6574 	smcvs	58964
    2160:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2164:	5f4d4954 	svcpl	0x004d4954
    2168:	5032434f 	eorspl	r4, r2, pc, asr #6
    216c:	6f6c6572 	svcvs	0x006c6572
    2170:	6f436461 	svcvs	0x00436461
    2174:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2178:	4d495400 	cfstrdmi	mvd5, [r9]
    217c:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    2180:	4f646563 	svcmi	0x00646563
    2184:	6f433243 	svcvs	0x00433243
    2188:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    218c:	4d495400 	cfstrdmi	mvd5, [r9]
    2190:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
    2194:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2198:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    219c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    21a0:	70555f4d 	subsvc	r5, r5, sp, asr #30
    21a4:	65746164 	ldrbvs	r6, [r4, #-356]!
    21a8:	75716552 	ldrbvc	r6, [r1, #-1362]!
    21ac:	43747365 	cmnmi	r4, #-1811939327	; 0x94000001
    21b0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    21b4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    21b8:	65445f4d 	strbvs	r5, [r4, #-3917]
    21bc:	74696e49 	strbtvc	r6, [r9], #-3657
    21c0:	4d495400 	cfstrdmi	mvd5, [r9]
    21c4:	6c65535f 	stclvs	3, cr5, [r5], #-380
    21c8:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    21cc:	414d4443 	cmpmi	sp, r3, asr #8
    21d0:	4d495400 	cfstrdmi	mvd5, [r9]
    21d4:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]
    21d8:	0065646f 	rsbeq	r6, r5, pc, ror #8
    21dc:	5f4d4954 	svcpl	0x004d4954
    21e0:	4931434f 	ldmdbmi	r1!, {r0, r1, r2, r3, r6, r8, r9, lr}
    21e4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    21e8:	5f4d4954 	svcpl	0x004d4954
    21ec:	5031434f 	eorspl	r4, r1, pc, asr #6
    21f0:	6f6c6572 	svcvs	0x006c6572
    21f4:	6f436461 	svcvs	0x00436461
    21f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    21fc:	4d495400 	cfstrdmi	mvd5, [r9]
    2200:	3143495f 	cmpcc	r3, pc, asr r9
    2204:	616c6f50 	cmnvs	ip, r0, asr pc
    2208:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    220c:	4d495400 	cfstrdmi	mvd5, [r9]
    2210:	7465475f 	strbtvc	r4, [r5], #-1887
    2214:	74706143 	ldrbtvc	r6, [r0], #-323
    2218:	31657275 	smccc	22309
    221c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2220:	72636d73 	rsbvc	r6, r3, #7360	; 0x1cc0
    2224:	4d495400 	cfstrdmi	mvd5, [r9]
    2228:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    222c:	74736146 	ldrbtvc	r6, [r3], #-326
    2230:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2234:	54006769 	strpl	r6, [r0], #-1897
    2238:	00784d49 	rsbseq	r4, r8, r9, asr #26
    223c:	5f4d4954 	svcpl	0x004d4954
    2240:	63726f46 	cmnvs	r2, #280	; 0x118
    2244:	63416465 	movtvs	r6, #5221	; 0x1465
    2248:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    224c:	4d495400 	cfstrdmi	mvd5, [r9]
    2250:	3243495f 	subcc	r4, r3, #1556480	; 0x17c000
    2254:	616c6f50 	cmnvs	ip, r0, asr pc
    2258:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    225c:	4d495400 	cfstrdmi	mvd5, [r9]
    2260:	7465535f 	strbtvc	r5, [r5], #-863
    2264:	50344349 	eorspl	r4, r4, r9, asr #6
    2268:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    226c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2270:	4d495400 	cfstrdmi	mvd5, [r9]
    2274:	616c535f 	cmnvs	ip, pc, asr r3
    2278:	6f4d6576 	svcvs	0x004d6576
    227c:	54006564 	strpl	r6, [r0], #-1380
    2280:	4f5f4d49 	svcmi	0x005f4d49
    2284:	53495353 	movtpl	r5, #37715	; 0x9353
    2288:	65746174 	ldrbvs	r6, [r4, #-372]!
    228c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2290:	00317263 	eorseq	r7, r1, r3, ror #4
    2294:	5f4d4954 	svcpl	0x004d4954
    2298:	65707954 	ldrbvs	r7, [r0, #-2388]!
    229c:	00666544 	rsbeq	r6, r6, r4, asr #10
    22a0:	5f4d4954 	svcpl	0x004d4954
    22a4:	4932434f 	ldmdbmi	r2!, {r0, r1, r2, r3, r6, r8, r9, lr}
    22a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    22ac:	5f4d4954 	svcpl	0x004d4954
    22b0:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    22b4:	6b636f6c 	blvs	18de06c <__Stack_Size+0x18ddc6c>
    22b8:	65646f4d 	strbvs	r6, [r4, #-3917]!
    22bc:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    22c0:	00676966 	rsbeq	r6, r7, r6, ror #18
    22c4:	5f314954 	svcpl	0x00314954
    22c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    22cc:	54006769 	strpl	r6, [r0], #-1897
    22d0:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    22d4:	61437465 	cmpvs	r3, r5, ror #8
    22d8:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    22dc:	54003265 	strpl	r3, [r0], #-613
    22e0:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    22e4:	61437465 	cmpvs	r3, r5, ror #8
    22e8:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    22ec:	54003365 	strpl	r3, [r0], #-869
    22f0:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    22f4:	61437465 	cmpvs	r3, r5, ror #8
    22f8:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    22fc:	54003465 	strpl	r3, [r0], #-1125
    2300:	445f4d49 	ldrbmi	r4, [pc], #3401	; 2308 <__Stack_Size+0x1f08>
    2304:	7542414d 	strbvc	r4, [r2, #-333]
    2308:	4c747372 	ldclmi	3, cr7, [r4], #-456
    230c:	74676e65 	strbtvc	r6, [r7], #-3685
    2310:	49540068 	ldmdbmi	r4, {r3, r5, r6}^
    2314:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    2318:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    231c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2320:	5f4d4954 	svcpl	0x004d4954
    2324:	61656c43 	cmnvs	r5, r3, asr #24
    2328:	34434f72 	strbcc	r4, [r3], #-3954
    232c:	00666552 	rsbeq	r6, r6, r2, asr r5
    2330:	5f4d4954 	svcpl	0x004d4954
    2334:	78525449 	ldmdavc	r2, {r0, r3, r6, sl, ip, lr}^
    2338:	65747845 	ldrbvs	r7, [r4, #-2117]!
    233c:	6c616e72 	stclvs	14, cr6, [r1], #-456
    2340:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2344:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2348:	00676966 	rsbeq	r6, r7, r6, ror #18
    234c:	5f4d4954 	svcpl	0x004d4954
    2350:	61656c43 	cmnvs	r5, r3, asr #24
    2354:	50544972 	subspl	r4, r4, r2, ror r9
    2358:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    235c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2360:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2364:	4d445f4d 	stclmi	15, cr5, [r4, #-308]
    2368:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    236c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2370:	5f4d4954 	svcpl	0x004d4954
    2374:	50525241 	subspl	r5, r2, r1, asr #4
    2378:	6f6c6572 	svcvs	0x006c6572
    237c:	6f436461 	svcvs	0x00436461
    2380:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2384:	6d747300 	ldclvs	3, cr7, [r4]
    2388:	31663233 	cmncc	r6, r3, lsr r2
    238c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2390:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2394:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    2398:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    239c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    23a0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    23a4:	5400632e 	strpl	r6, [r0], #-814
    23a8:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    23ac:	49525444 	ldmdbmi	r2, {r2, r6, sl, ip, lr}^
    23b0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    23b4:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    23b8:	6d740074 	ldclvs	0, cr0, [r4, #-464]!
    23bc:	65636370 	strbvs	r6, [r3, #-880]!
    23c0:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    23c4:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    23c8:	6f6c4374 	svcvs	0x006c4374
    23cc:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    23d0:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    23d4:	54006e6f 	strpl	r6, [r0], #-3695
    23d8:	4f5f4d49 	svcmi	0x005f4d49
    23dc:	61463243 	cmpvs	r6, r3, asr #4
    23e0:	6f437473 	svcvs	0x00437473
    23e4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    23e8:	4d495400 	cfstrdmi	mvd5, [r9]
    23ec:	6572425f 	ldrbvs	r4, [r2, #-607]!
    23f0:	6f506b61 	svcvs	0x00506b61
    23f4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    23f8:	54007974 	strpl	r7, [r0], #-2420
    23fc:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2400:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2404:	74754f74 	ldrbtvc	r4, [r5], #-3956
    2408:	54747570 	ldrbtpl	r7, [r4], #-1392
    240c:	67676972 	undefined
    2410:	54007265 	strpl	r7, [r0], #-613
    2414:	545f4d49 	ldrbpl	r4, [pc], #3401	; 241c <__Stack_Size+0x201c>
    2418:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    241c:	49657361 	stmdbmi	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    2420:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2424:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2428:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    242c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    2430:	7463656c 	strbtvc	r6, [r3], #-1388
    2434:	4d78434f 	ldclmi	3, cr4, [r8, #-316]!
    2438:	4d495400 	cfstrdmi	mvd5, [r9]
    243c:	414c465f 	cmpmi	ip, pc, asr r6
    2440:	49540047 	ldmdbmi	r4, {r0, r1, r2, r6}^
    2444:	4f4c5f4d 	svcmi	0x004c5f4d
    2448:	654c4b43 	strbvs	r4, [ip, #-2883]
    244c:	006c6576 	rsbeq	r6, ip, r6, ror r5
    2450:	5f4d4954 	svcpl	0x004d4954
    2454:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2458:	746e756f 	strbtvc	r7, [lr], #-1391
    245c:	54007265 	strpl	r7, [r0], #-613
    2460:	445f4d49 	ldrbmi	r4, [pc], #3401	; 2468 <__Stack_Size+0x2068>
    2464:	6f53414d 	svcvs	0x0053414d
    2468:	65637275 	strbvs	r7, [r3, #-629]!
    246c:	4d495400 	cfstrdmi	mvd5, [r9]
    2470:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    2474:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    2478:	65646f4d 	strbvs	r6, [r4, #-3917]!
    247c:	4d495400 	cfstrdmi	mvd5, [r9]
    2480:	5043495f 	subpl	r4, r3, pc, asr r9
    2484:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2488:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    248c:	4d495400 	cfstrdmi	mvd5, [r9]
    2490:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
    2494:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2498:	4d495400 	cfstrdmi	mvd5, [r9]
    249c:	4353505f 	cmpmi	r3, #95	; 0x5f
    24a0:	6f6c6552 	svcvs	0x006c6552
    24a4:	6f4d6461 	svcvs	0x004d6461
    24a8:	54006564 	strpl	r6, [r0], #-1380
    24ac:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    24b0:	6d437843 	stclvs	8, cr7, [r3, #-268]
    24b4:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    24b8:	65475f4d 	strbvs	r5, [r7, #-3917]
    24bc:	65725074 	ldrbvs	r5, [r2, #-116]!
    24c0:	6c616373 	stclvs	3, cr6, [r1], #-460
    24c4:	45007265 	strmi	r7, [r0, #-613]
    24c8:	52547478 	subspl	r7, r4, #2013265920	; 0x78000000
    24cc:	6c694647 	stclvs	6, cr4, [r9], #-284
    24d0:	00726574 	rsbseq	r6, r2, r4, ror r5
    24d4:	5f4d4954 	svcpl	0x004d4954
    24d8:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    24dc:	74696e49 	strbtvc	r6, [r9], #-3657
    24e0:	65707954 	ldrbvs	r7, [r0, #-2388]!
    24e4:	00666544 	rsbeq	r6, r6, r4, asr #10
    24e8:	5f4d4954 	svcpl	0x004d4954
    24ec:	656c6553 	strbvs	r6, [ip, #-1363]!
    24f0:	61487463 	cmpvs	r8, r3, ror #8
    24f4:	65536c6c 	ldrbvs	r6, [r3, #-3180]
    24f8:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    24fc:	4d495400 	cfstrdmi	mvd5, [r9]
    2500:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    2504:	74617265 	strbtvc	r7, [r1], #-613
    2508:	65764565 	ldrbvs	r4, [r6, #-1381]!
    250c:	5400746e 	strpl	r7, [r0], #-1134
    2510:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2514:	43497465 	movtmi	r7, #37989	; 0x9465
    2518:	65725032 	ldrbvs	r5, [r2, #-50]!
    251c:	6c616373 	stclvs	3, cr6, [r1], #-460
    2520:	54007265 	strpl	r7, [r0], #-613
    2524:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2528:	004e7843 	subeq	r7, lr, r3, asr #16
    252c:	5f4d4954 	svcpl	0x004d4954
    2530:	61657242 	cmnvs	r5, r2, asr #4
    2534:	4954006b 	ldmdbmi	r4, {r0, r1, r3, r5, r6}^
    2538:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    253c:	74784578 	ldrbtvc	r4, [r8], #-1400
    2540:	616e7265 	cmnvs	lr, r5, ror #4
    2544:	4b4c436c 	blmi	13132fc <__Stack_Size+0x1312efc>
    2548:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    254c:	54006563 	strpl	r6, [r0], #-1379
    2550:	545f4d49 	ldrbpl	r4, [pc], #3401	; 2558 <__Stack_Size+0x2158>
    2554:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    2558:	49657361 	stmdbmi	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    255c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2560:	5f4d4954 	svcpl	0x004d4954
    2564:	61647055 	qdsubvs	r7, r5, r4
    2568:	69446574 	stmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    256c:	6c626173 	stfvse	f6, [r2], #-460
    2570:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2574:	00676966 	rsbeq	r6, r7, r6, ror #18
    2578:	5f4d4954 	svcpl	0x004d4954
    257c:	61647055 	qdsubvs	r7, r5, r4
    2580:	6f536574 	svcvs	0x00536574
    2584:	65637275 	strbvs	r7, [r3, #-629]!
    2588:	4d495400 	cfstrdmi	mvd5, [r9]
    258c:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2590:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2594:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2598:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    259c:	6f435f33 	svcvs	0x00435f33
    25a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25a4:	4d495400 	cfstrdmi	mvd5, [r9]
    25a8:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    25ac:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    25b0:	65746e49 	ldrbvs	r6, [r4, #-3657]!
    25b4:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    25b8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    25bc:	00676966 	rsbeq	r6, r7, r6, ror #18
    25c0:	5f4d4954 	svcpl	0x004d4954
    25c4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    25c8:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!
    25cc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    25d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    25d4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    25d8:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    25dc:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    25e0:	65726170 	ldrbvs	r6, [r2, #-368]!
    25e4:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    25e8:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    25ec:	4f726165 	svcmi	0x00726165
    25f0:	65523343 	ldrbvs	r3, [r2, #-835]
    25f4:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    25f8:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    25fc:	696e4934 	stmdbvs	lr!, {r2, r4, r5, r8, fp, lr}^
    2600:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2604:	6f465f4d 	svcvs	0x00465f4d
    2608:	64656372 	strbtvs	r6, [r5], #-882
    260c:	4334434f 	teqmi	r4, #1006632961	; 0x3c000001
    2610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2614:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2618:	65475f4d 	strbvs	r5, [r7, #-3917]
    261c:	756f4374 	strbvc	r4, [pc, #-884]!	; 22b0 <__Stack_Size+0x1eb0>
    2620:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2624:	4d495400 	cfstrdmi	mvd5, [r9]
    2628:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    262c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2630:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2634:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2638:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    263c:	7463656c 	strbtvc	r6, [r3], #-1388
    2640:	76616c53 	undefined
    2644:	646f4d65 	strbtvs	r4, [pc], #3429	; 264c <__Stack_Size+0x224c>
    2648:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    264c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2650:	73614631 	cmnvc	r1, #51380224	; 0x3100000
    2654:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2658:	00676966 	rsbeq	r6, r7, r6, ror #18
    265c:	5f4d4954 	svcpl	0x004d4954
    2660:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    2664:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2668:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    266c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2670:	6f504e31 	svcvs	0x00504e31
    2674:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2678:	6f437974 	svcvs	0x00437974
    267c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2680:	4d495400 	cfstrdmi	mvd5, [r9]
    2684:	5043495f 	subpl	r4, r3, pc, asr r9
    2688:	54004353 	strpl	r4, [r0], #-851
    268c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 194b <__Stack_Size+0x154b>
    2690:	746e6576 	strbtvc	r6, [lr], #-1398
    2694:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2698:	74006563 	strvc	r6, [r0], #-1379
    269c:	6363706d 	cmnvs	r3, #109	; 0x6d
    26a0:	0031726d 	eorseq	r7, r1, sp, ror #4
    26a4:	63706d74 	cmnvs	r0, #7424	; 0x1d00
    26a8:	32726d63 	rsbscc	r6, r2, #6336	; 0x18c0
    26ac:	4d495400 	cfstrdmi	mvd5, [r9]
    26b0:	6168435f 	cmnvs	r8, pc, asr r3
    26b4:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    26b8:	4d495400 	cfstrdmi	mvd5, [r9]
    26bc:	6c65535f 	stclvs	3, cr5, [r5], #-380
    26c0:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    26c4:	54004d4f 	strpl	r4, [r0], #-3407
    26c8:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    26cc:	65725043 	ldrbvs	r5, [r2, #-67]!
    26d0:	64616f6c 	strbtvs	r6, [r1], #-3948
    26d4:	746e6f43 	strbtvc	r6, [lr], #-3907
    26d8:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    26dc:	706f6369 	rsbvc	r6, pc, r9, ror #6
    26e0:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    26e4:	65736574 	ldrbvs	r6, [r3, #-1396]!
    26e8:	7463656c 	strbtvc	r6, [r3], #-1388
    26ec:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    26f0:	5f4d4954 	svcpl	0x004d4954
    26f4:	65746e49 	ldrbvs	r6, [r4, #-3657]!
    26f8:	6c616e72 	stclvs	14, cr6, [r1], #-456
    26fc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2700:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2704:	00676966 	rsbeq	r6, r7, r6, ror #18
    2708:	5f4d4954 	svcpl	0x004d4954
    270c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2710:	72503143 	subsvc	r3, r0, #-1073741808	; 0xc0000010
    2714:	61637365 	cmnvs	r3, r5, ror #6
    2718:	0072656c 	rsbseq	r6, r2, ip, ror #10
    271c:	5f4d4954 	svcpl	0x004d4954
    2720:	00784343 	rsbseq	r4, r8, r3, asr #6
    2724:	5f4d4954 	svcpl	0x004d4954
    2728:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    272c:	72503343 	subsvc	r3, r0, #201326593	; 0xc000001
    2730:	61637365 	cmnvs	r3, r5, ror #6
    2734:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2738:	5f4d4954 	svcpl	0x004d4954
    273c:	65534349 	ldrbvs	r4, [r3, #-841]
    2740:	7463656c 	strbtvc	r6, [r3], #-1388
    2744:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2748:	5f4d4954 	svcpl	0x004d4954
    274c:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    2750:	6b636f6c 	blvs	18de508 <__Stack_Size+0x18de108>
    2754:	65646f4d 	strbvs	r6, [r4, #-3917]!
    2758:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    275c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2760:	63706d74 	cmnvs	r0, #7424	; 0x1d00
    2764:	78726d63 	ldmdavc	r2!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    2768:	4d495400 	cfstrdmi	mvd5, [r9]
    276c:	6c65535f 	stclvs	3, cr5, [r5], #-380
    2770:	4f746365 	svcmi	0x00746365
    2774:	7550656e 	ldrbvc	r6, [r0, #-1390]
    2778:	4d65736c 	stclmi	3, cr7, [r5, #-432]!
    277c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2780:	5f4d4954 	svcpl	0x004d4954
    2784:	4f475254 	svcmi	0x00475254
    2788:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    278c:	54006563 	strpl	r6, [r0], #-1379
    2790:	4f5f4d49 	svcmi	0x005f4d49
    2794:	53525353 	cmppl	r2, #1275068417	; 0x4c000001
    2798:	65746174 	ldrbvs	r6, [r4, #-372]!
    279c:	4d495400 	cfstrdmi	mvd5, [r9]
    27a0:	5043495f 	subpl	r4, r3, pc, asr r9
    27a4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    27a8:	00797469 	rsbseq	r7, r9, r9, ror #8
    27ac:	5f4d4954 	svcpl	0x004d4954
    27b0:	6c727443 	cfldrdvs	mvd7, [r2], #-268
    27b4:	4f4d5750 	svcmi	0x004d5750
    27b8:	75707475 	ldrbvc	r7, [r0, #-1141]!
    27bc:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    27c0:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    27c4:	7469736f 	strbtvc	r7, [r9], #-879
    27c8:	6c6f7065 	stclvs	0, cr7, [pc], #-404
    27cc:	74697261 	strbtvc	r7, [r9], #-609
    27d0:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    27d4:	44425f4d 	strbmi	r5, [r2], #-3917
    27d8:	6f435254 	svcvs	0x00435254
    27dc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    27e0:	4d495400 	cfstrdmi	mvd5, [r9]
    27e4:	656c435f 	strbvs	r4, [ip, #-863]!
    27e8:	434f7261 	movtmi	r7, #62049	; 0xf261
    27ec:	66655232 	undefined
    27f0:	4d495400 	cfstrdmi	mvd5, [r9]
    27f4:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    27f8:	65747845 	ldrbvs	r7, [r4, #-2117]!
    27fc:	6c616e72 	stclvs	14, cr6, [r1], #-456
    2800:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2804:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2808:	00676966 	rsbeq	r6, r7, r6, ror #18
    280c:	5f4d4954 	svcpl	0x004d4954
    2810:	7473614d 	ldrbtvc	r6, [r3], #-333
    2814:	6c537265 	lfmvs	f7, 2, [r3], {101}
    2818:	4d657661 	stclmi	6, cr7, [r5, #-388]!
    281c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2820:	5f4d4954 	svcpl	0x004d4954
    2824:	6f747541 	svcvs	0x00747541
    2828:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    282c:	74754f63 	ldrbtvc	r4, [r5], #-3939
    2830:	00747570 	rsbseq	r7, r4, r0, ror r5
    2834:	5f4d4954 	svcpl	0x004d4954
    2838:	41746553 	cmnmi	r4, r3, asr r5
    283c:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    2840:	616f6c65 	cmnvs	pc, r5, ror #24
    2844:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    2848:	4d445f4d 	stclmi	15, cr5, [r4, #-308]
    284c:	646d4341 	strbtvs	r4, [sp], #-833
    2850:	4d495400 	cfstrdmi	mvd5, [r9]
    2854:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!
    2858:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    285c:	72745365 	rsbsvc	r5, r4, #-1811939327	; 0x94000001
    2860:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2864:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2868:	5f4d4954 	svcpl	0x004d4954
    286c:	6f435449 	svcvs	0x00435449
    2870:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2874:	4d495400 	cfstrdmi	mvd5, [r9]
    2878:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    287c:	4f646563 	svcmi	0x00646563
    2880:	6f433143 	svcvs	0x00433143
    2884:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2888:	34495400 	strbcc	r5, [r9], #-1024
    288c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    2890:	00676966 	rsbeq	r6, r7, r6, ror #18
    2894:	5f4d4954 	svcpl	0x004d4954
    2898:	64616544 	strbtvs	r6, [r1], #-1348
    289c:	656d6954 	strbvs	r6, [sp, #-2388]!
    28a0:	4d495400 	cfstrdmi	mvd5, [r9]
    28a4:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    28a8:	74696e49 	strbtvc	r6, [r9], #-3657
    28ac:	4d495400 	cfstrdmi	mvd5, [r9]
    28b0:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    28b4:	6c6f504e 	stclvs	0, cr5, [pc], #-312
    28b8:	74697261 	strbtvc	r7, [r9], #-609
    28bc:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    28c0:	00676966 	rsbeq	r6, r7, r6, ror #18
    28c4:	5f4d4954 	svcpl	0x004d4954
    28c8:	5034434f 	eorspl	r4, r4, pc, asr #6
    28cc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    28d0:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    28d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    28d8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    28dc:	44425f4d 	strbmi	r5, [r2], #-3917
    28e0:	74535254 	ldrbvc	r5, [r3], #-596
    28e4:	74637572 	strbtvc	r7, [r3], #-1394
    28e8:	74696e49 	strbtvc	r6, [r9], #-3657
    28ec:	4d495400 	cfstrdmi	mvd5, [r9]
    28f0:	656c435f 	strbvs	r4, [ip, #-863]!
    28f4:	434f7261 	movtmi	r7, #62049	; 0xf261
    28f8:	66655231 	undefined
    28fc:	4d495400 	cfstrdmi	mvd5, [r9]
    2900:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2904:	616c6f50 	cmnvs	ip, r0, asr pc
    2908:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    290c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2910:	54006769 	strpl	r6, [r0], #-1897
    2914:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1bd3 <__Stack_Size+0x17d3>
    2918:	52547478 	subspl	r7, r4, #2013265920	; 0x78000000
    291c:	6c6f5047 	stclvs	0, cr5, [pc], #-284
    2920:	74697261 	strbtvc	r7, [r9], #-609
    2924:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2928:	57505f4d 	ldrbpl	r5, [r0, -sp, asr #30]
    292c:	6f43494d 	svcvs	0x0043494d
    2930:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2934:	4d495400 	cfstrdmi	mvd5, [r9]
    2938:	7465475f 	strbtvc	r4, [r5], #-1887
    293c:	74535449 	ldrbvc	r5, [r3], #-1097
    2940:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2944:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2948:	00327263 	eorseq	r7, r2, r3, ror #4
    294c:	5f4d4954 	svcpl	0x004d4954
    2950:	54005449 	strpl	r5, [r0], #-1097
    2954:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2958:	6563726f 	strbvs	r7, [r3, #-623]!
    295c:	33434f64 	movtcc	r4, #16228	; 0x3f64
    2960:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2964:	54006769 	strpl	r6, [r0], #-1897
    2968:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    296c:	5400646d 	strpl	r6, [r0], #-1133
    2970:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    2974:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    2978:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    297c:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    2980:	746c6946 	strbtvc	r6, [ip], #-2374
    2984:	54007265 	strpl	r7, [r0], #-613
    2988:	535f4d49 	cmppl	pc, #4672	; 0x1240
    298c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2990:	73614d74 	cmnvc	r1, #7424	; 0x1d00
    2994:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    2998:	6576616c 	ldrbvs	r6, [r6, #-364]!
    299c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    29a0:	4d495400 	cfstrdmi	mvd5, [r9]
    29a4:	6c65535f 	stclvs	3, cr5, [r5], #-380
    29a8:	49746365 	ldmdbmi	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    29ac:	7475706e 	ldrbtvc	r7, [r5], #-110
    29b0:	67697254 	undefined
    29b4:	00726567 	rsbseq	r6, r2, r7, ror #10
    29b8:	5f4d4954 	svcpl	0x004d4954
    29bc:	73657250 	cmnvc	r5, #5	; 0x5
    29c0:	656c6163 	strbvs	r6, [ip, #-355]!
    29c4:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    29c8:	00676966 	rsbeq	r6, r7, r6, ror #18
    29cc:	5f4d4954 	svcpl	0x004d4954
    29d0:	5032434f 	eorspl	r4, r2, pc, asr #6
    29d4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    29d8:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    29dc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    29e0:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    29e4:	65676574 	strbvs	r6, [r7, #-1396]!
    29e8:	76696472 	undefined
    29ec:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    29f0:	41535500 	cmpmi	r3, r0, lsl #10
    29f4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    29f8:	00414850 	subeq	r4, r1, r0, asr r8
    29fc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2a00:	65535f54 	ldrbvs	r5, [r3, #-3924]
    2a04:	65725074 	ldrbvs	r5, [r2, #-116]!
    2a08:	6c616373 	stclvs	3, cr6, [r1], #-460
    2a0c:	55007265 	strpl	r7, [r0, #-613]
    2a10:	54524153 	ldrbpl	r4, [r2], #-339
    2a14:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2a18:	53550074 	cmppl	r5, #116	; 0x74
    2a1c:	5f545241 	svcpl	0x00545241
    2a20:	424e494c 	submi	r4, lr, #1245184	; 0x130000
    2a24:	6b616572 	blvs	185bff4 <__Stack_Size+0x185bbf4>
    2a28:	65746544 	ldrbvs	r6, [r4, #-1348]!
    2a2c:	654c7463 	strbvs	r7, [ip, #-1123]
    2a30:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2a34:	41535500 	cmpmi	r3, r0, lsl #10
    2a38:	545f5452 	ldrbpl	r5, [pc], #1106	; 2a40 <__Stack_Size+0x2640>
    2a3c:	44657079 	strbtmi	r7, [r5], #-121
    2a40:	55006665 	strpl	r6, [r0, #-1637]
    2a44:	54524153 	ldrbpl	r4, [r2], #-339
    2a48:	6f6c435f 	svcvs	0x006c435f
    2a4c:	6e496b63 	fnmacdvs	d22, d9, d19
    2a50:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2a54:	65446570 	strbvs	r6, [r4, #-1392]
    2a58:	53550066 	cmppl	r5, #102	; 0x66
    2a5c:	5f545241 	svcpl	0x00545241
    2a60:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2a64:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2a68:	65535f54 	ldrbvs	r5, [r3, #-3924]
    2a6c:	6144646e 	cmpvs	r4, lr, ror #8
    2a70:	55006174 	strpl	r6, [r0, #-372]
    2a74:	54524153 	ldrbpl	r4, [r2], #-339
    2a78:	6c61485f 	stclvs	8, cr4, [r1], #-380
    2a7c:	70754466 	rsbsvc	r4, r5, r6, ror #8
    2a80:	4378656c 	cmnmi	r8, #452984832	; 0x1b000000
    2a84:	5500646d 	strpl	r6, [r0, #-1133]
    2a88:	54524153 	ldrbpl	r4, [r2], #-339
    2a8c:	6b61575f 	blvs	1858810 <__Stack_Size+0x1858410>
    2a90:	00705565 	rsbseq	r5, r0, r5, ror #10
    2a94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2a98:	4d445f54 	stclmi	15, cr5, [r4, #-336]
    2a9c:	646d4341 	strbtvs	r4, [sp], #-833
    2aa0:	41535500 	cmpmi	r3, r0, lsl #10
    2aa4:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    2aa8:	42747361 	rsbsmi	r7, r4, #-2080374783	; 0x84000001
    2aac:	55007469 	strpl	r7, [r0, #-1129]
    2ab0:	54524153 	ldrbpl	r4, [r2], #-339
    2ab4:	4472495f 	ldrbtmi	r4, [r2], #-2399
    2ab8:	646f4d41 	strbtvs	r4, [pc], #3393	; 2ac0 <__Stack_Size+0x26c0>
    2abc:	70610065 	rsbvc	r0, r1, r5, rrx
    2ac0:	6f6c6362 	svcvs	0x006c6362
    2ac4:	55006b63 	strpl	r6, [r0, #-2915]
    2ac8:	54524153 	ldrbpl	r4, [r2], #-339
    2acc:	656c435f 	strbvs	r4, [ip, #-863]!
    2ad0:	54497261 	strbpl	r7, [r9], #-609
    2ad4:	646e6550 	strbtvs	r6, [lr], #-1360
    2ad8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2adc:	55007469 	strpl	r7, [r0, #-1129]
    2ae0:	54524153 	ldrbpl	r4, [r2], #-339
    2ae4:	6175475f 	cmnvs	r5, pc, asr r7
    2ae8:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    2aec:	5500656d 	strpl	r6, [r0, #-1389]
    2af0:	54524153 	ldrbpl	r4, [r2], #-339
    2af4:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2af8:	61657242 	cmnvs	r5, r2, asr #4
    2afc:	7465446b 	strbtvc	r4, [r5], #-1131
    2b00:	4c746365 	ldclmi	3, cr6, [r4], #-404
    2b04:	74676e65 	strbtvc	r6, [r7], #-3685
    2b08:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    2b0c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2b10:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2b14:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    2b18:	55004741 	strpl	r4, [r0, #-1857]
    2b1c:	54524153 	ldrbpl	r4, [r2], #-339
    2b20:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2b24:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2b28:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2b2c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2b30:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2b34:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2b38:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2b3c:	53550074 	cmppl	r5, #116	; 0x74
    2b40:	5f545241 	svcpl	0x00545241
    2b44:	52414d44 	subpl	r4, r1, #4352	; 0x1100
    2b48:	55007165 	strpl	r7, [r0, #-357]
    2b4c:	54524153 	ldrbpl	r4, [r2], #-339
    2b50:	6f6c435f 	svcvs	0x006c435f
    2b54:	74536b63 	ldrbvc	r6, [r3], #-2915
    2b58:	74637572 	strbtvc	r7, [r3], #-1394
    2b5c:	74696e49 	strbtvc	r6, [r9], #-3657
    2b60:	61737500 	cmnvs	r3, r0, lsl #10
    2b64:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    2b68:	00657361 	rsbeq	r7, r5, r1, ror #6
    2b6c:	5f434352 	svcpl	0x00434352
    2b70:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2b74:	7453736b 	ldrbvc	r7, [r3], #-875
    2b78:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2b7c:	41535500 	cmpmi	r3, r0, lsl #10
    2b80:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2b84:	64417465 	strbvs	r7, [r1], #-1125
    2b88:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    2b8c:	53550073 	cmppl	r5, #115	; 0x73
    2b90:	5f545241 	svcpl	0x00545241
    2b94:	47746553 	undefined
    2b98:	64726175 	ldrbtvs	r6, [r2], #-373
    2b9c:	656d6954 	strbvs	r6, [sp, #-2388]!
    2ba0:	41535500 	cmpmi	r3, r0, lsl #10
    2ba4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ba8:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    2bac:	6b616572 	blvs	185c17c <__Stack_Size+0x185bd7c>
    2bb0:	41535500 	cmpmi	r3, r0, lsl #10
    2bb4:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2bb8:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    2bbc:	00676966 	rsbeq	r6, r7, r6, ror #18
    2bc0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2bc4:	55007854 	strpl	r7, [r0, #-2132]
    2bc8:	54524153 	ldrbpl	r4, [r2], #-339
    2bcc:	616d535f 	cmnvs	sp, pc, asr r3
    2bd0:	61437472 	cmpvs	r3, r2, ror r4
    2bd4:	6d436472 	cfstrdvs	mvd6, [r3, #-456]
    2bd8:	53550064 	cmppl	r5, #100	; 0x64
    2bdc:	5f545241 	svcpl	0x00545241
    2be0:	74696e49 	strbtvc	r6, [r9], #-3657
    2be4:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2be8:	55007463 	strpl	r7, [r0, #-1123]
    2bec:	54524153 	ldrbpl	r4, [r2], #-339
    2bf0:	6464415f 	strbtvs	r4, [r4], #-351
    2bf4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2bf8:	74696200 	strbtvc	r6, [r9], #-512
    2bfc:	00736f70 	rsbseq	r6, r3, r0, ror pc
    2c00:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2c04:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2c08:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2c0c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2c10:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2c14:	65475f54 	strbvs	r5, [r7, #-3924]
    2c18:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    2c1c:	75746174 	ldrbvc	r6, [r4, #-372]!
    2c20:	53550073 	cmppl	r5, #115	; 0x73
    2c24:	5f545241 	svcpl	0x00545241
    2c28:	41447249 	cmpmi	r4, r9, asr #4
    2c2c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2c30:	55006769 	strpl	r6, [r0, #-1897]
    2c34:	54524153 	ldrbpl	r4, [r2], #-339
    2c38:	6f6c435f 	svcvs	0x006c435f
    2c3c:	55006b63 	strpl	r6, [r0, #-2915]
    2c40:	54524153 	ldrbpl	r4, [r2], #-339
    2c44:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2c48:	65766965 	ldrbvs	r6, [r6, #-2405]!
    2c4c:	6b615772 	blvs	1858a1c <__Stack_Size+0x185861c>
    2c50:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2c54:	5500646d 	strpl	r6, [r0, #-1133]
    2c58:	54524153 	ldrbpl	r4, [r2], #-339
    2c5c:	4472495f 	ldrbtmi	r4, [r2], #-2399
    2c60:	646d4341 	strbtvs	r4, [sp], #-833
    2c64:	41535500 	cmpmi	r3, r0, lsl #10
    2c68:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    2c6c:	6d434e49 	stclvs	14, cr4, [r3, #-292]
    2c70:	72660064 	rsbvc	r0, r6, #100	; 0x64
    2c74:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    2c78:	6c616e6f 	stclvs	14, cr6, [r1], #-444
    2c7c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    2c80:	00726564 	rsbseq	r6, r2, r4, ror #10
    2c84:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2c88:	6d535f54 	ldclvs	15, cr5, [r3, #-336]
    2c8c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2c90:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    2c94:	434b4341 	movtmi	r4, #45889	; 0xb341
    2c98:	5500646d 	strpl	r6, [r0, #-1133]
    2c9c:	54524153 	ldrbpl	r4, [r2], #-339
    2ca0:	7465475f 	strbtvc	r4, [r5], #-1887
    2ca4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2ca8:	74617453 	strbtvc	r7, [r1], #-1107
    2cac:	55007375 	strpl	r7, [r0, #-885]
    2cb0:	54524153 	ldrbpl	r4, [r2], #-339
    2cb4:	0054495f 	subseq	r4, r4, pc, asr r9
    2cb8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2cbc:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2cc0:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2cc4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2cc8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ccc:	61575f54 	cmpvs	r7, r4, asr pc
    2cd0:	7055656b 	subsvc	r6, r5, fp, ror #10
    2cd4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2cd8:	55006769 	strpl	r6, [r0, #-1897]
    2cdc:	54524153 	ldrbpl	r4, [r2], #-339
    2ce0:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2ce4:	65766965 	ldrbvs	r6, [r6, #-2405]!
    2ce8:	61746144 	cmnvs	r4, r4, asr #2
    2cec:	41535500 	cmpmi	r3, r0, lsl #10
    2cf0:	505f5452 	subspl	r5, pc, r2, asr r4
    2cf4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2cf8:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2cfc:	41535500 	cmpmi	r3, r0, lsl #10
    2d00:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2d04:	004c4f50 	subeq	r4, ip, r0, asr pc
    2d08:	616d7469 	cmnvs	sp, r9, ror #8
    2d0c:	73006b73 	movwvc	r6, #2931	; 0xb73
    2d10:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2d14:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2d18:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2d1c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2d20:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    2d24:	31663233 	cmncc	r6, r3, lsr r2
    2d28:	755f7830 	ldrbvc	r7, [pc, #-2096]	; 2500 <__Stack_Size+0x2100>
    2d2c:	74726173 	ldrbtvc	r6, [r2], #-371
    2d30:	7500632e 	strvc	r6, [r0, #-814]
    2d34:	74726173 	ldrbtvc	r6, [r2], #-371
    2d38:	00676572 	rsbeq	r6, r7, r2, ror r5
    2d3c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2d40:	74535f54 	ldrbvc	r5, [r3], #-3924
    2d44:	74637572 	strbtvc	r7, [r3], #-1394
    2d48:	74696e49 	strbtvc	r6, [r9], #-3657
    2d4c:	73655f00 	cmnvc	r5, #0	; 0x0
    2d50:	6b636174 	blvs	18db328 <__Stack_Size+0x18daf28>
    2d54:	64735f00 	ldrbtvs	r5, [r3], #-3840
    2d58:	00617461 	rsbeq	r7, r1, r1, ror #8
    2d5c:	65736552 	ldrbvs	r6, [r3, #-1362]!
    2d60:	61485f74 	cmpvs	r8, r4, ror pc
    2d64:	656c646e 	strbvs	r6, [ip, #-1134]!
    2d68:	75700072 	ldrbvc	r0, [r0, #-114]!
    2d6c:	7365446c 	cmnvc	r5, #1811939328	; 0x6c000000
    2d70:	735f0074 	cmpvc	pc, #116	; 0x74
    2d74:	74616469 	strbtvc	r6, [r1], #-1129
    2d78:	655f0061 	ldrbvs	r0, [pc, #-97]	; 2d1f <__Stack_Size+0x291f>
    2d7c:	00737362 	rsbseq	r7, r3, r2, ror #6
    2d80:	6164655f 	cmnvs	r4, pc, asr r5
    2d84:	73006174 	movwvc	r6, #372	; 0x174
    2d88:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2d8c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2d90:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2d94:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2d98:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    2d9c:	31663233 	cmncc	r6, r3, lsr r2
    2da0:	765f7830 	undefined
    2da4:	6f746365 	svcvs	0x00746365
    2da8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    2dac:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
    2db0:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
    2db4:	73726f74 	cmnvc	r2, #464	; 0x1d0
    2db8:	6c757000 	ldclvs	0, cr7, [r5]
    2dbc:	00637253 	rsbeq	r7, r3, r3, asr r2
    2dc0:	7362735f 	cmnvc	r2, #2080374785	; 0x7c000001
    2dc4:	6f6c0073 	svcvs	0x006c0073
    2dc8:	6c20676e 	stcvs	7, cr6, [r0], #-440
    2dcc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    2dd0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2dd4:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    2dd8:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    2ddc:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    2de0:	646c6975 	strbtvs	r6, [ip], #-2421
    2de4:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    2de8:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    2dec:	615c646c 	cmpvs	ip, ip, ror #8
    2df0:	652d6d72 	strvs	r6, [sp, #-3442]!
    2df4:	5c696261 	sfmpl	f6, 2, [r9], #-388
    2df8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2dfc:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    2e00:	5c636269 	sfmpl	f6, 2, [r3], #-420
    2e04:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    2e08:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
    2e0c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2e10:	2f2e2e2f 	svccs	0x002e2e2f
    2e14:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2e18:	63672f2e 	cmnvs	r7, #184	; 0xb8
    2e1c:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    2e20:	2f302e33 	svccs	0x00302e33
    2e24:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2e28:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2e2c:	2f636269 	svccs	0x00636269
    2e30:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    2e34:	612f6269 	teqvs	pc, r9, ror #4
    2e38:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2e3c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2e40:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    2e44:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
    2e48:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
    2e4c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    2e50:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
    2e54:	5f00746e 	svcpl	0x0000746e
    2e58:	5f74655f 	svcpl	0x0074655f
    2e5c:	00617863 	rsbeq	r7, r1, r3, ror #16
    2e60:	74655f5f 	strbtvc	r5, [r5], #-3935
    2e64:	656e6f5f 	strbvs	r6, [lr, #-3935]!
    2e68:	00746978 	rsbseq	r6, r4, r8, ror r9
    2e6c:	74615f5f 	strbtvc	r5, [r1], #-3935
    2e70:	74697865 	strbtvc	r7, [r9], #-2149
    2e74:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2e78:	5f007365 	svcpl	0x00007365
    2e7c:	5f74655f 	svcpl	0x0074655f
    2e80:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    2e84:	5f007469 	svcpl	0x00007469
    2e88:	5f6f7364 	svcpl	0x006f7364
    2e8c:	646e6168 	strbtvs	r6, [lr], #-360
    2e90:	2e00656c 	cfsh32cs	mvfx6, mvfx0, #60
    2e94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2e98:	2f2e2e2f 	svccs	0x002e2e2f
    2e9c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2ea0:	63672f2e 	cmnvs	r7, #184	; 0xb8
    2ea4:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    2ea8:	2f302e33 	svccs	0x00302e33
    2eac:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2eb0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2eb4:	2f636269 	svccs	0x00636269
    2eb8:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    2ebc:	652f6269 	strvs	r6, [pc, #-617]!	; 2c5b <__Stack_Size+0x285b>
    2ec0:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    2ec4:	735f0063 	cmpvc	pc, #99	; 0x63
    2ec8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2ecc:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    2ed0:	00383464 	eorseq	r3, r8, r4, ror #8
    2ed4:	656d655f 	strbvs	r6, [sp, #-1375]!
    2ed8:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
    2edc:	5f007963 	svcpl	0x00007963
    2ee0:	74726377 	ldrbtvc	r6, [r2], #-887
    2ee4:	5f626d6f 	svcpl	0x00626d6f
    2ee8:	74617473 	strbtvc	r7, [r1], #-1139
    2eec:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
    2ef0:	74727363 	ldrbtvc	r7, [r2], #-867
    2ef4:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
    2ef8:	6174735f 	cmnvs	r4, pc, asr r3
    2efc:	5f006574 	svcpl	0x00006574
    2f00:	7366626c 	cmnvc	r6, #-1073741818	; 0xc0000006
    2f04:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2f08:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
    2f0c:	63776f74 	cmnvs	r7, #464	; 0x1d0
    2f10:	6174735f 	cmnvs	r4, pc, asr r3
    2f14:	5f006574 	svcpl	0x00006574
    2f18:	6f746377 	svcvs	0x00746377
    2f1c:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    2f20:	65746174 	ldrbvs	r6, [r4, #-372]!
    2f24:	745f5f00 	ldrbvc	r5, [pc], #3840	; 2f2c <__Stack_Size+0x2b2c>
    2f28:	65735f6d 	ldrbvs	r5, [r3, #-3949]!
    2f2c:	755f0063 	ldrbvc	r0, [pc, #-99]	; 2ed1 <__Stack_Size+0x2ad1>
    2f30:	00667562 	rsbeq	r7, r6, r2, ror #10
    2f34:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    2f38:	5f5f0065 	svcpl	0x005f0065
    2f3c:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    2f40:	0072756f 	rsbseq	r7, r2, pc, ror #10
    2f44:	66735f5f 	uhsubaddxvs	r5, r3, pc
    2f48:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
    2f4c:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    2f50:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    2f54:	5f007367 	svcpl	0x00007367
    2f58:	6b6f6f63 	blvs	1bdecec <__Stack_Size+0x1bde8ec>
    2f5c:	5f006569 	svcpl	0x00006569
    2f60:	6c67735f 	stclvs	3, cr7, [r7], #-380
    2f64:	5f006575 	svcpl	0x00006575
    2f68:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    2f6c:	695f0073 	ldmdbvs	pc, {r0, r1, r4, r5, r6}^
    2f70:	78635f73 	stmdavc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2f74:	735f0061 	cmpvc	pc, #97	; 0x61
    2f78:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2f7c:	6c625f00 	stclvs	15, cr5, [r2]
    2f80:	7a69736b 	bvc	1a5fd34 <__Stack_Size+0x1a5f934>
    2f84:	635f0065 	cmpvs	pc, #101	; 0x65
    2f88:	75627476 	strbvc	r7, [r2, #-1142]!
    2f8c:	6f5f0066 	svcvs	0x005f0066
    2f90:	65736666 	ldrbvs	r6, [r3, #-1638]!
    2f94:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]
    2f98:	74727362 	ldrbtvc	r7, [r2], #-866
    2f9c:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
    2fa0:	6174735f 	cmnvs	r4, pc, asr r3
    2fa4:	5f006574 	svcpl	0x00006574
    2fa8:	6c72626d 	lfmvs	f6, 2, [r2], #-436
    2fac:	735f6e65 	cmpvc	pc, #1616	; 0x650
    2fb0:	65746174 	ldrbvs	r6, [r4, #-372]!
    2fb4:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    2fb8:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    2fbc:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    2fc0:	735f0073 	cmpvc	pc, #115	; 0x73
    2fc4:	006e6769 	rsbeq	r6, lr, r9, ror #14
    2fc8:	6f6c665f 	svcvs	0x006c665f
    2fcc:	745f6b63 	ldrbvc	r6, [pc], #2915	; 2fd4 <__Stack_Size+0x2bd4>
    2fd0:	74735f00 	ldrbtvc	r5, [r3], #-3840
    2fd4:	72726564 	rsbsvc	r6, r2, #419430400	; 0x19000000
    2fd8:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
    2fdc:	746e6967 	strbtvc	r6, [lr], #-2407
    2fe0:	65725f00 	ldrbvs	r5, [r2, #-3840]!
    2fe4:	5f006461 	svcpl	0x00006461
    2fe8:	75736572 	ldrbvc	r6, [r3, #-1394]!
    2fec:	6b5f746c 	blvs	17e01a4 <__Stack_Size+0x17dfda4>
    2ff0:	745f5f00 	ldrbvc	r5, [pc], #3840	; 2ff8 <__Stack_Size+0x2bf8>
    2ff4:	5f5f006d 	svcpl	0x005f006d
    2ff8:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
    2ffc:	74735f00 	ldrbtvc	r5, [r3], #-3840
    3000:	74756f64 	ldrbtvc	r6, [r5], #-3940
    3004:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
    3008:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
    300c:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
    3010:	5f00656c 	svcpl	0x0000656c
    3014:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
    3018:	615f0073 	cmpvs	pc, r3, ror r0
    301c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3020:	5f003074 	svcpl	0x00003074
    3024:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    3028:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    302c:	5f006675 	svcpl	0x00006675
    3030:	74637361 	strbtvc	r7, [r3], #-865
    3034:	5f656d69 	svcpl	0x00656d69
    3038:	00667562 	rsbeq	r7, r6, r2, ror #10
    303c:	63775f5f 	cmnvs	r7, #380	; 0x17c
    3040:	69770068 	ldmdbvs	r7!, {r3, r5, r6}^
    3044:	745f746e 	ldrbvc	r7, [pc], #1134	; 304c <__Stack_Size+0x2c4c>
    3048:	6f6c5f00 	svcvs	0x006c5f00
    304c:	5f006b63 	svcpl	0x00006b63
    3050:	746c756d 	strbtvc	r7, [ip], #-1389
    3054:	72775f00 	rsbsvc	r5, r7, #0	; 0x0
    3058:	00657469 	rsbeq	r7, r5, r9, ror #8
    305c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    3060:	6165795f 	cmnvs	r5, pc, asr r9
    3064:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
    3068:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
    306c:	745f5f00 	ldrbvc	r5, [pc], #3840	; 3074 <__Stack_Size+0x2c74>
    3070:	6f6d5f6d 	svcvs	0x006d5f6d
    3074:	5f5f006e 	svcpl	0x005f006e
    3078:	64696473 	strbtvs	r6, [r9], #-1139
    307c:	74696e69 	strbtvc	r6, [r9], #-3689
    3080:	61675f00 	cmnvs	r7, r0, lsl #30
    3084:	5f616d6d 	svcpl	0x00616d6d
    3088:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    308c:	006d6167 	rsbeq	r6, sp, r7, ror #2
    3090:	6572665f 	ldrbvs	r6, [r2, #-1631]!
    3094:	73696c65 	cmnvc	r9, #25856	; 0x6500
    3098:	4c5f0074 	mrrcmi	0, 7, r0, pc, cr4
    309c:	5f4b434f 	svcpl	0x004b434f
    30a0:	55434552 	strbpl	r4, [r3, #-1362]
    30a4:	56495352 	undefined
    30a8:	00545f45 	subseq	r5, r4, r5, asr #30
    30ac:	77656e5f 	undefined
    30b0:	745f5f00 	ldrbvc	r5, [pc], #3840	; 30b8 <__Stack_Size+0x2cb8>
    30b4:	64795f6d 	ldrbtvs	r5, [r9], #-3949
    30b8:	5f007961 	svcpl	0x00007961
    30bc:	7562735f 	strbvc	r7, [r2, #-863]!
    30c0:	695f0066 	ldmdbvs	pc, {r1, r2, r5, r6}^
    30c4:	0073626f 	rsbseq	r6, r3, pc, ror #4
    30c8:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    30cc:	5f00454c 	svcpl	0x0000454c
    30d0:	7473626d 	ldrbtvc	r6, [r3], #-621
    30d4:	5f657461 	svcpl	0x00657461
    30d8:	5f5f0074 	svcpl	0x005f0074
    30dc:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
    30e0:	725f0045 	subsvc	r0, pc, #69	; 0x45
    30e4:	5f646e61 	svcpl	0x00646e61
    30e8:	7478656e 	ldrbtvc	r6, [r8], #-1390
    30ec:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    30f0:	5f6e656c 	svcpl	0x006e656c
    30f4:	74617473 	strbtvc	r7, [r1], #-1139
    30f8:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^
    30fc:	5f00636e 	svcpl	0x0000636e
    3100:	00646e69 	rsbeq	r6, r4, r9, ror #28
    3104:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    3108:	746e6572 	strbtvc	r6, [lr], #-1394
    310c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3110:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3114:	6c635f5f 	stclvs	15, cr5, [r3], #-380
    3118:	756e6165 	strbvc	r6, [lr, #-357]!
    311c:	6d5f0070 	ldclvs	0, cr0, [pc, #-448]
    3120:	64777861 	ldrbtvs	r7, [r7], #-2145
    3124:	725f0073 	subsvc	r0, pc, #115	; 0x73
    3128:	746e6565 	strbtvc	r6, [lr], #-1381
    312c:	65735f00 	ldrbvs	r5, [r3, #-3840]!
    3130:	5f006465 	svcpl	0x00006465
    3134:	756f635f 	strbvc	r6, [pc, #-863]!	; 2ddd <__Stack_Size+0x29dd>
    3138:	5f00746e 	svcpl	0x0000746e
    313c:	6c61765f 	stclvs	6, cr7, [r1], #-380
    3140:	5f006575 	svcpl	0x00006575
    3144:	6b656573 	blvs	195c718 <__Stack_Size+0x195c318>
    3148:	70665f00 	rsbvc	r5, r6, r0, lsl #30
    314c:	745f736f 	ldrbvc	r7, [pc], #879	; 3154 <__Stack_Size+0x2d54>
    3150:	72655f00 	rsbvc	r5, r5, #0	; 0x0
    3154:	006f6e72 	rsbeq	r6, pc, r2, ror lr
    3158:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    315c:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    3160:	74735f00 	ldrbtvc	r5, [r3], #-3840
    3164:	6b6f7472 	blvs	1be0334 <__Stack_Size+0x1bdff34>
    3168:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
    316c:	665f0074 	undefined
    3170:	7079746e 	rsbsvc	r7, r9, lr, ror #8
    3174:	5f007365 	svcpl	0x00007365
    3178:	00646461 	rsbeq	r6, r4, r1, ror #8
    317c:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15
    3180:	00676e6f 	rsbeq	r6, r7, pc, ror #28
    3184:	7465675f 	strbtvc	r6, [r5], #-1887
    3188:	65746164 	ldrbvs	r6, [r4, #-356]!
    318c:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    3190:	6c675f00 	stclvs	15, cr5, [r7]
    3194:	6c61626f 	sfmvs	f6, 2, [r1], #-444
    3198:	706d695f 	rsbvc	r6, sp, pc, asr r9
    319c:	5f657275 	svcpl	0x00657275
    31a0:	00727470 	rsbseq	r7, r2, r0, ror r4
    31a4:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    31a8:	746e6572 	strbtvc	r6, [lr], #-1394
    31ac:	7461635f 	strbtvc	r6, [r1], #-863
    31b0:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
    31b4:	6f630079 	svcvs	0x00630079
    31b8:	5f006564 	svcpl	0x00006564
    31bc:	73756e75 	cmnvc	r5, #1872	; 0x750
    31c0:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
    31c4:	00646e61 	rsbeq	r6, r4, r1, ror #28
    31c8:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
    31cc:	745f5f00 	ldrbvc	r5, [pc], #3840	; 31d4 <__Stack_Size+0x2dd4>
    31d0:	64775f6d 	ldrbtvs	r5, [r7], #-3949
    31d4:	5f007961 	svcpl	0x00007961
    31d8:	65756c67 	ldrbvs	r6, [r5, #-3175]!
    31dc:	6d6e5f00 	stclvs	15, cr5, [lr]
    31e0:	6f6c6c61 	svcvs	0x006c6c61
    31e4:	6c5f0063 	mrrcvs	0, 6, r0, pc, cr3
    31e8:	5f613436 	svcpl	0x00613436
    31ec:	00667562 	rsbeq	r7, r6, r2, ror #10
    31f0:	6769735f 	undefined
    31f4:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    31f8:	6e5f0063 	cdpvs	0, 5, cr0, cr15, cr3, {3}
    31fc:	00667562 	rsbeq	r7, r6, r2, ror #10
    3200:	756e755f 	strbvc	r7, [lr, #-1375]!
    3204:	00646573 	rsbeq	r6, r4, r3, ror r5
    3208:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    320c:	6473695f 	ldrbtvs	r6, [r3], #-2399
    3210:	5f007473 	svcpl	0x00007473
    3214:	61636f6c 	cmnvs	r3, ip, ror #30
    3218:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!
    321c:	75625f65 	strbvc	r5, [r2, #-3941]!
    3220:	725f0066 	subsvc	r0, pc, #102	; 0x66
    3224:	5f003834 	svcpl	0x00003834
    3228:	6f74626d 	svcvs	0x0074626d
    322c:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    3230:	65746174 	ldrbvs	r6, [r4, #-372]!
    3234:	35705f00 	ldrbcc	r5, [r0, #-3840]!
    3238:	5f5f0073 	svcpl	0x005f0073
    323c:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]
    3240:	00796164 	rsbseq	r6, r9, r4, ror #2
    3244:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    3248:	645f6572 	ldrbvs	r6, [pc], #1394	; 3250 <__Stack_Size+0x2e50>
    324c:	00617461 	rsbeq	r7, r1, r1, ror #8
    3250:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3254:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3258:	2f2e2e2f 	svccs	0x002e2e2f
    325c:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    3260:	342d6363 	strtcc	r6, [sp], #-867
    3264:	302e332e 	eorcc	r3, lr, lr, lsr #6
    3268:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    326c:	2f62696c 	svccs	0x0062696c
    3270:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    3274:	6565722f 	strbvs	r7, [r5, #-559]!
    3278:	692f746e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    327c:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    3280:	00632e65 	rsbeq	r2, r3, r5, ror #28
    3284:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    3288:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    328c:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    3290:	646c6975 	strbtvs	r6, [ip], #-2421
    3294:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    3298:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    329c:	615c646c 	cmpvs	ip, ip, ror #8
    32a0:	652d6d72 	strvs	r6, [sp, #-3442]!
    32a4:	5c696261 	sfmpl	f6, 2, [r9], #-388
    32a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    32ac:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    32b0:	5c636269 	sfmpl	f6, 2, [r3], #-420
    32b4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    32b8:	5f5f0074 	svcpl	0x005f0074
    32bc:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    32c0:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    32c4:	735f7961 	cmpvc	pc, #1589248	; 0x184000
    32c8:	74726174 	ldrbtvc	r6, [r2], #-372
    32cc:	7a697300 	bvc	1a5fed4 <__Stack_Size+0x1a5fad4>
    32d0:	00745f65 	rsbseq	r5, r4, r5, ror #30
    32d4:	69665f5f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    32d8:	615f696e 	cmpvs	pc, lr, ror #18
    32dc:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    32e0:	646e655f 	strbtvs	r6, [lr], #-1375
    32e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    32e8:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
    32ec:	615f7469 	cmpvs	pc, r9, ror #8
    32f0:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    32f4:	646e655f 	strbtvs	r6, [lr], #-1375
    32f8:	2f2e2e00 	svccs	0x002e2e00
    32fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3300:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3304:	2f2e2e2f 	svccs	0x002e2e2f
    3308:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    330c:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    3310:	656e2f30 	strbvs	r2, [lr, #-3888]!
    3314:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3318:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    331c:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    3320:	692f6373 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    3324:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    3328:	5f5f0063 	svcpl	0x005f0063
    332c:	74696e69 	strbtvc	r6, [r9], #-3689
    3330:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    3334:	655f7961 	ldrbvs	r7, [pc, #-2401]	; 29db <__Stack_Size+0x25db>
    3338:	5f00646e 	svcpl	0x0000646e
    333c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3340:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
    3344:	615f7469 	cmpvs	pc, r9, ror #8
    3348:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    334c:	5c3a6300 	ldcpl	3, cr6, [sl]
    3350:	616e6977 	smcvs	59031
    3354:	5c736d72 	ldclpl	13, cr6, [r3], #-456
    3358:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    335c:	63675c64 	cmnvs	r7, #25600	; 0x6400
    3360:	75622d63 	strbvc	r2, [r2, #-3427]!
    3364:	5c646c69 	stclpl	12, cr6, [r4], #-420
    3368:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!
    336c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3370:	77656e5c 	undefined
    3374:	5c62696c 	stclpl	9, cr6, [r2], #-432
    3378:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    337c:	73696d5c 	cmnvc	r9, #5888	; 0x1700
    3380:	5f5f0063 	svcpl	0x005f0063
    3384:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    3388:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    338c:	72615f69 	rsbvc	r5, r1, #420	; 0x1a4
    3390:	00796172 	rsbseq	r6, r9, r2, ror r1
    3394:	72705f5f 	rsbsvc	r5, r0, #380	; 0x17c
    3398:	696e6965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    339c:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    33a0:	5f796172 	svcpl	0x00796172
    33a4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    33a8:	5f5f0074 	svcpl	0x005f0074
    33ac:	74696e69 	strbtvc	r6, [r9], #-3689
    33b0:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    33b4:	735f7961 	cmpvc	pc, #1589248	; 0x184000
    33b8:	74726174 	ldrbtvc	r6, [r2], #-372
    33bc:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    33c0:	64656e67 	strbtvs	r6, [r5], #-3687
    33c4:	6464615f 	strbtvs	r6, [r4], #-351
    33c8:	3a630072 	bcc	18c3598 <__Stack_Size+0x18c3198>
    33cc:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    33d0:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    33d4:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    33d8:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    33dc:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    33e0:	646c6975 	strbtvs	r6, [ip], #-2421
    33e4:	6d72615c 	ldfvse	f6, [r2, #-368]!
    33e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    33ec:	656e5c69 	strbvs	r5, [lr, #-3177]!
    33f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    33f4:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    33f8:	74735c63 	ldrbtvc	r5, [r3], #-3171
    33fc:	676e6972 	undefined
    3400:	2f2e2e00 	svccs	0x002e2e00
    3404:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3408:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    340c:	2f2e2e2f 	svccs	0x002e2e2f
    3410:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    3414:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    3418:	656e2f30 	strbvs	r2, [lr, #-3888]!
    341c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3420:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3424:	74732f63 	ldrbtvc	r2, [r3], #-3939
    3428:	676e6972 	undefined
    342c:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!
    3430:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    3434:	656d0063 	strbvs	r0, [sp, #-99]!
    3438:	7465736d 	strbtvc	r7, [r5], #-877
    343c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    3440:	00726566 	rsbseq	r6, r2, r6, ror #10
    3444:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3448:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    344c:	2f2e2e2f 	svccs	0x002e2e2f
    3450:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    3454:	342d6363 	strtcc	r6, [sp], #-867
    3458:	302e332e 	eorcc	r3, lr, lr, lsr #6
    345c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3460:	2f62696c 	svccs	0x0062696c
    3464:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    3468:	6474732f 	ldrbtvs	r7, [r4], #-815
    346c:	2f62696c 	svccs	0x0062696c
    3470:	74615f5f 	strbtvc	r5, [r1], #-3935
    3474:	74697865 	strbtvc	r7, [r9], #-2149
    3478:	7400632e 	strvc	r6, [r0], #-814
    347c:	00657079 	rsbeq	r7, r5, r9, ror r0
    3480:	65725f5f 	ldrbvs	r5, [r2, #-3935]!
    3484:	74736967 	ldrbtvc	r6, [r3], #-2407
    3488:	655f7265 	ldrbvs	r7, [pc, #-613]	; 322b <__Stack_Size+0x2e2b>
    348c:	70746978 	rsbsvc	r6, r4, r8, ror r9
    3490:	00636f72 	rsbeq	r6, r3, r2, ror pc
    3494:	61635f5f 	cmnvs	r3, pc, asr pc
    3498:	655f6c6c 	ldrbvs	r6, [pc, #-3180]	; 2834 <__Stack_Size+0x2434>
    349c:	70746978 	rsbsvc	r6, r4, r8, ror r9
    34a0:	73636f72 	cmnvc	r3, #456	; 0x1c8
    34a4:	2f2e2e00 	svccs	0x002e2e00
    34a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    34ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    34b0:	2f2e2e2f 	svccs	0x002e2e2f
    34b4:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    34b8:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    34bc:	656e2f30 	strbvs	r2, [lr, #-3888]!
    34c0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    34c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    34c8:	74732f63 	ldrbtvc	r2, [r3], #-3939
    34cc:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    34d0:	635f5f2f 	cmpvs	pc, #188	; 0xbc
    34d4:	5f6c6c61 	svcpl	0x006c6c61
    34d8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    34dc:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    34e0:	73616c00 	cmnvc	r1, #0	; 0x0
    34e4:	72007074 	andvc	r7, r0, #116	; 0x74
    34e8:	61747365 	cmnvs	r4, r5, ror #6
    34ec:	Address 0x000034ec is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000094 	muleq	r0, r4, r0
       4:	00000096 	muleq	r0, r6, r0
       8:	965d0001 	ldrbls	r0, [sp], -r1
       c:	c0000000 	andgt	r0, r0, r0
      10:	02000000 	andeq	r0, r0, #0	; 0x0
      14:	00087d00 	andeq	r7, r8, r0, lsl #26
      18:	00000000 	andeq	r0, r0, r0
      1c:	94000000 	strls	r0, [r0]
      20:	9a000000 	bls	28 <_Minimum_Stack_Size-0xd8>
      24:	01000000 	tsteq	r0, r0
      28:	009a5000 	addseq	r5, sl, r0
      2c:	00c00000 	sbceq	r0, r0, r0
      30:	00010000 	andeq	r0, r1, r0
      34:	00000054 	andeq	r0, r0, r4, asr r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	0000c000 	andeq	ip, r0, r0
      40:	0000c200 	andeq	ip, r0, r0, lsl #4
      44:	5d000100 	stfpls	f0, [r0]
      48:	000000c2 	andeq	r0, r0, r2, asr #1
      4c:	000000c8 	andeq	r0, r0, r8, asr #1
      50:	047d0002 	ldrbteq	r0, [sp], #-2
      54:	000000c8 	andeq	r0, r0, r8, asr #1
      58:	000000d6 	ldrdeq	r0, [r0], -r6
      5c:	087d0002 	ldmdaeq	sp!, {r1}^
	...
      68:	000000d8 	ldrdeq	r0, [r0], -r8
      6c:	000000da 	ldrdeq	r0, [r0], -sl
      70:	da5d0001 	ble	174007c <__Stack_Size+0x173fc7c>
      74:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
      78:	02000000 	andeq	r0, r0, #0	; 0x0
      7c:	de0c7d00 	cdple	13, 0, cr7, cr12, cr0, {0}
      80:	10000000 	andne	r0, r0, r0
      84:	02000001 	andeq	r0, r0, #1	; 0x1
      88:	00107d00 	andseq	r7, r0, r0, lsl #26
      8c:	00000000 	andeq	r0, r0, r0
      90:	10000000 	andne	r0, r0, r0
      94:	12000001 	andne	r0, r0, #1	; 0x1
      98:	01000001 	tsteq	r0, r1
      9c:	01125d00 	tsteq	r2, r0, lsl #26
      a0:	01180000 	tsteq	r8, r0
      a4:	00020000 	andeq	r0, r2, r0
      a8:	0118047d 	tsteq	r8, sp, ror r4
      ac:	01640000 	cmneq	r4, r0
      b0:	00020000 	andeq	r0, r2, r0
      b4:	0000087d 	andeq	r0, r0, sp, ror r8
      b8:	00000000 	andeq	r0, r0, r0
      bc:	01640000 	cmneq	r4, r0
      c0:	01660000 	cmneq	r6, r0
      c4:	00010000 	andeq	r0, r1, r0
      c8:	0001665d 	andeq	r6, r1, sp, asr r6
      cc:	00016800 	andeq	r6, r1, r0, lsl #16
      d0:	7d000200 	sfmvc	f0, 4, [r0]
      d4:	00016810 	andeq	r6, r1, r0, lsl r8
      d8:	0001f400 	andeq	pc, r1, r0, lsl #8
      dc:	7d000200 	sfmvc	f0, 4, [r0]
      e0:	00000030 	andeq	r0, r0, r0, lsr r0
      e4:	00000000 	andeq	r0, r0, r0
      e8:	0001f400 	andeq	pc, r1, r0, lsl #8
      ec:	0001f600 	andeq	pc, r1, r0, lsl #12
      f0:	5d000100 	stfpls	f0, [r0]
      f4:	000001f6 	strdeq	r0, [r0], -r6
      f8:	000001fa 	strdeq	r0, [r0], -sl
      fc:	047d0002 	ldrbteq	r0, [sp], #-2
     100:	000001fa 	strdeq	r0, [r0], -sl
     104:	00000214 	andeq	r0, r0, r4, lsl r2
     108:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     114:	000001f4 	strdeq	r0, [r0], -r4
     118:	000001f8 	strdeq	r0, [r0], -r8
     11c:	f8500001 	undefined instruction 0xf8500001
     120:	00000001 	andeq	r0, r0, r1
     124:	01000002 	tsteq	r0, r2
     128:	00005100 	andeq	r5, r0, r0, lsl #2
     12c:	00000000 	andeq	r0, r0, r0
     130:	02140000 	andseq	r0, r4, #0	; 0x0
     134:	02180000 	andseq	r0, r8, #0	; 0x0
     138:	00010000 	andeq	r0, r1, r0
     13c:	0002185d 	andeq	r1, r2, sp, asr r8
     140:	00023c00 	andeq	r3, r2, r0, lsl #24
     144:	7d000200 	sfmvc	f0, 4, [r0]
     148:	00000008 	andeq	r0, r0, r8
     14c:	00000000 	andeq	r0, r0, r0
     150:	00021400 	andeq	r1, r2, r0, lsl #8
     154:	00021e00 	andeq	r1, r2, r0, lsl #28
     158:	50000100 	andpl	r0, r0, r0, lsl #2
     15c:	0000021e 	andeq	r0, r0, lr, lsl r2
     160:	0000023c 	andeq	r0, r0, ip, lsr r2
     164:	00540001 	subseq	r0, r4, r1
     168:	00000000 	andeq	r0, r0, r0
     16c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     170:	28000002 	stmdacs	r0, {r1}
     174:	01000002 	tsteq	r0, r2
     178:	02305000 	eorseq	r5, r0, #0	; 0x0
     17c:	023a0000 	eorseq	r0, sl, #0	; 0x0
     180:	00010000 	andeq	r0, r1, r0
     184:	00000050 	andeq	r0, r0, r0, asr r0
     188:	00000000 	andeq	r0, r0, r0
     18c:	00023c00 	andeq	r3, r2, r0, lsl #24
     190:	00023e00 	andeq	r3, r2, r0, lsl #28
     194:	5d000100 	stfpls	f0, [r0]
     198:	0000023e 	andeq	r0, r0, lr, lsr r2
     19c:	00000250 	andeq	r0, r0, r0, asr r2
     1a0:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     1ac:	0000023c 	andeq	r0, r0, ip, lsr r2
     1b0:	00000242 	andeq	r0, r0, r2, asr #4
     1b4:	42500001 	subsmi	r0, r0, #1	; 0x1
     1b8:	50000002 	andpl	r0, r0, r2
     1bc:	01000002 	tsteq	r0, r2
     1c0:	00005400 	andeq	r5, r0, r0, lsl #8
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	02500000 	subseq	r0, r0, #0	; 0x0
     1cc:	02520000 	subseq	r0, r2, #0	; 0x0
     1d0:	00010000 	andeq	r0, r1, r0
     1d4:	0002525d 	andeq	r5, r2, sp, asr r2
     1d8:	00025600 	andeq	r5, r2, r0, lsl #12
     1dc:	7d000200 	sfmvc	f0, 4, [r0]
     1e0:	0002560c 	andeq	r5, r2, ip, lsl #12
     1e4:	00026a00 	andeq	r6, r2, r0, lsl #20
     1e8:	7d000200 	sfmvc	f0, 4, [r0]
     1ec:	00000010 	andeq	r0, r0, r0, lsl r0
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	00025000 	andeq	r5, r2, r0
     1f8:	00025a00 	andeq	r5, r2, r0, lsl #20
     1fc:	50000100 	andpl	r0, r0, r0, lsl #2
     200:	0000025a 	andeq	r0, r0, sl, asr r2
     204:	0000026a 	andeq	r0, r0, sl, ror #4
     208:	00550001 	subseq	r0, r5, r1
     20c:	00000000 	andeq	r0, r0, r0
     210:	6c000000 	stcvs	0, cr0, [r0], {0}
     214:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     218:	01000002 	tsteq	r0, r2
     21c:	026e5d00 	rsbeq	r5, lr, #0	; 0x0
     220:	02b00000 	adcseq	r0, r0, #0	; 0x0
     224:	00020000 	andeq	r0, r2, r0
     228:	0000087d 	andeq	r0, r0, sp, ror r8
     22c:	00000000 	andeq	r0, r0, r0
     230:	026c0000 	rsbeq	r0, ip, #0	; 0x0
     234:	02740000 	rsbseq	r0, r4, #0	; 0x0
     238:	00010000 	andeq	r0, r1, r0
     23c:	00027450 	andeq	r7, r2, r0, asr r4
     240:	0002b000 	andeq	fp, r2, r0
     244:	54000100 	strpl	r0, [r0], #-256
	...
     250:	000002b0 	strheq	r0, [r0], -r0
     254:	000002b2 	strheq	r0, [r0], -r2
     258:	b25d0001 	subslt	r0, sp, #1	; 0x1
     25c:	b6000002 	strlt	r0, [r0], -r2
     260:	02000002 	andeq	r0, r0, #2	; 0x2
     264:	b6047d00 	strlt	r7, [r4], -r0, lsl #26
     268:	c4000002 	strgt	r0, [r0], #-2
     26c:	02000002 	andeq	r0, r0, #2	; 0x2
     270:	00087d00 	andeq	r7, r8, r0, lsl #26
     274:	00000000 	andeq	r0, r0, r0
     278:	c4000000 	strgt	r0, [r0]
     27c:	c6000002 	strgt	r0, [r0], -r2
     280:	01000002 	tsteq	r0, r2
     284:	02c65d00 	sbceq	r5, r6, #0	; 0x0
     288:	02c80000 	sbceq	r0, r8, #0	; 0x0
     28c:	00020000 	andeq	r0, r2, r0
     290:	02c8107d 	sbceq	r1, r8, #125	; 0x7d
     294:	03440000 	movteq	r0, #16384	; 0x4000
     298:	00020000 	andeq	r0, r2, r0
     29c:	0000207d 	andeq	r2, r0, sp, ror r0
     2a0:	00000000 	andeq	r0, r0, r0
     2a4:	02c40000 	sbceq	r0, r4, #0	; 0x0
     2a8:	02cc0000 	sbceq	r0, ip, #0	; 0x0
     2ac:	00010000 	andeq	r0, r1, r0
     2b0:	0002cc50 	andeq	ip, r2, r0, asr ip
     2b4:	00034400 	andeq	r4, r3, r0, lsl #8
     2b8:	55000100 	strpl	r0, [r0, #-256]
	...
     2c4:	000002c4 	andeq	r0, r0, r4, asr #5
     2c8:	000002d2 	ldrdeq	r0, [r0], -r2
     2cc:	d2510001 	subsle	r0, r1, #1	; 0x1
     2d0:	44000002 	strmi	r0, [r0], #-2
     2d4:	01000003 	tsteq	r0, r3
     2d8:	00005400 	andeq	r5, r0, r0, lsl #8
     2dc:	00000000 	andeq	r0, r0, r0
     2e0:	03440000 	movteq	r0, #16384	; 0x4000
     2e4:	03460000 	movteq	r0, #24576	; 0x6000
     2e8:	00010000 	andeq	r0, r1, r0
     2ec:	0003465d 	andeq	r4, r3, sp, asr r6
     2f0:	00034a00 	andeq	r4, r3, r0, lsl #20
     2f4:	7d000200 	sfmvc	f0, 4, [r0]
     2f8:	00034a04 	andeq	r4, r3, r4, lsl #20
     2fc:	00035400 	andeq	r5, r3, r0, lsl #8
     300:	7d000200 	sfmvc	f0, 4, [r0]
     304:	00000008 	andeq	r0, r0, r8
     308:	00000000 	andeq	r0, r0, r0
     30c:	00034400 	andeq	r4, r3, r0, lsl #8
     310:	00034c00 	andeq	r4, r3, r0, lsl #24
     314:	50000100 	andpl	r0, r0, r0, lsl #2
     318:	0000034c 	andeq	r0, r0, ip, asr #6
     31c:	00000350 	andeq	r0, r0, r0, asr r3
     320:	00510001 	subseq	r0, r1, r1
     324:	00000000 	andeq	r0, r0, r0
     328:	54000000 	strpl	r0, [r0]
     32c:	56000003 	strpl	r0, [r0], -r3
     330:	01000003 	tsteq	r0, r3
     334:	03565d00 	cmpeq	r6, #0	; 0x0
     338:	03580000 	cmpeq	r8, #0	; 0x0
     33c:	00020000 	andeq	r0, r2, r0
     340:	0358107d 	cmpeq	r8, #125	; 0x7d
     344:	03dc0000 	bicseq	r0, ip, #0	; 0x0
     348:	00020000 	andeq	r0, r2, r0
     34c:	0000187d 	andeq	r1, r0, sp, ror r8
     350:	00000000 	andeq	r0, r0, r0
     354:	03dc0000 	bicseq	r0, ip, #0	; 0x0
     358:	03de0000 	bicseq	r0, lr, #0	; 0x0
     35c:	00010000 	andeq	r0, r1, r0
     360:	0003de5d 	andeq	sp, r3, sp, asr lr
     364:	0003e400 	andeq	lr, r3, r0, lsl #8
     368:	7d000200 	sfmvc	f0, 4, [r0]
     36c:	0003e410 	andeq	lr, r3, r0, lsl r4
     370:	00042e00 	andeq	r2, r4, r0, lsl #28
     374:	7d000200 	sfmvc	f0, 4, [r0]
     378:	00000018 	andeq	r0, r0, r8, lsl r0
     37c:	00000000 	andeq	r0, r0, r0
     380:	00043000 	andeq	r3, r4, r0
     384:	00043200 	andeq	r3, r4, r0, lsl #4
     388:	5d000100 	stfpls	f0, [r0]
     38c:	00000432 	andeq	r0, r0, r2, lsr r4
     390:	00000434 	andeq	r0, r0, r4, lsr r4
     394:	047d0002 	ldrbteq	r0, [sp], #-2
     398:	00000434 	andeq	r0, r0, r4, lsr r4
     39c:	000004b4 	strheq	r0, [r0], -r4
     3a0:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     3ac:	000004b4 	strheq	r0, [r0], -r4
     3b0:	000004b6 	strheq	r0, [r0], -r6
     3b4:	b65d0001 	ldrblt	r0, [sp], -r1
     3b8:	ba000004 	blt	3d0 <_Minimum_Stack_Size+0x2d0>
     3bc:	02000004 	andeq	r0, r0, #4	; 0x4
     3c0:	ba147d00 	blt	51f7c8 <__Stack_Size+0x51f3c8>
     3c4:	3c000004 	stccc	0, cr0, [r0], {4}
     3c8:	02000006 	andeq	r0, r0, #6	; 0x6
     3cc:	00187d00 	andseq	r7, r8, r0, lsl #26
     3d0:	00000000 	andeq	r0, r0, r0
     3d4:	b4000000 	strlt	r0, [r0]
     3d8:	c8000004 	stmdagt	r0, {r2}
     3dc:	01000004 	tsteq	r0, r4
     3e0:	04c85000 	strbeq	r5, [r8]
     3e4:	063c0000 	ldrteq	r0, [ip], -r0
     3e8:	00010000 	andeq	r0, r1, r0
     3ec:	00000056 	andeq	r0, r0, r6, asr r0
     3f0:	00000000 	andeq	r0, r0, r0
     3f4:	00063c00 	andeq	r3, r6, r0, lsl #24
     3f8:	00063e00 	andeq	r3, r6, r0, lsl #28
     3fc:	5d000100 	stfpls	f0, [r0]
     400:	0000063e 	andeq	r0, r0, lr, lsr r6
     404:	00000640 	andeq	r0, r0, r0, asr #12
     408:	147d0002 	ldrbtne	r0, [sp], #-2
     40c:	00000640 	andeq	r0, r0, r0, asr #12
     410:	00003218 	andeq	r3, r0, r8, lsl r2
     414:	187d0002 	ldmdane	sp!, {r1}^
	...
     420:	00000108 	.word	0x00000108
     424:	0000010a 	.word	0x0000010a
     428:	0a5d0001 	.word	0x0a5d0001
     42c:	0c000001 	.word	0x0c000001
     430:	02000001 	.word	0x02000001
     434:	0c047d00 	.word	0x0c047d00
     438:	14000001 	.word	0x14000001
     43c:	02000001 	.word	0x02000001
     440:	00087d00 	.word	0x00087d00
     444:	00000000 	.word	0x00000000
     448:	14000000 	.word	0x14000000
     44c:	16000001 	.word	0x16000001
     450:	01000001 	.word	0x01000001
     454:	01165d00 	.word	0x01165d00
     458:	01180000 	.word	0x01180000
     45c:	00020000 	.word	0x00020000
     460:	0118047d 	.word	0x0118047d
     464:	01200000 	.word	0x01200000
     468:	00020000 	.word	0x00020000
     46c:	0000087d 	.word	0x0000087d
     470:	00000000 	.word	0x00000000
     474:	01200000 	.word	0x01200000
     478:	01220000 	.word	0x01220000
     47c:	00010000 	.word	0x00010000
     480:	0001225d 	.word	0x0001225d
     484:	00012400 	.word	0x00012400
     488:	7d000200 	.word	0x7d000200
     48c:	00012404 	.word	0x00012404
     490:	00012c00 	.word	0x00012c00
     494:	7d000200 	.word	0x7d000200
     498:	00000008 	.word	0x00000008
	...
     4a4:	00000200 	.word	0x00000200
     4a8:	5d000100 	.word	0x5d000100
     4ac:	00000002 	.word	0x00000002
     4b0:	00000004 	.word	0x00000004
     4b4:	047d0002 	.word	0x047d0002
     4b8:	00000004 	.word	0x00000004
     4bc:	0000000c 	.word	0x0000000c
     4c0:	087d0002 	.word	0x087d0002
	...
     4cc:	0000000c 	.word	0x0000000c
     4d0:	0000000e 	.word	0x0000000e
     4d4:	0e5d0001 	.word	0x0e5d0001
     4d8:	14000000 	.word	0x14000000
     4dc:	02000000 	.word	0x02000000
     4e0:	14047d00 	.word	0x14047d00
     4e4:	20000000 	.word	0x20000000
     4e8:	02000000 	.word	0x02000000
     4ec:	00087d00 	.word	0x00087d00
     4f0:	00000000 	.word	0x00000000
     4f4:	0c000000 	.word	0x0c000000
     4f8:	12000000 	.word	0x12000000
     4fc:	01000000 	.word	0x01000000
     500:	00125000 	.word	0x00125000
     504:	001c0000 	.word	0x001c0000
     508:	00010000 	.word	0x00010000
     50c:	00000053 	.word	0x00000053
     510:	00000000 	.word	0x00000000
     514:	00002000 	.word	0x00002000
     518:	00002200 	.word	0x00002200
     51c:	5d000100 	.word	0x5d000100
     520:	00000022 	.word	0x00000022
     524:	00000046 	.word	0x00000046
     528:	107d0002 	.word	0x107d0002
	...
     534:	00000020 	.word	0x00000020
     538:	0000002a 	.word	0x0000002a
     53c:	2a500001 	.word	0x2a500001
     540:	46000000 	.word	0x46000000
     544:	01000000 	.word	0x01000000
     548:	00005600 	.word	0x00005600
     54c:	00000000 	.word	0x00000000
     550:	00200000 	.word	0x00200000
     554:	002a0000 	.word	0x002a0000
     558:	00010000 	.word	0x00010000
     55c:	00002a51 	.word	0x00002a51
     560:	00004600 	.word	0x00004600
     564:	55000100 	.word	0x55000100
	...
     570:	00000048 	.word	0x00000048
     574:	0000004a 	.word	0x0000004a
     578:	4a5d0001 	.word	0x4a5d0001
     57c:	64000000 	.word	0x64000000
     580:	02000000 	.word	0x02000000
     584:	00107d00 	.word	0x00107d00
     588:	00000000 	.word	0x00000000
     58c:	48000000 	.word	0x48000000
     590:	52000000 	.word	0x52000000
     594:	01000000 	.word	0x01000000
     598:	00525000 	.word	0x00525000
     59c:	00640000 	.word	0x00640000
     5a0:	00010000 	.word	0x00010000
     5a4:	00000056 	.word	0x00000056
     5a8:	00000000 	.word	0x00000000
     5ac:	00004800 	.word	0x00004800
     5b0:	00005200 	.word	0x00005200
     5b4:	51000100 	.word	0x51000100
     5b8:	00000052 	.word	0x00000052
     5bc:	00000064 	.word	0x00000064
     5c0:	00550001 	.word	0x00550001
     5c4:	00000000 	.word	0x00000000
     5c8:	64000000 	.word	0x64000000
     5cc:	66000000 	.word	0x66000000
     5d0:	01000000 	.word	0x01000000
     5d4:	00665d00 	.word	0x00665d00
     5d8:	00680000 	.word	0x00680000
     5dc:	00020000 	.word	0x00020000
     5e0:	0068047d 	.word	0x0068047d
     5e4:	00700000 	.word	0x00700000
     5e8:	00020000 	.word	0x00020000
     5ec:	0000087d 	.word	0x0000087d
     5f0:	00000000 	.word	0x00000000
     5f4:	00700000 	.word	0x00700000
     5f8:	00720000 	.word	0x00720000
     5fc:	00010000 	.word	0x00010000
     600:	0000725d 	.word	0x0000725d
     604:	00007400 	.word	0x00007400
     608:	7d000200 	.word	0x7d000200
     60c:	00007404 	.word	0x00007404
     610:	00007c00 	.word	0x00007c00
     614:	7d000200 	.word	0x7d000200
     618:	00000008 	.word	0x00000008
     61c:	00000000 	.word	0x00000000
     620:	00007c00 	.word	0x00007c00
     624:	00007e00 	.word	0x00007e00
     628:	5d000100 	.word	0x5d000100
     62c:	0000007e 	.word	0x0000007e
     630:	00000082 	.word	0x00000082
     634:	047d0002 	.word	0x047d0002
     638:	00000082 	.word	0x00000082
     63c:	0000008c 	.word	0x0000008c
     640:	087d0002 	.word	0x087d0002
	...
     64c:	0000007c 	.word	0x0000007c
     650:	00000080 	.word	0x00000080
     654:	00500001 	.word	0x00500001
     658:	00000000 	.word	0x00000000
     65c:	7c000000 	.word	0x7c000000
     660:	86000000 	.word	0x86000000
     664:	01000000 	.word	0x01000000
     668:	00005100 	.word	0x00005100
     66c:	00000000 	.word	0x00000000
     670:	003c0000 	.word	0x003c0000
     674:	00480000 	.word	0x00480000
     678:	00010000 	.word	0x00010000
     67c:	00000050 	.word	0x00000050
     680:	00000000 	.word	0x00000000
     684:	00005c00 	.word	0x00005c00
     688:	00006200 	.word	0x00006200
     68c:	50000100 	.word	0x50000100
	...
     698:	00000068 	.word	0x00000068
     69c:	0000006c 	.word	0x0000006c
     6a0:	00500001 	.word	0x00500001
     6a4:	00000000 	.word	0x00000000
     6a8:	70000000 	.word	0x70000000
     6ac:	72000000 	.word	0x72000000
     6b0:	01000000 	.word	0x01000000
     6b4:	00005000 	.word	0x00005000
     6b8:	00000000 	.word	0x00000000
     6bc:	00740000 	.word	0x00740000
     6c0:	00780000 	.word	0x00780000
     6c4:	00010000 	.word	0x00010000
     6c8:	00000050 	.word	0x00000050
     6cc:	00000000 	.word	0x00000000
     6d0:	00007800 	.word	0x00007800
     6d4:	00007a00 	.word	0x00007a00
     6d8:	50000100 	.word	0x50000100
	...
     6e4:	0000007c 	.word	0x0000007c
     6e8:	0000007e 	.word	0x0000007e
     6ec:	7e5d0001 	.word	0x7e5d0001
     6f0:	82000000 	.word	0x82000000
     6f4:	02000000 	.word	0x02000000
     6f8:	820c7d00 	.word	0x820c7d00
     6fc:	e4000000 	.word	0xe4000000
     700:	02000001 	.word	0x02000001
     704:	00107d00 	.word	0x00107d00
     708:	00000000 	.word	0x00000000
     70c:	d0000000 	.word	0xd0000000
     710:	de000000 	.word	0xde000000
     714:	01000000 	.word	0x01000000
     718:	00f25000 	.word	0x00f25000
     71c:	014e0000 	.word	0x014e0000
     720:	00010000 	.word	0x00010000
     724:	00018650 	.word	0x00018650
     728:	00018e00 	.word	0x00018e00
     72c:	51000100 	.word	0x51000100
     730:	0000018e 	.word	0x0000018e
     734:	00000196 	.word	0x00000196
     738:	96500001 	.word	0x96500001
     73c:	b8000001 	.word	0xb8000001
     740:	01000001 	.word	0x01000001
     744:	01c85100 	.word	0x01c85100
     748:	01e40000 	.word	0x01e40000
     74c:	00010000 	.word	0x00010000
     750:	00000050 	.word	0x00000050
     754:	00000000 	.word	0x00000000
     758:	0000ec00 	.word	0x0000ec00
     75c:	0000f200 	.word	0x0000f200
     760:	51000100 	.word	0x51000100
     764:	0000011a 	.word	0x0000011a
     768:	00000164 	.word	0x00000164
     76c:	8e510001 	.word	0x8e510001
     770:	96000001 	.word	0x96000001
     774:	01000001 	.word	0x01000001
     778:	01c85100 	.word	0x01c85100
     77c:	01e40000 	.word	0x01e40000
     780:	00010000 	.word	0x00010000
     784:	00000051 	.word	0x00000051
     788:	00000000 	.word	0x00000000
     78c:	00018a00 	.word	0x00018a00
     790:	00018e00 	.word	0x00018e00
     794:	52000100 	.word	0x52000100
     798:	00000196 	.word	0x00000196
     79c:	000001ae 	.word	0x000001ae
     7a0:	00520001 	.word	0x00520001
     7a4:	00000000 	.word	0x00000000
     7a8:	e4000000 	.word	0xe4000000
     7ac:	e6000001 	.word	0xe6000001
     7b0:	01000001 	.word	0x01000001
     7b4:	01e65d00 	.word	0x01e65d00
     7b8:	01ea0000 	.word	0x01ea0000
     7bc:	00020000 	.word	0x00020000
     7c0:	01ea0c7d 	.word	0x01ea0c7d
     7c4:	02a80000 	.word	0x02a80000
     7c8:	00020000 	.word	0x00020000
     7cc:	0000107d 	.word	0x0000107d
     7d0:	00000000 	.word	0x00000000
     7d4:	022e0000 	.word	0x022e0000
     7d8:	025c0000 	.word	0x025c0000
     7dc:	00010000 	.word	0x00010000
     7e0:	00025c51 	.word	0x00025c51
     7e4:	00026800 	.word	0x00026800
     7e8:	51000100 	.word	0x51000100
	...
     7f4:	00000230 	.word	0x00000230
     7f8:	0000024a 	.word	0x0000024a
     7fc:	00520001 	.word	0x00520001
     800:	00000000 	.word	0x00000000
     804:	a8000000 	.word	0xa8000000
     808:	aa000002 	.word	0xaa000002
     80c:	01000002 	.word	0x01000002
     810:	02aa5d00 	.word	0x02aa5d00
     814:	02c80000 	.word	0x02c80000
     818:	00020000 	.word	0x00020000
     81c:	0000087d 	.word	0x0000087d
     820:	00000000 	.word	0x00000000
     824:	02c80000 	.word	0x02c80000
     828:	02ca0000 	.word	0x02ca0000
     82c:	00010000 	.word	0x00010000
     830:	0002ca5d 	.word	0x0002ca5d
     834:	0002ce00 	.word	0x0002ce00
     838:	7d000200 	.word	0x7d000200
     83c:	0002ce04 	.word	0x0002ce04
     840:	00030000 	.word	0x00030000
     844:	7d000200 	.word	0x7d000200
     848:	00000008 	.word	0x00000008
     84c:	00000000 	.word	0x00000000
     850:	0002c800 	.word	0x0002c800
     854:	0002f000 	.word	0x0002f000
     858:	50000100 	.word	0x50000100
     85c:	000002f4 	.word	0x000002f4
     860:	00000300 	.word	0x00000300
     864:	00500001 	.word	0x00500001
     868:	00000000 	.word	0x00000000
     86c:	c8000000 	.word	0xc8000000
     870:	f0000002 	.word	0xf0000002
     874:	01000002 	.word	0x01000002
     878:	02f45100 	.word	0x02f45100
     87c:	03000000 	.word	0x03000000
     880:	00010000 	.word	0x00010000
     884:	00000051 	.word	0x00000051
     888:	00000000 	.word	0x00000000
     88c:	0002c800 	.word	0x0002c800
     890:	0002d400 	.word	0x0002d400
     894:	52000100 	.word	0x52000100
     898:	000002d4 	.word	0x000002d4
     89c:	000002f0 	.word	0x000002f0
     8a0:	f45c0001 	.word	0xf45c0001
     8a4:	00000002 	.word	0x00000002
     8a8:	01000003 	.word	0x01000003
     8ac:	00005c00 	.word	0x00005c00
     8b0:	00000000 	.word	0x00000000
     8b4:	03000000 	.word	0x03000000
     8b8:	03020000 	.word	0x03020000
     8bc:	00010000 	.word	0x00010000
     8c0:	0003025d 	.word	0x0003025d
     8c4:	00030600 	.word	0x00030600
     8c8:	7d000200 	.word	0x7d000200
     8cc:	00030604 	.word	0x00030604
     8d0:	00033c00 	.word	0x00033c00
     8d4:	7d000200 	.word	0x7d000200
     8d8:	00000008 	.word	0x00000008
     8dc:	00000000 	.word	0x00000000
     8e0:	00030000 	.word	0x00030000
     8e4:	00031e00 	.word	0x00031e00
     8e8:	50000100 	.word	0x50000100
     8ec:	0000032e 	.word	0x0000032e
     8f0:	0000033c 	.word	0x0000033c
     8f4:	00500001 	.word	0x00500001
	...
     900:	1e000003 	.word	0x1e000003
     904:	01000003 	.word	0x01000003
     908:	032e5100 	.word	0x032e5100
     90c:	033c0000 	.word	0x033c0000
     910:	00010000 	.word	0x00010000
     914:	00000051 	.word	0x00000051
     918:	00000000 	.word	0x00000000
     91c:	00032200 	.word	0x00032200
     920:	00032e00 	.word	0x00032e00
     924:	52000100 	.word	0x52000100
	...
     930:	0000033c 	.word	0x0000033c
     934:	0000033e 	.word	0x0000033e
     938:	3e5d0001 	.word	0x3e5d0001
     93c:	42000003 	.word	0x42000003
     940:	02000003 	.word	0x02000003
     944:	42047d00 	.word	0x42047d00
     948:	6c000003 	.word	0x6c000003
     94c:	02000003 	.word	0x02000003
     950:	00087d00 	.word	0x00087d00
     954:	00000000 	.word	0x00000000
     958:	3c000000 	.word	0x3c000000
     95c:	5e000003 	.word	0x5e000003
     960:	01000003 	.word	0x01000003
     964:	03625000 	.word	0x03625000
     968:	036c0000 	.word	0x036c0000
     96c:	00010000 	.word	0x00010000
     970:	00000050 	.word	0x00000050
     974:	00000000 	.word	0x00000000
     978:	00033c00 	.word	0x00033c00
     97c:	00035e00 	.word	0x00035e00
     980:	51000100 	.word	0x51000100
     984:	00000362 	.word	0x00000362
     988:	0000036c 	.word	0x0000036c
     98c:	00510001 	.word	0x00510001
     990:	00000000 	.word	0x00000000
     994:	3c000000 	.word	0x3c000000
     998:	48000003 	.word	0x48000003
     99c:	01000003 	.word	0x01000003
     9a0:	03485200 	.word	0x03485200
     9a4:	035e0000 	.word	0x035e0000
     9a8:	00010000 	.word	0x00010000
     9ac:	0003625c 	.word	0x0003625c
     9b0:	00036c00 	.word	0x00036c00
     9b4:	5c000100 	.word	0x5c000100
	...
     9c0:	0000036c 	.word	0x0000036c
     9c4:	0000036e 	.word	0x0000036e
     9c8:	6e5d0001 	.word	0x6e5d0001
     9cc:	72000003 	.word	0x72000003
     9d0:	02000003 	.word	0x02000003
     9d4:	72047d00 	.word	0x72047d00
     9d8:	a4000003 	.word	0xa4000003
     9dc:	02000003 	.word	0x02000003
     9e0:	00087d00 	.word	0x00087d00
     9e4:	00000000 	.word	0x00000000
     9e8:	6c000000 	.word	0x6c000000
     9ec:	8c000003 	.word	0x8c000003
     9f0:	01000003 	.word	0x01000003
     9f4:	03945000 	.word	0x03945000
     9f8:	03a40000 	.word	0x03a40000
     9fc:	00010000 	.word	0x00010000
     a00:	00000050 	.word	0x00000050
     a04:	00000000 	.word	0x00000000
     a08:	00036c00 	.word	0x00036c00
     a0c:	00038c00 	.word	0x00038c00
     a10:	51000100 	.word	0x51000100
     a14:	00000394 	.word	0x00000394
     a18:	000003a4 	.word	0x000003a4
     a1c:	00510001 	.word	0x00510001
     a20:	00000000 	.word	0x00000000
     a24:	a4000000 	.word	0xa4000000
     a28:	a6000003 	.word	0xa6000003
     a2c:	01000003 	.word	0x01000003
     a30:	03a65d00 	.word	0x03a65d00
     a34:	03aa0000 	.word	0x03aa0000
     a38:	00020000 	.word	0x00020000
     a3c:	03aa047d 	.word	0x03aa047d
     a40:	03cc0000 	.word	0x03cc0000
     a44:	00020000 	.word	0x00020000
     a48:	0000087d 	.word	0x0000087d
     a4c:	00000000 	.word	0x00000000
     a50:	03a40000 	.word	0x03a40000
     a54:	03be0000 	.word	0x03be0000
     a58:	00010000 	.word	0x00010000
     a5c:	0003c250 	.word	0x0003c250
     a60:	0003cc00 	.word	0x0003cc00
     a64:	50000100 	.word	0x50000100
	...
     a70:	000003cc 	.word	0x000003cc
     a74:	000003ce 	.word	0x000003ce
     a78:	ce5d0001 	.word	0xce5d0001
     a7c:	d0000003 	.word	0xd0000003
     a80:	02000003 	.word	0x02000003
     a84:	d0047d00 	.word	0xd0047d00
     a88:	d8000003 	.word	0xd8000003
     a8c:	02000003 	.word	0x02000003
     a90:	00087d00 	.word	0x00087d00
     a94:	00000000 	.word	0x00000000
     a98:	d8000000 	.word	0xd8000000
     a9c:	da000003 	.word	0xda000003
     aa0:	01000003 	.word	0x01000003
     aa4:	03da5d00 	.word	0x03da5d00
     aa8:	03e40000 	.word	0x03e40000
     aac:	00020000 	.word	0x00020000
     ab0:	03e4047d 	.word	0x03e4047d
     ab4:	040c0000 	.word	0x040c0000
     ab8:	00020000 	.word	0x00020000
     abc:	0000087d 	.word	0x0000087d
     ac0:	00000000 	.word	0x00000000
     ac4:	03d80000 	.word	0x03d80000
     ac8:	03ea0000 	.word	0x03ea0000
     acc:	00010000 	.word	0x00010000
     ad0:	00000050 	.word	0x00000050
     ad4:	00000000 	.word	0x00000000
     ad8:	0003d800 	.word	0x0003d800
     adc:	0003de00 	.word	0x0003de00
     ae0:	51000100 	.word	0x51000100
	...
     af0:	0000000e 	.word	0x0000000e
     af4:	00500001 	.word	0x00500001
     af8:	00000000 	.word	0x00000000
     afc:	18000000 	.word	0x18000000
     b00:	26000000 	.word	0x26000000
     b04:	01000000 	.word	0x01000000
     b08:	00005000 	.word	0x00005000
     b0c:	00000000 	.word	0x00000000
     b10:	00300000 	.word	0x00300000
     b14:	003e0000 	.word	0x003e0000
     b18:	00010000 	.word	0x00010000
     b1c:	00000050 	.word	0x00000050
     b20:	00000000 	.word	0x00000000
     b24:	0000c400 	.word	0x0000c400
     b28:	0000d000 	.word	0x0000d000
     b2c:	50000100 	.word	0x50000100
     b30:	000000d2 	.word	0x000000d2
     b34:	000000de 	.word	0x000000de
     b38:	00500001 	.word	0x00500001
     b3c:	00000000 	.word	0x00000000
     b40:	d0000000 	.word	0xd0000000
     b44:	d2000000 	.word	0xd2000000
     b48:	01000000 	.word	0x01000000
     b4c:	00de5000 	.word	0x00de5000
     b50:	00de0000 	.word	0x00de0000
     b54:	00010000 	.word	0x00010000
     b58:	00000050 	.word	0x00000050
     b5c:	00000000 	.word	0x00000000
     b60:	0000fc00 	.word	0x0000fc00
     b64:	0000fe00 	.word	0x0000fe00
     b68:	50000100 	.word	0x50000100
     b6c:	00000108 	.word	0x00000108
     b70:	0000010a 	.word	0x0000010a
     b74:	16500001 	.word	0x16500001
     b78:	16000001 	.word	0x16000001
     b7c:	01000001 	.word	0x01000001
     b80:	00005000 	.word	0x00005000
     b84:	00000000 	.word	0x00000000
     b88:	011c0000 	.word	0x011c0000
     b8c:	011e0000 	.word	0x011e0000
     b90:	00010000 	.word	0x00010000
     b94:	00011e5d 	.word	0x00011e5d
     b98:	00012200 	.word	0x00012200
     b9c:	7d000200 	.word	0x7d000200
     ba0:	00012208 	.word	0x00012208
     ba4:	0001b000 	.word	0x0001b000
     ba8:	7d000200 	.word	0x7d000200
     bac:	00000010 	.word	0x00000010
     bb0:	00000000 	.word	0x00000000
     bb4:	00011c00 	.word	0x00011c00
     bb8:	00012c00 	.word	0x00012c00
     bbc:	50000100 	.word	0x50000100
     bc0:	0000012c 	.word	0x0000012c
     bc4:	000001b0 	.word	0x000001b0
     bc8:	00510001 	.word	0x00510001
     bcc:	00000000 	.word	0x00000000
     bd0:	2e000000 	.word	0x2e000000
     bd4:	30000001 	.word	0x30000001
     bd8:	01000001 	.word	0x01000001
     bdc:	013a5000 	.word	0x013a5000
     be0:	013c0000 	.word	0x013c0000
     be4:	00010000 	.word	0x00010000
     be8:	00014850 	.word	0x00014850
     bec:	0001a800 	.word	0x0001a800
     bf0:	50000100 	.word	0x50000100
	...
     bfc:	0000014a 	.word	0x0000014a
     c00:	0000014c 	.word	0x0000014c
     c04:	7c910002 	.word	0x7c910002
     c08:	0000014c 	.word	0x0000014c
     c0c:	00000152 	.word	0x00000152
     c10:	047d0002 	.word	0x047d0002
     c14:	00000152 	.word	0x00000152
     c18:	00000158 	.word	0x00000158
     c1c:	7c910002 	.word	0x7c910002
     c20:	00000158 	.word	0x00000158
     c24:	0000015e 	.word	0x0000015e
     c28:	047d0002 	.word	0x047d0002
     c2c:	0000015e 	.word	0x0000015e
     c30:	00000186 	.word	0x00000186
     c34:	7c910002 	.word	0x7c910002
     c38:	0000018e 	.word	0x0000018e
     c3c:	000001b0 	.word	0x000001b0
     c40:	7c910002 	.word	0x7c910002
	...
     c4c:	000001b0 	.word	0x000001b0
     c50:	000001b2 	.word	0x000001b2
     c54:	b25d0001 	.word	0xb25d0001
     c58:	b8000001 	.word	0xb8000001
     c5c:	02000001 	.word	0x02000001
     c60:	b8147d00 	.word	0xb8147d00
     c64:	0c000001 	.word	0x0c000001
     c68:	02000002 	.word	0x02000002
     c6c:	00187d00 	.word	0x00187d00
     c70:	00000000 	.word	0x00000000
     c74:	b0000000 	.word	0xb0000000
     c78:	c4000001 	.word	0xc4000001
     c7c:	01000001 	.word	0x01000001
     c80:	01c45000 	.word	0x01c45000
     c84:	020c0000 	.word	0x020c0000
     c88:	00010000 	.word	0x00010000
     c8c:	00000055 	.word	0x00000055
     c90:	00000000 	.word	0x00000000
     c94:	0001b000 	.word	0x0001b000
     c98:	0001cc00 	.word	0x0001cc00
     c9c:	51000100 	.word	0x51000100
     ca0:	000001cc 	.word	0x000001cc
     ca4:	0000020c 	.word	0x0000020c
     ca8:	00560001 	.word	0x00560001
     cac:	00000000 	.word	0x00000000
     cb0:	b0000000 	.word	0xb0000000
     cb4:	cc000001 	.word	0xcc000001
     cb8:	01000001 	.word	0x01000001
     cbc:	01cc5200 	.word	0x01cc5200
     cc0:	020c0000 	.word	0x020c0000
     cc4:	00010000 	.word	0x00010000
     cc8:	00000057 	.word	0x00000057
     ccc:	00000000 	.word	0x00000000
     cd0:	0001ce00 	.word	0x0001ce00
     cd4:	0001ea00 	.word	0x0001ea00
     cd8:	50000100 	.word	0x50000100
     cdc:	000001f0 	.word	0x000001f0
     ce0:	000001fc 	.word	0x000001fc
     ce4:	00500001 	.word	0x00500001
     ce8:	00000000 	.word	0x00000000
     cec:	0c000000 	.word	0x0c000000
     cf0:	0e000002 	.word	0x0e000002
     cf4:	01000002 	.word	0x01000002
     cf8:	020e5d00 	.word	0x020e5d00
     cfc:	02120000 	.word	0x02120000
     d00:	00020000 	.word	0x00020000
     d04:	02120c7d 	.word	0x02120c7d
     d08:	02a80000 	.word	0x02a80000
     d0c:	00020000 	.word	0x00020000
     d10:	0000107d 	.word	0x0000107d
     d14:	00000000 	.word	0x00000000
     d18:	020c0000 	.word	0x020c0000
     d1c:	02160000 	.word	0x02160000
     d20:	00010000 	.word	0x00010000
     d24:	00021650 	.word	0x00021650
     d28:	0002a800 	.word	0x0002a800
     d2c:	55000100 	.word	0x55000100
	...
     d38:	0000021c 	.word	0x0000021c
     d3c:	00000226 	.word	0x00000226
     d40:	46500001 	.word	0x46500001
     d44:	72000002 	.word	0x72000002
     d48:	01000002 	.word	0x01000002
     d4c:	02785000 	.word	0x02785000
     d50:	02980000 	.word	0x02980000
     d54:	00010000 	.word	0x00010000
     d58:	00000050 	.word	0x00000050
     d5c:	00000000 	.word	0x00000000
     d60:	0002a800 	.word	0x0002a800
     d64:	0002aa00 	.word	0x0002aa00
     d68:	5d000100 	.word	0x5d000100
     d6c:	000002aa 	.word	0x000002aa
     d70:	00000368 	.word	0x00000368
     d74:	087d0002 	.word	0x087d0002
	...
     d80:	000002a8 	.word	0x000002a8
     d84:	000002ae 	.word	0x000002ae
     d88:	ae500001 	.word	0xae500001
     d8c:	68000002 	.word	0x68000002
     d90:	01000003 	.word	0x01000003
     d94:	00005400 	.word	0x00005400
     d98:	00000000 	.word	0x00000000
     d9c:	02ca0000 	.word	0x02ca0000
     da0:	02de0000 	.word	0x02de0000
     da4:	00010000 	.word	0x00010000
     da8:	0002de51 	.word	0x0002de51
     dac:	00030200 	.word	0x00030200
     db0:	51000100 	.word	0x51000100
     db4:	00000302 	.word	0x00000302
     db8:	00000326 	.word	0x00000326
     dbc:	26510001 	.word	0x26510001
     dc0:	46000003 	.word	0x46000003
     dc4:	01000003 	.word	0x01000003
     dc8:	03465100 	.word	0x03465100
     dcc:	034c0000 	.word	0x034c0000
     dd0:	00010000 	.word	0x00010000
     dd4:	00000051 	.word	0x00000051
     dd8:	00000000 	.word	0x00000000
     ddc:	0002e400 	.word	0x0002e400
     de0:	00030200 	.word	0x00030200
     de4:	52000100 	.word	0x52000100
     de8:	00000302 	.word	0x00000302
     dec:	00000308 	.word	0x00000308
     df0:	00520001 	.word	0x00520001
     df4:	00000000 	.word	0x00000000
     df8:	08000000 	.word	0x08000000
     dfc:	26000003 	.word	0x26000003
     e00:	01000003 	.word	0x01000003
     e04:	03265200 	.word	0x03265200
     e08:	03280000 	.word	0x03280000
     e0c:	00010000 	.word	0x00010000
     e10:	00000052 	.word	0x00000052
     e14:	00000000 	.word	0x00000000
     e18:	00032800 	.word	0x00032800
     e1c:	00034600 	.word	0x00034600
     e20:	52000100 	.word	0x52000100
     e24:	00000346 	.word	0x00000346
     e28:	00000352 	.word	0x00000352
     e2c:	00520001 	.word	0x00520001
     e30:	00000000 	.word	0x00000000
     e34:	b4000000 	.word	0xb4000000
     e38:	d8000002 	.word	0xd8000002
     e3c:	01000002 	.word	0x01000002
     e40:	02de5000 	.word	0x02de5000
     e44:	02fc0000 	.word	0x02fc0000
     e48:	00010000 	.word	0x00010000
     e4c:	00030250 	.word	0x00030250
     e50:	00032000 	.word	0x00032000
     e54:	50000100 	.word	0x50000100
     e58:	00000326 	.word	0x00000326
     e5c:	00000340 	.word	0x00000340
     e60:	46500001 	.word	0x46500001
     e64:	58000003 	.word	0x58000003
     e68:	01000003 	.word	0x01000003
     e6c:	00005000 	.word	0x00005000
     e70:	00000000 	.word	0x00000000
     e74:	03680000 	.word	0x03680000
     e78:	036a0000 	.word	0x036a0000
     e7c:	00010000 	.word	0x00010000
     e80:	00036a5d 	.word	0x00036a5d
     e84:	0003ac00 	.word	0x0003ac00
     e88:	7d000200 	.word	0x7d000200
     e8c:	00000010 	.word	0x00000010
     e90:	00000000 	.word	0x00000000
     e94:	00036800 	.word	0x00036800
     e98:	00036e00 	.word	0x00036e00
     e9c:	50000100 	.word	0x50000100
     ea0:	0000036e 	.word	0x0000036e
     ea4:	000003ac 	.word	0x000003ac
     ea8:	00560001 	.word	0x00560001
     eac:	00000000 	.word	0x00000000
     eb0:	68000000 	.word	0x68000000
     eb4:	74000003 	.word	0x74000003
     eb8:	01000003 	.word	0x01000003
     ebc:	03745100 	.word	0x03745100
     ec0:	03ac0000 	.word	0x03ac0000
     ec4:	00010000 	.word	0x00010000
     ec8:	00000055 	.word	0x00000055
     ecc:	00000000 	.word	0x00000000
     ed0:	00037600 	.word	0x00037600
     ed4:	00037e00 	.word	0x00037e00
     ed8:	50000100 	.word	0x50000100
     edc:	00000396 	.word	0x00000396
     ee0:	000003a2 	.word	0x000003a2
     ee4:	00500001 	.word	0x00500001
     ee8:	00000000 	.word	0x00000000
     eec:	ac000000 	.word	0xac000000
     ef0:	ae000003 	.word	0xae000003
     ef4:	01000003 	.word	0x01000003
     ef8:	03ae5d00 	.word	0x03ae5d00
     efc:	03e40000 	.word	0x03e40000
     f00:	00020000 	.word	0x00020000
     f04:	0000107d 	.word	0x0000107d
     f08:	00000000 	.word	0x00000000
     f0c:	03ac0000 	.word	0x03ac0000
     f10:	03b20000 	.word	0x03b20000
     f14:	00010000 	.word	0x00010000
     f18:	0003b250 	.word	0x0003b250
     f1c:	0003e400 	.word	0x0003e400
     f20:	56000100 	.word	0x56000100
	...
     f2c:	000003ac 	.word	0x000003ac
     f30:	000003b8 	.word	0x000003b8
     f34:	b8510001 	.word	0xb8510001
     f38:	e4000003 	.word	0xe4000003
     f3c:	01000003 	.word	0x01000003
     f40:	00005500 	.word	0x00005500
     f44:	00000000 	.word	0x00000000
     f48:	03ba0000 	.word	0x03ba0000
     f4c:	03c00000 	.word	0x03c00000
     f50:	00010000 	.word	0x00010000
     f54:	0003d050 	.word	0x0003d050
     f58:	0003dc00 	.word	0x0003dc00
     f5c:	50000100 	.word	0x50000100
	...
     f68:	000003e4 	.word	0x000003e4
     f6c:	000003e6 	.word	0x000003e6
     f70:	e65d0001 	.word	0xe65d0001
     f74:	2c000003 	.word	0x2c000003
     f78:	02000004 	.word	0x02000004
     f7c:	00107d00 	.word	0x00107d00
     f80:	00000000 	.word	0x00000000
     f84:	e4000000 	.word	0xe4000000
     f88:	ea000003 	.word	0xea000003
     f8c:	01000003 	.word	0x01000003
     f90:	03ea5000 	.word	0x03ea5000
     f94:	042c0000 	.word	0x042c0000
     f98:	00010000 	.word	0x00010000
     f9c:	00000056 	.word	0x00000056
     fa0:	00000000 	.word	0x00000000
     fa4:	0003e400 	.word	0x0003e400
     fa8:	0003f000 	.word	0x0003f000
     fac:	51000100 	.word	0x51000100
     fb0:	000003f0 	.word	0x000003f0
     fb4:	0000042c 	.word	0x0000042c
     fb8:	00550001 	.word	0x00550001
     fbc:	00000000 	.word	0x00000000
     fc0:	f2000000 	.word	0xf2000000
     fc4:	f8000003 	.word	0xf8000003
     fc8:	01000003 	.word	0x01000003
     fcc:	040a5000 	.word	0x040a5000
     fd0:	04120000 	.word	0x04120000
     fd4:	00010000 	.word	0x00010000
     fd8:	00041650 	.word	0x00041650
     fdc:	00042400 	.word	0x00042400
     fe0:	50000100 	.word	0x50000100
	...
     fec:	0000042c 	.word	0x0000042c
     ff0:	0000042e 	.word	0x0000042e
     ff4:	2e5d0001 	.word	0x2e5d0001
     ff8:	a4000004 	.word	0xa4000004
     ffc:	02000004 	.word	0x02000004
    1000:	00087d00 	.word	0x00087d00
    1004:	00000000 	.word	0x00000000
    1008:	38000000 	.word	0x38000000
    100c:	42000004 	.word	0x42000004
    1010:	01000004 	.word	0x01000004
    1014:	04625000 	.word	0x04625000
    1018:	04800000 	.word	0x04800000
    101c:	00010000 	.word	0x00010000
    1020:	00048650 	.word	0x00048650
    1024:	00049400 	.word	0x00049400
    1028:	50000100 	.word	0x50000100
	...
    1034:	000004a4 	.word	0x000004a4
    1038:	000004a6 	.word	0x000004a6
    103c:	a65d0001 	.word	0xa65d0001
    1040:	e0000004 	.word	0xe0000004
    1044:	02000004 	.word	0x02000004
    1048:	00087d00 	.word	0x00087d00
    104c:	00000000 	.word	0x00000000
    1050:	b0000000 	.word	0xb0000000
    1054:	c0000004 	.word	0xc0000004
    1058:	01000004 	.word	0x01000004
    105c:	04ce5000 	.word	0x04ce5000
    1060:	04da0000 	.word	0x04da0000
    1064:	00010000 	.word	0x00010000
    1068:	00000050 	.word	0x00000050
    106c:	00000000 	.word	0x00000000
    1070:	0004e000 	.word	0x0004e000
    1074:	0004e200 	.word	0x0004e200
    1078:	5d000100 	.word	0x5d000100
    107c:	000004e2 	.word	0x000004e2
    1080:	000004e6 	.word	0x000004e6
    1084:	0c7d0002 	.word	0x0c7d0002
    1088:	000004e6 	.word	0x000004e6
    108c:	00000528 	.word	0x00000528
    1090:	107d0002 	.word	0x107d0002
	...
    109c:	000004e0 	.word	0x000004e0
    10a0:	000004ea 	.word	0x000004ea
    10a4:	ea500001 	.word	0xea500001
    10a8:	28000004 	.word	0x28000004
    10ac:	01000005 	.word	0x01000005
    10b0:	00005500 	.word	0x00005500
    10b4:	00000000 	.word	0x00000000
    10b8:	04f00000 	.word	0x04f00000
    10bc:	04f80000 	.word	0x04f80000
    10c0:	00010000 	.word	0x00010000
    10c4:	00051250 	.word	0x00051250
    10c8:	00051e00 	.word	0x00051e00
    10cc:	50000100 	.word	0x50000100
	...
    10dc:	00000002 	.word	0x00000002
    10e0:	025d0001 	.word	0x025d0001
    10e4:	1c000000 	.word	0x1c000000
    10e8:	02000000 	.word	0x02000000
    10ec:	1c147d00 	.word	0x1c147d00
    10f0:	a6000000 	.word	0xa6000000
    10f4:	02000000 	.word	0x02000000
    10f8:	00207d00 	.word	0x00207d00
	...
    1104:	22000000 	.word	0x22000000
    1108:	01000000 	.word	0x01000000
    110c:	005c5100 	.word	0x005c5100
    1110:	00640000 	.word	0x00640000
    1114:	00010000 	.word	0x00010000
    1118:	0000a251 	.word	0x0000a251
    111c:	0000a600 	.word	0x0000a600
    1120:	51000100 	.word	0x51000100
	...
    112c:	00000022 	.word	0x00000022
    1130:	00000034 	.word	0x00000034
    1134:	54530001 	.word	0x54530001
    1138:	6a000000 	.word	0x6a000000
    113c:	01000000 	.word	0x01000000
    1140:	006e5300 	.word	0x006e5300
    1144:	007a0000 	.word	0x007a0000
    1148:	00010000 	.word	0x00010000
    114c:	00009a53 	.word	0x00009a53
    1150:	0000a600 	.word	0x0000a600
    1154:	53000100 	.word	0x53000100
	...
    1160:	000000b8 	.word	0x000000b8
    1164:	000000c2 	.word	0x000000c2
    1168:	00500001 	.word	0x00500001
    116c:	00000000 	.word	0x00000000
    1170:	c4000000 	.word	0xc4000000
    1174:	c6000000 	.word	0xc6000000
    1178:	01000000 	.word	0x01000000
    117c:	00005000 	.word	0x00005000
    1180:	00000000 	.word	0x00000000
    1184:	00cc0000 	.word	0x00cc0000
    1188:	00d60000 	.word	0x00d60000
    118c:	00010000 	.word	0x00010000
    1190:	00000050 	.word	0x00000050
    1194:	00000000 	.word	0x00000000
    1198:	0000d800 	.word	0x0000d800
    119c:	0000da00 	.word	0x0000da00
    11a0:	50000100 	.word	0x50000100
	...
    11ac:	00000108 	.word	0x00000108
    11b0:	00000118 	.word	0x00000118
    11b4:	00510001 	.word	0x00510001
    11b8:	00000000 	.word	0x00000000
    11bc:	10000000 	.word	0x10000000
    11c0:	14000001 	.word	0x14000001
    11c4:	01000001 	.word	0x01000001
    11c8:	01145300 	.word	0x01145300
    11cc:	01180000 	.word	0x01180000
    11d0:	00010000 	.word	0x00010000
    11d4:	00011852 	.word	0x00011852
    11d8:	00011c00 	.word	0x00011c00
    11dc:	51000100 	.word	0x51000100
    11e0:	0000011c 	.word	0x0000011c
    11e4:	0000011e 	.word	0x0000011e
    11e8:	1e530001 	.word	0x1e530001
    11ec:	28000001 	.word	0x28000001
    11f0:	01000001 	.word	0x01000001
    11f4:	00005100 	.word	0x00005100
    11f8:	00000000 	.word	0x00000000
    11fc:	01340000 	.word	0x01340000
    1200:	01360000 	.word	0x01360000
    1204:	00010000 	.word	0x00010000
    1208:	0001365d 	.word	0x0001365d
    120c:	00019400 	.word	0x00019400
    1210:	7d000200 	.word	0x7d000200
    1214:	0000000c 	.word	0x0000000c
    1218:	00000000 	.word	0x00000000
    121c:	00013400 	.word	0x00013400
    1220:	00014000 	.word	0x00014000
    1224:	51000100 	.word	0x51000100
    1228:	00000140 	.word	0x00000140
    122c:	00000194 	.word	0x00000194
    1230:	00550001 	.word	0x00550001
    1234:	00000000 	.word	0x00000000
    1238:	4a000000 	.word	0x4a000000
    123c:	52000001 	.word	0x52000001
    1240:	01000001 	.word	0x01000001
    1244:	01525c00 	.word	0x01525c00
    1248:	015a0000 	.word	0x015a0000
    124c:	00010000 	.word	0x00010000
    1250:	00015a52 	.word	0x00015a52
    1254:	00017800 	.word	0x00017800
    1258:	5c000100 	.word	0x5c000100
    125c:	00000178 	.word	0x00000178
    1260:	0000017c 	.word	0x0000017c
    1264:	7c530001 	.word	0x7c530001
    1268:	94000001 	.word	0x94000001
    126c:	01000001 	.word	0x01000001
    1270:	00005200 	.word	0x00005200
    1274:	00000000 	.word	0x00000000
    1278:	01940000 	.word	0x01940000
    127c:	01960000 	.word	0x01960000
    1280:	00010000 	.word	0x00010000
    1284:	0001965d 	.word	0x0001965d
    1288:	0001c800 	.word	0x0001c800
    128c:	7d000200 	.word	0x7d000200
    1290:	00000008 	.word	0x00000008
    1294:	00000000 	.word	0x00000000
    1298:	00019400 	.word	0x00019400
    129c:	0001a200 	.word	0x0001a200
    12a0:	50000100 	.word	0x50000100
	...
    12ac:	00000194 	.word	0x00000194
    12b0:	000001a8 	.word	0x000001a8
    12b4:	00510001 	.word	0x00510001
    12b8:	00000000 	.word	0x00000000
    12bc:	c8000000 	.word	0xc8000000
    12c0:	ca000001 	.word	0xca000001
    12c4:	01000001 	.word	0x01000001
    12c8:	01ca5d00 	.word	0x01ca5d00
    12cc:	01d00000 	.word	0x01d00000
    12d0:	00020000 	.word	0x00020000
    12d4:	01d0047d 	.word	0x01d0047d
    12d8:	01e00000 	.word	0x01e00000
    12dc:	00020000 	.word	0x00020000
    12e0:	0000087d 	.word	0x0000087d
    12e4:	00000000 	.word	0x00000000
    12e8:	01e00000 	.word	0x01e00000
    12ec:	01e20000 	.word	0x01e20000
    12f0:	00010000 	.word	0x00010000
    12f4:	0001e25d 	.word	0x0001e25d
    12f8:	0001e600 	.word	0x0001e600
    12fc:	7d000200 	.word	0x7d000200
    1300:	0001e604 	.word	0x0001e604
    1304:	00028800 	.word	0x00028800
    1308:	7d000200 	.word	0x7d000200
    130c:	00000010 	.word	0x00000010
    1310:	00000000 	.word	0x00000000
    1314:	0001e000 	.word	0x0001e000
    1318:	0001e800 	.word	0x0001e800
    131c:	50000100 	.word	0x50000100
    1320:	000001ea 	.word	0x000001ea
    1324:	00000288 	.word	0x00000288
    1328:	047d0002 	.word	0x047d0002
	...
    1334:	00000064 	.word	0x00000064
    1338:	00000068 	.word	0x00000068
    133c:	00500001 	.word	0x00500001
    1340:	00000000 	.word	0x00000000
    1344:	78000000 	.word	0x78000000
    1348:	7a000000 	.word	0x7a000000
    134c:	01000000 	.word	0x01000000
    1350:	007a5d00 	.word	0x007a5d00
    1354:	00f40000 	.word	0x00f40000
    1358:	00020000 	.word	0x00020000
    135c:	00000c7d 	.word	0x00000c7d
    1360:	00000000 	.word	0x00000000
    1364:	00780000 	.word	0x00780000
    1368:	00a20000 	.word	0x00a20000
    136c:	00010000 	.word	0x00010000
    1370:	0000d850 	.word	0x0000d850
    1374:	0000f400 	.word	0x0000f400
    1378:	50000100 	.word	0x50000100
	...
    1384:	00000092 	.word	0x00000092
    1388:	00000098 	.word	0x00000098
    138c:	98520001 	.word	0x98520001
    1390:	a6000000 	.word	0xa6000000
    1394:	01000000 	.word	0x01000000
    1398:	00a65100 	.word	0x00a65100
    139c:	00be0000 	.word	0x00be0000
    13a0:	00010000 	.word	0x00010000
    13a4:	00000053 	.word	0x00000053
    13a8:	00000000 	.word	0x00000000
    13ac:	0000bc00 	.word	0x0000bc00
    13b0:	0000c400 	.word	0x0000c400
    13b4:	51000100 	.word	0x51000100
    13b8:	000000c4 	.word	0x000000c4
    13bc:	000000ce 	.word	0x000000ce
    13c0:	00530001 	.word	0x00530001
    13c4:	00000000 	.word	0x00000000
    13c8:	ae000000 	.word	0xae000000
    13cc:	cc000000 	.word	0xcc000000
    13d0:	01000000 	.word	0x01000000
    13d4:	00005200 	.word	0x00005200
    13d8:	00000000 	.word	0x00000000
    13dc:	01180000 	.word	0x01180000
    13e0:	01220000 	.word	0x01220000
    13e4:	00010000 	.word	0x00010000
    13e8:	00000050 	.word	0x00000050
    13ec:	00000000 	.word	0x00000000
    13f0:	00014800 	.word	0x00014800
    13f4:	00015000 	.word	0x00015000
    13f8:	50000100 	.word	0x50000100
	...
    1404:	00000170 	.word	0x00000170
    1408:	0000017a 	.word	0x0000017a
    140c:	00500001 	.word	0x00500001
    1410:	00000000 	.word	0x00000000
    1414:	a0000000 	.word	0xa0000000
    1418:	a4000001 	.word	0xa4000001
    141c:	01000001 	.word	0x01000001
    1420:	00005100 	.word	0x00005100
    1424:	00000000 	.word	0x00000000
    1428:	01f00000 	.word	0x01f00000
    142c:	01f40000 	.word	0x01f40000
    1430:	00010000 	.word	0x00010000
    1434:	00000050 	.word	0x00000050
    1438:	00000000 	.word	0x00000000
    143c:	00021800 	.word	0x00021800
    1440:	00021a00 	.word	0x00021a00
    1444:	5d000100 	.word	0x5d000100
    1448:	0000021a 	.word	0x0000021a
    144c:	00000270 	.word	0x00000270
    1450:	087d0002 	.word	0x087d0002
	...
    145c:	00000218 	.word	0x00000218
    1460:	00000242 	.word	0x00000242
    1464:	00500001 	.word	0x00500001
    1468:	00000000 	.word	0x00000000
    146c:	18000000 	.word	0x18000000
    1470:	30000002 	.word	0x30000002
    1474:	01000002 	.word	0x01000002
    1478:	00005100 	.word	0x00005100
    147c:	00000000 	.word	0x00000000
    1480:	02180000 	.word	0x02180000
    1484:	023a0000 	.word	0x023a0000
    1488:	00010000 	.word	0x00010000
    148c:	00000052 	.word	0x00000052
    1490:	00000000 	.word	0x00000000
    1494:	00024000 	.word	0x00024000
    1498:	00025200 	.word	0x00025200
    149c:	51000100 	.word	0x51000100
	...
    14a8:	00000228 	.word	0x00000228
    14ac:	00000230 	.word	0x00000230
    14b0:	30530001 	.word	0x30530001
    14b4:	3c000002 	.word	0x3c000002
    14b8:	01000002 	.word	0x01000002
    14bc:	023c5100 	.word	0x023c5100
    14c0:	024e0000 	.word	0x024e0000
    14c4:	00010000 	.word	0x00010000
    14c8:	00000052 	.word	0x00000052
    14cc:	00000000 	.word	0x00000000
    14d0:	00027000 	.word	0x00027000
    14d4:	00027200 	.word	0x00027200
    14d8:	50000100 	.word	0x50000100
	...
    14e4:	00000272 	.word	0x00000272
    14e8:	00000276 	.word	0x00000276
    14ec:	7a500001 	.word	0x7a500001
    14f0:	90000002 	.word	0x90000002
    14f4:	01000002 	.word	0x01000002
    14f8:	00005300 	.word	0x00005300
    14fc:	00000000 	.word	0x00000000
    1500:	02900000 	.word	0x02900000
    1504:	02940000 	.word	0x02940000
    1508:	00010000 	.word	0x00010000
    150c:	00000050 	.word	0x00000050
    1510:	00000000 	.word	0x00000000
    1514:	0002a800 	.word	0x0002a800
    1518:	0002ac00 	.word	0x0002ac00
    151c:	50000100 	.word	0x50000100
	...
    1528:	000002c0 	.word	0x000002c0
    152c:	000002c2 	.word	0x000002c2
    1530:	00500001 	.word	0x00500001
    1534:	00000000 	.word	0x00000000
    1538:	e0000000 	.word	0xe0000000
    153c:	ec000002 	.word	0xec000002
    1540:	01000002 	.word	0x01000002
    1544:	02ee5000 	.word	0x02ee5000
    1548:	030c0000 	.word	0x030c0000
    154c:	00010000 	.word	0x00010000
    1550:	00031a50 	.word	0x00031a50
    1554:	00031e00 	.word	0x00031e00
    1558:	50000100 	.word	0x50000100
	...
    1564:	000002ec 	.word	0x000002ec
    1568:	000002ee 	.word	0x000002ee
    156c:	0c500001 	.word	0x0c500001
    1570:	1a000003 	.word	0x1a000003
    1574:	01000003 	.word	0x01000003
    1578:	031e5000 	.word	0x031e5000
    157c:	031e0000 	.word	0x031e0000
    1580:	00010000 	.word	0x00010000
    1584:	00000050 	.word	0x00000050
    1588:	00000000 	.word	0x00000000
    158c:	0002e600 	.word	0x0002e600
    1590:	0002ea00 	.word	0x0002ea00
    1594:	53000100 	.word	0x53000100
    1598:	000002ee 	.word	0x000002ee
    159c:	000002f6 	.word	0x000002f6
    15a0:	1a530001 	.word	0x1a530001
    15a4:	1c000003 	.word	0x1c000003
    15a8:	01000003 	.word	0x01000003
    15ac:	00005300 	.word	0x00005300
    15b0:	00000000 	.word	0x00000000
    15b4:	03040000 	.word	0x03040000
    15b8:	031a0000 	.word	0x031a0000
    15bc:	00010000 	.word	0x00010000
    15c0:	00031e52 	.word	0x00031e52
    15c4:	00032400 	.word	0x00032400
    15c8:	52000100 	.word	0x52000100
	...
    15d4:	00000324 	.word	0x00000324
    15d8:	00000330 	.word	0x00000330
    15dc:	00500001 	.word	0x00500001
    15e0:	00000000 	.word	0x00000000
    15e4:	30000000 	.word	0x30000000
    15e8:	32000003 	.word	0x32000003
    15ec:	01000003 	.word	0x01000003
    15f0:	00005000 	.word	0x00005000
    15f4:	00000000 	.word	0x00000000
    15f8:	03380000 	.word	0x03380000
    15fc:	033a0000 	.word	0x033a0000
    1600:	00010000 	.word	0x00010000
    1604:	00033a5d 	.word	0x00033a5d
    1608:	00033c00 	.word	0x00033c00
    160c:	7d000200 	.word	0x7d000200
    1610:	00033c04 	.word	0x00033c04
    1614:	00034400 	.word	0x00034400
    1618:	7d000200 	.word	0x7d000200
    161c:	00000008 	.word	0x00000008
    1620:	00000000 	.word	0x00000000
    1624:	00034400 	.word	0x00034400
    1628:	00034600 	.word	0x00034600
    162c:	5d000100 	.word	0x5d000100
    1630:	00000346 	.word	0x00000346
    1634:	0000034a 	.word	0x0000034a
    1638:	047d0002 	.word	0x047d0002
    163c:	0000034a 	.word	0x0000034a
    1640:	00000352 	.word	0x00000352
    1644:	087d0002 	.word	0x087d0002
	...
    1650:	00000344 	.word	0x00000344
    1654:	00000348 	.word	0x00000348
    1658:	00500001 	.word	0x00500001
    165c:	00000000 	.word	0x00000000
    1660:	54000000 	.word	0x54000000
    1664:	56000003 	.word	0x56000003
    1668:	01000003 	.word	0x01000003
    166c:	03565d00 	.word	0x03565d00
    1670:	03580000 	.word	0x03580000
    1674:	00020000 	.word	0x00020000
    1678:	0358047d 	.word	0x0358047d
    167c:	03600000 	.word	0x03600000
    1680:	00020000 	.word	0x00020000
    1684:	0000087d 	.word	0x0000087d
    1688:	00000000 	.word	0x00000000
    168c:	03600000 	.word	0x03600000
    1690:	03620000 	.word	0x03620000
    1694:	00010000 	.word	0x00010000
    1698:	0003625d 	.word	0x0003625d
    169c:	00036400 	.word	0x00036400
    16a0:	7d000200 	.word	0x7d000200
    16a4:	00036404 	.word	0x00036404
    16a8:	00036c00 	.word	0x00036c00
    16ac:	7d000200 	.word	0x7d000200
    16b0:	00000008 	.word	0x00000008
    16b4:	00000000 	.word	0x00000000
    16b8:	00036c00 	.word	0x00036c00
    16bc:	00036e00 	.word	0x00036e00
    16c0:	5d000100 	.word	0x5d000100
    16c4:	0000036e 	.word	0x0000036e
    16c8:	00000370 	.word	0x00000370
    16cc:	047d0002 	.word	0x047d0002
    16d0:	00000370 	.word	0x00000370
    16d4:	00000378 	.word	0x00000378
    16d8:	087d0002 	.word	0x087d0002
	...
    16e4:	00000378 	.word	0x00000378
    16e8:	0000037a 	.word	0x0000037a
    16ec:	7a5d0001 	.word	0x7a5d0001
    16f0:	7c000003 	.word	0x7c000003
    16f4:	02000003 	.word	0x02000003
    16f8:	7c047d00 	.word	0x7c047d00
    16fc:	84000003 	.word	0x84000003
    1700:	02000003 	.word	0x02000003
    1704:	00087d00 	.word	0x00087d00
    1708:	00000000 	.word	0x00000000
    170c:	0000      	.short	0x0000
    170e:	00          	.byte	0x00
    170f:	18          	.byte	0x18
    1710:	22000000 	.word	0x22000000
    1714:	01000000 	.word	0x01000000
    1718:	00005000 	.word	0x00005000
    171c:	00000000 	.word	0x00000000
    1720:	001c0000 	.word	0x001c0000
    1724:	00220000 	.word	0x00220000
    1728:	00010000 	.word	0x00010000
    172c:	00002253 	.word	0x00002253
    1730:	00002c00 	.word	0x00002c00
    1734:	50000100 	.word	0x50000100
	...
    1740:	00000038 	.word	0x00000038
    1744:	00000044 	.word	0x00000044
    1748:	00500001 	.word	0x00500001
    174c:	00000000 	.word	0x00000000
    1750:	5c000000 	.word	0x5c000000
    1754:	60000000 	.word	0x60000000
    1758:	01000000 	.word	0x01000000
    175c:	00605d00 	.word	0x00605d00
    1760:	00640000 	.word	0x00640000
    1764:	00020000 	.word	0x00020000
    1768:	0064047d 	.word	0x0064047d
    176c:	00900000 	.word	0x00900000
    1770:	00020000 	.word	0x00020000
    1774:	0000087d 	.word	0x0000087d
    1778:	00000000 	.word	0x00000000
    177c:	00900000 	.word	0x00900000
    1780:	00940000 	.word	0x00940000
    1784:	00010000 	.word	0x00010000
    1788:	0000945d 	.word	0x0000945d
    178c:	00009800 	.word	0x00009800
    1790:	7d000200 	.word	0x7d000200
    1794:	00009804 	.word	0x00009804
    1798:	0000c800 	.word	0x0000c800
    179c:	7d000200 	.word	0x7d000200
    17a0:	00000008 	.word	0x00000008
    17a4:	00000000 	.word	0x00000000
    17a8:	00009000 	.word	0x00009000
    17ac:	00009e00 	.word	0x00009e00
    17b0:	50000100 	.word	0x50000100
	...
    17bc:	00000090 	.word	0x00000090
    17c0:	000000ba 	.word	0x000000ba
    17c4:	bc510001 	.word	0xbc510001
    17c8:	c0000000 	.word	0xc0000000
    17cc:	01000000 	.word	0x01000000
    17d0:	00005100 	.word	0x00005100
    17d4:	00000000 	.word	0x00000000
    17d8:	00960000 	.word	0x00960000
    17dc:	009e0000 	.word	0x009e0000
    17e0:	00010000 	.word	0x00010000
    17e4:	00009e53 	.word	0x00009e53
    17e8:	0000ba00 	.word	0x0000ba00
    17ec:	50000100 	.word	0x50000100
    17f0:	000000bc 	.word	0x000000bc
    17f4:	000000c0 	.word	0x000000c0
    17f8:	00500001 	.word	0x00500001
    17fc:	00000000 	.word	0x00000000
    1800:	c8000000 	.word	0xc8000000
    1804:	ca000000 	.word	0xca000000
    1808:	01000000 	.word	0x01000000
    180c:	00ca5d00 	.word	0x00ca5d00
    1810:	00e00000 	.word	0x00e00000
    1814:	00020000 	.word	0x00020000
    1818:	0000087d 	.word	0x0000087d
    181c:	00000000 	.word	0x00000000
    1820:	00740000 	.word	0x00740000
    1824:	00760000 	.word	0x00760000
    1828:	00010000 	.word	0x00010000
    182c:	0000765d 	.word	0x0000765d
    1830:	0000a400 	.word	0x0000a400
    1834:	7d000200 	.word	0x7d000200
    1838:	00000008 	.word	0x00000008
    183c:	00000000 	.word	0x00000000
    1840:	00007c00 	.word	0x00007c00
    1844:	00008200 	.word	0x00008200
    1848:	7d000200 	.word	0x7d000200
    184c:	00008204 	.word	0x00008204
    1850:	00008a00 	.word	0x00008a00
    1854:	53000100 	.word	0x53000100
    1858:	0000008a 	.word	0x0000008a
    185c:	000000a4 	.word	0x000000a4
    1860:	047d0002 	.word	0x047d0002
	...
    186c:	00000096 	.word	0x00000096
    1870:	00000098 	.word	0x00000098
    1874:	00500001 	.word	0x00500001
    1878:	00000000 	.word	0x00000000
    187c:	c4000000 	.word	0xc4000000
    1880:	ce000000 	.word	0xce000000
    1884:	01000000 	.word	0x01000000
    1888:	00005000 	.word	0x00005000
    188c:	00000000 	.word	0x00000000
    1890:	00c80000 	.word	0x00c80000
    1894:	00cc0000 	.word	0x00cc0000
    1898:	00010000 	.word	0x00010000
    189c:	0000d053 	.word	0x0000d053
    18a0:	0000d800 	.word	0x0000d800
    18a4:	50000100 	.word	0x50000100
	...
    18b0:	000000e4 	.word	0x000000e4
    18b4:	000000ee 	.word	0x000000ee
    18b8:	00500001 	.word	0x00500001
    18bc:	00000000 	.word	0x00000000
    18c0:	e8000000 	.word	0xe8000000
    18c4:	ee000000 	.word	0xee000000
    18c8:	01000000 	.word	0x01000000
    18cc:	00ee5300 	.word	0x00ee5300
    18d0:	00f80000 	.word	0x00f80000
    18d4:	00010000 	.word	0x00010000
    18d8:	00000050 	.word	0x00000050
    18dc:	00000000 	.word	0x00000000
    18e0:	00010800 	.word	0x00010800
    18e4:	00011200 	.word	0x00011200
    18e8:	50000100 	.word	0x50000100
	...
    18f4:	0000010c 	.word	0x0000010c
    18f8:	00000112 	.word	0x00000112
    18fc:	12530001 	.word	0x12530001
    1900:	1c000001 	.word	0x1c000001
    1904:	01000001 	.word	0x01000001
    1908:	00005000 	.word	0x00005000
    190c:	00000000 	.word	0x00000000
    1910:	011c0000 	.word	0x011c0000
    1914:	01260000 	.word	0x01260000
    1918:	00010000 	.word	0x00010000
    191c:	00000050 	.word	0x00000050
    1920:	00000000 	.word	0x00000000
    1924:	00012000 	.word	0x00012000
    1928:	00012600 	.word	0x00012600
    192c:	53000100 	.word	0x53000100
    1930:	00000126 	.word	0x00000126
    1934:	00000130 	.word	0x00000130
    1938:	00500001 	.word	0x00500001
    193c:	00000000 	.word	0x00000000
    1940:	6c000000 	.word	0x6c000000
    1944:	76000001 	.word	0x76000001
    1948:	01000001 	.word	0x01000001
    194c:	00005000 	.word	0x00005000
    1950:	00000000 	.word	0x00000000
    1954:	01700000 	.word	0x01700000
    1958:	01760000 	.word	0x01760000
    195c:	00010000 	.word	0x00010000
    1960:	00017653 	.word	0x00017653
    1964:	00018000 	.word	0x00018000
    1968:	50000100 	.word	0x50000100
	...
    1974:	000001ac 	.word	0x000001ac
    1978:	000001b2 	.word	0x000001b2
    197c:	00500001 	.word	0x00500001
    1980:	00000000 	.word	0x00000000
    1984:	c8000000 	.word	0xc8000000
    1988:	d6000001 	.word	0xd6000001
    198c:	01000001 	.word	0x01000001
    1990:	01d65000 	.word	0x01d65000
    1994:	02800000 	.word	0x02800000
    1998:	00010000 	.word	0x00010000
    199c:	0000005c 	.word	0x0000005c
    19a0:	00000000 	.word	0x00000000
    19a4:	00022a00 	.word	0x00022a00
    19a8:	00022c00 	.word	0x00022c00
    19ac:	53000100 	.word	0x53000100
    19b0:	0000023e 	.word	0x0000023e
    19b4:	00000240 	.word	0x00000240
    19b8:	50530001 	.word	0x50530001
    19bc:	52000002 	.word	0x52000002
    19c0:	01000002 	.word	0x01000002
    19c4:	02625300 	.word	0x02625300
    19c8:	02640000 	.word	0x02640000
    19cc:	00010000 	.word	0x00010000
    19d0:	00000053 	.word	0x00000053
    19d4:	00000000 	.word	0x00000000
    19d8:	0001e400 	.word	0x0001e400
    19dc:	00021a00 	.word	0x00021a00
    19e0:	52000100 	.word	0x52000100
    19e4:	0000021c 	.word	0x0000021c
    19e8:	00000226 	.word	0x00000226
    19ec:	00520001 	.word	0x00520001
    19f0:	00000000 	.word	0x00000000
    19f4:	30000000 	.word	0x30000000
    19f8:	66000003 	.word	0x66000003
    19fc:	01000003 	.word	0x01000003
    1a00:	00005000 	.word	0x00005000
    1a04:	00000000 	.word	0x00000000
    1a08:	03320000 	.word	0x03320000
    1a0c:	033a0000 	.word	0x033a0000
    1a10:	00010000 	.word	0x00010000
    1a14:	00034853 	.word	0x00034853
    1a18:	00035000 	.word	0x00035000
    1a1c:	53000100 	.word	0x53000100
    1a20:	0000035e 	.word	0x0000035e
    1a24:	00000360 	.word	0x00000360
    1a28:	00530001 	.word	0x00530001
    1a2c:	00000000 	.word	0x00000000
    1a30:	46000000 	.word	0x46000000
    1a34:	48000003 	.word	0x48000003
    1a38:	01000003 	.word	0x01000003
    1a3c:	035c5300 	.word	0x035c5300
    1a40:	035e0000 	.word	0x035e0000
    1a44:	00010000 	.word	0x00010000
    1a48:	00036253 	.word	0x00036253
    1a4c:	00037400 	.word	0x00037400
    1a50:	53000100 	.word	0x53000100
	...
    1a5c:	00000384 	.word	0x00000384
    1a60:	00000390 	.word	0x00000390
    1a64:	00500001 	.word	0x00500001
    1a68:	00000000 	.word	0x00000000
    1a6c:	7c000000 	.word	0x7c000000
    1a70:	84000000 	.word	0x84000000
    1a74:	01000000 	.word	0x01000000
    1a78:	00845000 	.word	0x00845000
    1a7c:	00a40000 	.word	0x00a40000
    1a80:	00010000 	.word	0x00010000
    1a84:	00000052 	.word	0x00000052
    1a88:	00000000 	.word	0x00000000
    1a8c:	00009000 	.word	0x00009000
    1a90:	00009200 	.word	0x00009200
    1a94:	50000100 	.word	0x50000100
    1a98:	00000096 	.word	0x00000096
    1a9c:	00000098 	.word	0x00000098
    1aa0:	00500001 	.word	0x00500001
	...
    1aac:	04000000 	.word	0x04000000
    1ab0:	01000000 	.word	0x01000000
    1ab4:	00045d00 	.word	0x00045d00
    1ab8:	00540000 	.word	0x00540000
    1abc:	00020000 	.word	0x00020000
    1ac0:	0000087d 	.word	0x0000087d
	...
    1acc:	00020000 	.word	0x00020000
    1ad0:	00010000 	.word	0x00010000
    1ad4:	00001650 	.word	0x00001650
    1ad8:	00005400 	.word	0x00005400
    1adc:	7d000200 	.word	0x7d000200
    1ae0:	00000004 	.word	0x00000004
	...
    1aec:	00004200 	.word	0x00004200
    1af0:	51000100 	.word	0x51000100
    1af4:	00000042 	.word	0x00000042
    1af8:	00000054 	.word	0x00000054
    1afc:	005c0001 	.word	0x005c0001
    1b00:	00000000 	.word	0x00000000
    1b04:	54000000 	.word	0x54000000
    1b08:	68000000 	.word	0x68000000
    1b0c:	01000000 	.word	0x01000000
    1b10:	00685d00 	.word	0x00685d00
    1b14:	009e0000 	.word	0x009e0000
    1b18:	00020000 	.word	0x00020000
    1b1c:	009e147d 	.word	0x009e147d
    1b20:	01040000 	.word	0x01040000
    1b24:	00020000 	.word	0x00020000
    1b28:	0000207d 	.word	0x0000207d
    1b2c:	00000000 	.word	0x00000000
    1b30:	00540000 	.word	0x00540000
    1b34:	00560000 	.word	0x00560000
    1b38:	00010000 	.word	0x00010000
    1b3c:	0000a850 	.word	0x0000a850
    1b40:	00010400 	.word	0x00010400
    1b44:	7d000200 	.word	0x7d000200
    1b48:	00000004 	.word	0x00000004
    1b4c:	00000000 	.word	0x00000000
    1b50:	00005400 	.word	0x00005400
    1b54:	00006400 	.word	0x00006400
    1b58:	51000100 	.word	0x51000100
    1b5c:	00000064 	.word	0x00000064
    1b60:	00000104 	.word	0x00000104
    1b64:	005c0001 	.word	0x005c0001
    1b68:	00000000 	.word	0x00000000
    1b6c:	72000000 	.word	0x72000000
    1b70:	ea000000 	.word	0xea000000
    1b74:	01000000 	.word	0x01000000
    1b78:	00ea5600 	.word	0x00ea5600
    1b7c:	01040000 	.word	0x01040000
    1b80:	00010000 	.word	0x00010000
    1b84:	00000053 	.word	0x00000053
    1b88:	00000000 	.word	0x00000000
    1b8c:	00007a00 	.word	0x00007a00
    1b90:	00008000 	.word	0x00008000
    1b94:	51000100 	.word	0x51000100
    1b98:	00000080 	.word	0x00000080
    1b9c:	00000082 	.word	0x00000082
    1ba0:	82530001 	.word	0x82530001
    1ba4:	86000000 	.word	0x86000000
    1ba8:	01000000 	.word	0x01000000
    1bac:	00865100 	.word	0x00865100
    1bb0:	00ae0000 	.word	0x00ae0000
    1bb4:	00010000 	.word	0x00010000
    1bb8:	0000ae54 	.word	0x0000ae54
    1bbc:	0000c200 	.word	0x0000c200
    1bc0:	52000100 	.word	0x52000100
    1bc4:	000000c2 	.word	0x000000c2
    1bc8:	000000d2 	.word	0x000000d2
    1bcc:	d2530001 	.word	0xd2530001
    1bd0:	04000000 	.word	0x04000000
    1bd4:	01000001 	.word	0x01000001
    1bd8:	00005400 	.word	0x00005400
    1bdc:	00000000 	.word	0x00000000
    1be0:	006a0000 	.word	0x006a0000
    1be4:	00ce0000 	.word	0x00ce0000
    1be8:	00010000 	.word	0x00010000
    1bec:	0000ce55 	.word	0x0000ce55
    1bf0:	0000e200 	.word	0x0000e200
    1bf4:	51000100 	.word	0x51000100
    1bf8:	000000e2 	.word	0x000000e2
    1bfc:	000000e6 	.word	0x000000e6
    1c00:	e6530001 	.word	0xe6530001
    1c04:	04000000 	.word	0x04000000
    1c08:	01000001 	.word	0x01000001
    1c0c:	00005500 	.word	0x00005500
    1c10:	00000000 	.word	0x00000000
    1c14:	01040000 	.word	0x01040000
    1c18:	01080000 	.word	0x01080000
    1c1c:	00010000 	.word	0x00010000
    1c20:	0001085d 	.word	0x0001085d
    1c24:	00014800 	.word	0x00014800
    1c28:	7d000200 	.word	0x7d000200
    1c2c:	00014814 	.word	0x00014814
    1c30:	0001bc00 	.word	0x0001bc00
    1c34:	7d000200 	.word	0x7d000200
    1c38:	00000020 	.word	0x00000020
    1c3c:	00000000 	.word	0x00000000
    1c40:	00010400 	.word	0x00010400
    1c44:	00010600 	.word	0x00010600
    1c48:	50000100 	.word	0x50000100
    1c4c:	00000152 	.word	0x00000152
    1c50:	000001bc 	.word	0x000001bc
    1c54:	047d0002 	.word	0x047d0002
	...
    1c60:	00000104 	.word	0x00000104
    1c64:	00000156 	.word	0x00000156
    1c68:	56510001 	.word	0x56510001
    1c6c:	bc000001 	.word	0xbc000001
    1c70:	01000001 	.word	0x01000001
    1c74:	00005c00 	.word	0x00005c00
    1c78:	00000000 	.word	0x00000000
    1c7c:	01220000 	.word	0x01220000
    1c80:	019e0000 	.word	0x019e0000
    1c84:	00010000 	.word	0x00010000
    1c88:	00019e56 	.word	0x00019e56
    1c8c:	0001a600 	.word	0x0001a600
    1c90:	53000100 	.word	0x53000100
    1c94:	000001a8 	.word	0x000001a8
    1c98:	000001bc 	.word	0x000001bc
    1c9c:	00530001 	.word	0x00530001
    1ca0:	00000000 	.word	0x00000000
    1ca4:	1a000000 	.word	0x1a000000
    1ca8:	2a000001 	.word	0x2a000001
    1cac:	01000001 	.word	0x01000001
    1cb0:	012e5300 	.word	0x012e5300
    1cb4:	01320000 	.word	0x01320000
    1cb8:	00010000 	.word	0x00010000
    1cbc:	00013453 	.word	0x00013453
    1cc0:	00015a00 	.word	0x00015a00
    1cc4:	54000100 	.word	0x54000100
    1cc8:	0000015a 	.word	0x0000015a
    1ccc:	0000016c 	.word	0x0000016c
    1cd0:	70520001 	.word	0x70520001
    1cd4:	7c000001 	.word	0x7c000001
    1cd8:	01000001 	.word	0x01000001
    1cdc:	017e5300 	.word	0x017e5300
    1ce0:	01bc0000 	.word	0x01bc0000
    1ce4:	00010000 	.word	0x00010000
    1ce8:	00000054 	.word	0x00000054
    1cec:	00000000 	.word	0x00000000
    1cf0:	00011c00 	.word	0x00011c00
    1cf4:	00018600 	.word	0x00018600
    1cf8:	55000100 	.word	0x55000100
    1cfc:	00000186 	.word	0x00000186
    1d00:	0000018e 	.word	0x0000018e
    1d04:	94530001 	.word	0x94530001
    1d08:	98000001 	.word	0x98000001
    1d0c:	01000001 	.word	0x01000001
    1d10:	019a5300 	.word	0x019a5300
    1d14:	01bc0000 	.word	0x01bc0000
    1d18:	00010000 	.word	0x00010000
    1d1c:	00000055 	.word	0x00000055
    1d20:	00000000 	.word	0x00000000
    1d24:	0001bc00 	.word	0x0001bc00
    1d28:	0001c000 	.word	0x0001c000
    1d2c:	5d000100 	.word	0x5d000100
    1d30:	000001c0 	.word	0x000001c0
    1d34:	00000200 	.word	0x00000200
    1d38:	147d0002 	.word	0x147d0002
    1d3c:	00000200 	.word	0x00000200
    1d40:	00000270 	.word	0x00000270
    1d44:	207d0002 	.word	0x207d0002
	...
    1d50:	000001bc 	.word	0x000001bc
    1d54:	000001be 	.word	0x000001be
    1d58:	0a500001 	.word	0x0a500001
    1d5c:	70000002 	.word	0x70000002
    1d60:	02000002 	.word	0x02000002
    1d64:	00047d00 	.word	0x00047d00
    1d68:	00000000 	.word	0x00000000
    1d6c:	bc000000 	.word	0xbc000000
    1d70:	0e000001 	.word	0x0e000001
    1d74:	01000002 	.word	0x01000002
    1d78:	020e5100 	.word	0x020e5100
    1d7c:	02700000 	.word	0x02700000
    1d80:	00010000 	.word	0x00010000
    1d84:	0000005c 	.word	0x0000005c
    1d88:	00000000 	.word	0x00000000
    1d8c:	0001da00 	.word	0x0001da00
    1d90:	00025600 	.word	0x00025600
    1d94:	56000100 	.word	0x56000100
    1d98:	00000256 	.word	0x00000256
    1d9c:	00000270 	.word	0x00000270
    1da0:	00530001 	.word	0x00530001
    1da4:	00000000 	.word	0x00000000
    1da8:	d2000000 	.word	0xd2000000
    1dac:	e2000001 	.word	0xe2000001
    1db0:	01000001 	.word	0x01000001
    1db4:	01e65300 	.word	0x01e65300
    1db8:	01ea0000 	.word	0x01ea0000
    1dbc:	00010000 	.word	0x00010000
    1dc0:	0001ec53 	.word	0x0001ec53
    1dc4:	00021200 	.word	0x00021200
    1dc8:	54000100 	.word	0x54000100
    1dcc:	00000212 	.word	0x00000212
    1dd0:	00000224 	.word	0x00000224
    1dd4:	28520001 	.word	0x28520001
    1dd8:	34000002 	.word	0x34000002
    1ddc:	01000002 	.word	0x01000002
    1de0:	02365300 	.word	0x02365300
    1de4:	02700000 	.word	0x02700000
    1de8:	00010000 	.word	0x00010000
    1dec:	00000054 	.word	0x00000054
    1df0:	00000000 	.word	0x00000000
    1df4:	0001d400 	.word	0x0001d400
    1df8:	00023e00 	.word	0x00023e00
    1dfc:	55000100 	.word	0x55000100
    1e00:	0000023e 	.word	0x0000023e
    1e04:	00000246 	.word	0x00000246
    1e08:	4c530001 	.word	0x4c530001
    1e0c:	50000002 	.word	0x50000002
    1e10:	01000002 	.word	0x01000002
    1e14:	02525300 	.word	0x02525300
    1e18:	02700000 	.word	0x02700000
    1e1c:	00010000 	.word	0x00010000
    1e20:	00000055 	.word	0x00000055
    1e24:	00000000 	.word	0x00000000
    1e28:	00027000 	.word	0x00027000
    1e2c:	00027400 	.word	0x00027400
    1e30:	5d000100 	.word	0x5d000100
    1e34:	00000274 	.word	0x00000274
    1e38:	00000282 	.word	0x00000282
    1e3c:	147d0002 	.word	0x147d0002
    1e40:	00000282 	.word	0x00000282
    1e44:	00000304 	.word	0x00000304
    1e48:	287d0002 	.word	0x287d0002
	...
    1e54:	00000270 	.word	0x00000270
    1e58:	00000272 	.word	0x00000272
    1e5c:	b4500001 	.word	0xb4500001
    1e60:	04000002 	.word	0x04000002
    1e64:	02000003 	.word	0x02000003
    1e68:	000c7d00 	.word	0x000c7d00
    1e6c:	00000000 	.word	0x00000000
    1e70:	70000000 	.word	0x70000000
    1e74:	b8000002 	.word	0xb8000002
    1e78:	01000002 	.word	0x01000002
    1e7c:	02b85100 	.word	0x02b85100
    1e80:	03040000 	.word	0x03040000
    1e84:	00010000 	.word	0x00010000
    1e88:	00000054 	.word	0x00000054
    1e8c:	00000000 	.word	0x00000000
    1e90:	00029400 	.word	0x00029400
    1e94:	0002cc00 	.word	0x0002cc00
    1e98:	55000100 	.word	0x55000100
    1e9c:	000002cc 	.word	0x000002cc
    1ea0:	000002d4 	.word	0x000002d4
    1ea4:	d6530001 	.word	0xd6530001
    1ea8:	e2000002 	.word	0xe2000002
    1eac:	01000002 	.word	0x01000002
    1eb0:	00005300 	.word	0x00005300
    1eb4:	00000000 	.word	0x00000000
    1eb8:	02860000 	.word	0x02860000
    1ebc:	02e20000 	.word	0x02e20000
    1ec0:	00020000 	.word	0x00020000
    1ec4:	02e2087d 	.word	0x02e2087d
    1ec8:	02ea0000 	.word	0x02ea0000
    1ecc:	00010000 	.word	0x00010000
    1ed0:	0002ee53 	.word	0x0002ee53
    1ed4:	0002f200 	.word	0x0002f200
    1ed8:	53000100 	.word	0x53000100
    1edc:	000002f4 	.word	0x000002f4
    1ee0:	00000304 	.word	0x00000304
    1ee4:	00530001 	.word	0x00530001
    1ee8:	00000000 	.word	0x00000000
    1eec:	8e000000 	.word	0x8e000000
    1ef0:	bc000002 	.word	0xbc000002
    1ef4:	01000002 	.word	0x01000002
    1ef8:	02bc5c00 	.word	0x02bc5c00
    1efc:	02c40000 	.word	0x02c40000
    1f00:	00010000 	.word	0x00010000
    1f04:	0002c853 	.word	0x0002c853
    1f08:	00030400 	.word	0x00030400
    1f0c:	5c000100 	.word	0x5c000100
	...
    1f18:	00000304 	.word	0x00000304
    1f1c:	00000308 	.word	0x00000308
    1f20:	085d0001 	.word	0x085d0001
    1f24:	70000003 	.word	0x70000003
    1f28:	02000004 	.word	0x02000004
    1f2c:	000c7d00 	.word	0x000c7d00
    1f30:	00000000 	.word	0x00000000
    1f34:	04000000 	.word	0x04000000
    1f38:	0e000003 	.word	0x0e000003
    1f3c:	01000003 	.word	0x01000003
    1f40:	030e5000 	.word	0x030e5000
    1f44:	04700000 	.word	0x04700000
    1f48:	00010000 	.word	0x00010000
    1f4c:	00000054 	.word	0x00000054
    1f50:	00000000 	.word	0x00000000
    1f54:	00030400 	.word	0x00030400
    1f58:	00030e00 	.word	0x00030e00
    1f5c:	51000100 	.word	0x51000100
    1f60:	0000030e 	.word	0x0000030e
    1f64:	00000470 	.word	0x00000470
    1f68:	00550001 	.word	0x00550001
    1f6c:	00000000 	.word	0x00000000
    1f70:	44000000 	.word	0x44000000
    1f74:	4c000003 	.word	0x4c000003
    1f78:	01000003 	.word	0x01000003
    1f7c:	00005300 	.word	0x00005300
    1f80:	00000000 	.word	0x00000000
    1f84:	03320000 	.word	0x03320000
    1f88:	034e0000 	.word	0x034e0000
    1f8c:	00010000 	.word	0x00010000
    1f90:	00000052 	.word	0x00000052
    1f94:	00000000 	.word	0x00000000
    1f98:	00038000 	.word	0x00038000
    1f9c:	00038e00 	.word	0x00038e00
    1fa0:	53000100 	.word	0x53000100
    1fa4:	00000392 	.word	0x00000392
    1fa8:	0000039a 	.word	0x0000039a
    1fac:	9e530001 	.word	0x9e530001
    1fb0:	a8000003 	.word	0xa8000003
    1fb4:	01000003 	.word	0x01000003
    1fb8:	00005300 	.word	0x00005300
    1fbc:	00000000 	.word	0x00000000
    1fc0:	03a20000 	.word	0x03a20000
    1fc4:	03aa0000 	.word	0x03aa0000
    1fc8:	00010000 	.word	0x00010000
    1fcc:	00000052 	.word	0x00000052
    1fd0:	00000000 	.word	0x00000000
    1fd4:	0003fc00 	.word	0x0003fc00
    1fd8:	00040600 	.word	0x00040600
    1fdc:	53000100 	.word	0x53000100
	...
    1fe8:	00000400 	.word	0x00000400
    1fec:	00000408 	.word	0x00000408
    1ff0:	00520001 	.word	0x00520001
    1ff4:	00000000 	.word	0x00000000
    1ff8:	4c000000 	.word	0x4c000000
    1ffc:	56000004 	.word	0x56000004
    2000:	01000004 	.word	0x01000004
    2004:	00005300 	.word	0x00005300
    2008:	00000000 	.word	0x00000000
    200c:	04500000 	.word	0x04500000
    2010:	04580000 	.word	0x04580000
    2014:	00010000 	.word	0x00010000
    2018:	00000052 	.word	0x00000052
    201c:	00000000 	.word	0x00000000
    2020:	00047000 	.word	0x00047000
    2024:	00047400 	.word	0x00047400
    2028:	5d000100 	.word	0x5d000100
    202c:	00000474 	.word	0x00000474
    2030:	000005ca 	.word	0x000005ca
    2034:	147d0002 	.word	0x147d0002
	...
    2040:	00000470 	.word	0x00000470
    2044:	0000047c 	.word	0x0000047c
    2048:	7c510001 	.word	0x7c510001
    204c:	ca000004 	.word	0xca000004
    2050:	01000005 	.word	0x01000005
    2054:	00005c00 	.word	0x00005c00
    2058:	00000000 	.word	0x00000000
    205c:	04ba0000 	.word	0x04ba0000
    2060:	04c80000 	.word	0x04c80000
    2064:	00010000 	.word	0x00010000
    2068:	00000053 	.word	0x00000053
    206c:	00000000 	.word	0x00000000
    2070:	0004b400 	.word	0x0004b400
    2074:	0004ee00 	.word	0x0004ee00
    2078:	52000100 	.word	0x52000100
	...
    2084:	000004f2 	.word	0x000004f2
    2088:	00000500 	.word	0x00000500
    208c:	04530001 	.word	0x04530001
    2090:	16000005 	.word	0x16000005
    2094:	01000005 	.word	0x01000005
    2098:	00005300 	.word	0x00005300
    209c:	00000000 	.word	0x00000000
    20a0:	05100000 	.word	0x05100000
    20a4:	052c0000 	.word	0x052c0000
    20a8:	00010000 	.word	0x00010000
    20ac:	0005c652 	.word	0x0005c652
    20b0:	0005ca00 	.word	0x0005ca00
    20b4:	52000100 	.word	0x52000100
	...
    20c0:	00000540 	.word	0x00000540
    20c4:	0000054e 	.word	0x0000054e
    20c8:	52530001 	.word	0x52530001
    20cc:	5a000005 	.word	0x5a000005
    20d0:	01000005 	.word	0x01000005
    20d4:	055e5300 	.word	0x055e5300
    20d8:	05680000 	.word	0x05680000
    20dc:	00010000 	.word	0x00010000
    20e0:	00000053 	.word	0x00000053
    20e4:	00000000 	.word	0x00000000
    20e8:	00056200 	.word	0x00056200
    20ec:	00059200 	.word	0x00059200
    20f0:	52000100 	.word	0x52000100
	...
    20fc:	000005ae 	.word	0x000005ae
    2100:	000005b6 	.word	0x000005b6
    2104:	00530001 	.word	0x00530001
    2108:	00000000 	.word	0x00000000
    210c:	a0000000 	.word	0xa0000000
    2110:	a2000006 	.word	0xa2000006
    2114:	01000006 	.word	0x01000006
    2118:	00005200 	.word	0x00005200
    211c:	00000000 	.word	0x00000000
    2120:	06d00000 	.word	0x06d00000
    2124:	06dc0000 	.word	0x06dc0000
    2128:	00010000 	.word	0x00010000
    212c:	00000051 	.word	0x00000051
    2130:	00000000 	.word	0x00000000
    2134:	0006d600 	.word	0x0006d600
    2138:	0006dc00 	.word	0x0006dc00
    213c:	53000100 	.word	0x53000100
    2140:	000006dc 	.word	0x000006dc
    2144:	000006ea 	.word	0x000006ea
    2148:	00510001 	.word	0x00510001
    214c:	00000000 	.word	0x00000000
    2150:	ec000000 	.word	0xec000000
    2154:	ee000006 	.word	0xee000006
    2158:	01000006 	.word	0x01000006
    215c:	06ee5d00 	.word	0x06ee5d00
    2160:	077e0000 	.word	0x077e0000
    2164:	00020000 	.word	0x00020000
    2168:	0000087d 	.word	0x0000087d
    216c:	00000000 	.word	0x00000000
    2170:	06ec0000 	.word	0x06ec0000
    2174:	06f40000 	.word	0x06f40000
    2178:	00010000 	.word	0x00010000
    217c:	0006f451 	.word	0x0006f451
    2180:	00077e00 	.word	0x00077e00
    2184:	54000100 	.word	0x54000100
	...
    2190:	000006ec 	.word	0x000006ec
    2194:	000006f8 	.word	0x000006f8
    2198:	f8520001 	.word	0xf8520001
    219c:	7e000006 	.word	0x7e000006
    21a0:	01000007 	.word	0x01000007
    21a4:	00005100 	.word	0x00005100
    21a8:	00000000 	.word	0x00000000
    21ac:	06ec0000 	.word	0x06ec0000
    21b0:	06f80000 	.word	0x06f80000
    21b4:	00010000 	.word	0x00010000
    21b8:	0006f853 	.word	0x0006f853
    21bc:	00077e00 	.word	0x00077e00
    21c0:	5c000100 	.word	0x5c000100
	...
    21cc:	0000070c 	.word	0x0000070c
    21d0:	00000724 	.word	0x00000724
    21d4:	2a530001 	.word	0x2a530001
    21d8:	2e000007 	.word	0x2e000007
    21dc:	01000007 	.word	0x01000007
    21e0:	075e5300 	.word	0x075e5300
    21e4:	07640000 	.word	0x07640000
    21e8:	00010000 	.word	0x00010000
    21ec:	00000053 	.word	0x00000053
    21f0:	00000000 	.word	0x00000000
    21f4:	00072c00 	.word	0x00072c00
    21f8:	00072e00 	.word	0x00072e00
    21fc:	52000100 	.word	0x52000100
    2200:	0000075e 	.word	0x0000075e
    2204:	0000077e 	.word	0x0000077e
    2208:	00520001 	.word	0x00520001
    220c:	00000000 	.word	0x00000000
    2210:	5c000000 	.word	0x5c000000
    2214:	64000007 	.word	0x64000007
    2218:	01000007 	.word	0x01000007
    221c:	00005300 	.word	0x00005300
    2220:	00000000 	.word	0x00000000
    2224:	07680000 	.word	0x07680000
    2228:	07740000 	.word	0x07740000
    222c:	00010000 	.word	0x00010000
    2230:	00000053 	.word	0x00000053
    2234:	00000000 	.word	0x00000000
    2238:	00078000 	.word	0x00078000
    223c:	00078c00 	.word	0x00078c00
    2240:	51000100 	.word	0x51000100
	...
    224c:	00000780 	.word	0x00000780
    2250:	0000078e 	.word	0x0000078e
    2254:	00520001 	.word	0x00520001
    2258:	00000000 	.word	0x00000000
    225c:	80000000 	.word	0x80000000
    2260:	98000007 	.word	0x98000007
    2264:	01000007 	.word	0x01000007
    2268:	00005300 	.word	0x00005300
    226c:	00000000 	.word	0x00000000
    2270:	07a80000 	.word	0x07a80000
    2274:	07b40000 	.word	0x07b40000
    2278:	00010000 	.word	0x00010000
    227c:	00000051 	.word	0x00000051
    2280:	00000000 	.word	0x00000000
    2284:	0007a800 	.word	0x0007a800
    2288:	0007b600 	.word	0x0007b600
    228c:	52000100 	.word	0x52000100
	...
    2298:	000007a8 	.word	0x000007a8
    229c:	000007c0 	.word	0x000007c0
    22a0:	00530001 	.word	0x00530001
    22a4:	00000000 	.word	0x00000000
    22a8:	cc000000 	.word	0xcc000000
    22ac:	d8000007 	.word	0xd8000007
    22b0:	01000007 	.word	0x01000007
    22b4:	00005100 	.word	0x00005100
    22b8:	00000000 	.word	0x00000000
    22bc:	07cc0000 	.word	0x07cc0000
    22c0:	07da0000 	.word	0x07da0000
    22c4:	00010000 	.word	0x00010000
    22c8:	00000052 	.word	0x00000052
    22cc:	00000000 	.word	0x00000000
    22d0:	0007ec00 	.word	0x0007ec00
    22d4:	0007f800 	.word	0x0007f800
    22d8:	51000100 	.word	0x51000100
	...
    22e4:	000007f2 	.word	0x000007f2
    22e8:	000007f8 	.word	0x000007f8
    22ec:	f8530001 	.word	0xf8530001
    22f0:	fc000007 	.word	0xfc000007
    22f4:	01000007 	.word	0x01000007
    22f8:	00005100 	.word	0x00005100
    22fc:	00000000 	.word	0x00000000
    2300:	07fc0000 	.word	0x07fc0000
    2304:	08080000 	.word	0x08080000
    2308:	00010000 	.word	0x00010000
    230c:	00000051 	.word	0x00000051
    2310:	00000000 	.word	0x00000000
    2314:	00080200 	.word	0x00080200
    2318:	00080800 	.word	0x00080800
    231c:	53000100 	.word	0x53000100
    2320:	00000808 	.word	0x00000808
    2324:	0000080c 	.word	0x0000080c
    2328:	00510001 	.word	0x00510001
    232c:	00000000 	.word	0x00000000
    2330:	0c000000 	.word	0x0c000000
    2334:	12000008 	.word	0x12000008
    2338:	01000008 	.word	0x01000008
    233c:	08125d00 	.word	0x08125d00
    2340:	08520000 	.word	0x08520000
    2344:	00020000 	.word	0x00020000
    2348:	00000c7d 	.word	0x00000c7d
    234c:	00000000 	.word	0x00000000
    2350:	080c0000 	.word	0x080c0000
    2354:	08440000 	.word	0x08440000
    2358:	00010000 	.word	0x00010000
    235c:	00000051 	.word	0x00000051
    2360:	00000000 	.word	0x00000000
    2364:	00080c00 	.word	0x00080c00
    2368:	00083400 	.word	0x00083400
    236c:	52000100 	.word	0x52000100
	...
    2378:	00000828 	.word	0x00000828
    237c:	00000844 	.word	0x00000844
    2380:	445c0001 	.word	0x445c0001
    2384:	52000008 	.word	0x52000008
    2388:	01000008 	.word	0x01000008
    238c:	00005100 	.word	0x00005100
    2390:	00000000 	.word	0x00000000
    2394:	08540000 	.word	0x08540000
    2398:	08600000 	.word	0x08600000
    239c:	00010000 	.word	0x00010000
    23a0:	00000051 	.word	0x00000051
    23a4:	00000000 	.word	0x00000000
    23a8:	00085a00 	.word	0x00085a00
    23ac:	00086000 	.word	0x00086000
    23b0:	53000100 	.word	0x53000100
    23b4:	00000860 	.word	0x00000860
    23b8:	00000864 	.word	0x00000864
    23bc:	00510001 	.word	0x00510001
    23c0:	00000000 	.word	0x00000000
    23c4:	6a000000 	.word	0x6a000000
    23c8:	72000008 	.word	0x72000008
    23cc:	01000008 	.word	0x01000008
    23d0:	08745300 	.word	0x08745300
    23d4:	08780000 	.word	0x08780000
    23d8:	00010000 	.word	0x00010000
    23dc:	00000053 	.word	0x00000053
    23e0:	00000000 	.word	0x00000000
    23e4:	00087800 	.word	0x00087800
    23e8:	00088400 	.word	0x00088400
    23ec:	51000100 	.word	0x51000100
	...
    23f8:	0000087e 	.word	0x0000087e
    23fc:	00000884 	.word	0x00000884
    2400:	84530001 	.word	0x84530001
    2404:	88000008 	.word	0x88000008
    2408:	01000008 	.word	0x01000008
    240c:	00005100 	.word	0x00005100
    2410:	00000000 	.word	0x00000000
    2414:	088e0000 	.word	0x088e0000
    2418:	08960000 	.word	0x08960000
    241c:	00010000 	.word	0x00010000
    2420:	00089853 	.word	0x00089853
    2424:	00089c00 	.word	0x00089c00
    2428:	53000100 	.word	0x53000100
	...
    2434:	0000090c 	.word	0x0000090c
    2438:	00000918 	.word	0x00000918
    243c:	00510001 	.word	0x00510001
    2440:	00000000 	.word	0x00000000
    2444:	12000000 	.word	0x12000000
    2448:	18000009 	.word	0x18000009
    244c:	01000009 	.word	0x01000009
    2450:	09185300 	.word	0x09185300
    2454:	091c0000 	.word	0x091c0000
    2458:	00010000 	.word	0x00010000
    245c:	00000051 	.word	0x00000051
    2460:	00000000 	.word	0x00000000
    2464:	00092200 	.word	0x00092200
    2468:	00092a00 	.word	0x00092a00
    246c:	53000100 	.word	0x53000100
    2470:	0000092c 	.word	0x0000092c
    2474:	00000930 	.word	0x00000930
    2478:	00530001 	.word	0x00530001
    247c:	00000000 	.word	0x00000000
    2480:	30000000 	.word	0x30000000
    2484:	3c000009 	.word	0x3c000009
    2488:	01000009 	.word	0x01000009
    248c:	00005100 	.word	0x00005100
    2490:	00000000 	.word	0x00000000
    2494:	09360000 	.word	0x09360000
    2498:	093c0000 	.word	0x093c0000
    249c:	00010000 	.word	0x00010000
    24a0:	00093c53 	.word	0x00093c53
    24a4:	00094000 	.word	0x00094000
    24a8:	51000100 	.word	0x51000100
	...
    24b4:	00000946 	.word	0x00000946
    24b8:	0000094e 	.word	0x0000094e
    24bc:	50530001 	.word	0x50530001
    24c0:	54000009 	.word	0x54000009
    24c4:	01000009 	.word	0x01000009
    24c8:	00005300 	.word	0x00005300
    24cc:	00000000 	.word	0x00000000
    24d0:	09540000 	.word	0x09540000
    24d4:	09600000 	.word	0x09600000
    24d8:	00010000 	.word	0x00010000
    24dc:	00000051 	.word	0x00000051
    24e0:	00000000 	.word	0x00000000
    24e4:	00095a00 	.word	0x00095a00
    24e8:	00096000 	.word	0x00096000
    24ec:	53000100 	.word	0x53000100
    24f0:	00000960 	.word	0x00000960
    24f4:	00000964 	.word	0x00000964
    24f8:	00510001 	.word	0x00510001
    24fc:	00000000 	.word	0x00000000
    2500:	6a000000 	.word	0x6a000000
    2504:	72000009 	.word	0x72000009
    2508:	01000009 	.word	0x01000009
    250c:	09745300 	.word	0x09745300
    2510:	09780000 	.word	0x09780000
    2514:	00010000 	.word	0x00010000
    2518:	00000053 	.word	0x00000053
    251c:	00000000 	.word	0x00000000
    2520:	00097800 	.word	0x00097800
    2524:	00098400 	.word	0x00098400
    2528:	51000100 	.word	0x51000100
	...
    2534:	0000097e 	.word	0x0000097e
    2538:	00000984 	.word	0x00000984
    253c:	84530001 	.word	0x84530001
    2540:	88000009 	.word	0x88000009
    2544:	01000009 	.word	0x01000009
    2548:	00005100 	.word	0x00005100
    254c:	00000000 	.word	0x00000000
    2550:	098e0000 	.word	0x098e0000
    2554:	09960000 	.word	0x09960000
    2558:	00010000 	.word	0x00010000
    255c:	00099853 	.word	0x00099853
    2560:	00099c00 	.word	0x00099c00
    2564:	53000100 	.word	0x53000100
	...
    2570:	0000099c 	.word	0x0000099c
    2574:	000009a8 	.word	0x000009a8
    2578:	00510001 	.word	0x00510001
    257c:	00000000 	.word	0x00000000
    2580:	a2000000 	.word	0xa2000000
    2584:	a8000009 	.word	0xa8000009
    2588:	01000009 	.word	0x01000009
    258c:	09a85300 	.word	0x09a85300
    2590:	09ac0000 	.word	0x09ac0000
    2594:	00010000 	.word	0x00010000
    2598:	00000051 	.word	0x00000051
    259c:	00000000 	.word	0x00000000
    25a0:	0009b000 	.word	0x0009b000
    25a4:	0009b600 	.word	0x0009b600
    25a8:	53000100 	.word	0x53000100
    25ac:	000009b8 	.word	0x000009b8
    25b0:	000009bc 	.word	0x000009bc
    25b4:	00530001 	.word	0x00530001
    25b8:	00000000 	.word	0x00000000
    25bc:	bc000000 	.word	0xbc000000
    25c0:	c8000009 	.word	0xc8000009
    25c4:	01000009 	.word	0x01000009
    25c8:	00005100 	.word	0x00005100
    25cc:	00000000 	.word	0x00000000
    25d0:	09c20000 	.word	0x09c20000
    25d4:	09c80000 	.word	0x09c80000
    25d8:	00010000 	.word	0x00010000
    25dc:	0009c853 	.word	0x0009c853
    25e0:	0009cc00 	.word	0x0009cc00
    25e4:	51000100 	.word	0x51000100
	...
    25f0:	000009d0 	.word	0x000009d0
    25f4:	000009d6 	.word	0x000009d6
    25f8:	d8530001 	.word	0xd8530001
    25fc:	dc000009 	.word	0xdc000009
    2600:	01000009 	.word	0x01000009
    2604:	00005300 	.word	0x00005300
    2608:	00000000 	.word	0x00000000
    260c:	09dc0000 	.word	0x09dc0000
    2610:	09e80000 	.word	0x09e80000
    2614:	00010000 	.word	0x00010000
    2618:	00000051 	.word	0x00000051
    261c:	00000000 	.word	0x00000000
    2620:	0009e200 	.word	0x0009e200
    2624:	0009e800 	.word	0x0009e800
    2628:	53000100 	.word	0x53000100
    262c:	000009e8 	.word	0x000009e8
    2630:	000009ec 	.word	0x000009ec
    2634:	00510001 	.word	0x00510001
    2638:	00000000 	.word	0x00000000
    263c:	ec000000 	.word	0xec000000
    2640:	f8000009 	.word	0xf8000009
    2644:	01000009 	.word	0x01000009
    2648:	00005100 	.word	0x00005100
    264c:	00000000 	.word	0x00000000
    2650:	09f20000 	.word	0x09f20000
    2654:	09f80000 	.word	0x09f80000
    2658:	00010000 	.word	0x00010000
    265c:	0009f853 	.word	0x0009f853
    2660:	0009fc00 	.word	0x0009fc00
    2664:	51000100 	.word	0x51000100
	...
    2670:	00000a02 	.word	0x00000a02
    2674:	00000a0a 	.word	0x00000a0a
    2678:	0c530001 	.word	0x0c530001
    267c:	1000000a 	.word	0x1000000a
    2680:	0100000a 	.word	0x0100000a
    2684:	00005300 	.word	0x00005300
    2688:	00000000 	.word	0x00000000
    268c:	0a160000 	.word	0x0a160000
    2690:	0a1e0000 	.word	0x0a1e0000
    2694:	00010000 	.word	0x00010000
    2698:	000a2053 	.word	0x000a2053
    269c:	000a2400 	.word	0x000a2400
    26a0:	53000100 	.word	0x53000100
	...
    26ac:	00000a2a 	.word	0x00000a2a
    26b0:	00000a32 	.word	0x00000a32
    26b4:	34530001 	.word	0x34530001
    26b8:	3800000a 	.word	0x3800000a
    26bc:	0100000a 	.word	0x0100000a
    26c0:	00005300 	.word	0x00005300
    26c4:	00000000 	.word	0x00000000
    26c8:	0a3e0000 	.word	0x0a3e0000
    26cc:	0a460000 	.word	0x0a460000
    26d0:	00010000 	.word	0x00010000
    26d4:	000a4853 	.word	0x000a4853
    26d8:	000a4c00 	.word	0x000a4c00
    26dc:	53000100 	.word	0x53000100
	...
    26e8:	00000a52 	.word	0x00000a52
    26ec:	00000a5a 	.word	0x00000a5a
    26f0:	5c530001 	.word	0x5c530001
    26f4:	6000000a 	.word	0x6000000a
    26f8:	0100000a 	.word	0x0100000a
    26fc:	00005300 	.word	0x00005300
    2700:	00000000 	.word	0x00000000
    2704:	0a600000 	.word	0x0a600000
    2708:	0a660000 	.word	0x0a660000
    270c:	00010000 	.word	0x00010000
    2710:	00000052 	.word	0x00000052
    2714:	00000000 	.word	0x00000000
    2718:	000a8000 	.word	0x000a8000
    271c:	000a8600 	.word	0x000a8600
    2720:	52000100 	.word	0x52000100
	...
    272c:	00000aa0 	.word	0x00000aa0
    2730:	00000aaa 	.word	0x00000aaa
    2734:	aa5d0001 	.word	0xaa5d0001
    2738:	0800000a 	.word	0x0800000a
    273c:	0200000b 	.word	0x0200000b
    2740:	00087d00 	.word	0x00087d00
    2744:	00000000 	.word	0x00000000
    2748:	a0000000 	.word	0xa0000000
    274c:	a800000a 	.word	0xa800000a
    2750:	0100000a 	.word	0x0100000a
    2754:	0ac25000 	.word	0x0ac25000
    2758:	0b080000 	.word	0x0b080000
    275c:	00020000 	.word	0x00020000
    2760:	0000047d 	.word	0x0000047d
    2764:	00000000 	.word	0x00000000
    2768:	0aa00000 	.word	0x0aa00000
    276c:	0acc0000 	.word	0x0acc0000
    2770:	00010000 	.word	0x00010000
    2774:	000ae251 	.word	0x000ae251
    2778:	000aee00 	.word	0x000aee00
    277c:	51000100 	.word	0x51000100
	...
    2788:	00000aa0 	.word	0x00000aa0
    278c:	00000aa8 	.word	0x00000aa8
    2790:	a8520001 	.word	0xa8520001
    2794:	0800000a 	.word	0x0800000a
    2798:	0100000b 	.word	0x0100000b
    279c:	00005c00 	.word	0x00005c00
    27a0:	00000000 	.word	0x00000000
    27a4:	0b5c0000 	.word	0x0b5c0000
    27a8:	0b6e0000 	.word	0x0b6e0000
    27ac:	00010000 	.word	0x00010000
    27b0:	00000051 	.word	0x00000051
    27b4:	00000000 	.word	0x00000000
    27b8:	000b7400 	.word	0x000b7400
    27bc:	000b8600 	.word	0x000b8600
    27c0:	51000100 	.word	0x51000100
	...
    27cc:	00000b8c 	.word	0x00000b8c
    27d0:	00000b9e 	.word	0x00000b9e
    27d4:	00510001 	.word	0x00510001
    27d8:	00000000 	.word	0x00000000
    27dc:	a4000000 	.word	0xa4000000
    27e0:	b600000b 	.word	0xb600000b
    27e4:	0100000b 	.word	0x0100000b
    27e8:	00005100 	.word	0x00005100
    27ec:	00000000 	.word	0x00000000
    27f0:	0bd80000 	.word	0x0bd80000
    27f4:	0bea0000 	.word	0x0bea0000
    27f8:	00010000 	.word	0x00010000
    27fc:	00000051 	.word	0x00000051
    2800:	00000000 	.word	0x00000000
    2804:	000c0c00 	.word	0x000c0c00
    2808:	000c1e00 	.word	0x000c1e00
    280c:	51000100 	.word	0x51000100
	...
    2818:	00000c40 	.word	0x00000c40
    281c:	00000c4c 	.word	0x00000c4c
    2820:	00510001 	.word	0x00510001
    2824:	00000000 	.word	0x00000000
    2828:	50000000 	.word	0x50000000
    282c:	5200000c 	.word	0x5200000c
    2830:	0100000c 	.word	0x0100000c
    2834:	00005000 	.word	0x00005000
    2838:	00000000 	.word	0x00000000
    283c:	0c580000 	.word	0x0c580000
    2840:	0c5a0000 	.word	0x0c5a0000
    2844:	00010000 	.word	0x00010000
    2848:	00000050 	.word	0x00000050
    284c:	00000000 	.word	0x00000000
    2850:	000c6000 	.word	0x000c6000
    2854:	000c6200 	.word	0x000c6200
    2858:	50000100 	.word	0x50000100
	...
    2864:	00000c68 	.word	0x00000c68
    2868:	00000c6c 	.word	0x00000c6c
    286c:	00500001 	.word	0x00500001
    2870:	00000000 	.word	0x00000000
    2874:	70000000 	.word	0x70000000
    2878:	7200000c 	.word	0x7200000c
    287c:	0100000c 	.word	0x0100000c
    2880:	00005000 	.word	0x00005000
    2884:	00000000 	.word	0x00000000
    2888:	0c780000 	.word	0x0c780000
    288c:	0c7a0000 	.word	0x0c7a0000
    2890:	00010000 	.word	0x00010000
    2894:	00000050 	.word	0x00000050
    2898:	00000000 	.word	0x00000000
    289c:	000c8000 	.word	0x000c8000
    28a0:	000c8a00 	.word	0x000c8a00
    28a4:	50000100 	.word	0x50000100
	...
    28b0:	00000c8c 	.word	0x00000c8c
    28b4:	00000c90 	.word	0x00000c90
    28b8:	00510001 	.word	0x00510001
    28bc:	00000000 	.word	0x00000000
    28c0:	98000000 	.word	0x98000000
    28c4:	a400000c 	.word	0xa400000c
    28c8:	0100000c 	.word	0x0100000c
    28cc:	00005000 	.word	0x00005000
    28d0:	00000000 	.word	0x00000000
    28d4:	0cb00000 	.word	0x0cb00000
    28d8:	0cb40000 	.word	0x0cb40000
    28dc:	00010000 	.word	0x00010000
    28e0:	00000051 	.word	0x00000051
    28e4:	00000000 	.word	0x00000000
    28e8:	000cbc00 	.word	0x000cbc00
    28ec:	000cbe00 	.word	0x000cbe00
    28f0:	5d000100 	.word	0x5d000100
    28f4:	00000cbe 	.word	0x00000cbe
    28f8:	00000cc2 	.word	0x00000cc2
    28fc:	047d0002 	.word	0x047d0002
    2900:	00000cc2 	.word	0x00000cc2
    2904:	00000d88 	.word	0x00000d88
    2908:	107d0002 	.word	0x107d0002
	...
    2914:	00000cbc 	.word	0x00000cbc
    2918:	00000cc4 	.word	0x00000cc4
    291c:	c6500001 	.word	0xc6500001
    2920:	8800000c 	.word	0x8800000c
    2924:	0200000d 	.word	0x0200000d
    2928:	00047d00 	.word	0x00047d00
    292c:	00000000 	.word	0x00000000
    2930:	20000000 	.word	0x20000000
    2934:	32000000 	.word	0x32000000
    2938:	01000000 	.word	0x01000000
    293c:	00005100 	.word	0x00005100
    2940:	00000000 	.word	0x00000000
    2944:	00740000 	.word	0x00740000
    2948:	00820000 	.word	0x00820000
    294c:	00010000 	.word	0x00010000
    2950:	0000825d 	.word	0x0000825d
    2954:	0000b200 	.word	0x0000b200
    2958:	7d000200 	.word	0x7d000200
    295c:	00000008 	.word	0x00000008
    2960:	00000000 	.word	0x00000000
    2964:	00007400 	.word	0x00007400
    2968:	00008c00 	.word	0x00008c00
    296c:	50000100 	.word	0x50000100
	...
    2978:	00000074 	.word	0x00000074
    297c:	00000076 	.word	0x00000076
    2980:	76510001 	.word	0x76510001
    2984:	80000000 	.word	0x80000000
    2988:	01000000 	.word	0x01000000
    298c:	00005300 	.word	0x00005300
    2990:	00000000 	.word	0x00000000
    2994:	00900000 	.word	0x00900000
    2998:	00920000 	.word	0x00920000
    299c:	00010000 	.word	0x00010000
    29a0:	00009a50 	.word	0x00009a50
    29a4:	00009c00 	.word	0x00009c00
    29a8:	50000100 	.word	0x50000100
    29ac:	0000009e 	.word	0x0000009e
    29b0:	000000b2 	.word	0x000000b2
    29b4:	00500001 	.word	0x00500001
    29b8:	00000000 	.word	0x00000000
    29bc:	e4000000 	.word	0xe4000000
    29c0:	f6000000 	.word	0xf6000000
    29c4:	01000000 	.word	0x01000000
    29c8:	00005100 	.word	0x00005100
    29cc:	00000000 	.word	0x00000000
    29d0:	01180000 	.word	0x01180000
    29d4:	012a0000 	.word	0x012a0000
    29d8:	00010000 	.word	0x00010000
    29dc:	00000051 	.word	0x00000051
    29e0:	00000000 	.word	0x00000000
    29e4:	00014c00 	.word	0x00014c00
    29e8:	00014e00 	.word	0x00014e00
    29ec:	51000100 	.word	0x51000100
	...
    29f8:	00000154 	.word	0x00000154
    29fc:	00000156 	.word	0x00000156
    2a00:	00500001 	.word	0x00500001
    2a04:	00000000 	.word	0x00000000
    2a08:	e4000000 	.word	0xe4000000
    2a0c:	f6000001 	.word	0xf6000001
    2a10:	01000001 	.word	0x01000001
    2a14:	00005100 	.word	0x00005100
    2a18:	00000000 	.word	0x00000000
    2a1c:	02180000 	.word	0x02180000
    2a20:	02220000 	.word	0x02220000
    2a24:	00010000 	.word	0x00010000
    2a28:	00000050 	.word	0x00000050
    2a2c:	00000000 	.word	0x00000000
    2a30:	00022400 	.word	0x00022400
    2a34:	00022800 	.word	0x00022800
    2a38:	51000100 	.word	0x51000100
	...
    2a44:	00000230 	.word	0x00000230
    2a48:	0000026c 	.word	0x0000026c
    2a4c:	00500001 	.word	0x00500001
    2a50:	00000000 	.word	0x00000000
    2a54:	30000000 	.word	0x30000000
    2a58:	32000002 	.word	0x32000002
    2a5c:	01000002 	.word	0x01000002
    2a60:	02325100 	.word	0x02325100
    2a64:	023c0000 	.word	0x023c0000
    2a68:	00010000 	.word	0x00010000
    2a6c:	00023c53 	.word	0x00023c53
    2a70:	00027a00 	.word	0x00027a00
    2a74:	51000100 	.word	0x51000100
	...
    2a80:	00000240 	.word	0x00000240
    2a84:	0000025a 	.word	0x0000025a
    2a88:	5a520001 	.word	0x5a520001
    2a8c:	7a000002 	.word	0x7a000002
    2a90:	01000002 	.word	0x01000002
    2a94:	00005c00 	.word	0x00005c00
    2a98:	00000000 	.word	0x00000000
    2a9c:	02360000 	.word	0x02360000
    2aa0:	025a0000 	.word	0x025a0000
    2aa4:	00010000 	.word	0x00010000
    2aa8:	0000005c 	.word	0x0000005c
    2aac:	00000000 	.word	0x00000000
    2ab0:	00027c00 	.word	0x00027c00
    2ab4:	00027e00 	.word	0x00027e00
    2ab8:	51000100 	.word	0x51000100
	...
    2ac4:	0000028c 	.word	0x0000028c
    2ac8:	000002a0 	.word	0x000002a0
    2acc:	a05d0001 	.word	0xa05d0001
    2ad0:	cc000002 	.word	0xcc000002
    2ad4:	02000002 	.word	0x02000002
    2ad8:	cc107d00 	.word	0xcc107d00
    2adc:	28000002 	.word	0x28000002
    2ae0:	02000003 	.word	0x02000003
    2ae4:	00307d00 	.word	0x00307d00
    2ae8:	00000000 	.word	0x00000000
    2aec:	8c000000 	.word	0x8c000000
    2af0:	8e000002 	.word	0x8e000002
    2af4:	01000002 	.word	0x01000002
    2af8:	02d45000 	.word	0x02d45000
    2afc:	03280000 	.word	0x03280000
    2b00:	00020000 	.word	0x00020000
    2b04:	0000047d 	.word	0x0000047d
    2b08:	00000000 	.word	0x00000000
    2b0c:	028c0000 	.word	0x028c0000
    2b10:	02a60000 	.word	0x02a60000
    2b14:	00010000 	.word	0x00010000
    2b18:	0002a651 	.word	0x0002a651
    2b1c:	00032800 	.word	0x00032800
    2b20:	56000100 	.word	0x56000100
	...
    2b2c:	00000294 	.word	0x00000294
    2b30:	0000029a 	.word	0x0000029a
    2b34:	aa530001 	.word	0xaa530001
    2b38:	c2000002 	.word	0xc2000002
    2b3c:	01000002 	.word	0x01000002
    2b40:	02c65200 	.word	0x02c65200
    2b44:	02ce0000 	.word	0x02ce0000
    2b48:	00010000 	.word	0x00010000
    2b4c:	00000053 	.word	0x00000053
    2b50:	00000000 	.word	0x00000000
    2b54:	0002e600 	.word	0x0002e600
    2b58:	0002ee00 	.word	0x0002ee00
    2b5c:	53000100 	.word	0x53000100
	...
    2b68:	00000328 	.word	0x00000328
    2b6c:	0000032a 	.word	0x0000032a
    2b70:	2a5d0001 	.word	0x2a5d0001
    2b74:	2e000003 	.word	0x2e000003
    2b78:	02000003 	.word	0x02000003
    2b7c:	2e047d00 	.word	0x2e047d00
    2b80:	bc000003 	.word	0xbc000003
    2b84:	02000003 	.word	0x02000003
    2b88:	00107d00 	.word	0x00107d00
    2b8c:	00000000 	.word	0x00000000
    2b90:	28000000 	.word	0x28000000
    2b94:	30000003 	.word	0x30000003
    2b98:	01000003 	.word	0x01000003
    2b9c:	03325000 	.word	0x03325000
    2ba0:	03bc0000 	.word	0x03bc0000
    2ba4:	00020000 	.word	0x00020000
    2ba8:	0000047d 	.word	0x0000047d
	...
    2bb4:	000a0000 	.word	0x000a0000
    2bb8:	00010000 	.word	0x00010000
    2bbc:	00000a5d 	.word	0x00000a5d
    2bc0:	00005400 	.word	0x00005400
    2bc4:	7d000200 	.word	0x7d000200
    2bc8:	00000008 	.word	0x00000008
    2bcc:	00000000 	.word	0x00000000
    2bd0:	00002600 	.word	0x00002600
    2bd4:	00003800 	.word	0x00003800
    2bd8:	53000100 	.word	0x53000100
	...
    2be8:	00000004 	.word	0x00000004
    2bec:	045d0001 	.word	0x045d0001
    2bf0:	10000000 	.word	0x10000000
    2bf4:	02000000 	.word	0x02000000
    2bf8:	10047d00 	.word	0x10047d00
    2bfc:	28000000 	.word	0x28000000
    2c00:	02000000 	.word	0x02000000
    2c04:	00087d00 	.word	0x00087d00
	...
    2c10:	0c000000 	.word	0x0c000000
    2c14:	01000000 	.word	0x01000000
    2c18:	000c5000 	.word	0x000c5000
    2c1c:	001c0000 	.word	0x001c0000
    2c20:	00010000 	.word	0x00010000
    2c24:	00000051 	.word	0x00000051
	...
    2c30:	00000c00 	.word	0x00000c00
    2c34:	50000100 	.word	0x50000100
    2c38:	0000000c 	.word	0x0000000c
    2c3c:	00000030 	.word	0x00000030
    2c40:	00540001 	.word	0x00540001
	...
    2c4c:	04000000 	.word	0x04000000
    2c50:	01000000 	.word	0x01000000
    2c54:	00045d00 	.word	0x00045d00
    2c58:	00480000 	.word	0x00480000
    2c5c:	00020000 	.word	0x00020000
    2c60:	0000107d 	.word	0x0000107d
    2c64:	00000000 	.word	0x00000000
    2c68:	00480000 	.word	0x00480000
    2c6c:	004c0000 	.word	0x004c0000
    2c70:	00010000 	.word	0x00010000
    2c74:	00004c5d 	.word	0x00004c5d
    2c78:	0000c800 	.word	0x0000c800
    2c7c:	7d000200 	.word	0x7d000200
    2c80:	00000010 	.word	0x00000010
	...
    2c8c:	00000800 	.word	0x00000800
    2c90:	5d000100 	.word	0x5d000100
    2c94:	00000008 	.word	0x00000008
    2c98:	000000d0 	.word	0x000000d0
    2c9c:	087d0002 	.word	0x087d0002
	...
    2cac:	00000018 	.word	0x00000018
    2cb0:	18500001 	.word	0x18500001
    2cb4:	20000000 	.word	0x20000000
    2cb8:	01000000 	.word	0x01000000
    2cbc:	00205400 	.word	0x00205400
    2cc0:	00380000 	.word	0x00380000
    2cc4:	00010000 	.word	0x00010000
    2cc8:	00003850 	.word	0x00003850
    2ccc:	0000d000 	.word	0x0000d000
    2cd0:	54000100 	.word	0x54000100
	...
    2ce0:	0000002c 	.word	0x0000002c
    2ce4:	a4510001 	.word	0xa4510001
    2ce8:	b0000000 	.word	0xb0000000
    2cec:	01000000 	.word	0x01000000
    2cf0:	00c45100 	.word	0x00c45100
    2cf4:	00d00000 	.word	0x00d00000
    2cf8:	00010000 	.word	0x00010000
    2cfc:	00000051 	.word	0x00000051
	...
    2d08:	00003800 	.word	0x00003800
    2d0c:	52000100 	.word	0x52000100
    2d10:	00000038 	.word	0x00000038
    2d14:	00000060 	.word	0x00000060
    2d18:	605c0001 	.word	0x605c0001
    2d1c:	90000000 	.word	0x90000000
    2d20:	01000000 	.word	0x01000000
    2d24:	00a05200 	.word	0x00a05200
    2d28:	00d00000 	.word	0x00d00000
    2d2c:	00010000 	.word	0x00010000
    2d30:	00000052 	.word	0x00000052
    2d34:	00000000 	.word	0x00000000
    2d38:	00000c00 	.word	0x00000c00
    2d3c:	00003000 	.word	0x00003000
    2d40:	5c000100 	.word	0x5c000100
    2d44:	000000a4 	.word	0x000000a4
    2d48:	000000d0 	.word	0x000000d0
    2d4c:	005c0001 	.word	0x005c0001
    2d50:	00000000 	.word	0x00000000
    2d54:	28000000 	.word	0x28000000
    2d58:	2c000000 	.word	0x2c000000
    2d5c:	01000000 	.word	0x01000000
    2d60:	002c5300 	.word	0x002c5300
    2d64:	00b00000 	.word	0x00b00000
    2d68:	00010000 	.word	0x00010000
    2d6c:	0000c451 	.word	0x0000c451
    2d70:	0000d000 	.word	0x0000d000
    2d74:	51000100 	.word	0x51000100
	...
    2d80:	00000034 	.word	0x00000034
    2d84:	0000005c 	.word	0x0000005c
    2d88:	70530001 	.word	0x70530001
    2d8c:	74000000 	.word	0x74000000
    2d90:	01000000 	.word	0x01000000
    2d94:	00745000 	.word	0x00745000
    2d98:	00840000 	.word	0x00840000
    2d9c:	00010000 	.word	0x00010000
    2da0:	00008453 	.word	0x00008453
    2da4:	0000c800 	.word	0x0000c800
    2da8:	50000100 	.word	0x50000100
	...
    2db8:	00000008 	.word	0x00000008
    2dbc:	085d0001 	.word	0x085d0001
    2dc0:	9c000000 	.word	0x9c000000
    2dc4:	02000000 	.word	0x02000000
    2dc8:	00147d00 	.word	0x00147d00
	...
    2dd4:	20000000 	.word	0x20000000
    2dd8:	01000000 	.word	0x01000000
    2ddc:	00205000 	.word	0x00205000
    2de0:	009c0000 	.word	0x009c0000
    2de4:	00010000 	.word	0x00010000
    2de8:	00000055 	.word	0x00000055
	...
    2df4:	00003c00 	.word	0x00003c00
    2df8:	51000100 	.word	0x51000100
    2dfc:	0000003c 	.word	0x0000003c
    2e00:	0000009c 	.word	0x0000009c
    2e04:	00580001 	.word	0x00580001
	...
    2e10:	3c000000 	.word	0x3c000000
    2e14:	01000000 	.word	0x01000000
    2e18:	003c5200 	.word	0x003c5200
    2e1c:	009c0000 	.word	0x009c0000
    2e20:	00010000 	.word	0x00010000
    2e24:	00000056 	.word	0x00000056
	...
    2e30:	00003c00 	.word	0x00003c00
    2e34:	53000100 	.word	0x53000100
    2e38:	0000003c 	.word	0x0000003c
    2e3c:	0000009c 	.word	0x0000009c
    2e40:	00570001 	.word	0x00570001
	...
    2e4c:	04000000 	.word	0x04000000
    2e50:	01000000 	.word	0x01000000
    2e54:	00045d00 	.word	0x00045d00
    2e58:	00100000 	.word	0x00100000
    2e5c:	00020000 	.word	0x00020000
    2e60:	0010247d 	.word	0x0010247d
    2e64:	010c0000 	.word	0x010c0000
    2e68:	00020000 	.word	0x00020000
    2e6c:	0000307d 	.word	0x0000307d
	...
    2e78:	00240000 	.word	0x00240000
    2e7c:	00010000 	.word	0x00010000
    2e80:	00002450 	.word	0x00002450
    2e84:	0000c000 	.word	0x0000c000
    2e88:	7d000200 	.word	0x7d000200
    2e8c:	0000c004 	.word	0x0000c004
    2e90:	0000d400 	.word	0x0000d400
    2e94:	91000200 	.word	0x91000200
    2e98:	0000d470 	.word	0x0000d470
    2e9c:	0000e800 	.word	0x0000e800
    2ea0:	7d000200 	.word	0x7d000200
    2ea4:	0000e804 	.word	0x0000e804
    2ea8:	0000f400 	.word	0x0000f400
    2eac:	91000200 	.word	0x91000200
    2eb0:	0000f470 	.word	0x0000f470
    2eb4:	00010c00 	.word	0x00010c00
    2eb8:	7d000200 	.word	0x7d000200
    2ebc:	00000004 	.word	0x00000004
	...
    2ec8:	00002400 	.word	0x00002400
    2ecc:	51000100 	.word	0x51000100
    2ed0:	00000024 	.word	0x00000024
    2ed4:	0000010c 	.word	0x0000010c
    2ed8:	00570001 	.word	0x00570001
    2edc:	00000000 	.word	0x00000000
    2ee0:	44000000 	.word	0x44000000
    2ee4:	c0000000 	.word	0xc0000000
    2ee8:	01000000 	.word	0x01000000
    2eec:	00d45c00 	.word	0x00d45c00
    2ef0:	00dc0000 	.word	0x00dc0000
    2ef4:	00010000 	.word	0x00010000
    2ef8:	0000f85c 	.word	0x0000f85c
    2efc:	00010400 	.word	0x00010400
    2f00:	5c000100 	.word	0x5c000100
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	524f4305 	subpl	r4, pc, #335544320	; 0x14000000
  14:	2d584554 	cfldr64cs	mvdx4, [r8, #-336]
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1a011901 	bne	46438 <__Stack_Size+0x46038>
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 	undefined instruction 0xffffffff
	...
  20:	0000011e 	andeq	r0, r0, lr, lsl r1
  24:	00000120 	andeq	r0, r0, r0, lsr #2
  28:	00000126 	andeq	r0, r0, r6, lsr #2
  2c:	0000014a 	andeq	r0, r0, sl, asr #2
  30:	00000122 	andeq	r0, r0, r2, lsr #2
  34:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  40:	0000011e 	andeq	r0, r0, lr, lsl r1
  44:	00000120 	andeq	r0, r0, r0, lsr #2
  48:	00000130 	andeq	r0, r0, r0, lsr r1
  4c:	0000014a 	andeq	r0, r0, sl, asr #2
  50:	00000122 	andeq	r0, r0, r2, lsr #2
  54:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  60:	0000014a 	andeq	r0, r0, sl, asr #2
  64:	0000015e 	andeq	r0, r0, lr, asr r1
  68:	00000188 	andeq	r0, r0, r8, lsl #3
  6c:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  78:	0000014a 	andeq	r0, r0, sl, asr #2
  7c:	0000015e 	andeq	r0, r0, lr, asr r1
  80:	00000188 	andeq	r0, r0, r8, lsl #3
  84:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  90:	0000015e 	andeq	r0, r0, lr, asr r1
  94:	00000182 	andeq	r0, r0, r2, lsl #3
  98:	00000186 	andeq	r0, r0, r6, lsl #3
  9c:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  a8:	0000015e 	andeq	r0, r0, lr, asr r1
  ac:	00000160 	andeq	r0, r0, r0, ror #2
  b0:	00000186 	andeq	r0, r0, r6, lsl #3
  b4:	00000188 	andeq	r0, r0, r8, lsl #3
  b8:	0000016a 	andeq	r0, r0, sl, ror #2
  bc:	00000182 	andeq	r0, r0, r2, lsl #3
	...
  c8:	00000078 	andeq	r0, r0, r8, ror r0
  cc:	0000007a 	andeq	r0, r0, sl, ror r0
  d0:	0000007c 	andeq	r0, r0, ip, ror r0
  d4:	0000007e 	andeq	r0, r0, lr, ror r0
	...
  e0:	00000078 	andeq	r0, r0, r8, ror r0
  e4:	0000007a 	andeq	r0, r0, sl, ror r0
  e8:	0000007c 	andeq	r0, r0, ip, ror r0
  ec:	0000007e 	andeq	r0, r0, lr, ror r0
	...
  f8:	0000030e 	andeq	r0, r0, lr, lsl #6
  fc:	00000310 	andeq	r0, r0, r0, lsl r3
 100:	00000320 	andeq	r0, r0, r0, lsr #6
 104:	0000034a 	andeq	r0, r0, sl, asr #6
 108:	00000312 	andeq	r0, r0, r2, lsl r3
 10c:	0000031a 	andeq	r0, r0, sl, lsl r3
	...
 118:	0000030e 	andeq	r0, r0, lr, lsl #6
 11c:	00000310 	andeq	r0, r0, r0, lsl r3
 120:	00000320 	andeq	r0, r0, r0, lsr #6
 124:	0000034a 	andeq	r0, r0, sl, asr #6
 128:	00000312 	andeq	r0, r0, r2, lsl r3
 12c:	0000031a 	andeq	r0, r0, sl, lsl r3
	...
 138:	0000034a 	andeq	r0, r0, sl, asr #6
 13c:	0000034c 	andeq	r0, r0, ip, asr #6
 140:	0000034e 	andeq	r0, r0, lr, asr #6
 144:	00000360 	andeq	r0, r0, r0, ror #6
	...
 150:	00000364 	andeq	r0, r0, r4, ror #6
 154:	00000366 	andeq	r0, r0, r6, ror #6
 158:	00000376 	andeq	r0, r0, r6, ror r3
 15c:	000003a6 	andeq	r0, r0, r6, lsr #7
 160:	0000036a 	andeq	r0, r0, sl, ror #6
 164:	00000372 	andeq	r0, r0, r2, ror r3
	...
 170:	00000364 	andeq	r0, r0, r4, ror #6
 174:	00000366 	andeq	r0, r0, r6, ror #6
 178:	00000376 	andeq	r0, r0, r6, ror r3
 17c:	000003a6 	andeq	r0, r0, r6, lsr #7
 180:	0000036a 	andeq	r0, r0, sl, ror #6
 184:	00000372 	andeq	r0, r0, r2, ror r3
	...
 190:	000003a6 	andeq	r0, r0, r6, lsr #7
 194:	000003a8 	andeq	r0, r0, r8, lsr #7
 198:	000003aa 	andeq	r0, r0, sl, lsr #7
 19c:	000003c2 	andeq	r0, r0, r2, asr #7
	...
 1a8:	00000404 	andeq	r0, r0, r4, lsl #8
 1ac:	00000406 	andeq	r0, r0, r6, lsl #8
 1b0:	00000408 	andeq	r0, r0, r8, lsl #8
 1b4:	0000041a 	andeq	r0, r0, sl, lsl r4
	...
 1c0:	00000454 	andeq	r0, r0, r4, asr r4
 1c4:	00000456 	andeq	r0, r0, r6, asr r4
 1c8:	00000458 	andeq	r0, r0, r8, asr r4
 1cc:	0000046e 	andeq	r0, r0, lr, ror #8
	...
 1d8:	000004c6 	andeq	r0, r0, r6, asr #9
 1dc:	000004c8 	andeq	r0, r0, r8, asr #9
 1e0:	000004cc 	andeq	r0, r0, ip, asr #9
 1e4:	000004de 	ldrdeq	r0, [r0], -lr
	...
 1f0:	00000566 	andeq	r0, r0, r6, ror #10
 1f4:	00000568 	andeq	r0, r0, r8, ror #10
 1f8:	0000056c 	andeq	r0, r0, ip, ror #10
 1fc:	00000582 	andeq	r0, r0, r2, lsl #11
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	00000070 	andeq	r0, r0, r0, ror r0
 214:	0000010c 	andeq	r0, r0, ip, lsl #2
 218:	00000044 	andeq	r0, r0, r4, asr #32
 21c:	00000058 	andeq	r0, r0, r8, asr r0
	...
 228:	ffffffff 	undefined instruction 0xffffffff
	...
